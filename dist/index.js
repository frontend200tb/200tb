(()=>{var e={723:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function r(e){var t="function"==typeof Map?new Map:void 0;return r=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),o(a,e)},r(e)}function i(e,t,r){return i=a()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&o(a,r.prototype),a},i.apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var n=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&o(e,t)}(h,r);var i,n,s,c,d=(s=h,c=a(),function(){var t,r=l(s);if(c){var i=l(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function h(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),d.call(this)}return i=h,(n=[{key:"connectedCallback",value:function(){this.innerHTML='\n    <section class="main__aside">\n      <aside class="aside"></aside>\n      <main class="main" id="code"></main>\n    </section>\n    ',this.className="code-csharp"}}])&&t(i.prototype,n),Object.defineProperty(i,"prototype",{writable:!1}),h}(r(HTMLElement));customElements.define("code-csharp",n)},306:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function r(e){var t="function"==typeof Map?new Map:void 0;return r=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),o(a,e)},r(e)}function i(e,t,r){return i=a()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&o(a,r.prototype),a},i.apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var n=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&o(e,t)}(h,r);var i,n,s,c,d=(s=h,c=a(),function(){var t,r=l(s);if(c){var i=l(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function h(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),d.call(this)}return i=h,(n=[{key:"connectedCallback",value:function(){this.innerHTML='\n    <section class="main__aside">\n      <aside class="aside"></aside>\n      <main class="main" id="code"></main>\n    </section>\n    ',this.className="code-css"}}])&&t(i.prototype,n),Object.defineProperty(i,"prototype",{writable:!1}),h}(r(HTMLElement));customElements.define("code-css",n)},267:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function r(e){var t="function"==typeof Map?new Map:void 0;return r=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),o(a,e)},r(e)}function i(e,t,r){return i=a()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&o(a,r.prototype),a},i.apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var n=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&o(e,t)}(h,r);var i,n,s,c,d=(s=h,c=a(),function(){var t,r=l(s);if(c){var i=l(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function h(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),d.call(this)}return i=h,(n=[{key:"connectedCallback",value:function(){this.innerHTML='\n    <section class="main__aside">\n      <aside class="aside"></aside>\n      <main class="main" id="code"></main>\n    </section>\n    ',this.className="code-html"}}])&&t(i.prototype,n),Object.defineProperty(i,"prototype",{writable:!1}),h}(r(HTMLElement));customElements.define("code-html",n)},938:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function r(e){var t="function"==typeof Map?new Map:void 0;return r=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),o(a,e)},r(e)}function i(e,t,r){return i=a()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&o(a,r.prototype),a},i.apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var n=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&o(e,t)}(h,r);var i,n,s,c,d=(s=h,c=a(),function(){var t,r=l(s);if(c){var i=l(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function h(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),d.call(this)}return i=h,(n=[{key:"connectedCallback",value:function(){this.innerHTML='\n    <section class="main__aside">\n      <aside class="aside"></aside>\n      <main class="main" id="code"></main>\n    </section>\n    ',this.className="code-js"}}])&&t(i.prototype,n),Object.defineProperty(i,"prototype",{writable:!1}),h}(r(HTMLElement));customElements.define("code-js",n)},314:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function r(e){var t="function"==typeof Map?new Map:void 0;return r=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),o(a,e)},r(e)}function i(e,t,r){return i=a()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&o(a,r.prototype),a},i.apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var n=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&o(e,t)}(h,r);var i,n,s,c,d=(s=h,c=a(),function(){var t,r=l(s);if(c){var i=l(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function h(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),d.call(this)}return i=h,(n=[{key:"connectedCallback",value:function(){this.innerHTML="\n    <h1>Code</h1>\n    ",this.className="code-main"}}])&&t(i.prototype,n),Object.defineProperty(i,"prototype",{writable:!1}),h}(r(HTMLElement));customElements.define("code-main",n)},370:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function r(e){var t="function"==typeof Map?new Map:void 0;return r=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),o(a,e)},r(e)}function i(e,t,r){return i=a()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&o(a,r.prototype),a},i.apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var n=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&o(e,t)}(h,r);var i,n,s,c,d=(s=h,c=a(),function(){var t,r=l(s);if(c){var i=l(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function h(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),d.call(this)}return i=h,(n=[{key:"connectedCallback",value:function(){this.innerHTML='\n    <section class="main__aside">\n      <aside class="aside"></aside>\n      <main class="main" id="code"></main>\n    </section>\n    ',this.className="code-markdown"}}])&&t(i.prototype,n),Object.defineProperty(i,"prototype",{writable:!1}),h}(r(HTMLElement));customElements.define("code-markdown",n)},360:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function r(e){var t="function"==typeof Map?new Map:void 0;return r=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),o(a,e)},r(e)}function i(e,t,r){return i=a()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&o(a,r.prototype),a},i.apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var n=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&o(e,t)}(h,r);var i,n,s,c,d=(s=h,c=a(),function(){var t,r=l(s);if(c){var i=l(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function h(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),d.call(this)}return i=h,(n=[{key:"connectedCallback",value:function(){this.innerHTML='\n    <section class="main__aside">\n      <aside class="aside"></aside>\n      <main class="main" id="code"></main>\n    </section>\n    ',this.className="code-pascal"}}])&&t(i.prototype,n),Object.defineProperty(i,"prototype",{writable:!1}),h}(r(HTMLElement));customElements.define("code-pascal",n)},165:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function r(e){var t="function"==typeof Map?new Map:void 0;return r=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),o(a,e)},r(e)}function i(e,t,r){return i=a()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&o(a,r.prototype),a},i.apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var n=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&o(e,t)}(h,r);var i,n,s,c,d=(s=h,c=a(),function(){var t,r=l(s);if(c){var i=l(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function h(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),d.call(this)}return i=h,(n=[{key:"connectedCallback",value:function(){this.innerHTML='\n    <section class="main__aside">\n      <aside class="aside"></aside>\n      <main class="main" id="code"></main>\n    </section>\n    ',this.className="code-php"}}])&&t(i.prototype,n),Object.defineProperty(i,"prototype",{writable:!1}),h}(r(HTMLElement));customElements.define("code-php",n)},608:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function r(e){var t="function"==typeof Map?new Map:void 0;return r=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),o(a,e)},r(e)}function i(e,t,r){return i=a()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&o(a,r.prototype),a},i.apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var n=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&o(e,t)}(h,r);var i,n,s,c,d=(s=h,c=a(),function(){var t,r=l(s);if(c){var i=l(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function h(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),d.call(this)}return i=h,(n=[{key:"connectedCallback",value:function(){this.innerHTML='\n    <section class="main__aside">\n      <aside class="aside"></aside>\n      <main class="main" id="code"></main>\n    </section>\n    ',this.className="code-pug"}}])&&t(i.prototype,n),Object.defineProperty(i,"prototype",{writable:!1}),h}(r(HTMLElement));customElements.define("code-pug",n)},310:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function r(e){var t="function"==typeof Map?new Map:void 0;return r=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),o(a,e)},r(e)}function i(e,t,r){return i=a()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&o(a,r.prototype),a},i.apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var n=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&o(e,t)}(h,r);var i,n,s,c,d=(s=h,c=a(),function(){var t,r=l(s);if(c){var i=l(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function h(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),d.call(this)}return i=h,(n=[{key:"connectedCallback",value:function(){this.innerHTML='\n    <section class="main__aside">\n      <aside class="aside"></aside>\n      <main class="main" id="code"></main>\n    </section>\n    ',this.className="code-sass"}}])&&t(i.prototype,n),Object.defineProperty(i,"prototype",{writable:!1}),h}(r(HTMLElement));customElements.define("code-sass",n)},281:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function r(e){var t="function"==typeof Map?new Map:void 0;return r=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),o(a,e)},r(e)}function i(e,t,r){return i=a()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&o(a,r.prototype),a},i.apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var n=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&o(e,t)}(h,r);var i,n,s,c,d=(s=h,c=a(),function(){var t,r=l(s);if(c){var i=l(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function h(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),d.call(this)}return i=h,(n=[{key:"connectedCallback",value:function(){this.innerHTML='\n    <section class="main__aside">\n      <aside class="aside"></aside>\n      <main class="main" id="code"></main>\n    </section>\n    ',this.className="code-ts"}}])&&t(i.prototype,n),Object.defineProperty(i,"prototype",{writable:!1}),h}(r(HTMLElement));customElements.define("code-ts",n)},767:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function r(e){var t="function"==typeof Map?new Map:void 0;return r=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),o(a,e)},r(e)}function i(e,t,r){return i=a()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&o(a,r.prototype),a},i.apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var n=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&o(e,t)}(h,r);var i,n,s,c,d=(s=h,c=a(),function(){var t,r=l(s);if(c){var i=l(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function h(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),d.call(this)}return i=h,(n=[{key:"connectedCallback",value:function(){this.innerHTML='\n    <footer class="footer container">\n      <div class="footer__logo">200TERABYTE WEB STUDIO</div>\n    </footer>\n    '}}])&&t(i.prototype,n),Object.defineProperty(i,"prototype",{writable:!1}),h}(r(HTMLElement));customElements.define("footer-component",n)},715:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function r(e){var t="function"==typeof Map?new Map:void 0;return r=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),o(a,e)},r(e)}function i(e,t,r){return i=a()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&o(a,r.prototype),a},i.apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var n=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&o(e,t)}(h,r);var i,n,s,c,d=(s=h,c=a(),function(){var t,r=l(s);if(c){var i=l(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function h(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),d.call(this)}return i=h,(n=[{key:"connectedCallback",value:function(){this.innerHTML='\n    <section class="main__aside">\n      <aside class="aside"></aside>\n      <main class="main" id="base"></main>\n    </section>\n    ',this.className="front-base"}}])&&t(i.prototype,n),Object.defineProperty(i,"prototype",{writable:!1}),h}(r(HTMLElement));customElements.define("front-base",n)},188:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function r(e){var t="function"==typeof Map?new Map:void 0;return r=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),o(a,e)},r(e)}function i(e,t,r){return i=a()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&o(a,r.prototype),a},i.apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var n=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&o(e,t)}(h,r);var i,n,s,c,d=(s=h,c=a(),function(){var t,r=l(s);if(c){var i=l(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function h(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),d.call(this)}return i=h,(n=[{key:"connectedCallback",value:function(){this.innerHTML="\n    <h1>Моя библиотека frontend книг</h1>\n    ",this.className="front-books"}}])&&t(i.prototype,n),Object.defineProperty(i,"prototype",{writable:!1}),h}(r(HTMLElement));customElements.define("front-books",n)},154:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function r(e){var t="function"==typeof Map?new Map:void 0;return r=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),o(a,e)},r(e)}function i(e,t,r){return i=a()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&o(a,r.prototype),a},i.apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var n=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&o(e,t)}(h,r);var i,n,s,c,d=(s=h,c=a(),function(){var t,r=l(s);if(c){var i=l(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function h(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),d.call(this)}return i=h,(n=[{key:"connectedCallback",value:function(){this.innerHTML='\n    <section class="main__aside">\n      <aside class="aside"></aside>\n      <main class="list" id="framework"></main>\n    </section>\n    ',this.className="front-framework"}}])&&t(i.prototype,n),Object.defineProperty(i,"prototype",{writable:!1}),h}(r(HTMLElement));customElements.define("front-framework",n)},868:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function r(e){var t="function"==typeof Map?new Map:void 0;return r=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),o(a,e)},r(e)}function i(e,t,r){return i=a()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&o(a,r.prototype),a},i.apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var n=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&o(e,t)}(h,r);var i,n,s,c,d=(s=h,c=a(),function(){var t,r=l(s);if(c){var i=l(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function h(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),d.call(this)}return i=h,(n=[{key:"connectedCallback",value:function(){this.innerHTML='\n    <section class="main__aside">\n      <aside class="aside"></aside>\n      <main class="list" id="learned"></main>\n    </section>\n    ',this.className="front-learned"}}])&&t(i.prototype,n),Object.defineProperty(i,"prototype",{writable:!1}),h}(r(HTMLElement));customElements.define("front-learned",n)},89:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function r(e){var t="function"==typeof Map?new Map:void 0;return r=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),o(a,e)},r(e)}function i(e,t,r){return i=a()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&o(a,r.prototype),a},i.apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var n=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&o(e,t)}(h,r);var i,n,s,c,d=(s=h,c=a(),function(){var t,r=l(s);if(c){var i=l(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function h(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),d.call(this)}return i=h,(n=[{key:"connectedCallback",value:function(){this.innerHTML='\n    <div class="front-node" id="front-node">\n      <section class="main__aside">\n        <aside class="aside"></aside>\n        <main class="main" id="node"></main>\n      </section>\n    </div>\n    '}}])&&t(i.prototype,n),Object.defineProperty(i,"prototype",{writable:!1}),h}(r(HTMLElement));customElements.define("front-node",n)},902:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function r(e){var t="function"==typeof Map?new Map:void 0;return r=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),o(a,e)},r(e)}function i(e,t,r){return i=a()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&o(a,r.prototype),a},i.apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var n=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&o(e,t)}(h,r);var i,n,s,c,d=(s=h,c=a(),function(){var t,r=l(s);if(c){var i=l(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function h(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),d.call(this)}return i=h,(n=[{key:"connectedCallback",value:function(){this.innerHTML='\n    <div class="front-offline" id="front-offline">\n      <h1>Frontend справочник</h1>\n      <nav class="nav" id="main-nav"></nav>\n      <div id="offline"></div>\n    </div>\n    '}}])&&t(i.prototype,n),Object.defineProperty(i,"prototype",{writable:!1}),h}(r(HTMLElement));customElements.define("front-offline",n)},948:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function r(e){var t="function"==typeof Map?new Map:void 0;return r=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),o(a,e)},r(e)}function i(e,t,r){return i=a()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&o(a,r.prototype),a},i.apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var n=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&o(e,t)}(h,r);var i,n,s,c,d=(s=h,c=a(),function(){var t,r=l(s);if(c){var i=l(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function h(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),d.call(this)}return i=h,(n=[{key:"connectedCallback",value:function(){this.innerHTML='\n      <section class="main__aside">\n        <aside class="aside"></aside>\n        <main class="list" id="other"></main>\n      </section>\n    ',this.className="front-other"}}])&&t(i.prototype,n),Object.defineProperty(i,"prototype",{writable:!1}),h}(r(HTMLElement));customElements.define("front-other",n)},433:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function r(e){var t="function"==typeof Map?new Map:void 0;return r=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),o(a,e)},r(e)}function i(e,t,r){return i=a()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&o(a,r.prototype),a},i.apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var n=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&o(e,t)}(h,r);var i,n,s,c,d=(s=h,c=a(),function(){var t,r=l(s);if(c){var i=l(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function h(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),d.call(this)}return i=h,(n=[{key:"connectedCallback",value:function(){this.innerHTML='\n    <section class="main__aside">\n      <aside class="aside"></aside>\n      <main class="list" id="tools"></main>\n    </section>\n    ',this.className="front-tools"}}])&&t(i.prototype,n),Object.defineProperty(i,"prototype",{writable:!1}),h}(r(HTMLElement));customElements.define("front-tools",n)},342:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function r(e){var t="function"==typeof Map?new Map:void 0;return r=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),o(a,e)},r(e)}function i(e,t,r){return i=a()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&o(a,r.prototype),a},i.apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var n=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&o(e,t)}(h,r);var i,n,s,c,d=(s=h,c=a(),function(){var t,r=l(s);if(c){var i=l(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function h(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),d.call(this)}return i=h,(n=[{key:"connectedCallback",value:function(){this.innerHTML='\n    <div class="front-vacancy" id="front-vacancy">\n\n      <h1>Вакансии</h1>\n\n      <section class="main__aside">\n        <aside class="aside"></aside>\n        <main class="list" id="vacancy"></main>\n      </section>\n    </div>\n    '}}])&&t(i.prototype,n),Object.defineProperty(i,"prototype",{writable:!1}),h}(r(HTMLElement));customElements.define("front-vacancy",n)},317:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function r(e){var t="function"==typeof Map?new Map:void 0;return r=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),o(a,e)},r(e)}function i(e,t,r){return i=a()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&o(a,r.prototype),a},i.apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var n=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&o(e,t)}(h,r);var i,n,s,c,d=(s=h,c=a(),function(){var t,r=l(s);if(c){var i=l(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function h(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),d.call(this)}return i=h,(n=[{key:"connectedCallback",value:function(){this.innerHTML="\n    <h1>Моя библиотека frontend видео</h1>\n    ",this.className="front-video"}}])&&t(i.prototype,n),Object.defineProperty(i,"prototype",{writable:!1}),h}(r(HTMLElement));customElements.define("front-video",n)},213:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function r(e){var t="function"==typeof Map?new Map:void 0;return r=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),o(a,e)},r(e)}function i(e,t,r){return i=a()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&o(a,r.prototype),a},i.apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var n=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&o(e,t)}(h,r);var i,n,s,c,d=(s=h,c=a(),function(){var t,r=l(s);if(c){var i=l(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function h(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),d.call(this)}return i=h,(n=[{key:"connectedCallback",value:function(){this.innerHTML="\n      <h1>YouTube channels for Frontend developers</h1>\n    ",this.className="front-yt"}}])&&t(i.prototype,n),Object.defineProperty(i,"prototype",{writable:!1}),h}(r(HTMLElement));customElements.define("front-yt",n)},524:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function r(e){var t="function"==typeof Map?new Map:void 0;return r=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),o(a,e)},r(e)}function i(e,t,r){return i=a()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&o(a,r.prototype),a},i.apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var n=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&o(e,t)}(p,r);var i,n,s,d,h=(s=p,d=a(),function(){var t,r=l(s);if(d){var i=l(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function p(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,p),(e=h.call(this)).addEventListener("click",c),e}return i=p,(n=[{key:"connectedCallback",value:function(){this.innerHTML='\n    <div id="search-btn" class="search-btn"></div>\n    '}}])&&t(i.prototype,n),Object.defineProperty(i,"prototype",{writable:!1}),p}(r(HTMLElement));customElements.define("search-btn",n),document.querySelector("#search-btn");var s=document.querySelector("#search-google");function c(){s.classList.toggle("none")}},460:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function r(e){var t="function"==typeof Map?new Map:void 0;return r=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),o(a,e)},r(e)}function i(e,t,r){return i=a()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&o(a,r.prototype),a},i.apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var n=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&o(e,t)}(p,r);var i,n,s,c,h=(s=p,c=a(),function(){var t,r=l(s);if(c){var i=l(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function p(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,p),(e=h.call(this)).addEventListener("click",d),e}return i=p,(n=[{key:"connectedCallback",value:function(){this.innerHTML='\n    <div id="set-btn" class="set-btn"></div>\n    '}}])&&t(i.prototype,n),Object.defineProperty(i,"prototype",{writable:!1}),p}(r(HTMLElement));customElements.define("set-btn",n),document.querySelector("#set-btn");var s=document.querySelector("#set-section"),c=document.querySelector("#nav");function d(){s.classList.toggle("none"),s.classList.contains("none")?c.style.marginTop="10px":c.style.marginTop="80px"}},335:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function r(e){var t="function"==typeof Map?new Map:void 0;return r=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),o(a,e)},r(e)}function i(e,t,r){return i=a()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&o(a,r.prototype),a},i.apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var n=document.querySelector("#page"),s=document.querySelector(".header-stick"),c=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&o(e,t)}(h,r);var i,n,s,c,d=(s=h,c=a(),function(){var t,r=l(s);if(c){var i=l(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function h(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),d.call(this)}return i=h,(n=[{key:"connectedCallback",value:function(){this.innerHTML='\n    <div id="set-color" class="set-color">\n      <button id="select-red"></button>\n      <button id="select-sand"></button>\n      <button id="select-yellow"></button>\n      <button id="select-olive"></button>\n      <button id="select-green"></button>\n      <button id="select-dodgerblue"></button>\n      <button id="select-blue"></button>\n      <button id="select-brown"></button>\n      <button id="select-silver"></button>\n    </div>\n    '}}])&&t(i.prototype,n),Object.defineProperty(i,"prototype",{writable:!1}),h}(r(HTMLElement));customElements.define("set-color",c);var d=document.querySelector("#select-red"),h=document.querySelector("#select-sand"),p=document.querySelector("#select-yellow"),u=document.querySelector("#select-olive"),m=document.querySelector("#select-green"),g=document.querySelector("#select-dodgerblue"),f=document.querySelector("#select-blue"),b=document.querySelector("#select-brown"),y=document.querySelector("#select-silver"),v=function(e){n.classList.remove("page_red","page_sand","page_yellow","page_olive","page_green","page_dodgerblue","page_blue","page_brown","page_silver"),s.classList.remove("page_red","page_sand","page_yellow","page_olive","page_green","page_dodgerblue","page_blue","page_brown","page_silver"),n.classList.add(e),s.classList.add(e)};d.addEventListener("click",(function(){return v("page_red")})),h.addEventListener("click",(function(){return v("page_sand")})),p.addEventListener("click",(function(){return v("page_yellow")})),u.addEventListener("click",(function(){return v("page_olive")})),m.addEventListener("click",(function(){return v("page_green")})),g.addEventListener("click",(function(){return v("page_dodgerblue")})),f.addEventListener("click",(function(){return v("page_blue")})),b.addEventListener("click",(function(){return v("page_brown")})),y.addEventListener("click",(function(){return v("page_silver")}))},646:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function r(e){var t="function"==typeof Map?new Map:void 0;return r=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),o(a,e)},r(e)}function i(e,t,r){return i=a()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&o(a,r.prototype),a},i.apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var n=document.querySelector("#page"),s=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&o(e,t)}(p,r);var i,s,c,d,h=(c=p,d=a(),function(){var t,r=l(c);if(d){var i=l(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function p(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,p),(e=h.call(this)).addEventListener("click",(function(){n.classList.toggle("snow"),t=n.classList.contains("snow")?"snow":"net",localStorage.setItem("snow",t)}));var t=localStorage.getItem("snow")||"snow";return"snow"==t&&n.classList.add("snow"),e}return i=p,(s=[{key:"connectedCallback",value:function(){this.innerHTML='\n    <div id="snow_btn" class="snow_btn"></div>\n    '}}])&&t(i.prototype,s),Object.defineProperty(i,"prototype",{writable:!1}),p}(r(HTMLElement));customElements.define("snow-btn",s)},983:()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function r(e){var t="function"==typeof Map?new Map:void 0;return r=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,a)}function a(){return i(e,arguments,l(this).constructor)}return a.prototype=Object.create(e.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),o(a,e)},r(e)}function i(e,t,r){return i=a()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&o(a,r.prototype),a},i.apply(null,arguments)}function a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function o(e,t){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},o(e,t)}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}var n=document.querySelector("#page"),s=document.querySelector(".header-stick"),c=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&o(e,t)}(u,r);var i,c,d,h,p=(d=u,h=a(),function(){var t,r=l(d);if(h){var i=l(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function u(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(e=p.call(this)).addEventListener("click",(function(){n.classList.toggle("dark-theme"),s.classList.toggle("dark-theme"),t=n.classList.contains("dark-theme")?"dark":"light",localStorage.setItem("theme",t)}));var t=localStorage.getItem("theme")||"light";return"dark"==t&&(n.classList.add("dark-theme"),s.classList.add("dark-theme")),e}return i=u,(c=[{key:"connectedCallback",value:function(){this.innerHTML='\n    <div id="theme_btn" class="theme_btn"></div>\n    '}}])&&t(i.prototype,c),Object.defineProperty(i,"prototype",{writable:!1}),u}(r(HTMLElement));customElements.define("theme-btn",c)},62:e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),t.hash&&(e+=t.hash),t.maybeNeedQuotes&&/[\t\n\f\r "'=<>`]/.test(e)?'"'.concat(e,'"'):e):e}},477:(e,t,r)=>{"use strict";e.exports=r.p+"assets/certificate2022rss.png"},302:(e,t,r)=>{"use strict";e.exports=r.p+"assets/certificate2023rss.png"},289:(e,t,r)=>{"use strict";e.exports=r.p+"assets/certificate2024dsr.png"}},t={};function r(i){var a=t[i];if(void 0!==a)return a.exports;var o=t[i]={exports:{}};return e[i](o,o.exports,r),o.exports}r.m=e,r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var i in t)r.o(t,i)&&!r.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var t=r.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var i=t.getElementsByTagName("script");if(i.length)for(var a=i.length-1;a>-1&&!e;)e=i[a--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),r.b=document.baseURI||self.location.href,(()=>{"use strict";function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,r){for(var i=0;i<r.length;i++){var a=r[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,(void 0,o=function(t,r){if("object"!==e(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var a=i.call(t,"string");if("object"!==e(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a.key),"symbol"===e(o)?o:String(o)),a)}var o}function i(e){var t="function"==typeof Map?new Map:void 0;return i=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,i)}function i(){return a(e,arguments,n(this).constructor)}return i.prototype=Object.create(e.prototype,{constructor:{value:i,enumerable:!1,writable:!0,configurable:!0}}),l(i,e)},i(e)}function a(e,t,r){return a=o()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&l(a,r.prototype),a},a.apply(null,arguments)}function o(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function l(e,t){return l=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},l(e,t)}function n(e){return n=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},n(e)}var s=function(r){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&l(e,t)}(h,r);var i,a,s,c,d=(s=h,c=o(),function(){var t,r=n(s);if(c){var i=n(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return function(t,r){if(r&&("object"===e(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(t)}(this,t)});function h(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h),d.call(this)}return i=h,(a=[{key:"connectedCallback",value:function(){this.innerHTML='<div class="header__first-row container"> <div class="header__logo">frontend200tb</div> <div id="header__nav" class="header__nav"></div> </div> <div class="header__second-row container"> <social-icons></social-icons> <settings-component></settings-component> </div> <search-form></search-form> '}}])&&t(i.prototype,a),Object.defineProperty(i,"prototype",{writable:!1}),h}(i(HTMLElement));function c(e){return c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},c(e)}function d(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,(void 0,a=function(e,t){if("object"!==c(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var i=r.call(e,"string");if("object"!==c(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(i.key),"symbol"===c(a)?a:String(a)),i)}var a}function h(e){var t="function"==typeof Map?new Map:void 0;return h=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,i)}function i(){return p(e,arguments,g(this).constructor)}return i.prototype=Object.create(e.prototype,{constructor:{value:i,enumerable:!1,writable:!0,configurable:!0}}),m(i,e)},h(e)}function p(e,t,r){return p=u()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&m(a,r.prototype),a},p.apply(null,arguments)}function u(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function m(e,t){return m=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},m(e,t)}function g(e){return g=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},g(e)}customElements.define("header-component",s),r(314);var f=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&m(e,t)}(l,e);var t,r,i,a,o=(i=l,a=u(),function(){var e,t=g(i);if(a){var r=g(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===c(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function l(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),o.call(this)}return t=l,(r=[{key:"connectedCallback",value:function(){this.innerHTML='<section class="main__aside"> <aside class="aside"></aside> <main class="list"> <article class="showhide"> <h2 class="showhide__h" id="hide1">Карта развития</h2> <div class="showhide__text none" id="hide1_item"> <ol> <li><strong><a href="https://w3schoolsrus.github.io/index.html">w3schoolsrus.github.io</a></strong><br><em>W3Schools на русском</em><br>ЛУЧШИЙ САЙТ ДЛЯ ВЕБ-РАЗРАБОТЧИКОВ</li> <li><strong><a href="https://github.com/fullstack-development/developers-roadmap">github.com/fullstack-development/developers-roadmap</a></strong><br><em>MetaLamp</em><br>Карта развития веб-разработчика</li> <li><strong><a href="https://gcoder.ru/gajd-dlya-razvitiya-frontend-razrabotchika-v-2021/">gcoder.ru/gajd-dlya-razvitiya-frontend-razrabotchika-v-2021</a></strong><br>ГАЙД ДЛЯ РАЗВИТИЯ ФРОНТЕНД-РАЗРАБОТЧИКА В 2021</li> <li><strong><a href="https://github.com/zualex/devmap">github.com/zualex/devmap</a></strong><br><em>Александр Зубарев Senior Software Engineer</em><br>Карта развития веб-разработчика</li> <li><strong><a href="https://abatickaya.medium.com/100daysofcode-7584c0ddfc1a">abatickaya.medium.com/100daysofcode</a></strong><br>Краткий план по изучению фронтенда, или #100ДнейКода</li> <li><strong><a href="https://techrocks.ru/2020/02/24/front-end-learning-plan/">techrocks.ru</a></strong><br>Что вы сможете запрограммировать через год, занимаясь по два часа в день: фронтенд</li> </ol> <hr><a href="#header">К началу страницы</a> <hr> </div> </article> <article class="showhide"> <h2 class="showhide__h" id="hide2">Шпаргалки</h2> <div class="showhide__text none" id="hide2_item"> <ol> <li><strong><a href="https://cheatography.com/">cheatography.com</a></strong><br>Шпаргалки html css js и другие</li> </ol> <hr><a href="#header">К началу страницы</a> <hr> </div> </article> <article class="showhide"> <h2 class="showhide__h" id="hide3">CSS</h2> <div class="showhide__text none" id="hide3_item"> <h3>Документация</h3> <ol> <li><a href="https://html.spec.whatwg.org/multipage/">html.spec.whatwg.org</a><br>HTML Living standart<br><a href="https://tproger.ru/translations/how-css-flexbox-works/">how-css-flexbox-works</a><br>Как работает CSS Flexbox</li> </ol> <h3>Normalize</h3> <ol> <li><a href="https://necolas.github.io/normalize.css/">necolas.github.io</a><br>Normalize.css</li> </ol> <hr><a href="#header">К началу страницы</a> <hr> </div> </article> <article class="showhide"> <h2 class="showhide__h" id="hide4">JavaScript</h2> <div class="showhide__text none" id="hide4_item"> <h3>Документация</h3> <ol> <li><strong><a href="https://html.spec.whatwg.org/multipage/">html.spec.whatwg.org</a></strong><br>HTML Living standart</li> </ol> <hr><a href="#header">К началу страницы</a> <hr> </div> </article> <article class="showhide"> <h2 class="showhide__h" id="hide5">Методология БЭМ (2009)</h2> <div class="showhide__text none" id="hide5_item"> <ol> <li><a href="https://ru.bem.info/">ru.bem.info</a><br>Методология БЭМ</li> </ol> <hr><a href="#header">К началу страницы</a> <hr> </div> </article> <article class="showhide"> <h2 class="showhide__h" id="hide6">CSS preprocessor</h2> <div class="showhide__text none" id="hide6_item"> <p>CSS-препроцессор – это программа, позволяющая генерировать CSS-код, используя уникальный синтаксис, присущий только конкретному препроцессору</p> <ol> <li> <h3>Sass (SCSS) (2006)</h3> <ul> <li><a href="https://sass-lang.com/">sass-lang.com</a><br>Sass-scss (eng)</li> <li><a href="https://sass-scss.ru/">sass-scss.ru</a><br>Sass-SCSS</li> <li><a href="https://sass-guidelin.es/ru/">sass-guidelin.es</a><br>Руководство по написанию разумного, поддерживаемого и масштабируемого Sass</li> </ul> </li> <li> <h3>Less (2009)</h3> <ul> <li><a href="https://lesscss.org/">lesscss.org</a><br>LESS</li> <li><a href="http://koala-app.com/">koala-app.com</a><br>Koala for Less Sass</li> <li><a href="https://www.winless.org/">winless.org</a><br>WinLess</li> <li><a href="https://mrmlnc.gitbooks.io/less-guidebook-for-beginners/content/">gitbooks.io</a><br>Less путеводитель</li> </ul> </li> <li> <h3>Stylus (2010)</h3> <ul> <li><a href="https://stylus-lang.com/">stylus-lang.com</a><br>Stylus</li> </ul> </li> <li> <h3>PostCSS (2013)</h3> <ul> <li><a href="https://postcss.org/">postcss.org</a><br>PostCSS</li> </ul> </li> </ol> <hr><a href="#header">К началу страницы</a> <hr> </div> </article> <article class="showhide"> <h2 class="showhide__h" id="hide7">HTML preprocessor</h2> <div class="showhide__text none" id="hide7_item"> <p>Препроцессор — это программа, которая принимает одну форму ввода данных и преобразует ее в другую форму входных данных, обычно в HTML и CSS. Препроцессор сделан с целью включения новых функций в существующие без нарушения совместимости браузера.</p> <ol> <li> <h3>Slim</h3> <ul> <li><strong><a href="http://slim-lang.com/">slim-lang.com</a></strong><br>Slim - это язык шаблонов, целью которого является сокращение синтаксиса html до основных частей, не становясь загадочным.</li> </ul> </li> <li> <h3>HAML</h3> <ul> <li><strong><a href="https://haml.info/">haml.info</a></strong><br>Haml (HTML Abstraction Markup Language) - это легкий язык разметки, который используется для описания XHTML любого веб-документа без использования традиционного встроенного кодирования. Haml означает язык разметки абстракции HTML, созданный Хэмптоном Кэтлином, и единственная цель его создания — сделать разметку красивой. По сути, это препроцессор на основе Ruby, и для его установки требуется Ruby.</li> </ul> </li> <li> <h3>Pug</h3> <ul> <li><strong><a href="https://pugjs.org/api/getting-started.html">pugjs.org</a></strong><br>Препроцессор pug доводит обычный html до уровня языка программирования со всеми вытекающими конструкциями (ветвлениями, функциями, переменными, циклами)</li> <li><a href="https://html-to-pug.com/">HTML TO PUG - Online Converter</a></li> <li><a href="https://html2jade.org/">HTML to JADE/PUGrealtime online converter</a></li> <li><a href="https://devhints.io/pug">devhints.io/pug</a></li> <li><a href="https://frontips.ru/pug-shablonizator-i-preprocessor-html/">frontips.ru</a></li> <li><a href="https://zaurmag.ru/html5-css3/html-preprotsessor-pug-jade.html">zaurmag.ru</a></li> <li><a href="https://nodejsdev.ru/guide/express-pug/">nodejsdev.ru</a></li> <li><a href="https://tokmakov.msk.ru/blog/item/627">tokmakov.msk.ru</a></li> </ul> </li> </ol> <hr><a href="#header">К началу страницы</a> <hr> </div> </article> <article class="showhide"> <h2 class="showhide__h" id="hide8">Node.js</h2> <div class="showhide__text none" id="hide8_item"> <ol> <li><a href="https://nodejs.org/en/">nodejs.org</a><br>Node.js</li> <li><a href="https://www.npmjs.com/">npmjs.com</a><br>npm – это менеджер пакетов, который входит в состав Node.js</li> <li><a href="https://www.npmjs.com/package/verdaccio">npmjs.com/package/verdaccio</a><br>verdaccio - это npm пакет, который ставится на Node.js > 4 и предоставляет веб интерфейс на определенный порт</li> <li><a href="https://verdaccio.org/ru-RU/docs/what-is-verdaccio">verdaccio.org</a><br>verdaccio</li> <li><a href="https://habr.com/ru/post/453614/">habr.com/ru/post/453614</a><br>Локальный (offline) npm репозиторий</li> <li><a href="https://habr.com/ru/post/427069/">habr.com/ru/post/427069</a><br>Локальный NPM репозиторий за 5 минут</li> <li><a href="https://russianblogs.com/article/11851698160/">russianblogs.com/article/11851698160</a><br>Используйте хостинг Verdaccio</li> </ol> <hr><a href="#header">К началу страницы</a> <hr> </div> </article> <article class="showhide"> <h2 class="showhide__h" id="hide9">Менеджеры пакетов</h2> <div class="showhide__text none" id="hide9_item"> <p>Инструменты, которые позволяют превратить код разработки в производственный код, называются инструментами сборки. Все эти инструменты запускаются в командной строке, поэтому они не имеют графического пользовательского интерфейса.</p> <ol> <li> <h3>NPM (Менеджер пакетов)</h3> <ul> <li><a href="https://github.com/npmcli">npm</a><br>Аббревиатура npm означает Node Package Maid, который является менеджером пакетов по умолчанию для Node.js. При установке Node.js в свою систему, npm также устанавливается автоматически, и вы можете получить к нему доступ из интерфейса командной строки. С помощью npm вы можете установить любой пакет Node.js с помощью одной команды.<br>Вы найдете все существующие пакеты Node.js в реестре npm, к которому вы можете получить доступ через панель поиска в верхней части домашней страницы npm. Вам нужно только ввести имя пакета, который вы ищете (например, postcss ) в строке поиска, и вы будете перенаправлены на страницу пакета, которая включает в себя все, что вам нужно знать о пакете, процессе его установки.</li> </ul> </li> <li> <h3>Yarn (Менеджер пакетов)</h3> <ul> <li><a href="https://classic.yarnpkg.com/en/">classic.yarnpkg.com</a><br>Yarn - это интерфейсный менеджер пакетов, который можно использовать как альтернативу npm. Поскольку Yarn сам по себе является пакетом Node.js, вам необходимо установить Node.js, прежде чем вы сможете использовать Yarn. Затем вам нужно только следовать руководству по установке, чтобы использовать его для управления зависимостями вашего внешнего интерфейса.<br>Хотя npm - отличный инструмент, создание пакетов с его помощью иногда занимает значительное время. Это не всегда проблема, если вы не используете менеджер пакетов на регулярной основе. Однако, если вы активный пользователь, стоит использовать Yarn, которая отличается сверхбыстрой сборкой.<br>Yarn ускоряет процесс сборки, кэшируя каждый пакет, так что вам не нужно загружать свои зависимости несколько раз. Он также выполняет параллельные операции, чтобы еще больше сократить время сборки.</li> </ul> </li> </ol> <hr><a href="#header">К началу страницы</a> <hr> </div> </article> <article class="showhide"> <h2 class="showhide__h" id="hide10">Инструменты сборки</h2> <div class="showhide__text none" id="hide10_item"> <p>Инструменты, которые позволяют превратить код разработки в производственный код, называются инструментами сборки. Все эти инструменты запускаются в командной строке, поэтому они не имеют графического пользовательского интерфейса.</p> <ol> <li> <h3>Grunt (Исполнитель задач)</h3> <ul> <li><a href="https://gruntjs.com/">gruntjs.com</a><br>Grunt - это средство выполнения задач, которое позволяет автоматизировать повторяющиеся задачи, такие как минификация, линтинг, тестирование и другие. Средство выполнения задач отличается от менеджеров пакетов, поскольку вы не можете использовать их для управления зависимостями. Они нужны вам только в том случае, если вы хотите выполнять одни и те же задачи во время каждого процесса сборки.<br>Поскольку Grunt - это пакет Node.js, вы можете установить его с помощью npm, Yarn или другого менеджера пакетов Node.js. Grunt хранит пользовательские зависимости, необходимые для выполнения ваших предопределенных задач, в файле package.json . Вы можете определить свои задачи в Gruntfile, который запускается во время каждого процесса сборки и автоматически выполняет каждую задачу, которую он включает.</li> </ul> </li> <li> <h3>Gulp (2015) (Исполнитель задач)</h3> <ul> <li><a href="https://gulpjs.com/">gulpjs.com</a><br>Gulp - еще один автоматизированный инструмент для выполнения задач, а также самый сильный конкурент Grunt. Подобно Grunt, вы можете использовать Gulp для автоматизации повторяющихся интерфейсных задач, таких как предварительная обработка CSS, автоматическое добавление префиксов, оптимизация изображений и многие другие. Это также пакет Node.js, который вы можете установить с помощью менеджеров пакетов npm и Yarn. Вы можете определить свои задачи в Gulpfile и настроить зависимости, связанные с вашими задачами, в файле package.json .<br>Самым большим отличием от Grunt является то, что Gulp использует более эффективную технику автоматизации, которая позволяет сократить время сборки. В то время как Grunt использует временные файлы для обработки задач, Gulp выполняет операции в памяти без записи во временные файлы. Эти операции в памяти называются потоками узлов, которые могут сэкономить вам много времени, особенно если вы хотите обрабатывать несколько задач при каждой сборке.</li> </ul> </li> <li> <h3>Prepros (Сборщик модулей) (2013)</h3> <ul> <li><a href="https://prepros.io/">prepros.io</a><br>Prepros can compile Sass, Less, Stylus, Pug/Jade, Haml, Slim, CoffeeScript and TypeScript out of the box</li> <li><a href="https://habr.com/ru/post/188942/">habr.com/ru/post/188942</a><br>Prepros: open-source компилятор файлов для front-end разработки</li> </ul> </li> <li> <h3>Browserify (Сборщик модулей)</h3> <ul> <li><a href="https://browserify.org/">browserify.org</a><br>Browserify - это загрузчик модулей Node.js, который позволяет объединять клиентские зависимости и загружать их как один файл JavaScript в браузер пользователя. Менеджеры пакетов, такие как npm и Yarn, загружают модули на стороне сервера с помощью функции Node.js require (), предназначенной для загрузки модулей. Browserify предоставляет метод require () на стороне клиента, что может привести к огромному увеличению производительности.<br>При использовании Browserify браузер вашего пользователя должен загрузить только один статический файл JavaScript, содержащий все зависимости, от которых зависит ваш проект. Вы можете добавить свой связанный JavaScript в качестве тега script на свою страницу, и все готово. Однако обратите внимание, что, поскольку Browserify является модулем Node.js и реализацией CommonJS API (аналогично npm), вы можете использовать его только для загрузки модулей Node.js, но не для других типов файлов JavaScript (или других).</li> </ul> </li> <li> <h3>WebPack (2012) (Сборщик модулей)</h3> <ul> <li><a href="https://webpack.js.org/">webpack.js.org</a><br>Webpack - это расширенный сборщик модулей, который позволяет вам объединить все ваши зависимости и загрузить их как статические ресурсы в браузер пользователя. В то время как Browserify объединяет только модули Node.js, Webpack может обрабатывать любые файлы интерфейса, такие как файлы .html , .css, .js, .scss , изображения и другие ресурсы.<br>Помимо модулей CommonJS, используемых в экосистеме Node.js, Webpack также может объединять собственные модули ECMAScript и AMD (другие спецификации модулей JavaScript). Webpack анализирует ваш проект и строит граф зависимостей. Затем на основе графика зависимостей он объединяет ваши файлы и модули в один или несколько статических файлов, которые вы можете добавить на свою HTML-страницу.<br>Поскольку сам Webpack также является модулем Node.js, можете установить его с помощью диспетчера пакетов npm или Yarn.<br>По умолчанию конфигурация проектов Webpack занимает много времени из-за множества опций, которые позволяют точно настроить ваш проект. Однако, начиная с Webpack 4, он включает в себя опцию нулевой конфигурации, которая автоматизирует процесс сборки и требует только определения файла ввода.</li> </ul> </li> <li> <h3>Parcel (Сборщик модулей)</h3> <ul> <li><a href="https://ru.parceljs.org/">ru.parceljs.org</a><br>Parcel – это очень быстрый многофункциональный сборщик модулей, который «из коробки» поддерживает ресурсы HTML, CSS, JavaScript, Image и TypeScript без необходимости в отдельных плагинах. Главное, что Parcel не требует конфигурации, достаточно просто направить его на начальный файл – и Parcel самостоятельно объединит, преобразует и минимизирует все ресурсы.</li> </ul> </li> </ol> <hr><a href="#header">К началу страницы</a> <hr> </div> </article> <article class="showhide"> <h2 class="showhide__h" id="hide11">.js</h2> <div class="showhide__text none" id="hide11_item"> <ol> <li><a href="https://www.mongodb.com/">mongodb.com</a><br>mongoDB</li> <li><a href="https://mongoosejs.com/">mongoosejs.com</a><br>mongoose</li> <li><a href="https://expressjs.com/ru/">expressjs.com</a><br>Express.js</li> <li><a href="https://ru.nuxtjs.org/">nuxtjs.org</a><br>nuxt.js</li> <li><a href="https://nextjs.org/">nextjs.org</a><br>next.js</li> </ol> <hr><a href="#header">К началу страницы</a> <hr> </div> </article> <article class="showhide"> <h2 class="showhide__h" id="hide12">jQuery</h2> <div class="showhide__text none" id="hide12_item"> <ol> <li><a href="https://jquery.com/">jquery.com</a><br>jquery</li> <li><a href="https://fancyapps.com/fancybox/3/">fancyapps.com</a><br>FancyBox</li> <li><a href="https://kenwheeler.github.io/slick/">kenwheeler.github.io</a><br>Slick</li> <li><a href="https://dimox.name/jquery-form-styler/">dimox.name</a><br>formstyler</li> <li><a href="https://formspree.io/">formspree.io</a><br>Отправка сообщения из формы на почту</li> </ol> <hr><a href="#header">К началу страницы</a> <hr> </div> </article> <article class="showhide"> <h2 class="showhide__h" id="hide13">CSS фреймворки</h2> <div class="showhide__text none" id="hide13_item"> <ol> <li> <h3>Bootstrap</h3> <h3>Bootstrap 1 (2011)</h3> <h3>Bootstrap 2 (2012)</h3> <h3>Bootstrap 3 (2013)</h3> <ul> <li><a href="http://bootstrap-3.ru/">bootstrap-3.ru</a><br>Bootstrap</li> </ul> <h3>Bootstrap 4 (2018)</h3> <ul> <li><a href="http://bootstrap-doc.ru/v4/">bootstrap-doc.ru/v4/</a><br>Bootstrap</li> <li><a href="https://getbootstrap.ru/">getbootstrap.ru</a><br>Bootstrap</li> </ul> <h3>Bootstrap 5 (2021)</h3> <ul> <li><a href="https://getbootstrap.com/">getbootstrap.com</a><br>Bootstrap</li> <li><a href="https://bootstrap-4.ru/">bootstrap-4.ru</a><br>Bootstrap</li> <li><a href="https://bootstrap5.ru/">bootstrap5.ru</a><br>Bootstrap</li> </ul> <h3>Темы для Bootstrap</h3> <ul> <li><a href="https://bootswatch.com/">bootswatch.com</a><br>Bootstrap</li> </ul> </li> <li> <h3>Foundation</h3><a href="https://get.foundation/">get.foundation</a><br>Foundation </li> <li> <h3>Pure</h3> <ul> <li><a href="https://purecss.io/">purecss.io</a><br>Pure css (eng)</li> <li><a href="https://pure-css.ru/">pure-css.ru</a><br>Pure css (rus)</li> </ul> </li> <li> <h3>Bulma</h3><a href="https://bulma.io/">bulma.io</a><br>Bulma </li> <li> <h3>Semantic UI</h3><a href="https://semantic-ui.com/">semantic-ui.com</a><br>Semantic UI </li> <li> <h3>UIkit</h3><a href="https://getuikit.com/">getuikit.com</a><br>UIkit </li> <li> <h3>Materialize CSS</h3><a href="https://materializecss.com/">materializecss.com</a><br>Materialize CSS </li> <li> <h3>Milligram</h3><a href="https://milligram.io/">milligram.io</a><br>Milligram </li> <li> <h3>Skeleton</h3><a href="http://getskeleton.com/">getskeleton.com</a><br>Skeleton </li> <li> <h3>Tailwind</h3><a href="https://tailwindcss.com/">tailwindcss.com</a><br>Tailwind </li> <li> <h3>Spectre</h3><a href="https://picturepan2.github.io/spectre/">picturepan2.github.io</a><br>Spectre </li> <li> <h3>Base</h3><a href="https://getbase.org/">getbase.org</a><br>Base </li> <li> <h3>Picnic CSS</h3><a href="https://picnicss.com/">picnicss.com</a><br>Picnic CSS </li> </ol> <hr><a href="#header">К началу страницы</a> <hr> </div> </article> <article class="showhide"> <h2 class="showhide__h" id="hide14">CMS</h2> <div class="showhide__text none" id="hide14_item"> <ol> <li><a href="https://drupal.ru/">drupal.ru</a><br>Drupal</li> <li><a href="https://joomla.ru/">joomla.ru</a><br>Jumla</li> <li><a href="https://modx.com/">modx.com</a><br>MODX</li> <li><a href="https://www.opencart.com/">opencart.com</a><br>Opencart</li> <li><a href="https://ru.wordpress.org/">ru.wordpress.org</a><br>WordPress</li> </ol> <hr><a href="#header">К началу страницы</a> <hr> </div> </article> <article class="showhide"> <h2 class="showhide__h" id="hide15">Server</h2> <div class="showhide__text none" id="hide15_item"> <ol> <li><a href="https://ospanel.io/">ospanel.io</a><br>Open Server Panel</li> </ol> <hr><a href="#header">К началу страницы</a> <hr> </div> </article> </main> </section>',this.className="front-main"}}])&&d(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),l}(h(HTMLElement));function b(e){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},b(e)}function y(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,(void 0,a=function(e,t){if("object"!==b(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var i=r.call(e,"string");if("object"!==b(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(i.key),"symbol"===b(a)?a:String(a)),i)}var a}function v(e){var t="function"==typeof Map?new Map:void 0;return v=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,i)}function i(){return w(e,arguments,S(this).constructor)}return i.prototype=Object.create(e.prototype,{constructor:{value:i,enumerable:!1,writable:!0,configurable:!0}}),L(i,e)},v(e)}function w(e,t,r){return w=k()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&L(a,r.prototype),a},w.apply(null,arguments)}function k(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function L(e,t){return L=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},L(e,t)}function S(e){return S=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},S(e)}customElements.define("front-main",f);var x=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&L(e,t)}(l,e);var t,r,i,a,o=(i=l,a=k(),function(){var e,t=S(i);if(a){var r=S(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===b(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function l(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),o.call(this)}return t=l,(r=[{key:"connectedCallback",value:function(){this.innerHTML='<a href="https://roadmap.sh/frontend">https://roadmap.sh/frontend</a> <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="120 164 1226 3459" style="font-family:balsamiq"><path d="M1188.5 3295Q1094.143416251571 3169.250495843995 1044.5 3058" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M444 3163Q277.07434609617934 3169.4128985869024 280 3333" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="undefined"></path><path d="M580 2198Q528.1802027644663 2197.519424167905 478.5 2198" fill="none" stroke="rgb(153,0,255)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M311 1811Q365.63853238797924 1796.562794941911 425 1749" fill="none" stroke="rgb(153,0,255)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M307 1714Q351.44116257836663 1730.8752343096287 418 1751" fill="none" stroke="rgb(153,0,255)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><g class="clickable-group" data-group-id="106-static-site-generators:gridsome"><rect x="1184.35" y="3229.35" width="144.3" height="38.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><circle cx="1326" cy="3243" r="10" fill="rgb(255,255,255)"></circle><circle cx="1326" cy="3243" r="10" fill="rgb(56,118,29)"></circle><path d="M1320.5 3243L1324.5 3247 1331 3240.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path><text x="1224" y="3256" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Gridsome</tspan></text></g><path d="M952 2056Q983.702594382281 2037.2635670418383 1056 2014" fill="none" stroke="rgb(153,0,255)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M940 2068Q981.965057112777 2059.8905633306704 1067 2064" fill="none" stroke="rgb(153,0,255)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M941 2075Q985.0545802499973 2087.2493471144885 1069 2108" fill="none" stroke="rgb(153,0,255)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M736 2067Q615.5608701378735 2076.923635218121 617 2189.5" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="undefined"></path><path d="M588 1981Q622.228060879643 2046.4925608827398 727 2053" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="undefined"></path><path d="M501 1974Q433.8344589982371 1999.0669891928453 367 2022" fill="none" stroke="rgb(153,0,255)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M1073 1949Q1102.5217391304348 1947.4597353497165 1170 1949" fill="none" stroke="rgb(153,0,255)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M500 1972Q425.96744805540754 1972.9797381940882 353 1972" fill="none" stroke="rgb(153,0,255)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M494 1969Q426.546923945176 1947.675573233002 358 1937" fill="none" stroke="rgb(153,0,255)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M495 1964Q429.55840535232903 1919.2036128736297 350 1900" fill="none" stroke="rgb(153,0,255)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M757 1881Q748.9822206755498 1980.3738482588044 653 1967" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="undefined"></path><path d="M1182 1896Q1126.4577359559723 1884.610110936801 1065 1871" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M1182 1847Q1123.7902864948435 1856.9583911430425 1059 1867" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M1056 1775Q1094.2791136094675 1774.3441368047338 1172 1790" fill="none" stroke="rgb(153,0,255)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M1160 1748Q1118.7806527655357 1754.3522450143823 1053 1770" fill="none" stroke="rgb(153,0,255)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M965 1946Q895.1353649397579 1947.1225195706952 854 1889" fill="none" stroke="rgb(153,0,255)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M980 1865Q918.3221011725425 1863.1086495833213 864 1868" fill="none" stroke="rgb(153,0,255)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M935 1768Q862.2067845617356 1786.1998483777093 850 1863" fill="none" stroke="rgb(153,0,255)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M728 1629Q643.7730016718161 1769.3012418347403 745 1872" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="undefined"></path><path d="M626 1632Q649.8284396407994 1732.0207037943671 576 1747" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M302 1761Q353.76095012312004 1761.393875140336 418 1753" fill="none" stroke="rgb(153,0,255)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M316 1672Q356.1525111412794 1704.1506142408311 418 1747" fill="none" stroke="rgb(153,0,255)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M1151 1666Q1114.886201795555 1645.314979459122 1081 1631" fill="none" stroke="rgb(153,0,255)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M1184 1621Q1127.9821087678772 1622.62461743103 1079 1630" fill="none" stroke="rgb(153,0,255)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M1163 1570Q1113.1321574578153 1587.7145520803442 1078.5 1629" fill="none" stroke="rgb(153,0,255)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M780 1631Q838.5555024619737 1628.4420107916483 912 1632" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M482 1572.5Q537.6187625862227 1579.6329560440236 611 1626.5" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M297 1569.5Q343.1583837664649 1568.0376290494837 401 1571.5" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M808 1500Q820.559985314801 1562.1482520305765 772 1609" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="undefined"></path><path d="M350 1448Q326.1235154394299 1446.9791526791205 301 1448" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M660 1411Q728.8021843105585 1457.9393508635017 824 1451" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="undefined"></path><path d="M1174 1450Q1133.556158805565 1448.270809640143 1091 1450" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M608 1283Q609.8000845009811 1351.1434296135021 660 1411" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="undefined"></path><path d="M877 1112Q882.5720769293152 1157.2944171279762 897 1209" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M723 1115Q618.9225427645022 1147.95289352474 607 1253" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="undefined"></path><path d="M361 1327Q436.9289725230576 1299.0983619111908 535 1273" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><g class="clickable-group" data-group-id="101-package-managers:yarn"><rect x="236.35" y="1298.35" width="148.3" height="46.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="293" y="1326.5" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>yarn</tspan></text><circle cx="238" cy="1300" r="10" fill="rgb(255,255,255)"></circle><circle cx="238" cy="1300" r="10" fill="rgb(153,0,255)"></circle><path d="M232.5 1300L236.5 1304 243 1297.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><path d="M522 1266Q442.933253911775 1262.007513474011 352 1258" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M748 931Q878.099025258291 975.7617195996144 850 1091" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="undefined"></path><path d="M1114 1010Q1115.5833550283028 972.9670851713607 1114 934" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M928 919Q887.556158805565 917.2708096401429 845 919" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M623 997Q624.0335789768088 961.4080771379083 622 924" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M891 708Q826.2818741642843 708.5324050057814 772 706" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M890 655Q826.7950004293762 661.965002801573 783 653" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M882 607Q818.9317036879584 619.0963332979063 783 651" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M656 490Q726.7976932647248 561.5437289929647 671 628" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="undefined"></path><path d="M887 510Q813.5183252198284 502.58040060806206 737 482" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M891 465Q817.9564383725154 469.4482193851959 739 477" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M886 416Q812.8596936990292 429.44215721266556 737 475" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M579 483Q517.5073103859468 498.5249284935326 447 517" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M576 477Q515.9946378406559 473.4551866284064 447 470" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M578 474Q518.4058183969829 438.0881330943512 437 423" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M678 327Q610.54078620889 391.0346331146539 650 465" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="undefined"></path><path d="M1136 754L1236 754" fill="none" stroke="rgb(153,0,255)" stroke-width="2.7" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8, 8"></path><path d="M655 765Q619.0669674234068 870.8113938628686 716 898" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="undefined"></path><path d="M557 776Q509.7040091757555 892.6878169041153 428 988" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M551 769Q500.59632215328304 842.1702022087313 442 925" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M552 762Q496.0585789927203 815.9807207746939 434 881" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M556 751Q496.77980067462113 789.3183955992818 429 832" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M551 753Q496.57373409906864 769.6909644455874 429 786" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M889 811Q839.877799154823 761.0595009055467 784 713" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M889 760Q841.3583524695366 734.7557461012302 781 707" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M542 637Q497.14795518055274 600.6928112992584 432 579" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M541 661Q493.7543949491058 699.9427901809037 430 718" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M545 651Q496.2632938367099 664.3284370852183 434 673" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M550 647Q494.6742049346887 637.8941542109302 431 628" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M738 186Q743.7634727157226 227.21267460725986 721 265" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><g class="clickable-group" data-group-id="101-html"><rect x="544.35" y="620.35" width="247.3" height="52.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="644" y="654" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>HTML</tspan></text></g><g class="clickable-group" data-group-id="ext_link:roadmap.sh/frontend"><text x="624" y="305" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="32px"><tspan>Front-end</tspan></text></g><g class="clickable-group" data-group-id="100-html:learn-the-basics"><rect x="161.35" y="560.35" width="293.3" height="37.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="242" y="585.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Learn the basics</tspan></text><circle cx="162" cy="562" r="10" fill="rgb(255,255,255)"></circle><circle cx="162" cy="562" r="10" fill="rgb(153,0,255)"></circle><path d="M156.5 562L160.5 566 167 559.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="101-html:writing-semantic-html"><rect x="161.35" y="607.35" width="293.3" height="37.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="215" y="633" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Writing Semantic HTML</tspan></text><circle cx="162" cy="611" r="10" fill="rgb(255,255,255)"></circle><circle cx="162" cy="611" r="10" fill="rgb(153,153,153)"></circle><path d="M156.5 611L160.5 615 167 608.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="102-html:forms-and-validations"><rect x="161.35" y="653.35" width="293.3" height="37.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="223" y="679" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Forms and Validations</tspan></text><circle cx="162" cy="657" r="10" fill="rgb(255,255,255)"></circle><circle cx="162" cy="657" r="10" fill="rgb(153,0,255)"></circle><path d="M156.5 657L160.5 661 167 654.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="103-html:conventions-and-best-practices"><rect x="161.35" y="700.35" width="293.3" height="37.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="185" y="726" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Conventions and Best Practices</tspan></text><circle cx="162" cy="700" r="10" fill="rgb(255,255,255)"></circle><circle cx="162" cy="700" r="10" fill="rgb(153,0,255)"></circle><path d="M156.5 700L160.5 704 167 697.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="102-css"><rect x="544.35" y="682.35" width="247.3" height="47.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="651" y="714" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>CSS</tspan></text></g><g class="clickable-group" data-group-id="101-css:making-layouts"><rect x="1184.35" y="661.35" width="113.3" height="182.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1218" y="691.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Floats</tspan></text><text x="1199" y="719" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Positioning</tspan></text><text x="1213" y="745.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Display</tspan></text><text x="1202" y="772.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Box Model</tspan></text><text x="1205" y="800" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>CSS Grid</tspan></text><text x="1209" y="826.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Flex Box</tspan></text><circle cx="1292" cy="662" r="10" fill="rgb(255,255,255)"></circle><circle cx="1292" cy="662" r="10" fill="rgb(153,0,255)"></circle><path d="M1286.5 662L1290.5 666 1297 659.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="100-css:learn-the-basics"><rect x="876.35" y="684.35" width="277.3" height="40.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="945" y="710.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Learn the basics</tspan></text><circle cx="1150" cy="689" r="10" fill="rgb(255,255,255)"></circle><circle cx="1150" cy="689" r="10" fill="rgb(153,0,255)"></circle><path d="M1144.5 689L1148.5 693 1155 686.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="101-css:making-layouts"><rect x="875.35" y="733.35" width="278.3" height="44.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="950" y="761.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Making Layouts</tspan></text><circle cx="1150" cy="738" r="10" fill="rgb(255,255,255)"></circle><circle cx="1150" cy="738" r="10" fill="rgb(153,0,255)"></circle><path d="M1144.5 738L1148.5 742 1155 735.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><rect x="934.35" y="170.35" width="347.3" height="138.3" rx="2" fill="rgb(255,255,255)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="947" y="204.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Find the detailed version of this roadmap</tspan></text><text x="947" y="232.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>along with resources and other roadmaps</tspan></text><g class="clickable-group" data-group-id="102-css:responsive-design-and-media-queries"><rect x="875.35" y="786.35" width="277.3" height="40.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="892" y="811.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="14px"><tspan>Responsive design and Media Queries</tspan></text><circle cx="1148" cy="793" r="10" fill="rgb(255,255,255)"></circle><circle cx="1148" cy="793" r="10" fill="rgb(153,0,255)"></circle><path d="M1142.5 793L1146.5 797 1153 790.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="103-javascript"><rect x="544.35" y="739.35" width="247.3" height="47.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="625" y="770" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>JavaScript</tspan></text></g><g class="clickable-group" data-group-id="100-javascript:syntax-and-basic-constructs"><rect x="161.35" y="762.35" width="293.3" height="37.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="195" y="787.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Syntax and Basic Constructs</tspan></text><circle cx="162" cy="763" r="10" fill="rgb(255,255,255)"></circle><circle cx="162" cy="763" r="10" fill="rgb(153,0,255)"></circle><path d="M156.5 763L160.5 767 167 760.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="101-javascript:learn-dom-manipulation"><rect x="161.35" y="808.35" width="294.3" height="37.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="211" y="833.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Learn DOM Manipulation</tspan></text><circle cx="162" cy="812" r="10" fill="rgb(255,255,255)"></circle><circle cx="162" cy="812" r="10" fill="rgb(153,0,255)"></circle><path d="M156.5 812L160.5 816 167 809.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="104-javascript:concepts"><rect x="161.35" y="952.35" width="293.3" height="110.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="185" y="1014.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Hoisting, Event Bubbling, Scope,</tspan></text><text x="187" y="1044" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Prototype, Shadow DOM, strict</tspan></text><text x="208" y="984.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Understand the concepts</tspan></text><circle cx="161" cy="957" r="10" fill="rgb(255,255,255)"></circle><circle cx="161" cy="957" r="10" fill="rgb(153,0,255)"></circle><path d="M155.5 957L159.5 961 166 954.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="102-javascript:learn-fetch-api-ajax-xhr"><rect x="161.35" y="855.35" width="293.3" height="37.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="192" y="881" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Learn Fetch API / Ajax (XHR)</tspan></text><circle cx="162" cy="859" r="10" fill="rgb(255,255,255)"></circle><circle cx="162" cy="859" r="10" fill="rgb(153,0,255)"></circle><path d="M156.5 859L160.5 863 167 856.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="103-javascript:es6-and-modular-javascript"><rect x="161.35" y="903.35" width="293.3" height="37.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="192" y="929" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>ES6+ and modular JavaScript</tspan></text><circle cx="161" cy="905" r="10" fill="rgb(255,255,255)"></circle><circle cx="161" cy="905" r="10" fill="rgb(153,0,255)"></circle><path d="M155.5 905L159.5 909 166 902.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="ext_link:roadmap.sh"><rect x="949.35" y="251.35" width="317.3" height="42.3" rx="2" fill="rgb(65,53,214)" fill-opacity="1" stroke="rgb(65,53,214)" stroke-width="2.7"></rect><text x="1087" y="279.5" fill="rgb(255,255,255)" font-style="normal" font-weight="normal" font-size="20px"><tspan>roadmap.sh</tspan></text><text x="1024" y="279.5" fill="rgb(255,255,255)" font-style="normal" font-weight="normal" font-size="20px"><tspan>http</tspan></text><text x="1061" y="277.5" fill="rgb(255,255,255)" font-style="normal" font-weight="bold" font-size="20px"><tspan>:</tspan></text><text x="1068" y="280.5" fill="rgb(255,255,255)" font-style="normal" font-weight="normal" font-size="20px"><tspan>/</tspan></text><text x="1076" y="280.5" fill="rgb(255,255,255)" font-style="normal" font-weight="normal" font-size="20px"><tspan>/</tspan></text></g><g class="clickable-group" data-group-id="100-internet"><rect x="574.35" y="450.35" width="175.3" height="47.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="628" y="481" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>Internet</tspan></text><circle cx="574" cy="449" r="10" fill="rgb(255,255,255)"></circle><circle cx="574" cy="449" r="10" fill="rgb(153,0,255)"></circle><path d="M568.5 449L572.5 453 579 446.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="100-internet:how-does-the-internet-work"><rect x="161.35" y="401.35" width="296.3" height="41.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="198" y="428.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>How does the internet work?</tspan></text><circle cx="163" cy="401" r="10" fill="rgb(255,255,255)"></circle><circle cx="163" cy="401" r="10" fill="rgb(153,0,255)"></circle><path d="M157.5 401L161.5 405 168 398.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="101-internet:what-is-http"><rect x="161.35" y="451.35" width="296.3" height="37.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="250" y="477" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>What is HTTP?</tspan></text><circle cx="162" cy="453" r="10" fill="rgb(255,255,255)"></circle><circle cx="162" cy="453" r="10" fill="rgb(153,0,255)"></circle><path d="M156.5 453L160.5 457 167 450.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="102-internet:browsers-and-how-they-work"><rect x="161.35" y="497.35" width="296.3" height="37.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="194" y="522.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Browsers and how they work?</tspan></text><circle cx="162" cy="498" r="10" fill="rgb(255,255,255)"></circle><circle cx="162" cy="498" r="10" fill="rgb(153,0,255)"></circle><path d="M156.5 498L160.5 502 167 495.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="103-internet:dns-and-how-it-works"><rect x="876.35" y="398.35" width="277.3" height="37.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="926" y="424" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>DNS and how it works?</tspan></text><circle cx="1150" cy="398" r="10" fill="rgb(255,255,255)"></circle><circle cx="1150" cy="398" r="10" fill="rgb(153,0,255)"></circle><path d="M1144.5 398L1148.5 402 1155 395.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="104-internet:what-is-domain-name"><rect x="875.35" y="444.35" width="277.3" height="37.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="925" y="470" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>What is Domain Name?</tspan></text><circle cx="1149" cy="448" r="10" fill="rgb(255,255,255)"></circle><circle cx="1149" cy="448" r="10" fill="rgb(153,0,255)"></circle><path d="M1143.5 448L1147.5 452 1154 445.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="105-internet:what-is-hosting"><rect x="876.35" y="490.35" width="277.3" height="37.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="949" y="516" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>What is hosting?</tspan></text><circle cx="1149" cy="493" r="10" fill="rgb(255,255,255)"></circle><circle cx="1149" cy="493" r="10" fill="rgb(153,0,255)"></circle><path d="M1143.5 493L1147.5 497 1154 490.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="104-html:accessibility"><rect x="876.35" y="590.35" width="277.3" height="37.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="964" y="616" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Accessibility</tspan></text><circle cx="1149" cy="591" r="10" fill="rgb(255,255,255)"></circle><circle cx="1149" cy="591" r="10" fill="rgb(153,153,153)"></circle><path d="M1143.5 591L1147.5 595 1154 588.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="105-html:seo-basics"><rect x="876.35" y="637.35" width="277.3" height="37.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="968" y="662.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>SEO Basics</tspan></text><circle cx="1150" cy="640" r="10" fill="rgb(255,255,255)"></circle><circle cx="1150" cy="640" r="10" fill="rgb(153,153,153)"></circle><path d="M1144.5 640L1148.5 644 1155 637.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="100-version-control-systems:basic-usage-of-git"><rect x="523.35" y="981.35" width="213.3" height="51.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="553" y="1014" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>Basic Usage of Git</tspan></text><circle cx="523" cy="982" r="10" fill="rgb(255,255,255)"></circle><circle cx="523" cy="982" r="10" fill="rgb(153,0,255)"></circle><path d="M517.5 982L521.5 986 528 979.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="100-repo-hosting-services:github"><rect x="1005.35" y="984.35" width="227.3" height="46.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1091" y="1015" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>GitHub</tspan></text><circle cx="1004" cy="984" r="10" fill="rgb(255,255,255)"></circle><circle cx="1004" cy="984" r="10" fill="rgb(153,0,255)"></circle><path d="M998.5 984L1002.5 988 1009 981.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="105-repo-hosting-services"><rect x="886.35" y="883.35" width="349.3" height="75.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="962" y="916" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>Repo hosting services</tspan></text><text x="917" y="940" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="15px"><tspan>Create account and Learn to use GitHub</tspan></text></g><path d="M318 1626Q355.9118594437844 1680.80595939997 414 1737" fill="none" stroke="rgb(153,0,255)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><g class="clickable-group" data-group-id="104-version-control-systems"><rect x="523.35" y="883.35" width="333.3" height="74.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="587" y="916" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>Version Control Systems</tspan></text><text x="541" y="939" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="15px"><tspan>What are they and why you should use one</tspan></text></g><g class="clickable-group" data-group-id="107-package-managers"><rect x="509.35" y="1245.35" width="208.3" height="50.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="537" y="1277" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>Package Managers</tspan></text></g><g class="clickable-group" data-group-id="100-package-managers:npm"><rect x="236.35" y="1239.35" width="148.3" height="46.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="292" y="1267.5" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>npm</tspan></text><circle cx="238" cy="1239" r="10" fill="rgb(255,255,255)"></circle><circle cx="238" cy="1239" r="10" fill="rgb(153,0,255)"></circle><path d="M232.5 1239L236.5 1243 243 1236.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="100-package-managers"><rect x="161.35" y="1109.35" width="294.3" height="104.3" rx="2" fill="rgb(255,255,255)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="176" y="1140.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>npm and yarn both are fine, pick</tspan></text><text x="176" y="1193.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>much difference.</tspan></text><text x="176" y="1167.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>one or learn both, there is not</tspan></text></g><g class="clickable-group" data-group-id="102-repo-hosting-services:bitbucket"><rect x="1005.35" y="1096.35" width="227.3" height="46.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1079" y="1126" fill="rgb(51,51,51)" font-style="normal" font-weight="bold" font-size="17px"><tspan>Bitbucket</tspan></text><circle cx="1006" cy="1100" r="10" fill="rgb(255,255,255)"></circle><circle cx="1006" cy="1100" r="10" fill="rgb(255,255,255)"></circle><circle cx="1006" cy="1100" r="10" fill="rgb(56,118,29)"></circle><path d="M1000.5 1100L1004.5 1104 1011 1097.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="101-repo-hosting-services:gitlab"><rect x="1005.35" y="1040.35" width="227.3" height="46.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1089" y="1070" fill="rgb(51,51,51)" font-style="normal" font-weight="bold" font-size="17px"><tspan>GitLab</tspan></text><circle cx="1006" cy="1043" r="10" fill="rgb(255,255,255)"></circle><circle cx="1006" cy="1043" r="10" fill="rgb(255,255,255)"></circle><circle cx="1006" cy="1043" r="10" fill="rgb(56,118,29)"></circle><path d="M1000.5 1043L1004.5 1047 1011 1040.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="106-web-security-knowledge"><rect x="574.35" y="1074.35" width="369.3" height="51.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="658" y="1107" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>Web Security Knowledge</tspan></text><circle cx="574" cy="1075" r="10" fill="rgb(255,255,255)"></circle><circle cx="574" cy="1075" r="10" fill="rgb(153,153,153)"></circle><path d="M568.5 1075L572.5 1079 579 1072.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g><rect x="152.35" y="184.35" width="405.3" height="159.3" rx="2" fill="rgb(255,255,255)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><circle cx="184" cy="214" r="10" fill="rgb(255,255,255)"></circle><circle cx="184" cy="214" r="10" fill="rgb(153,0,255)"></circle><path d="M178.5 214L182.5 218 189 211.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path><text x="210" y="222.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="16px"><tspan>Personal Recommendation / Opinion</tspan></text><text x="210" y="319" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="16px"><tspan>I wouldn\'t recommend</tspan></text><circle cx="184" cy="311" r="10" fill="rgb(153,153,153)"></circle><text x="211" y="287" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="16px"><tspan>Order in roadmap not strict (Learn anytime)</tspan></text><circle cx="184" cy="279" r="10" fill="rgb(255,255,255)"></circle><circle cx="184" cy="279" r="10" fill="rgb(153,153,153)"></circle><path d="M178.5 279L182.5 283 189 276.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path><text x="210" y="255.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="16px"><tspan>Alternative Option - Pick this or purple</tspan></text><circle cx="184" cy="246" r="10" fill="rgb(255,255,255)"></circle><circle cx="184" cy="246" r="10" fill="rgb(255,255,255)"></circle><circle cx="184" cy="246" r="10" fill="rgb(56,118,29)"></circle><path d="M178.5 246L182.5 250 189 243.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><rect x="838.35" y="1169.35" width="453.3" height="158.3" rx="2" fill="rgb(255,255,255)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><g class="clickable-group" data-group-id="102-web-security-knowledge:cors"><rect x="853.35" y="1268.35" width="160.3" height="45.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="908" y="1298" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>CORS</tspan></text></g><g class="clickable-group" data-group-id="100-web-security-knowledge:https"><rect x="852.35" y="1213.35" width="163.3" height="46.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="905" y="1243" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>HTTPS</tspan></text></g><g class="clickable-group" data-group-id="101-web-security-knowledge:content-security-policy"><rect x="1023.35" y="1213.35" width="254.3" height="46.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1053" y="1243" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>Content Security Policy</tspan></text></g><g class="clickable-group" data-group-id="103-web-security-knowledge:owasp-security-risks"><rect x="1023.35" y="1267.35" width="254.3" height="46.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1065" y="1297" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>OWASP Security Risks</tspan></text></g><text x="853" y="1200" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Get at least a basic knowledge of all of these</tspan></text><circle cx="838" cy="1169" r="10" fill="rgb(255,255,255)"></circle><circle cx="838" cy="1169" r="10" fill="rgb(153,153,153)"></circle><path d="M832.5 1169L836.5 1173 843 1166.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path><path d="M803 3042Q683.4740361132242 3049.7868698577317 603 3042" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="undefined"></path><path d="M779 2909Q703.3626649097033 2980.966764270495 782 3032" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="undefined"></path><path d="M993 2880Q946.7845367205886 2888.9506669884677 897 2896" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M980 2932Q942.5033704309469 2922.820109959787 903 2911" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M286 2958Q353.14189920730166 2990.1779075644954 443 3029" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M1192 3203Q1108.9946403427757 3129.112764765553 1059 3059" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M1192 3159Q1110.0330040962476 3100.111789691805 1049 3049" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M1197 3120Q1111.4950264197792 3084.5228693848508 1053 3043" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M824 2906Q864.2490543667604 2807.687080034664 839 2678" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="undefined"></path><g class="clickable-group" data-group-id="109-css-preprocessors"><rect x="724.35" y="1382.35" width="389.3" height="138.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="836" y="1417" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>CSS Preprocessors</tspan></text><text x="741" y="1447" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="15px"><tspan>With how the modern frameworks there has been</tspan></text><text x="741" y="1474" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="15px"><tspan>more push towards CSS-in-JS so you may not need</tspan></text><text x="741" y="1500" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="15px"><tspan>these but still a good idea to familiarize yourself.</tspan></text></g><path d="M1198 3072Q1110.979552675193 3048.5569437644726 1049 3040" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M1194 3022Q1117.6057912548965 3028.840625122219 1054 3037" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M1191 2973Q1115.8041742592782 3008.132919888741 1048 3032" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><g class="clickable-group" data-group-id="108-css-architecture"><rect x="313.35" y="1379.35" width="389.3" height="138.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="434" y="1415" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>CSS Architecture</tspan></text><text x="331" y="1446" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="15px"><tspan>With modern frameworks and CSS-in-JS you don\'t</tspan></text><text x="331" y="1472" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="15px"><tspan>have to worry about these anymore but still it would</tspan></text><text x="331" y="1498" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="15px"><tspan>be a good idea to get familiarized with BEM atleast.</tspan></text></g><g class="clickable-group" data-group-id="100-css-architecture:bem"><rect x="152.35" y="1378.35" width="143.3" height="37.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="207" y="1403.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>BEM</tspan></text><circle cx="151" cy="1379" r="10" fill="rgb(255,255,255)"></circle><circle cx="151" cy="1379" r="10" fill="rgb(153,153,153)"></circle><path d="M145.5 1379L149.5 1383 156 1376.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="102-css-architecture:smacss"><rect x="152.35" y="1475.35" width="142.3" height="41.3" rx="2" fill="rgb(153,153,153)" fill-opacity="0.5" stroke="rgb(255,255,255)" stroke-width="2.7"></rect><text x="187" y="1503" fill="rgb(51,51,51)" font-style="normal" font-weight="bold" font-size="17px"><tspan>SMACSS</tspan></text><rect x="152.35" y="1475.35" width="142.3" height="41.3" rx="2" fill="rgb(238,238,238)" fill-opacity="0.25" stroke="rgb(102,102,102)" stroke-width="2.7"></rect></g><g class="clickable-group" data-group-id="101-css-architecture:oocss"><rect x="153.35" y="1424.35" width="142.3" height="41.3" rx="2" fill="rgb(153,153,153)" fill-opacity="0.5" stroke="rgb(255,255,255)" stroke-width="2.7"></rect><text x="194" y="1452" fill="rgb(51,51,51)" font-style="normal" font-weight="bold" font-size="17px"><tspan>OOCSS</tspan></text><rect x="153.35" y="1424.35" width="142.3" height="41.3" rx="2" fill="rgb(238,238,238)" fill-opacity="0.25" stroke="rgb(102,102,102)" stroke-width="2.7"></rect></g><path d="M564 3059Q564.7767127496277 3112.896538291034 565 3162" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="undefined"></path><path d="M280 3096Q357.7491247218557 3078.709643526571 459 3052" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M1081 2816Q1003.2866137750169 2794.7432264309086 996 2689" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M1077 2766Q1024.4937344768891 2749.280852557361 1007 2686" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M1094 2676Q1047.0986244484816 2677.227007177678 997 2676" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><g class="clickable-group" data-group-id="110-build-tools"><rect x="597.35" y="1604.35" width="211.3" height="47.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="658" y="1635" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>Build Tools</tspan></text></g><path d="M697 2562Q831.6282890572284 2574.3197021185565 829 2670" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="undefined"></path><path d="M554 2562Q554.7581479819978 2602.5491483999085 554 2647" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M534 2552Q450.0394103719545 2553.5698122921367 358 2552" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><g class="clickable-group" data-group-id="100-build-tools:task-runners"><rect x="366.35" y="1547.35" width="135.3" height="47.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="382" y="1579" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>Task Runners</tspan></text></g><path d="M844 2551Q789.1393874589476 2552.025729622703 729 2551" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="undefined"></path><path d="M918 2533Q895.0159182918894 2469.840478638587 800 2446" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="undefined"></path><path d="M417 2367Q379.5600795485085 2365.198353130879 343 2369" fill="none" stroke="rgb(153,0,255)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><g class="clickable-group" data-group-id="100-build-tools:task-runners:npm-scripts"><rect x="154.35" y="1548.35" width="173.3" height="42.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="193" y="1575.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>npm scripts</tspan></text><circle cx="156" cy="1546" r="10" fill="rgb(255,255,255)"></circle><circle cx="156" cy="1546" r="10" fill="rgb(153,0,255)"></circle><path d="M150.5 1546L154.5 1550 161 1543.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><path d="M616 2209Q616 2255 616 2289" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="undefined"></path><path d="M872 2201Q775.0021586313369 2199.589860045975 682 2200" fill="none" stroke="rgb(153,0,255)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><g class="clickable-group" data-group-id="102-build-tools:linters-formatters"><rect x="869.35" y="1605.35" width="222.3" height="47.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="887" y="1636" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>Linters and Formatters</tspan></text></g><g class="clickable-group" data-group-id="100-build-tools:linters-formatters:prettier"><rect x="1151.35" y="1556.35" width="142.3" height="37.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1194" y="1582" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Prettier</tspan></text><circle cx="1291" cy="1559" r="10" fill="rgb(255,255,255)"></circle><circle cx="1291" cy="1559" r="10" fill="rgb(153,153,153)"></circle><path d="M1285.5 1559L1289.5 1563 1296 1556.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="101-build-tools:linters-formatters:eslint"><rect x="1151.35" y="1601.35" width="142.3" height="37.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1196" y="1626.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>ESLint</tspan></text><circle cx="1291" cy="1606" r="10" fill="rgb(255,255,255)"></circle><circle cx="1291" cy="1606" r="10" fill="rgb(153,153,153)"></circle><path d="M1285.5 1606L1289.5 1610 1296 1603.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="102-build-tools:linters-formatters:standardjs"><rect x="1152.35" y="1647.35" width="142.3" height="41.3" rx="2" fill="rgb(153,153,153)" fill-opacity="0.5" stroke="rgb(255,255,255)" stroke-width="2.7"></rect><text x="1177" y="1675" fill="rgb(51,51,51)" font-style="normal" font-weight="bold" font-size="17px"><tspan>StandardJS</tspan></text><rect x="1152.35" y="1647.35" width="142.3" height="41.3" rx="2" fill="rgb(238,238,238)" fill-opacity="0.25" stroke="rgb(102,102,102)" stroke-width="2.7"></rect></g><g class="clickable-group" data-group-id="100-build-tools:module-bundlers:webpack"><rect x="153.35" y="1609.35" width="173.3" height="37.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="204" y="1635" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Webpack</tspan></text><rect x="153.35" y="1609.35" width="173.3" height="37.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="204" y="1635" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Webpack</tspan></text><circle cx="153" cy="1611" r="10" fill="rgb(255,255,255)"></circle><circle cx="153" cy="1611" r="10" fill="rgb(153,0,255)"></circle><path d="M147.5 1611L151.5 1615 158 1608.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="102-build-tools:module-bundlers:rollup"><rect x="152.35" y="1701.35" width="173.3" height="37.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="216" y="1726.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Rollup</tspan></text><rect x="152.35" y="1701.35" width="173.3" height="37.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="216" y="1726.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Rollup</tspan></text><circle cx="153" cy="1706" r="10" fill="rgb(255,255,255)"></circle><circle cx="153" cy="1706" r="10" fill="rgb(255,255,255)"></circle><circle cx="153" cy="1706" r="10" fill="rgb(56,118,29)"></circle><path d="M147.5 1706L151.5 1710 158 1703.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="103-build-tools:module-bundlers:parcel"><text x="216" y="1772" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Parcel</tspan></text><rect x="152.35" y="1746.35" width="173.3" height="37.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="216" y="1772" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Parcel</tspan></text><circle cx="153" cy="1751" r="10" fill="rgb(255,255,255)"></circle><circle cx="153" cy="1751" r="10" fill="rgb(255,255,255)"></circle><circle cx="153" cy="1751" r="10" fill="rgb(56,118,29)"></circle><path d="M147.5 1751L151.5 1755 158 1748.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="101-build-tools:module-bundlers"><rect x="412.35" y="1724.35" width="174.3" height="47.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="434" y="1755" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>Module Bundlers</tspan></text></g><path d="M1026 2558Q1063.904251553439 2564.2661244681844 1104 2573" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M1114 2528Q1073.662666098777 2539.6999882995706 1030 2550" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><g class="clickable-group" data-group-id="111-pick-a-framework"><rect x="623.35" y="1841.35" width="264.3" height="50.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="685" y="1873" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>Pick a Framework</tspan></text></g><g class="clickable-group" data-group-id="100-pick-a-framework:react-js"><rect x="921.35" y="1751.35" width="142.3" height="37.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="968" y="1776.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>React</tspan></text><circle cx="923" cy="1752" r="10" fill="rgb(255,255,255)"></circle><circle cx="923" cy="1752" r="10" fill="rgb(153,0,255)"></circle><path d="M917.5 1752L921.5 1756 928 1749.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="101-pick-a-framework:angular"><rect x="953.35" y="1844.35" width="142.3" height="37.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="993" y="1870" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Angular</tspan></text><circle cx="954" cy="1843" r="10" fill="rgb(255,255,255)"></circle><circle cx="954" cy="1843" r="10" fill="rgb(255,255,255)"></circle><circle cx="954" cy="1843" r="10" fill="rgb(56,118,29)"></circle><path d="M948.5 1843L952.5 1847 959 1840.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="102-pick-a-framework:vue-js"><rect x="953.35" y="1928.35" width="142.3" height="37.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1003" y="1953" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Vue.js</tspan></text><circle cx="955" cy="1927" r="10" fill="rgb(255,255,255)"></circle><circle cx="955" cy="1927" r="10" fill="rgb(255,255,255)"></circle><circle cx="955" cy="1927" r="10" fill="rgb(56,118,29)"></circle><path d="M949.5 1927L953.5 1931 960 1924.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="100-pick-a-framework:react-js:redux"><rect x="1156.35" y="1727.35" width="174.3" height="37.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1218" y="1752.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Redux</tspan></text><circle cx="1326" cy="1729" r="10" fill="rgb(255,255,255)"></circle><circle cx="1326" cy="1729" r="10" fill="rgb(153,0,255)"></circle><path d="M1320.5 1729L1324.5 1733 1331 1726.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="101-pick-a-framework:react-js:mobx"><rect x="1156.35" y="1772.35" width="81.3" height="37.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1168" y="1797" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>MobX</tspan></text><circle cx="1229" cy="1778" r="10" fill="rgb(255,255,255)"></circle><circle cx="1229" cy="1778" r="10" fill="rgb(255,255,255)"></circle><circle cx="1229" cy="1778" r="10" fill="rgb(56,118,29)"></circle><path d="M1223.5 1778L1227.5 1782 1234 1775.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><path d="M1234 2699Q1202.2929528994064 2689.184795921811 1169 2677" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M1263 2651Q1217.394551641499 2664.773210785762 1168 2677" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><g class="clickable-group" data-group-id="112-modern-css"><rect x="484.35" y="1943.35" width="200.3" height="47.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="536" y="1974" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>Modern CSS</tspan></text></g><g class="clickable-group" data-group-id="102-css-preprocessors:less"><rect x="1149.35" y="1477.35" width="142.3" height="41.3" rx="2" fill="rgb(153,153,153)" fill-opacity="0.5" stroke="rgb(255,255,255)" stroke-width="2.7"></rect><text x="1200" y="1505" fill="rgb(51,51,51)" font-style="normal" font-weight="bold" font-size="17px"><tspan>Less</tspan></text><rect x="1149.35" y="1477.35" width="142.3" height="41.3" rx="2" fill="rgb(238,238,238)" fill-opacity="0.25" stroke="rgb(102,102,102)" stroke-width="2.7"></rect></g><g class="clickable-group" data-group-id="100-pick-a-framework:vue-js:vuex"><rect x="1156.35" y="1928.35" width="174.3" height="37.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1219" y="1955" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>VueX</tspan></text><circle cx="1326" cy="1928" r="10" fill="rgb(255,255,255)"></circle><circle cx="1326" cy="1928" r="10" fill="rgb(255,255,255)"></circle><circle cx="1326" cy="1928" r="10" fill="rgb(0,158,15)"></circle><path d="M1320.5 1928L1324.5 1932 1331 1925.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><path d="M1172 2766Q1202.8690828402366 2766.6878698224855 1236 2763" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><g class="clickable-group" data-group-id="100-pick-a-framework:angular:rxjs"><rect x="1156.35" y="1827.35" width="174.3" height="37.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1222" y="1852.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>RxJS</tspan></text><circle cx="1326" cy="1828" r="10" fill="rgb(255,255,255)"></circle><circle cx="1326" cy="1828" r="10" fill="rgb(255,255,255)"></circle><circle cx="1326" cy="1828" r="10" fill="rgb(56,118,29)"></circle><path d="M1320.5 1828L1324.5 1832 1331 1825.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><path d="M1172 2819Q1202.7359467455622 2821.610946745562 1236 2820" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><g class="clickable-group" data-group-id="101-pick-a-framework:angular:ngrx"><rect x="1156.35" y="1873.35" width="174.3" height="37.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1222" y="1899" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>NgRx</tspan></text><circle cx="1326" cy="1878" r="10" fill="rgb(255,255,255)"></circle><circle cx="1326" cy="1878" r="10" fill="rgb(255,255,255)"></circle><circle cx="1326" cy="1878" r="10" fill="rgb(56,118,29)"></circle><path d="M1320.5 1878L1324.5 1882 1331 1875.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><path d="M673 3175Q709.7485432011346 3193.968874203648 759 3217" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M666 3165Q706.540300002676 3168.9258299702146 760 3172" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M665 3164Q707.2392460411396 3149.810854092864 762 3129" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><g class="clickable-group" data-group-id="100-modern-css:styled-components"><rect x="150.35" y="1865.35" width="218.3" height="37.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="184" y="1890.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Styled Components</tspan></text><circle cx="151" cy="1866" r="10" fill="rgb(255,255,255)"></circle><circle cx="151" cy="1866" r="10" fill="rgb(153,0,255)"></circle><path d="M145.5 1866L149.5 1870 156 1863.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="101-modern-css:css-modules"><rect x="150.35" y="1909.35" width="218.3" height="37.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="208" y="1934.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>CSS Modules</tspan></text><circle cx="150" cy="1914" r="10" fill="rgb(255,255,255)"></circle><circle cx="150" cy="1914" r="10" fill="rgb(153,0,255)"></circle><path d="M144.5 1914L148.5 1918 155 1911.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><path d="M280 3046Q356.9045728424134 3047.275802391475 458 3045" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M286 3002Q354.802467792898 3017.790908731621 446 3035" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><g class="clickable-group" data-group-id="103-modern-css:emotion"><rect x="149.35" y="2001.35" width="218.3" height="37.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="228" y="2026.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Emotion</tspan></text><circle cx="150" cy="2006" r="10" fill="rgb(255,255,255)"></circle><circle cx="150" cy="2006" r="10" fill="rgb(255,255,255)"></circle><circle cx="150" cy="2006" r="10" fill="rgb(56,118,29)"></circle><path d="M144.5 2006L148.5 2010 155 2003.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="101-type-checkers:flow"><rect x="1105.35" y="2558.35" width="196.3" height="38.3" rx="2" fill="rgb(153,153,153)" fill-opacity="0.5" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1185" y="2583.5" fill="rgb(51,51,51)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Flow</tspan></text></g><g class="clickable-group" data-group-id="100-graphql:apollo"><rect x="976.35" y="2861.35" width="164.3" height="38.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1025" y="2887" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Apollo</tspan></text><circle cx="1138" cy="2864" r="10" fill="rgb(255,255,255)"></circle><circle cx="1138" cy="2864" r="10" fill="rgb(153,0,255)"></circle><path d="M1132.5 2864L1136.5 2868 1143 2861.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><path d="M297 3617Q295.76952825556424 3581.162638938688 297 3529" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><path d="M293 3516Q287.84216630385134 3448.902826444256 286 3351" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="undefined"></path><g class="clickable-group" data-group-id="120-static-site-generators"><rect x="777.35" y="3016.35" width="278.3" height="47.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="825" y="3047" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>Static Site Generators</tspan></text><circle cx="1047" cy="3016" r="10" fill="rgb(255,255,255)"></circle><circle cx="1047" cy="3016" r="10" fill="rgb(153,153,153)"></circle><path d="M1041.5 3016L1045.5 3020 1052 3013.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="101-static-site-generators:gatsbyjs"><rect x="1184.35" y="3000.35" width="144.3" height="38.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1218" y="3026" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>GatsbyJS</tspan></text><circle cx="1325" cy="3005" r="10" fill="rgb(255,255,255)"></circle><circle cx="1325" cy="3005" r="10" fill="rgb(153,0,255)"></circle><path d="M1319.5 3005L1323.5 3009 1330 3002.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="100-static-site-generators:next-js"><rect x="1184.35" y="2954.35" width="144.3" height="38.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1228" y="2980" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Next.js</tspan></text><circle cx="1326" cy="2954" r="10" fill="rgb(255,255,255)"></circle><circle cx="1326" cy="2954" r="10" fill="rgb(153,0,255)"></circle><path d="M1320.5 2954L1324.5 2958 1331 2951.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="102-static-site-generators:nuxt-js"><rect x="1184.35" y="3046.35" width="144.3" height="38.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1229" y="3072" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Nuxt.js</tspan></text><circle cx="1325" cy="3052" r="10" fill="rgb(255,255,255)"></circle><circle cx="1325" cy="3052" r="10" fill="rgb(255,255,255)"></circle><circle cx="1325" cy="3052" r="10" fill="rgb(56,118,29)"></circle><path d="M1319.5 3052L1323.5 3056 1330 3049.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="103-static-site-generators:vuepress"><rect x="1184.35" y="3091.35" width="144.3" height="38.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1223" y="3117" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Vuepress</tspan></text><circle cx="1325" cy="3098" r="10" fill="rgb(255,255,255)"></circle><circle cx="1325" cy="3098" r="10" fill="rgb(255,255,255)"></circle><circle cx="1325" cy="3098" r="10" fill="rgb(56,118,29)"></circle><path d="M1319.5 3098L1323.5 3102 1330 3095.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="104-static-site-generators:jekyll"><rect x="1184.35" y="3137.35" width="144.3" height="38.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1235" y="3162.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Jekyll</tspan></text><circle cx="1326" cy="3142" r="10" fill="rgb(255,255,255)"></circle><circle cx="1326" cy="3142" r="10" fill="rgb(255,255,255)"></circle><circle cx="1326" cy="3142" r="10" fill="rgb(56,118,29)"></circle><path d="M1320.5 3142L1324.5 3146 1331 3139.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><path d="M1183 3244Q1100.8979261582556 3149.448493520624 1055.1428571428569 3063.8786407766997" fill="none" stroke="rgb(43,120,228)" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="0.8 12"></path><g class="clickable-group" data-group-id="114-css-frameworks"><rect x="527.35" y="2174.35" width="258.3" height="47.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="589" y="2205" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>CSS Frameworks</tspan></text></g><g class="clickable-group" data-group-id="114-css-frameworks:css-first"><rect x="128.35" y="2087.35" width="366.3" height="134.3" rx="2" fill="rgb(255,255,255)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="281" y="2117" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="16px"><tspan>CSS first frameworks which</tspan></text><text x="281" y="2145" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="16px"><tspan>don\'t come with JavaScript</tspan></text><text x="281" y="2173" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="16px"><tspan>framework components by</tspan></text><text x="280" y="2201" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="16px"><tspan>default.</tspan></text></g><g class="clickable-group" data-group-id="100-css-frameworks:css-first:bootstrap"><rect x="144.35" y="2102.35" width="124.3" height="49.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="170" y="2132.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Bootstrap</tspan></text><circle cx="259" cy="2106" r="10" fill="rgb(255,255,255)"></circle><circle cx="259" cy="2106" r="10" fill="rgb(56,118,29)"></circle><path d="M253.5 2106L257.5 2110 264 2103.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="101-css-frameworks:css-first:bulma"><rect x="144.35" y="2159.35" width="124.3" height="46.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="182" y="2188.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Bulma</tspan></text><circle cx="262" cy="2165" r="10" fill="rgb(255,255,255)"></circle><circle cx="262" cy="2165" r="10" fill="rgb(255,255,255)"></circle><circle cx="262" cy="2165" r="10" fill="rgb(56,118,29)"></circle><path d="M256.5 2165L260.5 2169 267 2162.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="114-css-frameworks:js-first"><rect x="837.35" y="2150.35" width="233.3" height="278.3" rx="2" fill="rgb(255,255,255)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="852" y="2365" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="16px"><tspan>JS based and better to use</tspan></text><text x="852" y="2390" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="16px"><tspan>with your framework based</tspan></text><text x="852" y="2414" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="16px"><tspan>JavaScript applications.</tspan></text></g><g class="clickable-group" data-group-id="100-css-frameworks:js-first:tailwind-css"><rect x="853.35" y="2168.35" width="202.3" height="37.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="906" y="2192.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Tailwind CSS</tspan></text><circle cx="857" cy="2171" r="10" fill="rgb(255,255,255)"></circle><circle cx="857" cy="2171" r="10" fill="rgb(255,255,255)"></circle><circle cx="857" cy="2171" r="10" fill="rgb(56,118,29)"></circle><path d="M851.5 2171L855.5 2175 862 2168.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="102-css-frameworks:js-first:material-ui"><rect x="853.35" y="2261.35" width="202.3" height="34.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="912" y="2285.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Material UI</tspan></text><circle cx="854" cy="2266" r="10" fill="rgb(255,255,255)"></circle><circle cx="854" cy="2266" r="10" fill="rgb(255,255,255)"></circle><circle cx="854" cy="2266" r="10" fill="rgb(56,118,29)"></circle><path d="M848.5 2266L852.5 2270 859 2263.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="101-css-frameworks:js-first:chakra-ui"><rect x="853.35" y="2215.35" width="202.3" height="36.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="916" y="2240.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Chakra UI</tspan></text><circle cx="854" cy="2221" r="10" fill="rgb(255,255,255)"></circle><circle cx="854" cy="2221" r="10" fill="rgb(255,255,255)"></circle><circle cx="854" cy="2221" r="10" fill="rgb(56,118,29)"></circle><path d="M848.5 2221L852.5 2225 859 2218.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="115-testing-your-apps"><rect x="126.35" y="2256.35" width="244.3" height="254.3" rx="2" fill="rgb(255,255,255)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="147" y="2466" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="16px"><tspan>You can fill all your testing</tspan></text><text x="147" y="2491" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="16px"><tspan>needs with just these.</tspan></text></g><g class="clickable-group" data-group-id="101-testing-your-apps:react-testing-library"><rect x="142.35" y="2315.35" width="213.3" height="37.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="167" y="2340.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>react-testing-library</tspan></text><circle cx="144" cy="2322" r="10" fill="rgb(255,255,255)"></circle><circle cx="144" cy="2322" r="10" fill="rgb(153,0,255)"></circle><path d="M138.5 2322L142.5 2326 149 2319.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="103-testing-your-apps:enzyme"><rect x="142.35" y="2403.35" width="213.3" height="34.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="216" y="2426.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Enzyme</tspan></text><circle cx="144" cy="2408" r="10" fill="rgb(255,255,255)"></circle><circle cx="144" cy="2408" r="10" fill="rgb(153,0,255)"></circle><path d="M138.5 2408L142.5 2412 149 2405.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="100-testing-your-apps:jest"><rect x="142.35" y="2270.35" width="213.3" height="37.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="230" y="2295.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Jest</tspan></text><circle cx="144" cy="2273" r="10" fill="rgb(255,255,255)"></circle><circle cx="144" cy="2273" r="10" fill="rgb(153,0,255)"></circle><path d="M138.5 2273L142.5 2277 149 2270.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="102-testing-your-apps:cypress"><rect x="142.35" y="2359.35" width="213.3" height="36.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="215" y="2383.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Cypress</tspan></text><circle cx="144" cy="2365" r="10" fill="rgb(255,255,255)"></circle><circle cx="144" cy="2365" r="10" fill="rgb(153,0,255)"></circle><path d="M138.5 2365L142.5 2369 149 2362.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="115-testing-your-apps"><rect x="396.35" y="2260.35" width="402.3" height="155.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="520" y="2298" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="18px"><tspan>Testing your Apps</tspan></text><text x="417" y="2363.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>and </tspan><tspan fill="#2b78e4">Functional</tspan><tspan> tests and learn how to write</tspan></text><text x="416" y="2392.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>them with the tools listed on the left.</tspan></text><text x="416" y="2333.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Learn the difference between </tspan><tspan fill="#2b78e4">Unit</tspan><tspan>, </tspan><tspan fill="#2b78e4">Integration</tspan><tspan>, </tspan></text></g><g class="clickable-group" data-group-id="104-testing-your-apps:other-options"><g class="clickable-group" data-group-id="testing-your-apps:chai"><rect x="505.35" y="2427.35" width="90.3" height="40.3" rx="2" fill="rgb(153,153,153)" fill-opacity="0.5" stroke="rgb(255,255,255)" stroke-width="2.7"></rect><text x="532" y="2453.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Chai</tspan></text><rect x="505.35" y="2427.35" width="90.3" height="40.3" rx="2" fill="rgb(238,238,238)" fill-opacity="0.25" stroke="rgb(102,102,102)" stroke-width="2.7"></rect></g><g class="clickable-group" data-group-id="testing-your-apps:ava"><rect x="606.35" y="2427.35" width="72.3" height="40.3" rx="2" fill="rgb(153,153,153)" fill-opacity="0.5" stroke="rgb(255,255,255)" stroke-width="2.7"></rect><text x="627" y="2454" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Ava</tspan></text><rect x="606.35" y="2427.35" width="72.3" height="40.3" rx="2" fill="rgb(238,238,238)" fill-opacity="0.25" stroke="rgb(102,102,102)" stroke-width="2.7"></rect></g><g class="clickable-group" data-group-id="testing-your-apps:jasmine"><rect x="689.35" y="2426.35" width="109.3" height="40.3" rx="2" fill="rgb(153,153,153)" fill-opacity="0.5" stroke="rgb(255,255,255)" stroke-width="2.7"></rect><text x="711" y="2452.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Jasmine</tspan></text><rect x="689.35" y="2426.35" width="109.3" height="40.3" rx="2" fill="rgb(238,238,238)" fill-opacity="0.25" stroke="rgb(102,102,102)" stroke-width="2.7"></rect></g><g class="clickable-group" data-group-id="testing-your-apps:mocha"><rect x="396.35" y="2426.35" width="98.3" height="40.3" rx="2" fill="rgb(153,153,153)" fill-opacity="0.5" stroke="rgb(255,255,255)" stroke-width="2.7"></rect><text x="418" y="2452.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Mocha</tspan></text><rect x="396.35" y="2426.35" width="98.3" height="40.3" rx="2" fill="rgb(238,238,238)" fill-opacity="0.25" stroke="rgb(102,102,102)" stroke-width="2.7"></rect></g></g><g class="clickable-group" data-group-id="116-type-checkers"><rect x="820.35" y="2528.35" width="223.3" height="47.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="872" y="2559" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>Type Checkers</tspan></text><circle cx="1039" cy="2527" r="10" fill="rgb(255,255,255)"></circle><circle cx="1039" cy="2527" r="10" fill="rgb(153,153,153)"></circle><path d="M1033.5 2527L1037.5 2531 1044 2524.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="100-type-checkers:typescript"><rect x="1105.35" y="2509.35" width="196.3" height="38.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1158" y="2534.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>TypeScript</tspan></text><circle cx="1296" cy="2511" r="10" fill="rgb(255,255,255)"></circle><circle cx="1296" cy="2511" r="10" fill="rgb(153,0,255)"></circle><path d="M1290.5 2511L1294.5 2515 1301 2508.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path><circle cx="1270" cy="2511" r="10" fill="rgb(255,255,255)"></circle><circle cx="1270" cy="2511" r="10" fill="rgb(153,153,153)"></circle><path d="M1264.5 2511L1268.5 2515 1275 2508.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="117-progressive-web-apps"><rect x="503.35" y="2528.35" width="238.3" height="47.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="533" y="2559" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>Progressive Web Apps</tspan></text><circle cx="506" cy="2526" r="10" fill="rgb(255,255,255)"></circle><circle cx="506" cy="2526" r="10" fill="rgb(153,153,153)"></circle><path d="M500.5 2526L504.5 2530 511 2523.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="100-progressive-web-apps:apis"><rect x="144.35" y="2528.35" width="225.3" height="386.3" rx="2" fill="rgb(255,255,255)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><rect x="170.35" y="2617.35" width="174.3" height="29.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="191.1340560913086" y="2639" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="18px"><tspan>Service Workers</tspan></text><rect x="170.35" y="2543.35" width="174.3" height="29.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="225.55902862548828" y="2564.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="18px"><tspan>Storage</tspan></text><rect x="170.35" y="2654.35" width="174.3" height="29.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="222.54402923583984" y="2675.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="18px"><tspan>Location</tspan></text><rect x="170.35" y="2692.35" width="174.3" height="29.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="207.09105682373047" y="2713.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="18px"><tspan>Notifications</tspan></text><rect x="170.35" y="2729.35" width="174.3" height="29.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="181.34207153320312" y="2750.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="18px"><tspan>Device Orientation</tspan></text><rect x="170.35" y="2766.35" width="174.3" height="29.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="217.96304321289062" y="2788" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="18px"><tspan>Payments</tspan></text><rect x="170.35" y="2803.35" width="174.3" height="29.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="210.7000503540039" y="2824.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="18px"><tspan>Credentials</tspan></text><rect x="170.35" y="2580.35" width="174.3" height="29.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="204.8140411376953" y="2602" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="18px"><tspan>Web Sockets</tspan></text><text x="180" y="2866" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Learn different Web</tspan></text><text x="184" y="2892" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>APIs used in PWAs</tspan></text><circle cx="144" cy="2526" r="10" fill="rgb(255,255,255)"></circle><circle cx="144" cy="2526" r="10" fill="rgb(153,153,153)"></circle><path d="M138.5 2526L142.5 2530 149 2523.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="101-progressive-web-apps:performance"><rect x="396.35" y="2636.35" width="259.3" height="278.3" rx="2" fill="rgb(255,255,255)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><rect x="416.35" y="2655.35" width="222.3" height="29.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="472.6810607910156" y="2677" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="18px"><tspan>PRPL Pattern</tspan></text><rect x="416.35" y="2693.35" width="222.3" height="29.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="479.82704162597656" y="2714.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="18px"><tspan>RAIL Model</tspan></text><rect x="416.35" y="2731.35" width="222.3" height="29.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="442.18009185791016" y="2753" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="18px"><tspan>Performance Metrics</tspan></text><rect x="416.35" y="2768.35" width="222.3" height="29.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="456.54407501220703" y="2789.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="18px"><tspan>Using Lighthouse</tspan></text><rect x="416.35" y="2806.35" width="222.3" height="29.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="464.4550476074219" y="2827.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="18px"><tspan>Using DevTools</tspan></text><text x="435" y="2868.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Calculating, Measuring</tspan></text><text x="415" y="2895.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>and improving performance</tspan></text><circle cx="398" cy="2636" r="10" fill="rgb(255,255,255)"></circle><circle cx="398" cy="2636" r="10" fill="rgb(153,153,153)"></circle><path d="M392.5 2636L396.5 2640 403 2633.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="118-server-side-rendering"><rect x="741.35" y="2651.35" width="275.3" height="47.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="762" y="2682" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>Server Side Rendering (SSR)</tspan></text><circle cx="1011" cy="2651" r="10" fill="rgb(255,255,255)"></circle><circle cx="1011" cy="2651" r="10" fill="rgb(153,153,153)"></circle><path d="M1005.5 2651L1009.5 2655 1016 2648.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="100-server-side-rendering:react-js"><rect x="1063.35" y="2656.35" width="113.3" height="38.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1092" y="2681.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>React</tspan></text><circle cx="1173" cy="2654" r="10" fill="rgb(255,255,255)"></circle><circle cx="1173" cy="2654" r="10" fill="rgb(153,0,255)"></circle><path d="M1167.5 2654L1171.5 2658 1178 2651.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="100-server-side-rendering:react-js:next-js"><rect x="1236.35" y="2636.35" width="91.3" height="38.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1255" y="2662" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Next.js</tspan></text><circle cx="1325" cy="2637" r="10" fill="rgb(255,255,255)"></circle><circle cx="1325" cy="2637" r="10" fill="rgb(153,0,255)"></circle><path d="M1319.5 2637L1323.5 2641 1330 2634.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="101-server-side-rendering:react-js:after-js"><rect x="1236.35" y="2683.35" width="91.3" height="38.3" rx="2" fill="rgb(153,153,153)" fill-opacity="0.5" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1256" y="2709" fill="rgb(51,51,51)" font-style="normal" font-weight="normal" font-size="17px"><tspan>After.js</tspan></text></g><g class="clickable-group" data-group-id="101-server-side-rendering:angular"><rect x="1067.35" y="2747.35" width="112.3" height="38.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1097" y="2773" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Angular</tspan></text><circle cx="1175" cy="2745" r="10" fill="rgb(255,255,255)"></circle><circle cx="1175" cy="2745" r="10" fill="rgb(255,255,255)"></circle><circle cx="1175" cy="2745" r="10" fill="rgb(56,118,29)"></circle><path d="M1169.5 2745L1173.5 2749 1180 2742.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="100-server-side-rendering:angular:universal"><rect x="1219.35" y="2747.35" width="108.3" height="38.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1237" y="2772.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Universal</tspan></text><circle cx="1325" cy="2745" r="10" fill="rgb(255,255,255)"></circle><circle cx="1325" cy="2745" r="10" fill="rgb(255,255,255)"></circle><circle cx="1325" cy="2745" r="10" fill="rgb(56,118,29)"></circle><path d="M1319.5 2745L1323.5 2749 1330 2742.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="102-server-side-rendering:vue-js"><rect x="1067.35" y="2800.35" width="112.3" height="38.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1100" y="2826" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Vue.js</tspan></text><circle cx="1176" cy="2799" r="10" fill="rgb(255,255,255)"></circle><circle cx="1176" cy="2799" r="10" fill="rgb(255,255,255)"></circle><circle cx="1176" cy="2799" r="10" fill="rgb(56,118,29)"></circle><path d="M1170.5 2799L1174.5 2803 1181 2796.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="100-server-side-rendering:vue-js:nuxt-js"><rect x="1219.35" y="2800.35" width="108.3" height="38.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1246" y="2826" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Nuxt.js</tspan></text><circle cx="1326" cy="2799" r="10" fill="rgb(255,255,255)"></circle><circle cx="1326" cy="2799" r="10" fill="rgb(255,255,255)"></circle><circle cx="1326" cy="2799" r="10" fill="rgb(56,118,29)"></circle><path d="M1320.5 2799L1324.5 2803 1331 2796.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="122-desktop-applications"><rect x="442.35" y="3141.35" width="238.3" height="47.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="484" y="3172" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>Desktop Applications</tspan></text><circle cx="676" cy="3141" r="10" fill="rgb(255,255,255)"></circle><circle cx="676" cy="3141" r="10" fill="rgb(153,153,153)"></circle><path d="M670.5 3141L674.5 3145 681 3138.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="100-desktop-applications:electron"><rect x="756.35" y="3104.35" width="185.3" height="38.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="818" y="3129.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Electron</tspan></text><circle cx="937" cy="3107" r="10" fill="rgb(255,255,255)"></circle><circle cx="937" cy="3107" r="10" fill="rgb(153,0,255)"></circle><path d="M931.5 3107L935.5 3111 942 3104.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="101-desktop-applications:carlo"><rect x="757.35" y="3152.35" width="185.3" height="38.3" rx="2" fill="rgb(204,204,204)" fill-opacity="0.5" stroke="rgb(255,255,255)" stroke-width="2.7"></rect><text x="829" y="3178.5" fill="rgb(51,51,51)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Carlo</tspan></text><rect x="758.35" y="3152.35" width="183.3" height="38.3" rx="2" fill="rgb(153,153,153)" fill-opacity="0.5" stroke="rgb(0,0,0)" stroke-width="2.7"></rect></g><g class="clickable-group" data-group-id="121-mobile-applications"><rect x="438.35" y="3019.35" width="207.3" height="47.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="464" y="3050" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>Mobile Applications</tspan></text><circle cx="643" cy="3019" r="10" fill="rgb(255,255,255)"></circle><circle cx="643" cy="3019" r="10" fill="rgb(153,153,153)"></circle><path d="M637.5 3019L641.5 3023 648 3016.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="100-mobile-applications:react-native"><rect x="147.35" y="2939.35" width="144.3" height="38.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="169" y="2965" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>React Native</tspan></text><circle cx="147" cy="2938" r="10" fill="rgb(255,255,255)"></circle><circle cx="147" cy="2938" r="10" fill="rgb(153,0,255)"></circle><path d="M141.5 2938L145.5 2942 152 2935.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="101-mobile-applications:nativescript"><rect x="147.35" y="2984.35" width="144.3" height="38.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="169" y="3010" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>NativeScript</tspan></text></g><g class="clickable-group" data-group-id="102-mobile-applications:flutter"><rect x="147.35" y="3030.35" width="144.3" height="38.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="193" y="3055.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Flutter</tspan></text></g><g class="clickable-group" data-group-id="105-static-site-generators:hugo"><rect x="1184.35" y="3183.35" width="144.3" height="38.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1235" y="3208.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Hugo</tspan></text><circle cx="1326" cy="3189" r="10" fill="rgb(255,255,255)"></circle><circle cx="1326" cy="3189" r="10" fill="rgb(255,255,255)"></circle><circle cx="1326" cy="3189" r="10" fill="rgb(56,118,29)"></circle><path d="M1320.5 3189L1324.5 3193 1331 3186.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="103-mobile-applications:ionic"><rect x="147.35" y="3076.35" width="144.3" height="38.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="200" y="3101.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Ionic</tspan></text></g><g class="clickable-group" data-group-id="119-graphql"><rect x="768.35" y="2879.35" width="143.3" height="47.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="804" y="2910" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>GraphQL</tspan></text><circle cx="769" cy="2879" r="10" fill="rgb(255,255,255)"></circle><circle cx="769" cy="2879" r="10" fill="rgb(153,153,153)"></circle><path d="M763.5 2879L767.5 2883 774 2876.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="101-graphql:relay-modern"><rect x="976.35" y="2910.35" width="165.3" height="38.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1008" y="2935.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Relay Modern</tspan></text><circle cx="1139" cy="2915" r="10" fill="rgb(255,255,255)"></circle><circle cx="1139" cy="2915" r="10" fill="rgb(255,255,255)"></circle><circle cx="1139" cy="2915" r="10" fill="rgb(56,118,29)"></circle><path d="M1133.5 2915L1137.5 2919 1144 2912.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="123-web-assembly"><rect x="188.35" y="3325.35" width="207.3" height="47.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="233" y="3356" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>Web Assembly</tspan></text><circle cx="186" cy="3323" r="10" fill="rgb(255,255,255)"></circle><circle cx="186" cy="3323" r="10" fill="rgb(153,153,153)"></circle><path d="M180.5 3323L184.5 3327 191 3320.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="ext_link:google.com"><rect x="202.35" y="3501.35" width="204.3" height="47.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="246" y="3532" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>Keep Learning</tspan></text></g><g><rect x="465.35" y="3297.35" width="579.3" height="185.3" rx="2" fill="rgb(255,255,255)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="484" y="3335" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Web Assembly or WASM is the binary instructions generated from</tspan></text><text x="484" y="3365" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>higher level languages such as Go, C, C++ or Rust. It is faster than</tspan></text><text x="483" y="3396" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>JavaScript and WASM 1.0 has already shipped in the major browsers.</tspan></text><text x="483" y="3456.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>take quite some time to go mainstream though.</tspan></text><text x="483" y="3426" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>W3C accepted it as an official standard at the end of 2019. It will still</tspan></text></g><g class="clickable-group" data-group-id="113-web-components"><rect x="723.35" y="2039.35" width="227.3" height="47.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="766" y="2070" fill="rgb(0,0,0)" font-style="normal" font-weight="bold" font-size="17px"><tspan>Web Components</tspan></text><circle cx="946" cy="2038" r="10" fill="rgb(255,255,255)"></circle><circle cx="946" cy="2038" r="10" fill="rgb(153,153,153)"></circle><path d="M940.5 2038L944.5 2042 951 2035.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="100-web-components:html-templates"><rect x="1048.35" y="1998.35" width="187.3" height="37.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1077" y="2023.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>HTML Templates</tspan></text><circle cx="1232" cy="2001" r="10" fill="rgb(255,255,255)"></circle><circle cx="1232" cy="2001" r="10" fill="rgb(153,153,153)"></circle><path d="M1226.5 2001L1230.5 2005 1237 1998.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="101-web-components:custom-elements"><rect x="1048.35" y="2043.35" width="187.3" height="37.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1077" y="2068.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Custom Elements</tspan></text><circle cx="1232" cy="2050" r="10" fill="rgb(255,255,255)"></circle><circle cx="1232" cy="2050" r="10" fill="rgb(153,153,153)"></circle><path d="M1226.5 2050L1230.5 2054 1237 2047.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="102-web-components:shadow-dom"><rect x="1048.35" y="2088.35" width="187.3" height="37.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1085" y="2113.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Shadow DOM</tspan></text><circle cx="1232" cy="2093" r="10" fill="rgb(255,255,255)"></circle><circle cx="1232" cy="2093" r="10" fill="rgb(153,153,153)"></circle><path d="M1226.5 2093L1230.5 2097 1237 2090.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="102-desktop-applications:proton-native"><rect x="757.35" y="3201.35" width="185.3" height="38.3" rx="2" fill="rgb(204,204,204)" fill-opacity="0.5" stroke="rgb(255,255,255)" stroke-width="2.7"></rect><text x="798" y="3227" fill="rgb(51,51,51)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Proton Native</tspan></text><rect x="758.35" y="3200.35" width="183.3" height="38.3" rx="2" fill="rgb(153,153,153)" fill-opacity="0.5" stroke="rgb(0,0,0)" stroke-width="2.7"></rect></g><g class="clickable-group" data-group-id="101-css-preprocessors:postcss"><rect x="1148.35" y="1429.35" width="143.3" height="40.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1186" y="1457" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>PostCSS</tspan></text><circle cx="1288" cy="1433" r="10" fill="rgb(255,255,255)"></circle><circle cx="1288" cy="1433" r="10" fill="rgb(153,153,153)"></circle><path d="M1282.5 1433L1286.5 1437 1293 1430.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="100-css-preprocessors:sass"><rect x="1148.35" y="1382.35" width="143.3" height="38.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1197" y="1407.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Sass</tspan></text><circle cx="1289" cy="1384" r="10" fill="rgb(255,255,255)"></circle><circle cx="1289" cy="1384" r="10" fill="rgb(153,153,153)"></circle><path d="M1283.5 1384L1287.5 1388 1294 1381.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="102-modern-css:styled-jsx"><rect x="149.35" y="1955.35" width="218.3" height="37.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="214" y="1981" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Styled JSX</tspan></text><circle cx="149" cy="1960" r="10" fill="rgb(255,255,255)"></circle><circle cx="149" cy="1960" r="10" fill="rgb(255,255,255)"></circle><circle cx="149" cy="1960" r="10" fill="rgb(56,118,29)"></circle><path d="M143.5 1960L147.5 1964 154 1957.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="101-build-tools:module-bundlers:esbuild"><rect x="152.35" y="1656.35" width="173.3" height="37.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="203" y="1682" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Webpack</tspan></text><rect x="152.35" y="1656.35" width="173.3" height="37.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="211" y="1680.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>esbuild</tspan></text><circle cx="152" cy="1658" r="10" fill="rgb(255,255,255)"></circle><circle cx="152" cy="1658" r="10" fill="rgb(153,0,255)"></circle><path d="M146.5 1658L150.5 1662 157 1655.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="104-build-tools:module-bundlers:vite"><text x="216" y="1818" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Parcel</tspan></text><rect x="152.35" y="1792.35" width="173.3" height="37.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="224" y="1817" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Vite</tspan></text><circle cx="153" cy="1797" r="10" fill="rgb(255,255,255)"></circle><circle cx="153" cy="1797" r="10" fill="rgb(255,255,255)"></circle><circle cx="153" cy="1797" r="10" fill="rgb(56,118,29)"></circle><path d="M147.5 1797L151.5 1801 158 1794.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="102-pick-a-framework:react-js:recoil"><rect x="1247.35" y="1772.35" width="82.3" height="37.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="1260" y="1796.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Recoil</tspan></text><circle cx="1325" cy="1780" r="10" fill="rgb(255,255,255)"></circle><circle cx="1325" cy="1780" r="10" fill="rgb(255,255,255)"></circle><circle cx="1325" cy="1780" r="10" fill="rgb(56,118,29)"></circle><path d="M1319.5 1780L1323.5 1784 1330 1777.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="103-css-frameworks:js-first:radix-ui"><rect x="853.35" y="2305.35" width="202.3" height="34.3" rx="2" fill="rgb(255,255,0)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><text x="922" y="2329.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Radix UI</tspan></text><circle cx="854" cy="2310" r="10" fill="rgb(255,255,255)"></circle><circle cx="854" cy="2310" r="10" fill="rgb(255,255,255)"></circle><circle cx="854" cy="2310" r="10" fill="rgb(56,118,29)"></circle><path d="M848.5 2310L852.5 2314 859 2307.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path></g><g class="clickable-group" data-group-id="107-static-site-generators:eleventy"><rect x="1185.35" y="3275.35" width="144.3" height="38.3" rx="2" fill="rgb(255,229,153)" fill-opacity="1" stroke="rgb(0,0,0)" stroke-width="2.7"></rect><circle cx="1327" cy="3289" r="10" fill="rgb(255,255,255)"></circle><circle cx="1327" cy="3289" r="10" fill="rgb(56,118,29)"></circle><path d="M1321.5 3289L1325.5 3293 1332 3286.5" fill="none" stroke="#fff" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round"></path><text x="1225" y="3300.5" fill="rgb(0,0,0)" font-style="normal" font-weight="normal" font-size="17px"><tspan>Eleventy</tspan></text></g></svg>'}}])&&y(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),l}(v(HTMLElement));function T(e){return T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},T(e)}function _(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,(void 0,a=function(e,t){if("object"!==T(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var i=r.call(e,"string");if("object"!==T(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(i.key),"symbol"===T(a)?a:String(a)),i)}var a}function C(e){var t="function"==typeof Map?new Map:void 0;return C=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,i)}function i(){return V(e,arguments,P(this).constructor)}return i.prototype=Object.create(e.prototype,{constructor:{value:i,enumerable:!1,writable:!0,configurable:!0}}),N(i,e)},C(e)}function V(e,t,r){return V=j()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&N(a,r.prototype),a},V.apply(null,arguments)}function j(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function N(e,t){return N=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},N(e,t)}function P(e){return P=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},P(e)}customElements.define("main-roadmap",x);var M=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&N(e,t)}(l,e);var t,r,i,a,o=(i=l,a=j(),function(){var e,t=P(i);if(a){var r=P(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===T(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function l(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),o.call(this)}return t=l,(r=[{key:"connectedCallback",value:function(){this.innerHTML='<h1>Хостинг</h1> <div class="content__menu"> <p class="content__menu-link" id="content__menu-link1">Домен</p> <p class="content__menu-link" id="content__menu-link2">Хостинг</p> <p class="content__menu-link" id="content__menu-link3">frontend200tb.github.io</p> </div> <div class="content__items"> <div class="content__item" id="content__item1"> <h2>Домен</h2> <ul> <li> <a href="https://whois.ru/">whois.ru</a> Проверить свободен ли домен </li> </ul> </div> <div class="content__item" id="content__item2"> <h2>Хостинг</h2> <ul> <li> <h3>sourceforge (1999)</h3><a href="https://sourceforge.net/">sourceforge.net</a> </li> <li> <h3>launchpad (2004)</h3><a href="https://launchpad.net/">launchpad.net</a> </li> <li> <h3>000webhost (2007)</h3><a href="https://ru.000webhost.com/">000webhost.com</a><br>000webhost.com <p><strong>Мой сайт</strong><br><a href="https://high-hat-recapitula.000webhostapp.com/">high-hat-recapitula</a></p> <p><strong>Мой сайт</strong><br><a href="https://marvel200.000webhostapp.com/">marvel200</a></p> </li> <li> <h3>beget (2007)</h3><a href="https://beget.com/ru/free-hosting">beget.com</a> </li> <li> <h3>github (2008)</h3><a href="https://github.com/frontend200tb">github.com</a><br>github.com </li> <li> <h3>bitbucked (2008)</h3><a href="http://bitbucked.org/">bitbucked.org</a> </li> <li> <h3>gitlab (2012)</h3><a href="https://gitlab.com/">gitlab.com</a> </li> <li> <h3>codebasehq (2013)</h3><a href="https://www.codebasehq.com/">codebasehq.com</a> </li> <li> <h3>cpanelhosting (2015)</h3><a href="https://cpanelhosting.ru/free/">cpanelhosting.ru</a><br>cpanelhosting.ru </li> <li> <h3>sourcehut (2020)</h3><a href="https://sourcehut.org/">sourcehut.org</a> </li> </ul> </div> <div class="content__item" id="content__item3"> <h2>Мои сайты на frontend200tb.github.io (30 repositories)</h2> <ol> <li><a href="https://frontend200tb.github.io/start/">start</a> (2021-11-29)</li> </ol> <h3>Проект в разработке (pug, sass, JavaScript)</h3> <ol> <li><a href="https://frontend200tb.github.io/radio/">radio</a> (2021-11-27)</li> <li><a href="https://frontend200tb.github.io/200tb/">200tb</a></li> </ol> <h3>Учебные проекты Верстка (HTML, CSS)</h3> <ol> <li><a href="https://frontend200tb.github.io/aquatic/">aquatic</a> (2021-08-15)</li> <li><a href="https://frontend200tb.github.io/gloevk/">gloevk</a> (2021-08-15)</li> <li><a href="https://frontend200tb.github.io/halloween/">halloween</a> (2021-10-16)</li> <li><a href="https://frontend200tb.github.io/neuralnetwork/">neuralnetwork</a> (2021-08-23)</li> <li><a href="https://frontend200tb.github.io/newyork/">newyork</a> (2021-10-16)</li> <li><a href="https://frontend200tb.github.io/resume/">resume</a> (2021-07-02)</li> <li><a href="https://frontend200tb.github.io/webdev/">webdev</a> (2021-10-16)</li> </ol> <h3>Учебные проекты Верстка (HTML, CSS, jQuery)</h3> <ol> <li><a href="https://frontend200tb.github.io/choocetravel/">choocetravel</a> (2021-08-19)</li> <li><a href="https://frontend200tb.github.io/explorecalifornia/">explorecalifornia</a> (2021-08-19)</li> <li><a href="https://frontend200tb.github.io/freepsd/">freepsd</a> (2021-08-15)</li> <li><a href="https://frontend200tb.github.io/mogo/">mogo</a> (2021-11-29)</li> </ol> <h3>Учебные проекты Верстка (HTML, CSS, jQuery, Bootstrap)</h3> <ol> <li><a href="https://frontend200tb.github.io/kinomonster/">kinomonster</a> (2021-08-16)</li> <li><a href="https://frontend200tb.github.io/landon/">landon</a> (2021-08-15)</li> </ol> <h3>Учебные проекты Верстка (HTML, CSS, JavaScript)</h3> <ol> <li><a href="https://frontend200tb.github.io/coffee/">coffee</a> (2021-07-22)</li> <li><a href="https://frontend200tb.github.io/flashnews/">flashnews</a> (2021-07-22)</li> <li><a href="https://frontend200tb.github.io/yummy/">yummy</a> (2021-07-30)</li> </ol> <h3>Fork</h3> <ol> <li><a href="https://frontend200tb.github.io/tasks/">tasks</a> (Курс JS/Frontend-разработка)</li> <li><a href="https://frontend200tb.github.io/flashnews/">flashnews</a> (2021-07-22)</li> <li><a href="https://frontend200tb.github.io/yummy/">yummy</a> (2021-07-30)</li> </ol> </div> </div>'}}])&&_(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),l}(C(HTMLElement));function E(e){return E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},E(e)}function D(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,(void 0,a=function(e,t){if("object"!==E(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var i=r.call(e,"string");if("object"!==E(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(i.key),"symbol"===E(a)?a:String(a)),i)}var a}function A(e){var t="function"==typeof Map?new Map:void 0;return A=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,i)}function i(){return F(e,arguments,W(this).constructor)}return i.prototype=Object.create(e.prototype,{constructor:{value:i,enumerable:!1,writable:!0,configurable:!0}}),I(i,e)},A(e)}function F(e,t,r){return F=O()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&I(a,r.prototype),a},F.apply(null,arguments)}function O(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function I(e,t){return I=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},I(e,t)}function W(e){return W=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},W(e)}customElements.define("main-hosting",M);var R=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&I(e,t)}(l,e);var t,r,i,a,o=(i=l,a=O(),function(){var e,t=W(i);if(a){var r=W(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===E(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function l(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),o.call(this)}return t=l,(r=[{key:"connectedCallback",value:function(){this.innerHTML='<h1>Playground</h1> <div class="content__menu"> <p class="content__menu-link" id="content__menu-link1">Code Playground</p> <p class="content__menu-link" id="content__menu-link2">Тренажеры</p> <p class="content__menu-link" id="content__menu-link3">Регулярные выражения</p> </div> <div class="content__items"> <div class="content__item" id="content__item1"> <h2>Code Playground</h2> <h3>CodePen (2012)</h3> <ul> <li> <a href="https://codepen.io/">codepen.io</a> <br>codepen.io </li> </ul> <h3>Изучать исходный код игр на JavaScript</h3> <ul> <li> <strong>Carnival (Карнавал)</strong> <br><a href="https://codepen.io/una">codepen.io/una</a> <br>Разработчик Una Kravets </li> <li> <strong>Tic-Tac-Toe (Крестики-нолики)</strong> <br><a href="https://codepen.io/alvaromontoro">codepen.io/alvaromontoro</a> <br>Разработчик Alvaro Montoro </li> <li> <strong>Fishing in winter</strong> <br><a href="https://codepen.io/jhasuev">codepen.io/jhasuev</a> <br>Разработчик Jamal Hasuev </li> <li> <strong>Knight\'s tour</strong> <br><a href="https://codepen.io/Kit_Nickson">codepen.io/Kit_Nickson</a> <br>Разработчик Kit_Nickson </li> </ul> <h3>CodeSandbox (2017)</h3> <ul> <li> <a href="https://codesandbox.io/">codesandbox.io</a> <br>codesandbox.io </li> </ul> <h3>CSS Desk</h3> <ul> <li> <a href="http://www.cssdesk.com/">cssdesk.com</a> <br>cssdesk.com </li> </ul> <h3>dabblet</h3> <ul> <li> <a href="https://dabblet.com/">dabblet.com</a> <br>dabblet.com </li> </ul> <h3>html-css-js</h3> <ul> <li> <a href="https://html-css-js.com/">html-css-js.com</a> <br>html-css-js.com </li> </ul> <h3>JS.do</h3> <ul> <li> <a href="https://js.do/">js.do</a> <br>JavaScript Editor </li> </ul> <h3>jsbin</h3> <ul> <li> <a href="https://jsbin.com/">jsbin.com</a> <br>jsbin.com </li> </ul> <h3>jsFiddle (2010)</h3> <ul> <li> <a href="https://jsfiddle.net/">jsfiddle.net</a> <br>jsfiddle.net </li> </ul> <h3>playcode.io</h3> <ul> <li> <a href="https://playcode.io/">playcode.io</a> <br>playcode.io </li> </ul> <h3>ReplIt (2016)</h3> <ul> <li> <a href="https://replit.com/">replit.com</a> <br>replit.com </li> </ul> <h3>Plunker</h3> <ul> <li> <a href="https://plnkr.co/">plnkr.co</a> <br>plnkr.co </li> </ul> <h3>StackBlitz (2018)</h3> <ul> <li> <a href="https://stackblitz.com/">stackblitz.com</a> <br>Проект StackBlitz — это онлайн-песочница для разработки приложений </li> </ul> </div> <div class="content__item" id="content__item2"> <h2>Тренажеры</h2> <ol> <li> <a href="https://checkio.org/">checkio.org</a> <br>checkio </li> <li> <a href="https://codesignal.com/">codesignal.com</a> <br>codesignal </li> <li> <a href="https://www.codewars.com/">codewars.com</a> <br>codewars.com </li> <li> <a href="https://codingame.com/">codingame.com</a> <br>codingame </li> <li> <a href="https://www.hackerrank.com/">hackerrank.com</a> <br>hackerrank </li> <li> <a href="http://javascript-tasks.ru/">javascript-tasks.ru</a> <br>javascript-tasks </li> <li> <a href="https://leetcode.com/problemset/algorithms/">leetcode.com</a> <br>на алгоритмы </li> <li> <a href="https://www.sololearn.com/Codes/">sololearn.com</a> <br>sololearn.com </li> </ol> </div> <div class="content__item" id="content__item3"> <h2>Регулярные выражения</h2> <ol> <li> <a href="https://regexone.com/">regexone.com</a> <br>RegexOne </li> <li> <a href="https://regexr.com/">regexr.com</a> <br>regexr </li> <li> <a href="https://regex101.com/">regex101.com</a> <br>regex101 </li> </ol> </div> </div>'}}])&&D(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),l}(A(HTMLElement));function H(){for(var e=document.querySelectorAll(".content__menu-link"),t=document.querySelectorAll(".content__item"),r=e[0],i=function(i){e[i].addEventListener("click",(function(){return e=t[i],r.classList.remove("content__order"),e.classList.add("content__order"),void(r=e);var e}))},a=0;a<e.length;a++)i(a);for(var o=document.querySelectorAll(".content1__menu-link"),l=document.querySelectorAll(".content1__item"),n=o[0],s=function(e){o[e].addEventListener("click",(function(){return t=l[e],n.classList.remove("content1__order"),t.classList.add("content1__order"),void(n=t);var t}))},c=0;c<o.length;c++)s(c)}customElements.define("main-playground",R);for(var B=[],z=function(){var e=G[J],t=document.createElement("a");t.href="main-".concat(e.toLowerCase()),t.innerHTML=e,t.id="main-".concat(e.toLowerCase()),B.push(t),t.addEventListener("click",(function(e){e.preventDefault(),U(B,t)}))},J=0,G=["Roadmap","Hosting","Playground"];J<G.length;J++)z();function U(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;e.forEach((function(e){e.classList.remove("active")})),t&&t.classList.add("active")}const q=[{url:"/code.html",text:"Code",content:"<code-main></code-main>",act:function(){}},{url:"/index.html",text:"Frontend",content:"<front-main></front-main>",act:function(){var e;(e=document.querySelector(".aside")).innerHTML="",e.append.apply(e,B),function(){var e=document.querySelector(".list"),t=document.getElementById("main-roadmap");t&&t.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML="<main-roadmap></main-roadmap>"}));var r=document.getElementById("main-hosting");r&&r.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML="<main-hosting></main-hosting>",H()}));var i=document.getElementById("main-playground");i&&i.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML="<main-playground></main-playground>",H()}))}(),function(){for(var e=document.getElementsByClassName("showhide__h"),t=document.getElementsByClassName("showhide__text"),r=Array.from(e),i=Array.from(t),a=function(e){r[e].addEventListener("click",(function(){return i[e].classList.toggle("none")}))},o=0;o<r.length;o++)a(o)}(),U(B,null)}}];r(267);for(var Q=[],Y=function(){var e=X[K],t=document.createElement("a");t.href="#",t.innerHTML=e,t.id="code-".concat(e.replace(/[^a-z0-9]/gi,"").toLowerCase()),Q.push(t),t.addEventListener("click",(function(e){var r;e.preventDefault(),r=t,Q.forEach((function(e){e.classList.remove("active")})),r.classList.add("active")}))},K=0,X=["HTML"];K<X.length;K++)Y();r(306);for(var Z=[],$=function(){var e=te[ee],t=document.createElement("a");t.href="#",t.innerHTML=e,t.id="code-".concat(e.replace(/[^a-z0-9]/gi,"").toLowerCase()),Z.push(t),t.addEventListener("click",(function(e){var r;e.preventDefault(),r=t,Z.forEach((function(e){e.classList.remove("active")})),r.classList.add("active")}))},ee=0,te=["CSS","CSS selectors"];ee<te.length;ee++)$();r(938);for(var re=[],ie=function(){var e=oe[ae],t=document.createElement("a");t.href="#",t.innerHTML=e,t.id="code-".concat(e.replace(/[^a-z0-9]/gi,"").toLowerCase()),re.push(t),t.addEventListener("click",(function(e){var r;e.preventDefault(),r=t,re.forEach((function(e){e.classList.remove("active")})),r.classList.add("active")}))},ae=0,oe=["JavaScript","String","Null","Undefined","Array","Date","History","Location","Math","Promise","Prototype","Storage","XMLHttpRequest","ASCII","Unicode"];ae<oe.length;ae++)ie();r(281);for(var le=[],ne=function(){var e=ce[se],t=document.createElement("a");t.href="#",t.innerHTML=e,t.id="code-".concat(e.replace(/[^a-z0-9]/gi,"").toLowerCase()),le.push(t),t.addEventListener("click",(function(e){var r;e.preventDefault(),r=t,le.forEach((function(e){e.classList.remove("active")})),r.classList.add("active")}))},se=0,ce=["TypeScript","learn.microsoft","Types"];se<ce.length;se++)ne();r(723);for(var de=[],he=function(){var e=ue[pe],t=document.createElement("a");t.href="#",t.innerHTML=e,t.id="code-".concat(e.replace(/[^a-z0-9]/gi,"").toLowerCase()),de.push(t),t.addEventListener("click",(function(e){var r;e.preventDefault(),r=t,de.forEach((function(e){e.classList.remove("active")})),r.classList.add("active")}))},pe=0,ue=["C#"];pe<ue.length;pe++)he();r(370);for(var me=[],ge=function(){var e=be[fe],t=document.createElement("a");t.href="#",t.innerHTML=e,t.id="code-".concat(e.replace(/[^a-z0-9]/gi,"").toLowerCase()),me.push(t),t.addEventListener("click",(function(e){var r;e.preventDefault(),r=t,me.forEach((function(e){e.classList.remove("active")})),r.classList.add("active")}))},fe=0,be=["Markdown"];fe<be.length;fe++)ge();r(608);for(var ye=[],ve=function(){var e=ke[we],t=document.createElement("a");t.href="#",t.innerHTML=e,t.id="code-".concat(e.replace(/[^a-z0-9]/gi,"").toLowerCase()),ye.push(t),t.addEventListener("click",(function(e){var r;e.preventDefault(),r=t,ye.forEach((function(e){e.classList.remove("active")})),r.classList.add("active")}))},we=0,ke=["Pug"];we<ke.length;we++)ve();r(310);for(var Le=[],Se=function(){var e=Te[xe],t=document.createElement("a");t.href="#",t.innerHTML=e,t.id="code-".concat(e.replace(/[^a-z0-9]/gi,"").toLowerCase()),Le.push(t),t.addEventListener("click",(function(e){var r;e.preventDefault(),r=t,Le.forEach((function(e){e.classList.remove("active")})),r.classList.add("active")}))},xe=0,Te=["SASS"];xe<Te.length;xe++)Se();r(165);for(var _e=[],Ce=function(){var e=je[Ve],t=document.createElement("a");t.href="#",t.innerHTML=e,t.id="code-".concat(e.replace(/[^a-z0-9]/gi,"").toLowerCase()),_e.push(t),t.addEventListener("click",(function(e){var r;e.preventDefault(),r=t,_e.forEach((function(e){e.classList.remove("active")})),r.classList.add("active")}))},Ve=0,je=["Php"];Ve<je.length;Ve++)Ce();r(360);for(var Ne=[],Pe=function(){var e=Ee[Me],t=document.createElement("a");t.href="#",t.innerHTML=e,t.id="code-".concat(e.replace(/[^a-z0-9]/gi,"").toLowerCase()),Ne.push(t),t.addEventListener("click",(function(e){var r;e.preventDefault(),r=t,Ne.forEach((function(e){e.classList.remove("active")})),r.classList.add("active")}))},Me=0,Ee=["Pascal","Types","Lessons"];Me<Ee.length;Me++)Pe();var De;function Ae(e){return Ae="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ae(e)}function Fe(e,t,r){return(t=function(e){var t=function(e,t){if("object"!==Ae(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var i=r.call(e,"string");if("object"!==Ae(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ae(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}r(188);var Oe,Ie=[[{id:1,year:1997,category:"code",theme:"html css",title:"HTML с самого начала",author:"Хеслоп",authorName:"Брент",pages:"417",isLearned:!0,dateLearned:"2021-07-27 вт"},{id:2,year:1998,category:"code",theme:"html css",title:"HTML в подлиннике",author:"Браун",authorName:"Итан",pages:"1048",isLearned:!0,dateLearned:"2021-08-16 пн"},{id:2,year:2002,category:"code",theme:"html css",title:"Самоучитель HTML",author:"Гончаров",authorName:"Алексей",pages:"242",isLearned:!1,dateLearned:""},{id:2,year:2003,category:"code",theme:"html css",title:"HTML 4.0. В подлиннике",author:"Матросов",authorName:"Александр",pages:"242",isLearned:!1,dateLearned:"674"},{id:3,year:2008,category:"code",theme:"html css",title:"HTML. Популярный самоучитель (2е)",author:"Чиртик",authorName:"Александр",pages:"256",isLearned:!0,dateLearned:"2021-07-16 пт"},{id:1,year:2010,category:"code",theme:"html css",title:"HTML, XHTML и CSS на 100 %",author:"Квинт",pages:"384",isLearned:!1,dateLearned:""},{id:2,year:2010,category:"code",theme:"html css",title:"Веб-мастеринг на 100 HTML CSS JS PHP",author:"Ташков",authorName:"Пётр",pages:"512",isLearned:!1,dateLearned:""},{id:1,year:2010,category:"code",theme:"html css",title:"CSS. 100 и 1 совет (3е)",author:"Эндрю",authorName:"Рейчел",pages:"336",isLearned:!1,dateLearned:""},{id:7,year:2011,category:"code",theme:"html css",title:"HTML5, CSS3, Web 2.0. Разработка современных Web-сайтов",author:"Дронов",authorName:"Владимир",pages:"416",isLearned:!1,dateLearned:""},{id:6,year:2011,category:"code",theme:"html css",title:"HTML скрипты и стили (3е)",author:"Дунаев",authorName:"Вадим",pages:"816",isLearned:!1,dateLearned:""},{id:5,year:2011,category:"code",theme:"html css",title:"HTML Самоучитель (2е)",author:"Комолова",authorName:"Нина",pages:"288",isLearned:!0,dateLearned:"2021-12-18 сб"},{id:9,year:2011,category:"code",theme:"html css",title:"HTML5 для профессионалов: мощные инструменты для разработки современных веб-приложений",author:"Лабберс",authorName:"Питер",pages:"272",isLearned:!1,dateLearned:""},{id:7,year:2011,category:"code",theme:"html css",title:"Изучаем HTML 5. Библиотека специалиста (1е)",author:"Лоусон",authorName:"Брюс",pages:"272",isLearned:!1,dateLearned:""},{id:3,year:2011,category:"code",theme:"html css",title:"Самоучитель HTML",author:"Мержевич",authorName:"Влад",pages:"97",isLearned:!0,dateLearned:"2021-12-08 ср"},{id:8,year:2011,category:"code",theme:"html css",title:"Погружение в HTML5",author:"Пилгрим",authorName:"Марк",pages:"304",isLearned:!1,dateLearned:""},{id:4,year:2011,category:"code",theme:"html css",title:"CSS ручной работы",author:"Седерхольм",authorName:"Дэн",pages:"240",isLearned:!1,dateLearned:""},{id:2,year:2011,category:"code",theme:"html css",title:"HTML и CSS. Путь к совершенству",author:"Хеник",authorName:"Бен",pages:"336",isLearned:!1,dateLearned:""},{id:10,year:2011,category:"code",theme:"html css",title:"HTML5 за 10 минут (5-е изд)",author:"Хольцнер",authorName:"Стивен",pages:"240",isLearned:!1,dateLearned:""},{id:6,year:2011,category:"code",theme:"html css",title:"CSS Рецепты программирования (3е)",author:"Шмитт",authorName:"Кристофер",pages:"672",isLearned:!1,dateLearned:""},{id:14,year:2012,category:"code",theme:"html css",title:"Сила CSS3",author:"Джилленуотер",authorName:"Зои",pages:"304",isLearned:!1,dateLearned:""},{id:16,year:2012,category:"code",theme:"html css",title:"Изучаем HTML 5. Библиотека специалиста (2-е изд)",author:"Лоусон",authorName:"Брюс",pages:"304",isLearned:!1,dateLearned:""},{id:17,year:2012,category:"code",theme:"html css",title:"HTML5 Недостающее руководство",author:"Мак-Дональд",authorName:"Мэтью",pages:"480",isLearned:!1,dateLearned:""},{id:17,year:2012,category:"code",theme:"html css",title:"Большая книга CSS (2е)",author:"Макфарланд",authorName:"Дэвид",pages:"561",isLearned:!1,dateLearned:""},{id:12,year:2012,category:"code",theme:"html css",title:"CSS3 для веб-дизайнеров",author:"Седерхольм",authorName:"Дэн",pages:"125",isLearned:!1,dateLearned:""},{id:13,year:2012,category:"code",theme:"html css",title:"Пуленепробиваемый веб-дизайн (3-е изд)",author:"Седерхольм",authorName:"Дэн",pages:"304",isLearned:!1,dateLearned:""},{id:15,year:2012,category:"code",theme:"html css",title:"HTML5. Рецепты программирования",author:"Симпсон",authorName:"Кайл",pages:"288",isLearned:!1,dateLearned:""},{id:15,year:2012,category:"code",theme:"html css",title:"HeadFirst Изучаем HTML XHTML и CSS (1е)",author:"Фримен",authorName:"Эрик",pages:"654",isLearned:!1,dateLearned:""},{id:11,year:2012,category:"code",theme:"html css",title:"HTML5 и CSS3. Веб-разработка",author:"Хоган",authorName:"Брайан",pages:"272",isLearned:!1,dateLearned:""},{id:22,year:2013,category:"code",theme:"html css",title:"HTML5 Для профессоналов",author:"Гоше",authorName:"Хуан Диего",pages:"496",isLearned:!1,dateLearned:""},{id:19,year:2013,category:"code",theme:"html css",title:"HTML и CSS. Разработка и дизайн веб-сайтов",author:"Дакетт",authorName:"Джон",pages:"480",isLearned:!0,dateLearned:"2021-12-04 сб",origin:{year:2011,title:"HTML &amp; CSS Design and Build Websites (eng)",author:"Jon Duckett"}},{id:20,year:2013,category:"code",theme:"html css",title:"HTML и CSS. Разработка и дизайн веб-сайтов (eng)",author:"Дакетт",authorName:"Джон",pages:"480",isLearned:!1,dateLearned:"",origin:{year:2011,title:"HTML &amp; CSS Design and Build Websites (eng)",author:"Jon Duckett"}},{id:18,year:2013,category:"code",theme:"html css",title:"HTML5 для веб-дизайнеров",author:"Кит",authorName:"Джереми",pages:"80",isLearned:!1,dateLearned:""},{id:14,year:2013,category:"code",theme:"html css",title:"Веб-мастеринг на 100 HTML CSS JS PHP",author:"Клименко",authorName:"Роман",pages:"512",isLearned:!1,dateLearned:""},{id:21,year:2013,category:"code",theme:"html css",title:"HTML5 - Путеводитель по технологии",author:"Сухов",authorName:"Кирилл",pages:"352",isLearned:!1,dateLearned:""},{id:23,year:2013,category:"code",theme:"html css",title:"HeadFirst Изучаем программирование на HTML5",author:"Фримен",authorName:"Эрик",pages:"640",isLearned:!0,dateLearned:"2021-09-26 вс"},{id:23,year:2013,category:"code",theme:"html css",title:"Книга веб-программиста",author:"Хоган",authorName:"Брайан",pages:"287",isLearned:!1,dateLearned:""},{id:24,year:2014,category:"code",theme:"html css",title:"Большая книга CSS (3е)",author:"Макфарланд",authorName:"Дэвид",pages:"608",isLearned:!1,dateLearned:""},{id:24,year:2014,category:"code",theme:"html css",title:"XHTML в примерах",author:"Наварро",authorName:"Энн",pages:"336",isLearned:!1,dateLearned:""},{id:18,year:2014,category:"code",theme:"html css",title:"HTML5, CSS3 и JavaScript Исчерпывающее руководство (4е)",author:"Роббинс",authorName:"Дженнифер",pages:"528",isLearned:!1,dateLearned:""},{id:25,year:2014,category:"code",theme:"html css",title:"HTML5 и CSS3. Разработка сайтов (1е)",author:"Фрэйн",authorName:"Бен",pages:"304",isLearned:!1,dateLearned:""},{id:25,year:2014,category:"code",theme:"html css",title:"HeadFirst Изучаем HTML XHTML и CSS (2-е изд)",author:"Фримен",authorName:"Эрик",pages:"720",isLearned:!0,dateLearned:"2021-09-22 ср"},{id:28,year:2015,category:"code",theme:"html css",title:"HTML5 Разработка приложений для мобильных устройств",author:"Вейл",authorName:"Эстель",pages:"480",isLearned:!1,dateLearned:""},{id:27,year:2015,category:"code",theme:"html css",title:"Лабораторные работы по языку гипертекстовой разметки HTML",author:"Муслимова",authorName:"З.М.",pages:"71",isLearned:!1,dateLearned:""},{id:26,year:2015,category:"code",theme:"html css",title:"HTML5 карманный справочник (5-е изд)",author:"Роббинс",authorName:"Дженнифер",pages:"192",isLearned:!1,dateLearned:""},{id:36,year:2016,category:"code",theme:"html css",title:"Секреты CSS. Идеальные решения ежедневных задач",author:"Веру",authorName:"Леа",pages:"336",isLearned:!1,dateLearned:""},{id:33,year:2016,category:"code",theme:"html css",title:"Введение в HTML5 (2-е изд)",author:"ИНТУИТ",pages:"134",isLearned:!1,dateLearned:""},{id:34,year:2016,category:"code",theme:"html css",title:"Основы работы с HTML (2-е изд)",author:"ИНТУИТ",pages:"209",isLearned:!1,dateLearned:""},{id:35,year:2016,category:"code",theme:"html css",title:"Спецификация языка HTML (2-е изд)",author:"ИНТУИТ",pages:"490",isLearned:!1,dateLearned:""},{id:32,year:2016,category:"code",theme:"html css",title:"HTML 5. Основы клиентской разработки (2-е изд)",author:"ИНТУИТ - Савельев А.О., Алексеев А.А.",pages:"286",isLearned:!1,dateLearned:""},{id:30,year:2016,category:"code",theme:"html css",title:"Большая книга CSS (4-е изд)",author:"Макфарланд",authorName:"Дэвид",pages:"720",isLearned:!1,dateLearned:"",origin:{year:2015,title:"CSS The Missing Manual (4th) (eng)",author:"David McFarland"}},{id:37,year:2016,category:"code",theme:"html css",title:"CSS. Карманный справочник (4-е изд)",author:"Мейер",authorName:"Эрик",pages:"288",isLearned:!1,dateLearned:""},{id:29,year:2016,category:"code",theme:"html css",title:"Учебник HTML",author:"Семикопенко",authorName:"Алексей",pages:"94",isLearned:!1,dateLearned:""},{id:38,year:2017,category:"code",theme:"html css",title:"HTML5 и CSS3. Разработка сайтов (2е)",author:"Фрэйн",authorName:"Бен",pages:"272",isLearned:!1,dateLearned:""},{id:39,year:2018,category:"code",theme:"html css",title:"HTML5 + CSS3 Основы современного веб дезайна",author:"Кириченко",authorName:"А.В.",pages:"352",isLearned:!1,dateLearned:""},{id:39,year:2018,category:"code",theme:"html css",title:"WEB и DHTML",author:"Солодушкин",authorName:"Святослав",pages:"132",isLearned:!1,dateLearned:""},{id:40,year:2019,category:"code",theme:"html css",title:"CSS для профи",author:"Грант",authorName:"Кит",pages:"496",isLearned:!1,dateLearned:""},{id:41,year:2019,category:"code",theme:"html css",title:"CSS полный справочник (4-е изд)",author:"Мейер",authorName:"Эрик",pages:"1088",isLearned:!1,dateLearned:"",origin:{year:2018,title:"CSS The Definitive Guide (4th) (eng)",author:"Eric Meyer, Estelle Weyl"}},{id:43,year:2020,category:"code",theme:"html css",title:"Я верстальщик. Веб-верстальщик",author:"Матыцин",authorName:"Арсений",pages:"114",isLearned:!1,dateLearned:""},{id:44,year:2021,category:"code",theme:"html css",title:"Веб-дизайн для начинающих. HTML, CSS, jаvascript и веб-графика",author:"Роббинс",authorName:"Дженнифер",pages:"943",isLearned:!1,dateLearned:""},{id:43,year:2021,category:"code",theme:"html css",title:"Наглядный CSS",author:"Сидельников",authorName:"Грег",pages:"224",isLearned:!1,dateLearned:""},{id:44,year:2021,category:"code",theme:"html css",title:"Шпаргалки для начинающего верстальщика",author:"Эберт",authorName:"Елена",pages:"103",isLearned:!1,dateLearned:""},{id:45,year:2022,category:"code",theme:"html css",title:"Клиентские технологии веб-дизайна. HTML5 и CSS3",author:"Диков",authorName:"Андрей",pages:"186",isLearned:!1,dateLearned:""},{id:46,year:2022,category:"code",theme:"html css",title:"Отзывчивый дизайн на HTML5 и CSS3",author:"Фрэйн",authorName:"Бен",pages:"336",isLearned:!1,dateLearned:""},{}],[{id:1,year:2e3,category:"code",theme:"javascript",title:"Практические занятия по JavaScript",author:"Николенко",pages:129,isLearned:!0,dateLearned:"2023-12-28 чт"},{id:2,year:2001,category:"code",theme:"javascript",title:"JavaScript",author:"Мэрдок",authorName:"Келли",pages:285,isLearned:!1,dateLearned:""},{id:3,year:2005,category:"code",theme:"javascript",title:"Самоучитель JavaScript (2е)",author:"Дунаев",authorName:"Вадим",pages:402,isLearned:!1,dateLearned:""},{id:4,year:2011,category:"code",theme:"javascript",title:"JavaScript шаблоны",author:"Стефанов",authorName:"Стоян",pages:265,isLearned:!1,dateLearned:""},{id:5,year:2012,category:"code",theme:"javascript",title:"JavaScript Оптимизация производительности",author:"Закас",authorName:"Николас",pages:256,isLearned:!1,dateLearned:""},{id:6,year:2012,category:"code",theme:"javascript",title:"Web-программирование JavaScript",author:"Зудилова",authorName:"Т.В.",pages:68,isLearned:!0,dateLearned:"2022-05-31 вт"},{id:7,year:2012,category:"code",theme:"javascript",title:"JavaScript. Сильные стороны",author:"Крокфорд",authorName:"Дуглас",pages:176,isLearned:!1,dateLearned:""},{id:8,year:2012,category:"code",theme:"javascript",title:"Веб-приложения на JavaScript. Руководство jQuery разработчика",author:"Маккоу",authorName:"Алекс",pages:288,isLearned:!1,dateLearned:""},{id:9,year:2012,category:"code",theme:"javascript",title:"HeadFirst JavaScript",author:"Моррисон",authorName:"Майкл",pages:608,isLearned:!0,dateLearned:"2022-05-24 вт"},{id:10,year:2012,category:"code",theme:"javascript",title:"JavaScript. Подробное руководство (6е)",author:"Флэнаган",authorName:"Дэвид",pages:1080,isLearned:!1,dateLearned:""},{id:11,year:2013,category:"code",theme:"javascript",title:"JavaScript. Карманный справочник (3е)",author:"Флэнаган",authorName:"Дэвид",pages:320,isLearned:!1,dateLearned:""},{id:12,year:2013,category:"code",theme:"javascript",title:"Сила JavaScript. 68 способов",author:"Херман",authorName:"Дэвид",pages:288,isLearned:!1,dateLearned:""},{id:13,year:2013,category:"code",theme:"javascript",title:"Графика на JavaScript",author:"Чекко",authorName:"Рафаэлло",pages:272,isLearned:!1,dateLearned:""},{id:14,year:2014,category:"code",theme:"javascript",title:"Сюрреализм на JavaScript",author:"Бахирев",authorName:"Алексей",pages:228,isLearned:!1,dateLearned:""},{id:15,year:2014,category:"code",theme:"javascript",title:"Паттерны для масштабируемых JavaScript-приложений",author:"Османи",authorName:"Эдди",pages:38,isLearned:!1,dateLearned:""},{id:16,year:2014,category:"code",theme:"javascript",title:"Создание игр на JavaScript",author:"Эггес",authorName:"Арьян",pages:409,isLearned:!1,dateLearned:""},{id:17,year:2015,category:"code",theme:"javascript",title:"Конспект js-course",author:"Конспект",pages:231,isLearned:!1,dateLearned:""},{id:18,year:2015,category:"code",theme:"javascript",title:"JavaScript для профессиональных веб-разработчиков (3е)",author:"Закас",authorName:"Николас",pages:960,isLearned:!1,dateLearned:""},{id:19,year:2015,category:"code",theme:"javascript",title:"HeadFirst Программирование на JavaScript",author:"Фримен",authorName:"Эрик",pages:640,isLearned:!0,dateLearned:"2021-10-01 пт",origin:{year:2014,title:"Head First - JavaScript Programming (eng)",author:"Eric Freeman, Elisabeth Robson",pages:704}},{id:20,year:2015,category:"code",theme:"javascript",title:"Выразительный JavaScript (2е)",author:"Хавербек",authorName:"Марейн",pages:745,isLearned:!1,dateLearned:""},{id:21,year:2016,category:"code",theme:"javascript",title:"ИНТУИТ - Основы JavaScript",author:"ИНТУИТ",pages:185,isLearned:!0,dateLearned:"2022-06-06 пн"},{id:22,year:2016,category:"code",theme:"javascript",title:"ИНТУИТ - Основы программирования на JavaScript (2е)",author:"Кан",pages:168,isLearned:!0,dateLearned:"2022-06-10 пт"},{id:23,year:2016,category:"code",theme:"javascript",title:"Разработка игр на языке JavaScript",author:"Беляев",authorName:"Сергей",pages:128,isLearned:!0,dateLearned:"2022-02-04 чт"},{id:24,year:2016,category:"code",theme:"javascript",title:"JavaScript для детей. Самоучитель",author:"Морган",authorName:"Ник",pages:288,isLearned:!0,dateLearned:"2021-09-16 чт"},{id:25,year:2016,category:"code",theme:"javascript",title:"Введение в ECMAScript 6",author:"Прасти",authorName:"Нараян",pages:178,isLearned:!0,dateLearned:"2023-03-18 сб",origin:{year:2015,title:"Learning ESMAScript 6 (eng)",author:"Narayan Prusty",pages:202}},{id:26,year:2016,category:"code",theme:"javascript",title:"JavaScript для профессионалов (2е)",author:"Резиг",authorName:"Джон",pages:240,isLearned:!1,dateLearned:"",origin:{year:2016,title:"Pro JavaScript Techniques (2nd)",author:"John Resig",pages:193}},{id:27,year:2017,category:"code",theme:"javascript",title:"Изучаем JavaScript (3е)",author:"Браун",authorName:"Этан",pages:368,isLearned:!1,dateLearned:"",origin:{year:2016,title:"Learning JavaScript (3rd) (eng)",author:"Ethan Brown",pages:364}},{id:28,year:2017,category:"code",theme:"javascript",title:"Программирование на JavaScript в примерах и задачах",author:"Васильев",authorName:"Алексей",pages:721,isLearned:!1,dateLearned:""},{id:29,year:2017,category:"code",theme:"javascript",title:"ECMAScript 6 для разработчиков",author:"Закас",authorName:"Николас",pages:352,isLearned:!1,dateLearned:"",origin:{year:2016,title:"Understanding Ecmascript 6 (eng)",author:"Nicholas Zakas",pages:355}},{id:30,year:2017,category:"code",theme:"javascript",title:"JavaScript в примерах",author:"Кингсли-Хью",authorName:"Эдриан",pages:267,isLearned:!1,dateLearned:""},{id:31,year:2017,category:"code",theme:"javascript",title:"JavaScript для чайников",author:"Минник",authorName:"Крис",pages:320,isLearned:!1,dateLearned:""},{id:32,year:2017,category:"code",theme:"javascript",title:"Javascript на примерах",author:"Никольский",authorName:"А.П.",pages:274,isLearned:!1,dateLearned:""},{id:33,year:2017,category:"code",theme:"javascript",title:"Секреты JavaScript ниндзя (2е)",author:"Резиг",authorName:"Джон",pages:544,isLearned:!1,dateLearned:"",origin:{year:2016,title:"Secrets of the JavaScript Ninja (2nd) (eng)",author:"John Resig",pages:468}},{id:34,year:2017,category:"code",theme:"javascript",title:"Введение в разработку игр на JavaScript",author:"Стюарт",authorName:"Грэм",pages:206,isLearned:!1,dateLearned:""},{id:35,year:2018,category:"code",theme:"javascript",title:"Функциональное программирование на JavaScript",author:"Атенсио",authorName:"Луис",pages:304,isLearned:!1,dateLearned:""},{id:36,year:2018,category:"code",theme:"javascript",title:"JavaScript на примерах",author:"Никольский",pages:272,isLearned:!1,dateLearned:"",oldEdition:{year:2017,pages:272}},{id:37,year:2019,category:"code",theme:"javascript",title:"Введение в веб-разработку на JS",author:"Государев",authorName:"Илья",pages:141,isLearned:!1,dateLearned:""},{id:38,year:2019,category:"code",theme:"javascript",title:"Как устроен JavaScript",author:"Крокфорд",authorName:"Дуглас",pages:304,isLearned:!1,dateLearned:""},{id:39,year:2019,category:"code",theme:"javascript",title:"Программирование на Javascript для чайников",author:"Минник",authorName:"Крис",pages:322,isLearned:!1,dateLearned:""},{id:40,year:2019,category:"code",theme:"javascript",title:"Учимся кодить на JavaScript",author:"Мориц",authorName:"Джереми",pages:256,isLearned:!1,dateLearned:""},{id:41,year:2019,category:"code",theme:"javascript",title:"Рефакторинг кода на JavaScript (2e)",author:"Фаулер",authorName:"Мартин",pages:464,isLearned:!1,dateLearned:""},{id:42,year:2019,category:"code",theme:"javascript",title:"Выразительный JavaScript (3е)",author:"Хавербек",authorName:"Марейн",pages:482,isLearned:!1,dateLearned:"",origin:{year:2018,title:"Eloquent JavaScript (3rd) (eng)",author:"Marijn Haverbeke",pages:448}},{id:43,year:2020,category:"code",theme:"javascript",title:"Разработка игр на языке JavaScript (3е)",author:"Беляев",authorName:"Сергей",pages:128,isLearned:!1,dateLearned:""},{id:44,year:2020,category:"code",theme:"javascript",title:"Клиентские технологии веб-программирования: JаvaScript и DOM",author:"Диков",authorName:"Андрей",pages:124,isLearned:!1,dateLearned:""},{id:45,year:2020,category:"code",theme:"javascript",title:"JavaScript для FrontEnd разработчиков",author:"Кириченко",authorName:"Андрей",pages:320,isLearned:!1,dateLearned:""},{id:46,year:2020,category:"code",theme:"javascript",title:"Javascript. Основы программирования",author:"Попов",authorName:"С.Е.",pages:116,isLearned:!1,dateLearned:""},{id:47,year:2020,category:"code",theme:"javascript",title:"Разработка программных комплексов на языке JavaScript",author:"Солодушкин",authorName:"Святослав",pages:136,isLearned:!1,dateLearned:""},{id:48,year:2020,category:"code",theme:"javascript",title:"Бессерверные приложения на JavaScript",author:"Стоянович",authorName:"Слободан",pages:394,isLearned:!1,dateLearned:""},{id:49,year:2020,category:"code",theme:"javascript",title:"Веб-компоненты в действии",author:"Фаррелл",authorName:"Бен",pages:463,isLearned:!1,dateLearned:""},{id:50,year:2021,category:"code",theme:"javascript",title:"Web-программирование на javascript",author:"Диков",authorName:"Андрей",pages:169,isLearned:!1,dateLearned:""},{id:51,year:2021,category:"code",theme:"javascript",title:"JavaScript. 20 уроков для начинающих",author:"Дронов",authorName:"Владимир",pages:354,isLearned:!1,dateLearned:""},{id:52,year:2021,category:"code",theme:"javascript",title:"Справочник Javascript",author:"Никольский",authorName:"А.П.",pages:306,isLearned:!0,dateLearned:"2022-05-24 вт"},{id:53,year:2021,category:"code",theme:"javascript",title:"Вы не знаете JS 1 Приступим",author:"Симпсон",authorName:"Кайл",pages:64,isLearned:!0,dateLearned:"2021-09-15 ср"},{id:54,year:2021,category:"code",theme:"javascript",title:"Вы не знаете JS 2 Область видимости и замыкания",author:"Симпсон",authorName:"Кайл",pages:59,isLearned:!1,dateLearned:""},{id:55,year:2021,category:"code",theme:"javascript",title:"Вы не знаете JS 2 и 3 Замыкания и объекты",author:"Симпсон",authorName:"Кайл",pages:336,isLearned:!1,dateLearned:""},{id:56,year:2021,category:"code",theme:"javascript",title:"Вы не знаете JS 4 Типы и грамматические конструкции",author:"Симпсон",authorName:"Кайл",pages:240,isLearned:!1,dateLearned:""},{id:57,year:2021,category:"code",theme:"javascript",title:"Вы не знаете JS 5 Асинхронная обработка и оптимизация",author:"Симпсон",authorName:"Кайл",pages:352,isLearned:!1,dateLearned:""},{id:58,year:2021,category:"code",theme:"javascript",title:"Вы не знаете JS 6 ES6 и не только",author:"Симпсон",authorName:"Кайл",pages:336,isLearned:!1,dateLearned:""},{id:59,year:2021,category:"code",theme:"javascript",title:"Разработка на JavaScript",author:"Скотт",authorName:"Адам",pages:320,isLearned:!1,dateLearned:"",origin:{year:2020,title:"JavaScript Everywhere",author:"Adam Scott",pages:50}},{id:60,year:2021,category:"code",theme:"javascript",title:"JavaScript. Полное руководство (7е)",author:"Флэнаган",authorName:"Дэвид",pages:720,isLearned:!1,dateLearned:"",origin:{year:2020,title:"JavaScript. The Definitive Guide (7th)",author:"David Flanagan",pages:707}},{id:61,year:2021,category:"code",theme:"javascript",title:"Современный JavaScript для нетерпеливых",author:"Хорстман",authorName:"Кей",pages:288,isLearned:!1,dateLearned:""},{id:62,year:2021,category:"code",theme:"javascript",title:"JavaScript с нуля",author:"Чиннатхамби",authorName:"Кирупа",pages:400,isLearned:!1,dateLearned:""},{id:63,year:2021,category:"code",theme:"javascript",title:"JavaScript для глубокого обучения",author:"Шолле",authorName:"Франсуа",pages:576,isLearned:!1,dateLearned:""},{id:64,year:2022,category:"code",theme:"javascript",title:"Разработка игр на языке JavaScript",author:"Беляев",authorName:"Сергей",pages:"151",isLearned:!1,dateLearned:""},{id:65,year:2022,category:"code",theme:"javascript",title:"Программирование на JavaScript в примерах и задачах",author:"Васильев",authorName:"Алексей",pages:722,isLearned:!1,dateLearned:""},{id:66,year:2022,category:"code",theme:"javascript",title:"Введение в веб-разработку на языке JavaScript",author:"Государев",authorName:"Илья",pages:142,isLearned:!1,dateLearned:""},{id:67,year:2022,category:"code",theme:"javascript",title:"Javascript дополнительные уроки",author:"Дронов",authorName:"Владимир",pages:354,isLearned:!1,dateLearned:""},{id:68,year:2022,category:"code",theme:"javascript",title:"JavaScript для профессиональных веб-разработчиков (4е)",author:"Фрисби",authorName:"Мэтт",pages:1219,isLearned:!1,dateLearned:"",origin:{year:2020,title:"Professional JavaScript for Web Developers (4th) (eng)",author:"Matt Frisbie",pages:1177}},{id:69,year:2022,category:"code",theme:"javascript",title:"Многопоточный JavaScript",author:"Хантер",authorName:"Томас",pages:190,isLearned:!1,dateLearned:""},{id:70,year:2022,category:"code",theme:"javascript",title:"JavaScript и PHP. Content management system",author:"Янцев",authorName:"Валерий",pages:191,isLearned:!1,dateLearned:""},{id:71,year:2022,category:"code",theme:"javascript",title:"JavaScript. Визуальные редакторы",author:"Янцев",authorName:"Валерий",pages:168,isLearned:!1,dateLearned:""},{id:72,year:2022,category:"code",theme:"javascript",title:"JavaScript. Готовые программы",author:"Янцев",authorName:"Валерий",pages:201,isLearned:!1,dateLearned:""},{id:73,year:2022,category:"code",theme:"javascript",title:"JavaScript. Как писать программы",author:"Янцев",authorName:"Валерий",pages:199,isLearned:!1,dateLearned:""},{id:74,year:2022,category:"code",theme:"javascript",title:"JavaScript. Картинки, галереи, слайдеры",author:"Янцев",authorName:"Валерий",pages:252,isLearned:!1,dateLearned:""},{id:75,year:2022,category:"code",theme:"javascript",title:"JavaScript. Обработка событий на примерах",author:"Янцев",authorName:"Валерий",pages:175,isLearned:!1,dateLearned:""},{id:76,year:2023,category:"code",theme:"javascript",title:"JS часть 1 Язык JavaScript",author:"Кантор",authorName:"Илья",pages:778,isLearned:!1,dateLearned:"",oldEdition:{year:2021,pages:756,isLearned:!0,dateLearned:"2023-05-24 ср"},oldEdition2:{year:2019,pages:731}},{id:77,year:2023,category:"code",theme:"javascript",title:"JS часть 2 Браузер: документ, события, интерфейсы",author:"Кантор",authorName:"Илья",pages:320,isLearned:!1,dateLearned:"",oldEdition:{year:2021,pages:315},oldEdition2:{year:2019,pages:309}},{id:78,year:2023,category:"code",theme:"javascript",title:"JS часть 3 Дополнительные статьи",author:"Кантор",authorName:"Илья",pages:474,isLearned:!1,dateLearned:"",oldEdition:{year:2021,pages:474},oldEdition2:{year:2019,pages:478}},{id:79,year:2023,category:"code",theme:"javascript",title:"Новые возможности JavaScript",author:"Краудер",authorName:"Ти Джей",pages:634,isLearned:!1,dateLearned:""},{id:80,year:2023,category:"code",theme:"javascript",title:"Jаvascript для начинающих",author:"МакГрат",authorName:"Майк",pages:232,isLearned:!1,dateLearned:""},{id:81,year:2023,category:"code",theme:"javascript",title:"JavaScript с нуля до профи",author:"Свекис",authorName:"Лоренс",pages:480,isLearned:!1,dateLearned:""},{id:82,year:2023,category:"code",theme:"javascript",title:"JavaScript. Рецепты для разработчиков",author:"Скотт",authorName:"Адам",pages:528,isLearned:!1,dateLearned:""},{}],[{id:1,year:2019,category:"code",theme:"typescript",title:"Изучаем TypeScript 3 (3е)",author:"Розенталс",authorName:"Натан",pages:"625",isLearned:!1,dateLearned:""},{id:2,year:2020,category:"code",theme:"typescript",title:"Эффективный TypeScript 62 способа улучшить код",author:"Вандеркам",authorName:"Дэн",pages:"288",isLearned:!1,dateLearned:""},{id:3,year:2021,category:"code",theme:"typescript",title:"TypeScript Подробное Руководство",author:"beta",pages:"732",isLearned:!1,dateLearned:""},{id:3,year:2021,category:"code",theme:"typescript",title:"Программируй и типизируй",author:"Ришкуция",authorName:"Влад",pages:"352",isLearned:!1,dateLearned:""},{id:4,year:2021,category:"code",theme:"typescript",title:"Профессиональный TypeScript",author:"Черный",authorName:"Борис",pages:"352",isLearned:!1,dateLearned:""},{id:5,year:2021,category:"code",theme:"typescript",title:"TypeScript быстро",author:"Файн",authorName:"Яков",pages:"528",isLearned:!1,dateLearned:"",origin:{year:2019,title:"TypeScript quickly (eng)",author:"Yakov Fain"}},{}],[{id:1,year:2002,category:"code",theme:"c# .net",title:"Программирование для Microsoft Windows нa C#. Том 1",author:"Петцольд",authorName:"Чарльз",pages:"564",isLearned:!1,dateLearned:""},{id:2,year:2002,category:"code",theme:"c# .net",title:"Программирование для Microsoft Windows нa C#. Том 2",author:"Петцольд",authorName:"Чарльз",pages:"612",isLearned:!1,dateLearned:""},{id:3,year:2003,category:"code",theme:"c# .net",title:"Си Шарп. Создание приложений для Windows",author:"Лабор",authorName:"Владимир",pages:"385",isLearned:!1,dateLearned:""},{id:4,year:2003,category:"code",theme:"c# .net",title:"С# для профессионалов. Том 1",author:"Робинсон",authorName:"Симон",pages:"516",isLearned:!1,dateLearned:""},{id:5,year:2003,category:"code",theme:"c# .net",title:"С# для профессионалов. Том 2",author:"Робинсон",authorName:"Симон",pages:"548",isLearned:!1,dateLearned:""},{id:6,year:2003,category:"code",theme:"c# .net",title:"Язык С#. Самоучитель",author:"Фролов",pages:"560",isLearned:!1,dateLearned:""},{id:7,year:2003,category:"code",theme:"c# .net",title:"C# Учебный курс",author:"Шилдт",authorName:"Герберт",pages:"471",isLearned:!1,dateLearned:""},{id:8,year:2004,category:"code",theme:"c# .net",title:"Программирование в тональности С#",author:"Петцольд",authorName:"Чарльз",pages:"503",isLearned:!1,dateLearned:""},{id:9,year:2004,category:"code",theme:"c# .net",title:"Программирование на C#",author:"Пономарев",authorName:"Вячеслав",pages:"340",isLearned:!1,dateLearned:""},{id:10,year:2004,category:"code",theme:"c# .net",title:"Полный справочник по C#",author:"Шилдт",authorName:"Герберт",pages:"748",isLearned:!1,dateLearned:""},{id:11,year:2006,category:"code",theme:"c# .net",title:"Аутентификация в ASP.NET руководство по защите в NET. Том 2",author:"Керчер",authorName:"Джеф",pages:"401",isLearned:!1,dateLearned:""},{id:12,year:2006,category:"code",theme:"c# .net",title:"Программирование с использованием Windows Forms",author:"Петцольд",authorName:"Чарльз",pages:"433",isLearned:!1,dateLearned:""},{id:13,year:2007,category:"code",theme:"c# .net",title:"C#. Сборник рецептов",author:"Агуров",authorName:"Павел",pages:"429",isLearned:!1,dateLearned:""},{id:14,year:2008,category:"code",theme:"c# .net",title:"C#. Разработка компонентов",author:"Агуров",authorName:"Павел",pages:"480",isLearned:!1,dateLearned:""},{id:15,year:2008,category:"code",theme:"c# .net",title:"Программирование в Asp.net Ajax",author:"Венц",authorName:"Кристиан",pages:"559",isLearned:!1,dateLearned:""},{id:16,year:2008,category:"code",theme:"c# .net",title:"C# 2005 для чайников",author:"Девис",authorName:"Стефан",pages:"559",isLearned:!1,dateLearned:""},{id:17,year:2008,category:"code",theme:"c# .net",title:"C#. Советы программистам",author:"Климов",authorName:"Александр",pages:"536",isLearned:!1,dateLearned:""},{id:18,year:2008,category:"code",theme:"c# .net",title:"Применение DDD и шаблонов проектирования с примерами на C# и .net",author:"Нильссон",authorName:"Джимми",pages:"560",isLearned:!1,dateLearned:""},{id:19,year:2008,category:"code",theme:"c# .net",title:"Windows Presentation Foundation (WPF) - базовый курс",author:"Петцольд",authorName:"Чарльз",pages:"945",isLearned:!1,dateLearned:""},{id:20,year:2009,category:"code",theme:"c# .net",title:"C# 3.0 Справочник (3е)",author:"Албахари",authorName:"Джозеф",pages:"945",isLearned:!1,dateLearned:""},{id:21,year:2009,category:"code",theme:"c# .net",title:"LINQ. Карманный справочник",author:"Албахари",authorName:"Джозеф",pages:"241",isLearned:!1,dateLearned:""},{id:22,year:2009,category:"code",theme:"c# .net",title:"Работа с базами данных на языке C#",author:"Евсеева",authorName:"Ольга",pages:"171",isLearned:!1,dateLearned:""},{id:22,year:2009,category:"code",theme:"c# .net",title:"Visual C# в задачах и примерах",author:"Культин",authorName:"Никита",pages:"322",isLearned:!1,dateLearned:""},{id:23,year:2009,category:"code",theme:"c# .net",title:"C#. Программирование",author:"Павловская",authorName:"Татьяна",pages:"433",isLearned:!1,dateLearned:""},{id:23,year:2009,category:"code",theme:"c# .net",title:"Visual C#. Базовый курс",author:"Уотсон",authorName:"Карли",pages:"1211",isLearned:!1,dateLearned:""},{id:24,year:2009,category:"code",theme:"c# .net",title:"Библия C# (1е)",author:"Фленов",authorName:"Михаил",pages:"558",isLearned:!1,dateLearned:""},{id:25,year:2010,category:"code",theme:"c# .net",title:"C# для школьников",author:"Дрейер",authorName:"Мартин",pages:"128",isLearned:!1,dateLearned:""},{id:26,year:2010,category:"code",theme:"c# .net",title:"C# 4.0 и платформа .NET 4 для профессионалов",author:"Нейгел",authorName:"Кристиан",pages:"1440",isLearned:!1,dateLearned:""},{id:26,year:2010,category:"code",theme:"c# .net",title:"C# ускоренный курс",author:"Нэш",authorName:"Трей",pages:"588",isLearned:!1,dateLearned:""},{id:27,year:2010,category:"code",theme:"c# .net",title:"C# 3.0 полное руководство",author:"Шилдт",authorName:"Герберт",pages:"988",isLearned:!1,dateLearned:""},{id:28,year:2011,category:"code",theme:"c# .net",title:"С# 4.0 на примерах",author:"Ватсон",authorName:"Бен",pages:"594",isLearned:!1,dateLearned:""},{id:29,year:2011,category:"code",theme:"c# .net",title:"Microsoft asp.net4 с примерами на C# (4е)",author:"МакДональд",authorName:"Мэтью",pages:"1424",isLearned:!1,dateLearned:""},{id:30,year:2011,category:"code",theme:"c# .net",title:"2Принципы, паттерны и методики на C#",author:"Мартин",authorName:"Роберт",pages:"759",isLearned:!1,dateLearned:""},{id:31,year:2011,category:"code",theme:"c# .net",title:"WPF4 подробное руководство",author:"Натан",authorName:"Адам",pages:"889",isLearned:!1,dateLearned:""},{id:32,year:2011,category:"code",theme:"c# .net",title:"Expression Blend 4 с примерами на C# для профессионалов",author:"Троелсен",authorName:"Эндрю",pages:"384",isLearned:!1,dateLearned:""},{id:33,year:2011,category:"code",theme:"c# .net",title:"Библия C# (2е)",author:"Фленов",authorName:"Михаил",pages:"542",isLearned:!1,dateLearned:""},{id:34,year:2011,category:"code",theme:"c# .net",title:"LINQ язык интегрированных запросов в C#",author:"Фримен",authorName:"Адам",pages:"1010",isLearned:!1,dateLearned:""},{id:35,year:2011,category:"code",theme:"c# .net",title:"C# 4.0 полное руководство",author:"Шилдт",authorName:"Герберт",pages:"1056",isLearned:!1,dateLearned:""},{id:36,year:2012,category:"code",theme:"c# .net",title:"Разработка приложений на C#",author:"Осипов",authorName:"Никита",pages:"74",isLearned:!1,dateLearned:""},{id:37,year:2012,category:"code",theme:"c# .net",title:"Язык программирования C# (4е)",author:"Хейлсберг",authorName:"Андерс",pages:"784",isLearned:!1,dateLearned:""},{id:38,year:2013,category:"code",theme:"c# .net",title:"Асинхронное программирование в C# 5.0",author:"Дэвис",authorName:"Алекс",pages:"122",isLearned:!1,dateLearned:""},{id:39,year:2013,category:"code",theme:"c# .net",title:"CLR via C# Программирование на платформе Microsoft .NET Framework 4.5 на языке c# (4е)",author:"Рихтер",authorName:"Джеффри",pages:"896",isLearned:!1,dateLearned:""},{id:40,year:2013,category:"code",theme:"c# .net",title:"Тотальный тренинг по Си-шарпу",author:"Рубанцев",authorName:"Валерий",pages:"122",isLearned:!1,dateLearned:""},{id:41,year:2013,category:"code",theme:"c# .net",title:"Язык C# 5.0 и платформа .NET 4.5 (6е)",author:"Троелсен",authorName:"Эндрю",pages:"1311",isLearned:!1,dateLearned:""},{id:42,year:2014,category:"code",theme:"c# .net",title:"C# 5.0 Справочник (5е)",author:"Албахари",authorName:"Джозеф",pages:"1008",isLearned:!1,dateLearned:""},{id:42,year:2014,category:"code",theme:"c# .net",title:"Разработка алгоритмов с ООП на C#",author:"Калинин",authorName:"Александр",pages:"106",isLearned:!1,dateLearned:""},{id:43,year:2014,category:"code",theme:"c# .net",title:"Язык C#",author:"Котов",pages:"210",isLearned:!1,dateLearned:""},{id:44,year:2014,category:"code",theme:"c# .net",title:"Искусство автономного тестирования на C# (2е)",author:"Ошероув",authorName:"Рой",pages:"362",isLearned:!1,dateLearned:""},{id:45,year:2014,category:"code",theme:"c# .net",title:"C# для начинающих",author:"Пахомов",authorName:"Борис",pages:"432",isLearned:!1,dateLearned:""},{id:46,year:2014,category:"code",theme:"c# .net",title:"Язык С#. Решение задач",author:"Подбельский",authorName:"Вадим",pages:"294",isLearned:!1,dateLearned:""},{id:11,year:2014,category:"code",theme:"c# .net",title:"ООП на C#",author:"Романенко",authorName:"В.В.",pages:"475",isLearned:!1,dateLearned:""},{id:47,year:2014,category:"code",theme:"c# .net",title:"Внедрение зависимостей в .NET",author:"Симан",authorName:"Марк",pages:"464",isLearned:!1,dateLearned:""},{id:48,year:2014,category:"code",theme:"c# .net",title:"C# для профессионалов (3е)",author:"Скит",authorName:"Джон",pages:"602",isLearned:!1,dateLearned:""},{id:49,year:2014,category:"code",theme:"c# .net",title:"Изучаем C# (Head First) (3е)",author:"Стиллмен",authorName:"Эндрю",pages:"816",isLearned:!1,dateLearned:""},{id:50,year:2015,category:"code",theme:"c# .net",title:"Язык С#. Базовый курс",author:"Подбельский",authorName:"Вадим",pages:"406",isLearned:!1,dateLearned:""},{id:51,year:2015,category:"code",theme:"c# .net",title:"Паттерны проектирования на платформе NET",author:"Теплялков",authorName:"Сергей",pages:"320",isLearned:!1,dateLearned:""},{id:52,year:2015,category:"code",theme:"c# .net",title:"Язык C# 5.0 и платформа .NET 4.5 (6е)",author:"Троелсен",authorName:"Эндрю",pages:"1312",isLearned:!1,dateLearned:""},{id:53,year:2015,category:"code",theme:"c# .net",title:"Приемы ООП C#",author:"Шевчук",authorName:"Александр",pages:"288",isLearned:!1,dateLearned:""},{id:54,year:2016,category:"code",theme:"c# .net",title:"C# 6.0 Справочник (6е)",author:"Албахари",authorName:"Джозеф",pages:"1040",isLearned:!1,dateLearned:""},{id:54,year:2016,category:"code",theme:"c# .net",title:"Язык C# 6.0 и платформа .NET (7е)",author:"Троелсен",authorName:"Эндрю",pages:"1442",isLearned:!1,dateLearned:""},{id:55,year:2016,category:"code",theme:"c# .net",title:"Библия C# (3е)",author:"Фленов",authorName:"Михаил",pages:"546",isLearned:!1,dateLearned:""},{id:56,year:2017,category:"code",theme:"c# .net",title:"C# 7.0 Карманный справочник",author:"Албахари",authorName:"Джозеф",pages:"226",isLearned:!1,dateLearned:""},{id:57,year:2017,category:"code",theme:"c# .net",title:"Разработка обслуживаемых программ на языке C#",author:"Виссер",authorName:"Джуст",pages:"194",isLearned:!1,dateLearned:""},{id:58,year:2017,category:"code",theme:"c# .net",title:"Оптимизация приложений на платформе NET",author:"Голдштейн",authorName:"Саша",pages:"524",isLearned:!1,dateLearned:""},{id:59,year:2017,category:"code",theme:"c# .net",title:"Microsoft Visual C#. Подробное руководство (8е)",author:"Шарп",authorName:"Джон",pages:"848",isLearned:!1,dateLearned:""},{id:60,year:2017,category:"code",theme:"c# .net",title:"Программирование на C#",author:"Хайруллин",authorName:"Равиль",pages:"161",isLearned:!1,dateLearned:""},{id:61,year:2018,category:"code",theme:"c# .net",title:"C# 7 .NET Core. Кросплатформенная разработка (3е)",author:"Прайс",authorName:"Марк",pages:"640",isLearned:!1,dateLearned:""},{id:62,year:2018,category:"code",theme:"c# .net",title:"Язык программирования C# 7 и платформы .NET и .NET Core (8е)",author:"Троелсен",authorName:"Эндрю",pages:"1330",isLearned:!1,dateLearned:""},{id:63,year:2018,category:"code",theme:"c# .net",title:"C# Алгоритмы и структуры данных (3е)",author:"Тюкачев",authorName:"Николай",pages:"232",isLearned:!1,dateLearned:""},{id:63,year:2018,category:"code",theme:"c# .net",title:"C#. Основы программирования (3е)",author:"Тюкачев",authorName:"Николай",pages:"272",isLearned:!1,dateLearned:""},{id:64,year:2018,category:"code",theme:"c# .net",title:"ASP.NET Core Разработка приложений",author:"Чамберс",authorName:"Джеймс",pages:"464",isLearned:!1,dateLearned:""},{id:65,year:2019,category:"code",theme:"c# .net",title:"C# на примерах (4е)",author:"Евдокимов",authorName:"Петр",pages:"322",isLearned:!1,dateLearned:""},{id:66,year:2019,category:"code",theme:"c# .net",title:"C# для чайников",author:"Мюллер",authorName:"Пол",pages:"609",isLearned:!1,dateLearned:""},{id:67,year:2019,category:"code",theme:"c# .net",title:"Конкурентность и параллелизм на платформе .NET",author:"Террелл",authorName:"Рикардо",pages:"624",isLearned:!1,dateLearned:""},{id:68,year:2019,category:"code",theme:"c# .net",title:"Высокопроизводительный код на платформе .NET (2е)",author:"Уотсон",authorName:"Бен",pages:"416",isLearned:!1,dateLearned:""},{id:69,year:2019,category:"code",theme:"c# .net",title:"Библия C# (4е)",author:"Фленов",authorName:"Михаил",pages:"511",isLearned:!1,dateLearned:""},{id:70,year:2019,category:"code",theme:"c# .net",title:"ASP.NET Core MVC2 с примерами на C# (7е)",author:"Фримен",authorName:"Адам",pages:"1010",isLearned:!1,dateLearned:""},{id:70,year:2019,category:"code",theme:"c# .net",title:"Entity Framework Core 2 для ASP.NET Core MVC для профессионалов",author:"Фримен",authorName:"Адам",pages:"626",isLearned:!1,dateLearned:""},{id:71,year:2020,category:"code",theme:"c# .net",title:"C# 8.0. Карманный справочник",author:"Албахари",authorName:"Джозеф",pages:"241",isLearned:!1,dateLearned:""},{id:72,year:2020,category:"code",theme:"c# .net",title:"Основы ООП на базе языка С# (2е)",author:"Залогова",authorName:"Любовь",pages:"193",isLearned:!1,dateLearned:""},{id:73,year:2020,category:"code",theme:"c# .net",title:"Конкурентность в C# (2е)",author:"Клири",authorName:"Стивен",pages:"304",isLearned:!1,dateLearned:""},{id:74,year:2020,category:"code",theme:"c# .net",title:"Управление памятью в .NET",author:"Кокоса",authorName:"Конрад",pages:"801",isLearned:!1,dateLearned:""},{id:75,year:2020,category:"code",theme:"c# .net",title:"Структуры данных в C#",author:"Симонова",authorName:"Елена",pages:"164",isLearned:!1,dateLearned:""},{id:75,year:2020,category:"code",theme:"c# .net",title:"Криптография и безопасность в технологии .NET",author:"Торстейнсон",authorName:"Питер",pages:"482",isLearned:!1,dateLearned:""},{id:76,year:2020,category:"code",theme:"c# .net",title:"C# Программирование 2D и 3D (4е)",author:"Тюкачев",authorName:"Николай",pages:"318",isLearned:!1,dateLearned:""},{id:77,year:2020,category:"code",theme:"c# .net",title:"Разработка мобильных приложений на C# для iOS и Android",author:"Черников",authorName:"Вячеслав",pages:"189",isLearned:!1,dateLearned:""},{id:78,year:2021,category:"code",theme:"c# .net",title:"C# 9.0. Справочник. Полное описание языка",author:"Албахари",authorName:"Албахари",pages:"1058",isLearned:!1,dateLearned:""},{id:79,year:2021,category:"code",theme:"c# .net",title:"Паттерны проектирования для C# и платформы .NET Core",author:"Арораа",authorName:"Гаурав",pages:"352",isLearned:!1,dateLearned:""},{id:80,year:2021,category:"code",theme:"c# .net",title:"Программируем на C# 8.0",author:"Гриффитс",authorName:"Иэн",pages:"944",isLearned:!1,dateLearned:""},{id:81,year:2021,category:"code",theme:"c# .net",title:"Основы ООП на базе языка С# (2е)",author:"Залогова",authorName:"Любовь",pages:"192",isLearned:!1,dateLearned:""},{id:81,year:2021,category:"code",theme:"c# .net",title:"ASP.Net Core в действии",author:"Лок",authorName:"Эндрю",pages:"908",isLearned:!1,dateLearned:""},{id:81,year:2021,category:"code",theme:"c# .net",title:"C# 8 и .NET Core. Разработка и оптимизация (4е)",author:"Прайс",authorName:"Марк",pages:"816",isLearned:!1,dateLearned:""},{id:82,year:2021,category:"code",theme:"c# .net",title:"C#. Алгоритмы и структуры данных",author:"Тюкачев",authorName:"Николай",pages:"231",isLearned:!1,dateLearned:""},{id:84,year:2022,category:"code",theme:"c# .net",title:"Программирование на C# для начинающих. Особенности языка",author:"Васильев",authorName:"Алексей",pages:"529",isLearned:!1,dateLearned:""},{id:85,year:2022,category:"code",theme:"c# .net",title:"Программирование. Базовый курс С#",author:"Подбельский",authorName:"Вадим",pages:"370",isLearned:!1,dateLearned:""},{id:86,year:2022,category:"code",theme:"c# .net",title:"C# 9 и .NET 5. Разработка и оптимизация (5е)",author:"Прайс",authorName:"Марк",pages:"899",isLearned:!1,dateLearned:""},{id:87,year:2022,category:"code",theme:"c# .net",title:"Изучаем C# (Head First) (4е)",author:"Стиллмен",authorName:"Эндрю",pages:"769",isLearned:!1,dateLearned:""},{id:88,year:2022,category:"code",theme:"c# .net",title:"Параллельное программирование на С# и .NET Core",author:"Танвар",authorName:"Шакти",pages:"274",isLearned:!1,dateLearned:""},{id:89,year:2022,category:"code",theme:"c# .net",title:"Язык C# 9 и платформа .NET 5 Том 1 (10е)",author:"Троелсен",authorName:"Эндрю",pages:"772",isLearned:!1,dateLearned:""},{id:90,year:2022,category:"code",theme:"c# .net",title:"Язык C# 9 и платформа .NET 5 Том 2 (10е)",author:"Троелсен",authorName:"Эндрю",pages:"634",isLearned:!1,dateLearned:""},{id:91,year:2022,category:"code",theme:"c# .net",title:"Изучаем C# через разработку игр на Unity (5е)",author:"Ферроне",authorName:"Харрисон",pages:"401",isLearned:!1,dateLearned:""},{id:92,year:2022,category:"code",theme:"c# .net",title:"Библия C# (5е)",author:"Фленов",authorName:"Михаил",pages:"463",isLearned:!1,dateLearned:""},{id:93,year:2023,category:"code",theme:"c# .net",title:"Программирование на C# для начинающих. Основные сведения",author:"Васильев",authorName:"Алексей",pages:"586",isLearned:!1,dateLearned:""},{id:93,year:2023,category:"code",theme:"c# .net",title:"Безопасность ASP.NET Core",author:"Венц",authorName:"Кристиан",pages:"388",isLearned:!1,dateLearned:""},{id:94,year:2023,category:"code",theme:"c# .net",title:"Справочник C#. Кратко, быстро, под рукой",author:"Евдокимов",pages:"338",isLearned:!1,dateLearned:""},{id:95,year:2023,category:"code",theme:"c# .net",title:"C# 10 и .NET 6. Современная кроссплатформенная разработка (6е)",author:"Прайс",authorName:"Марк",pages:"1019",isLearned:!1,dateLearned:""},{}],[{id:1,year:1985,category:"code",theme:"c c++",title:"Язык программирования Си. Задачи по языку Си",author:"Керниган",authorName:"Бриан",pages:"281",isLearned:!1,dateLearned:""},{id:1,year:1994,category:"code",theme:"c c++",title:"Программируем на Си",author:"Джонс",authorName:"Робин",pages:"236",isLearned:!1,dateLearned:""},{id:2,year:1997,category:"code",theme:"c c++",title:"Программирование для Windows 95. Том 1",author:"Петцольд",authorName:"Чарльз",pages:"495",isLearned:!1,dateLearned:""},{id:3,year:1997,category:"code",theme:"c c++",title:"Программирование для Windows 95. Том 2",author:"Петцольд",authorName:"Чарльз",pages:"242",isLearned:!1,dateLearned:""},{id:4,year:1998,category:"code",theme:"c c++",title:"Объектно ориентированный анализ и проектирование с примерами приложений на C++ (2е)",author:"Буч",authorName:"Гради",pages:"359",isLearned:!1,dateLearned:""},{id:5,year:1999,category:"code",theme:"c c++",title:"Программирование на C++",author:"Аверкин",pages:"263",isLearned:!1,dateLearned:""},{id:6,year:1999,category:"code",theme:"c c++",title:"Как программировать на C++",author:"Дейтел",authorName:"Харви",pages:"1026",isLearned:!1,dateLearned:""},{id:7,year:2e3,category:"code",theme:"c c++",title:"Как программировать на C",author:"Дейтел",authorName:"Харви",pages:"1011",isLearned:!1,dateLearned:""},{id:8,year:2e3,category:"code",theme:"c c++",title:"Наиболее эффективное использование C++",author:"Мейерс",authorName:"Скотт",pages:"300",isLearned:!1,dateLearned:""},{id:9,year:2001,category:"code",theme:"c c++",title:"Самоучитель программирования на языке C++",author:"Бобровский",pages:"273",isLearned:!1,dateLearned:""},{id:10,year:2001,category:"code",theme:"c c++",title:"Язык программирования C++. Учебный курс",author:"Глушаков",authorName:"Сергей",pages:"505",isLearned:!1,dateLearned:""},{id:11,year:2001,category:"code",theme:"c c++",title:"Веревка достаточной длины, чтобы выстрелить себе в ногу. Правила программирования на C и C++",author:"Голуб",authorName:"Ален",pages:"241",isLearned:!1,dateLearned:""},{id:12,year:2001,category:"code",theme:"c c++",title:"Изучаем Си",author:"Крупник",authorName:"Александр",pages:"233",isLearned:!1,dateLearned:""},{id:13,year:2001,category:"code",theme:"c c++",title:"Фундаментальные алгоритмы на C++",author:"Седжвик",authorName:"Роберт",pages:"687",isLearned:!1,dateLearned:""},{id:14,year:2001,category:"code",theme:"c c++",title:"C, C++. Архив программ. Код с комментариями",author:"Фридман",authorName:"Арт",pages:"638",isLearned:!1,dateLearned:""},{id:15,year:2001,category:"code",theme:"c c++",title:"Искусство программирования на С",author:"Хэзфилд",authorName:"Ричард",pages:"728",isLearned:!1,dateLearned:""},{id:16,year:2002,category:"code",theme:"c c++",title:"Современное проектирование на С++",author:"Александреску",authorName:"Андрей",pages:"326",isLearned:!1,dateLearned:""},{id:17,year:2002,category:"code",theme:"c c++",title:"Основы программирования на языке C++",author:"Богуславский",pages:"440",isLearned:!1,dateLearned:""},{id:18,year:2002,category:"code",theme:"c c++",title:"QT4.7 практическое программирование на C++",author:"Боровский",authorName:"Андрей",pages:"492",isLearned:!1,dateLearned:""},{id:19,year:2002,category:"code",theme:"c c++",title:"Эффективное программирование на С++",author:"Кениг",authorName:"Эндрю",pages:"385",isLearned:!1,dateLearned:""},{id:20,year:2002,category:"code",theme:"c c++",title:"Моя первая программа на C++",author:"Нейбауэр",pages:"267",isLearned:!1,dateLearned:""},{id:21,year:2003,category:"code",theme:"c c++",title:"C++ для чайников",author:"Дэвис",authorName:"Стефан",pages:"337",isLearned:!1,dateLearned:""},{id:22,year:2003,category:"code",theme:"c c++",title:"Язык Си (3е)",author:"Керниган",authorName:"Брайан",pages:"355",isLearned:!1,dateLearned:""},{id:23,year:2003,category:"code",theme:"c c++",title:"C++ прогриммирование",author:"Павловская",authorName:"Татьяна",pages:"462",isLearned:!1,dateLearned:""},{id:24,year:2003,category:"code",theme:"c c++",title:"Язык Си++ (5е)",author:"Подбельский",authorName:"Вадим",pages:"562",isLearned:!1,dateLearned:""},{id:25,year:2003,category:"code",theme:"c c++",title:"Самоучитель C++ (3е)",author:"Шилдт",authorName:"Герберт",pages:"687",isLearned:!1,dateLearned:""},{id:26,year:2004,category:"code",theme:"c c++",title:"Язык Си",author:"Керниган",authorName:"Деннис",pages:"229",isLearned:!1,dateLearned:""},{id:27,year:2004,category:"code",theme:"c c++",title:"Структуры и алгоритмы обработки данных на C++",author:"Кубенский",pages:"465",isLearned:!1,dateLearned:""},{id:28,year:2004,category:"code",theme:"c c++",title:"Самоучитель C++ Builder",author:"Культин",authorName:"Никита",pages:"320",isLearned:!1,dateLearned:""},{id:29,year:2004,category:"code",theme:"c c++",title:"C++. Экспресс-курс",author:"Лаптев",authorName:"Валерий",pages:"512",isLearned:!1,dateLearned:""},{id:30,year:2004,category:"code",theme:"c c++",title:"ООП в C++ (4е)",author:"Лафоре",pages:"924",isLearned:!1,dateLearned:""},{id:31,year:2004,category:"code",theme:"c c++",title:"STL - стандартная библиотека шаблонов С++",author:"Плаугер",pages:"657",isLearned:!1,dateLearned:""},{id:32,year:2004,category:"code",theme:"c c++",title:"Программирование на C++ глазами хакера",author:"Фленов",authorName:"Михаил",pages:"297",isLearned:!1,dateLearned:""},{id:33,year:2004,category:"code",theme:"c c++",title:"Философия С++. Том 1. Введение в стандартный С++ (2е)",author:"Эккель",authorName:"Брюс",pages:"577",isLearned:!1,dateLearned:""},{id:34,year:2004,category:"code",theme:"c c++",title:"Философия С++. Том 2. Практическое программирование",author:"Эккель",authorName:"Брюс",pages:"609",isLearned:!1,dateLearned:""},{id:35,year:2005,category:"code",theme:"c c++",title:"Новые сложные задачи на C++",author:"Саттер",authorName:"Герб",pages:"271",isLearned:!1,dateLearned:""},{id:36,year:2005,category:"code",theme:"c c++",title:"C++",author:"Элджер",pages:"259",isLearned:!1,dateLearned:""},{id:37,year:2006,category:"code",theme:"c c++",title:"Си для чайников (2е)",author:"Гукин",authorName:"Дэн",pages:"353",isLearned:!1,dateLearned:""},{id:38,year:2006,category:"code",theme:"c c++",title:"Эффективное использование C++",author:"Мейерс",authorName:"Скотт",pages:"235",isLearned:!1,dateLearned:""},{id:39,year:2006,category:"code",theme:"c c++",title:"C/С++ для студента",author:"Побегайло",pages:"525",isLearned:!1,dateLearned:""},{id:40,year:2006,category:"code",theme:"c c++",title:"Языки программирования C и C++",author:"Сабуров",authorName:"Сергей",pages:"647",isLearned:!1,dateLearned:""},{id:41,year:2006,category:"code",theme:"c c++",title:"С++ библиотека программиста",author:"Сик",authorName:"Джереми",pages:"301",isLearned:!1,dateLearned:""},{id:42,year:2006,category:"code",theme:"c c++",title:"C++ для профессионалов",author:"Солтер",authorName:"Николас",pages:"907",isLearned:!1,dateLearned:""},{id:43,year:2006,category:"code",theme:"c c++",title:"Дизайн и эволюция C++",author:"Страуструп",authorName:"Бьярне",pages:"445",isLearned:!1,dateLearned:""},{id:44,year:2006,category:"code",theme:"c c++",title:"Язык программирования C++ (2е)",author:"Страуструп",authorName:"Бьярне",pages:"369",isLearned:!1,dateLearned:""},{id:45,year:2006,category:"code",theme:"c c++",title:"Язык программирования C++ (3е)",author:"Страуструп",authorName:"Бьярне",pages:"1054",isLearned:!1,dateLearned:""},{id:46,year:2006,category:"code",theme:"c c++",title:"Искусство программирования игр на C++",author:"Фленов",authorName:"Михаил",pages:"258",isLearned:!1,dateLearned:""},{id:47,year:2006,category:"code",theme:"c c++",title:"Проrраммирование на языкe С для АVR и PIC микроконтроллеров",author:"Шпак",pages:"258",isLearned:!1,dateLearned:""},{id:48,year:2007,category:"code",theme:"c c++",title:"C++ Мастер-класс в задачах и примерах",author:"Кузнецов",authorName:"Максим",pages:"479",isLearned:!1,dateLearned:""},{id:49,year:2007,category:"code",theme:"c c++",title:"Освой самостоятельно c++ за 24 часа (4е)",author:"Либерти",authorName:"Джесс",pages:"446",isLearned:!1,dateLearned:""},{id:50,year:2007,category:"code",theme:"c c++",title:"Основы программирования на языке C++",author:"Наместников",pages:"136",isLearned:!1,dateLearned:""},{id:51,year:2008,category:"code",theme:"c c++",title:"Современное проектирование на C++",author:"Александреску",authorName:"Андрей",pages:"336",isLearned:!1,dateLearned:""},{id:52,year:2008,category:"code",theme:"c c++",title:"Объектно ориентированный анализ и проектирование с примерами приложений (3е)",author:"Буч",authorName:"Гради",pages:"721",isLearned:!1,dateLearned:""},{id:53,year:2008,category:"code",theme:"c c++",title:"QT4 на примерах",author:"Земсков",authorName:"Юрий",pages:"609",isLearned:!1,dateLearned:""},{id:54,year:2008,category:"code",theme:"c c++",title:"Новые сложные задачи на C++",author:"Саттер",authorName:"Герб",pages:"272",isLearned:!1,dateLearned:""},{id:55,year:2008,category:"code",theme:"c c++",title:"Решение сложных задач на C++",author:"Саттер",authorName:"Герб",pages:"400",isLearned:!1,dateLearned:""},{id:56,year:2008,category:"code",theme:"c c++",title:"Стандарты программирования на C++",author:"Саттер",authorName:"Герб",pages:"224",isLearned:!1,dateLearned:""},{id:57,year:2009,category:"code",theme:"c c++",title:"WIN32 API Программирование",author:"Безруков",authorName:"Вячеслав",pages:"96",isLearned:!1,dateLearned:""},{id:58,year:2009,category:"code",theme:"c c++",title:"Программирование на C++ глазами хакера (2е)",author:"Фленов",authorName:"Михаил",pages:"351",isLearned:!1,dateLearned:""},{id:59,year:2010,category:"code",theme:"c c++",title:"Технология программирования на C++",author:"Литвиненко",pages:"281",isLearned:!1,dateLearned:""},{id:60,year:2010,category:"code",theme:"c c++",title:"Особенности ООП на C++ (2е)",author:"Медведев",authorName:"Владислав",pages:"444",isLearned:!1,dateLearned:""},{id:61,year:2010,category:"code",theme:"c c++",title:"QT4.5 профессиональное программирование на C++",author:"Шлее",authorName:"Макс",pages:"883",isLearned:!1,dateLearned:""},{id:62,year:2011,category:"code",theme:"c c++",title:"QT профессиональное программирование на C++",author:"Саммерфилд",authorName:"Марк",pages:"552",isLearned:!1,dateLearned:""},{id:63,year:2011,category:"code",theme:"c c++",title:"Программирование. Принципы и практика использования C++",author:"Страуструп",authorName:"Бьярне",pages:"1239",isLearned:!1,dateLearned:""},{id:64,year:2011,category:"code",theme:"c c++",title:"Язык программирования C++",author:"Страуструп",authorName:"Бьярне",pages:"1136",isLearned:!1,dateLearned:""},{id:65,year:2012,category:"code",theme:"c c++",title:"C++ священные знания",author:"Дьюхерст",authorName:"Стивен",pages:"232",isLearned:!1,dateLearned:""},{id:66,year:2012,category:"code",theme:"c c++",title:"Технология программирования C++",author:"Липачев",authorName:"Евгений",pages:"142",isLearned:!1,dateLearned:""},{id:67,year:2012,category:"code",theme:"c c++",title:"Язык программирования C++ (6е)",author:"Прата",authorName:"Стивен",pages:"1244",isLearned:!1,dateLearned:""},{id:68,year:2012,category:"code",theme:"c c++",title:"Параллельное программирование на C++ в действии",author:"Уильямс",authorName:"Энтони",pages:"674",isLearned:!1,dateLearned:""},{id:69,year:2012,category:"code",theme:"c c++",title:"QT4.8 профессиональное программирование на C++",author:"Шлее",authorName:"Макс",pages:"912",isLearned:!1,dateLearned:""},{id:70,year:2013,category:"code",theme:"c c++",title:"Теория и практика языков программирования",author:"Орлов",authorName:"Сергей",pages:"688",isLearned:!1,dateLearned:""},{id:71,year:2013,category:"code",theme:"c c++",title:"Освой самостоятельно C++ за 21 день (7е)",author:"Рао",authorName:"Сиддхартха",pages:"651",isLearned:!1,dateLearned:""},{id:72,year:2014,category:"code",theme:"c c++",title:"Стандартная библиотека c++ (2е)",author:"Джосаттис",authorName:"Николай",pages:"1140",isLearned:!1,dateLearned:""},{id:73,year:2014,category:"code",theme:"c c++",title:"C++ для начинающих",author:"Липпман",authorName:"Стенли",pages:"1194",isLearned:!1,dateLearned:""},{id:74,year:2014,category:"code",theme:"c c++",title:"Язык программирования C++. Базовый курс (5е)",author:"Липпман",authorName:"Стенли",pages:"1124",isLearned:!1,dateLearned:""},{id:75,year:2015,category:"code",theme:"c c++",title:"Программирование на языке C++",author:"Алексеев",authorName:"Евгений",pages:"912",isLearned:!1,dateLearned:""},{id:76,year:2015,category:"code",theme:"c c++",title:"Язык Си в 21 веке",author:"Клеменс",authorName:"Бен",pages:"378",isLearned:!1,dateLearned:""},{id:77,year:2015,category:"code",theme:"c c++",title:"Основы программирования. С++",author:"Кувшинов",authorName:"Дмитрий",pages:"105",isLearned:!1,dateLearned:""},{id:78,year:2015,category:"code",theme:"c c++",title:"Эффективный и современный С++",author:"Мейерс",authorName:"Скотт",pages:"306",isLearned:!1,dateLearned:""},{id:79,year:2015,category:"code",theme:"c c++",title:"Программирование на Си для начинающих (3е)",author:"Перри",authorName:"Грег",pages:"369",isLearned:!1,dateLearned:""},{id:80,year:2016,category:"code",theme:"c c++",title:"ООП на С++",author:"Васильев",authorName:"Алексей",pages:"545",isLearned:!1,dateLearned:""},{id:81,year:2016,category:"code",theme:"c c++",title:"Самоучитель C++ с примерами и задачами (4е)",author:"Васильев",authorName:"Алексей",pages:"481",isLearned:!1,dateLearned:""},{id:82,year:2016,category:"code",theme:"c c++",title:"Изучаем C++ через программирование игр",author:"Доусон",authorName:"Майкл",pages:"353",isLearned:!1,dateLearned:""},{id:83,year:2016,category:"code",theme:"c c++",title:"Управление электронного устройства на C++",author:"Катупития",authorName:"Янта",pages:"443",isLearned:!1,dateLearned:""},{id:84,year:2016,category:"code",theme:"c c++",title:"Программирование на Си для начинающих (4е)",author:"МакГрат",authorName:"Майк",pages:"193",isLearned:!1,dateLearned:""},{id:85,year:2016,category:"code",theme:"c c++",title:"Эффективный и современный C++",author:"Мейерс",authorName:"Скотт",pages:"306",isLearned:!1,dateLearned:""},{id:86,year:2016,category:"code",theme:"c c++",title:"Решение задач на языке С++",author:"Рубанцев",authorName:"Валерий",pages:"202",isLearned:!1,dateLearned:""},{id:87,year:2016,category:"code",theme:"c c++",title:"Программирование. Принципы и практика C++",author:"Страуструп",authorName:"Бьярне",pages:"1329",isLearned:!1,dateLearned:""},{id:88,year:2016,category:"code",theme:"c c++",title:"Изучаем C++ создавая игры в UE4",author:"Шериф",authorName:"Уилльям",pages:"297",isLearned:!1,dateLearned:""},{id:89,year:2017,category:"code",theme:"c c++",title:"Решение задач на c и c++",author:"Быков",authorName:"Александр",pages:"246",isLearned:!1,dateLearned:""},{id:90,year:2017,category:"code",theme:"c c++",title:"Программирование на C++",author:"Васильев",authorName:"Алексей",pages:"369",isLearned:!1,dateLearned:""},{id:91,year:2017,category:"code",theme:"c c++",title:"Оптимизация программ на C++",author:"Гантерот",authorName:"Курт",pages:"402",isLearned:!1,dateLearned:""},{id:92,year:2017,category:"code",theme:"c c++",title:"Откройте для себя язык Си",author:"Джонс",authorName:"Робин",pages:"180",isLearned:!1,dateLearned:""},{id:93,year:2017,category:"code",theme:"c c++",title:"100 примеров на Си",author:"Кольцов",pages:"257",isLearned:!1,dateLearned:""},{id:94,year:2017,category:"code",theme:"c c++",title:"Алгоритмы и программы. Язык C++ (2е)",author:"Конова",authorName:"Елена",pages:"386",isLearned:!1,dateLearned:""},{id:95,year:2017,category:"code",theme:"c c++",title:"Метапрограммирование шаблонов C++",author:"Краснов",authorName:"Михаил",pages:"85",isLearned:!1,dateLearned:""},{id:96,year:2017,category:"code",theme:"c c++",title:"Программирование C++",author:"Надейкина",authorName:"Людмила",pages:"85",isLearned:!1,dateLearned:""},{id:97,year:2017,category:"code",theme:"c c++",title:"Основы программирования на языке C",author:"Солдатенко",authorName:"Илья",pages:"159",isLearned:!1,dateLearned:""},{id:98,year:2017,category:"code",theme:"c c++",title:"C++ базовый курс (3е)",author:"Шилдт",authorName:"Герберт",pages:"845",isLearned:!1,dateLearned:""},{id:99,year:2018,category:"code",theme:"c c++",title:"Шаблоны C++ (2е)",author:"Вандевурд",authorName:"Дэвид",pages:"849",isLearned:!1,dateLearned:""},{id:100,year:2018,category:"code",theme:"c c++",title:"Олимпиадное программирование",author:"Лааксонен",authorName:"Антти",pages:"301",isLearned:!1,dateLearned:""},{id:101,year:2018,category:"code",theme:"c c++",title:"Освой самостоятельно C++ по одному часу в день (8е)",author:"Рао",authorName:"Сиддхартха",pages:"754",isLearned:!1,dateLearned:""},{id:102,year:2018,category:"code",theme:"c c++",title:"Введение в язык C++ (4е)",author:"Столяров",pages:"139",isLearned:!1,dateLearned:""},{id:103,year:2018,category:"code",theme:"c c++",title:"Qt5.10. Профессиональное программирование на C++",author:"Шлее",authorName:"Макс",pages:"1074",isLearned:!1,dateLearned:""},{id:104,year:2019,category:"code",theme:"c c++",title:"ООП на C++",author:"Баранова",authorName:"Ирина",pages:"289",isLearned:!1,dateLearned:""},{id:105,year:2019,category:"code",theme:"c c++",title:"Си на примерах",author:"Кольцов",pages:"290",isLearned:!1,dateLearned:""},{id:106,year:2019,category:"code",theme:"c c++",title:"C и C++ в задачах и примерах",author:"Культин",authorName:"Никита",pages:"273",isLearned:!1,dateLearned:""},{id:107,year:2019,category:"code",theme:"c c++",title:"C++ на примерах",author:"Орленко",authorName:"Павел",pages:"290",isLearned:!1,dateLearned:""},{id:108,year:2019,category:"code",theme:"c c++",title:"Реактивное программирование на С++",author:"Пай",authorName:"Прасид",pages:"324",isLearned:!1,dateLearned:""},{id:109,year:2019,category:"code",theme:"c c++",title:"Язык программирования C++",author:"Страуструп",authorName:"Бьярне",pages:"1120",isLearned:!1,dateLearned:""},{id:110,year:2019,category:"code",theme:"c c++",title:"Си для встраиваемых систем",author:"Тарасов",pages:"272",isLearned:!1,dateLearned:""},{id:111,year:2020,category:"code",theme:"c c++",title:"Основы параллельного программирования (4е)",author:"Богачев",authorName:"Кирилл",pages:"345",isLearned:!1,dateLearned:""},{id:112,year:2020,category:"code",theme:"c c++",title:"Программирование встроенных систем на C++17",author:"Пош",authorName:"Майа",pages:"396",isLearned:!1,dateLearned:""},{id:113,year:2020,category:"code",theme:"c c++",title:"Функциональное программирование на C++",author:"Чукич",authorName:"Иван",pages:"361",isLearned:!1,dateLearned:""},{id:114,year:2021,category:"code",theme:"c c++",title:"Экстремальный Си",author:"Амини",authorName:"Камран",pages:"752",isLearned:!1,dateLearned:""},{id:115,year:2021,category:"code",theme:"c c++",title:"Системное программирование C и C++ (2е)",author:"Жулабова",authorName:"Фатима",pages:"206",isLearned:!1,dateLearned:""},{id:116,year:2021,category:"code",theme:"c c++",title:"Язык С++. Практикум",author:"Кувшинов",authorName:"Дмитрий",pages:"176",isLearned:!1,dateLearned:""},{id:117,year:2021,category:"code",theme:"c c++",title:"Язык С++. Учебное пособие",author:"Кувшинов",authorName:"Дмитрий",pages:"496",isLearned:!1,dateLearned:""},{id:118,year:2021,category:"code",theme:"c c++",title:"Язык C++ (3е)",author:"Рейзлин",authorName:"Валерий",pages:"208",isLearned:!1,dateLearned:""},{id:119,year:2021,category:"code",theme:"c c++",title:"Параллельные и высокопроизводительные вычисления",author:"Роби",authorName:"Роберт",pages:"802",isLearned:!1,dateLearned:""},{id:120,year:2022,category:"code",theme:"c c++",title:"WebAssembly в действии",author:"Галлан",authorName:"Жерар",pages:"496",isLearned:!1,dateLearned:""},{id:121,year:2022,category:"code",theme:"c c++",title:"Технологии и методы программирования на Си и Python",author:"Гниденко",authorName:"Ирина",pages:"236",isLearned:!1,dateLearned:""},{id:122,year:2022,category:"code",theme:"c c++",title:"Параллельное программирование на современном языке C++",author:"Гримм",authorName:"Райнер",pages:"618",isLearned:!1,dateLearned:""},{id:123,year:2022,category:"code",theme:"c c++",title:"Алгоритмы и программы. Язык С++",author:"Конова",authorName:"Елена",pages:"384",isLearned:!1,dateLearned:""},{id:124,year:2022,category:"code",theme:"c c++",title:"Программирование на языке С++",author:"Огнева",authorName:"Марина",pages:"336",isLearned:!1,dateLearned:""},{id:125,year:2022,category:"code",theme:"c c++",title:"Qt6 Разработка оконных приложений на C++",author:"Прохоренок",authorName:"Николай",pages:"506",isLearned:!1,dateLearned:""},{id:126,year:2022,category:"code",theme:"c c++",title:"Программирование на языке Си",author:"Рацеев",authorName:"Сергей",pages:"330",isLearned:!1,dateLearned:""},{id:127,year:2022,category:"code",theme:"c c++",title:"Эффективный C. Профессиональное программирование.",author:"Сикорд",authorName:"Роберт",pages:"304",isLearned:!1,dateLearned:""},{id:128,year:2023,category:"code",theme:"c c++",title:"С++ 20 в деталях",author:"Гримм",authorName:"Райнер",pages:"519",isLearned:!1,dateLearned:""},{id:129,year:2023,category:"code",theme:"c c++",title:"Красивый C++. 30 главных правил чистого, безопасного и быстрого кода",author:"Дэвидсон",authorName:"Гай",pages:"368",isLearned:!1,dateLearned:""},{id:130,year:2023,category:"code",theme:"c c++",title:"Программирование на языке высокого уровня С++",author:"Немцова",pages:"512",isLearned:!1,dateLearned:""},{id:131,year:2023,category:"code",theme:"c c++",title:"Язык Си. Кратко и ясно",author:"Парфенов",authorName:"Д.В.",pages:"320",isLearned:!1,dateLearned:""},{id:132,year:2023,category:"code",theme:"c c++",title:"Язык С. Мастерство программирования",author:"Прешерн",authorName:"Кристофер",pages:"302",isLearned:!1,dateLearned:""},{id:133,year:2023,category:"code",theme:"c c++",title:"Экскурсия по C++ (3е)",author:"Страуструп",authorName:"Бьярне",pages:"314",isLearned:!1,dateLearned:""},{id:134,year:2024,category:"code",theme:"c c++",title:"C++ How to Program (11th)",author:"Deitel",authorName:"Paul",pages:"1364",isLearned:!1,dateLearned:""},{}],[{id:1,year:2001,category:"code",theme:"php",title:"Основы программирования на PHP",author:"Ульман",authorName:"Ларри",pages:"286",isLearned:!1,dateLearned:""},{id:2,year:2003,category:"code",theme:"php",title:"PHP Профессиональное программирование (2е)",author:"Аргерих",authorName:"Луис",pages:"1042",isLearned:!1,dateLearned:""},{id:3,year:2003,category:"code",theme:"php",title:"PHP настольная книга программиста",author:"Мазуркевич",authorName:"Александр",pages:"480",isLearned:!1,dateLearned:""},{id:4,year:2003,category:"code",theme:"php",title:"Самоучитель PHP4",author:"Котеров",authorName:"Дмитрий",pages:"572",isLearned:!1,dateLearned:""},{id:5,year:2003,category:"code",theme:"php",title:"Разработка Web-приложений на РНР и MySQL (2е)",author:"Томсон",authorName:"Лаура",pages:"672",isLearned:!1,dateLearned:""},{id:6,year:2004,category:"code",theme:"php",title:"PHP. Обучение на примерах",author:"Кухарчик",authorName:"Андрей",pages:"241",isLearned:!1,dateLearned:""},{id:7,year:2004,category:"code",theme:"php",title:"РНР. Полезные приемы",author:"Орлов",authorName:"Антон",pages:"224",isLearned:!1,dateLearned:""},{id:8,year:2004,category:"code",theme:"php",title:"Самоучитель PHP 5",author:"Колисниченко",authorName:"Денис",pages:"579",isLearned:!1,dateLearned:""},{id:9,year:2005,category:"code",theme:"php",title:"PHP 5. Экспресс курс",author:"Будилов",authorName:"Вадим",pages:"237",isLearned:!1,dateLearned:""},{id:10,year:2005,category:"code",theme:"php",title:"PHP 5 для чайников",author:"Валейд",authorName:"Джанет",pages:"317",isLearned:!1,dateLearned:""},{id:11,year:2005,category:"code",theme:"php",title:"PHP 5 на примерах",author:"Кузнецов",authorName:"Максим",pages:"576",isLearned:!1,dateLearned:""},{id:12,year:2005,category:"code",theme:"php",title:"PHP 5. Практика создания веб-сайтов (1е)",author:"Кузнецов",authorName:"Максим",pages:"961",isLearned:!1,dateLearned:""},{id:13,year:2005,category:"code",theme:"php",title:"PHP. Сборник рецептов",author:"Скляр",authorName:"Дэвид",pages:"669",isLearned:!1,dateLearned:""},{id:14,year:2005,category:"code",theme:"php",title:"PHP глазами хакера (1е)",author:"Фленов",authorName:"Михаил",pages:"305",isLearned:!1,dateLearned:""},{id:15,year:2005,category:"code",theme:"php",title:"PHP и MySQL для начинающих",author:"Харрис",authorName:"Энди",pages:"387",isLearned:!1,dateLearned:""},{id:16,year:2006,category:"code",theme:"php",title:"PHP 5 для чайников",author:"Валейд",authorName:"Джанет",pages:"317",isLearned:!1,dateLearned:""},{id:17,year:2006,category:"code",theme:"php",title:"PHP5 Профессиональное программирование",author:"Гутманс",authorName:"Энди",pages:"700",isLearned:!1,dateLearned:""},{id:18,year:2006,category:"code",theme:"php",title:"PHP 5 Полное руководство",author:"Коггзолл",authorName:"Джон",pages:"749",isLearned:!1,dateLearned:""},{id:19,year:2006,category:"code",theme:"php",title:"PHP5 для профессионалов",author:"Леки-Томпсон",authorName:"Эд",pages:"609",isLearned:!1,dateLearned:""},{id:20,year:2006,category:"code",theme:"php",title:"PHP 5 для начинающих",author:"Мерсер",authorName:"Дэйв",pages:"848",isLearned:!1,dateLearned:""},{id:21,year:2006,category:"code",theme:"php",title:"Разработка веб-приложений на PHP 5",author:"Олищук",authorName:"Андрей",pages:"353",isLearned:!1,dateLearned:""},{id:22,year:2006,category:"code",theme:"php",title:"PHP это просто",author:"Шкрыль",authorName:"Андрей",pages:"367",isLearned:!1,dateLearned:""},{id:23,year:2006,category:"code",theme:"php",title:"Профессиональное программирование на PHP",author:"Шлосснейгл",authorName:"Джордж",pages:"613",isLearned:!1,dateLearned:""},{id:24,year:2007,category:"code",theme:"php",title:"PHP MySQL XML (1е)",author:"Бенкен",authorName:"Елена",pages:"315",isLearned:!1,dateLearned:""},{id:25,year:2007,category:"code",theme:"php",title:"Ajax и PHP",author:"Дари",authorName:"Кристиан",pages:"334",isLearned:!1,dateLearned:""},{id:26,year:2007,category:"code",theme:"php",title:"PHP в примерах",author:"Хольцнер",authorName:"Стивен",pages:"341",isLearned:!1,dateLearned:""},{id:27,year:2008,category:"code",theme:"php",title:"PHP MySQL XML (2е)",author:"Бенкен",authorName:"Елена",pages:"321",isLearned:!1,dateLearned:""},{id:28,year:2008,category:"code",theme:"php",title:"Изучаем PHP и MySQL (2e)",author:"Дэвис",authorName:"Мишель",pages:"442",isLearned:!1,dateLearned:""},{id:29,year:2008,category:"code",theme:"php",title:"PHP 5 (2е)",author:"Котеров",authorName:"Дмитрий",pages:"1105",isLearned:!1,dateLearned:""},{id:30,year:2008,category:"code",theme:"php",title:"PHP практика создания веб сайтов (2е)",author:"Кузнецов",authorName:"Максим",pages:"1251",isLearned:!1,dateLearned:""},{id:31,year:2008,category:"code",theme:"php",title:"ООП на PHP",author:"Кузнецов",authorName:"Максим",pages:"609",isLearned:!1,dateLearned:""},{id:32,year:2008,category:"code",theme:"php",title:"PHP Трюки",author:"Харрингтон",authorName:"Джек",pages:"445",isLearned:!1,dateLearned:""},{id:33,year:2009,category:"code",theme:"php",title:"PHP Практика создания веб-сайтов (2е)",author:"Кузнецов",authorName:"Максим",pages:"1251",isLearned:!1,dateLearned:""},{id:34,year:2009,category:"code",theme:"php",title:"Самоучитель PHP 5/6 (3e)",author:"Кузнецов",authorName:"Максим",pages:"664",isLearned:!1,dateLearned:""},{id:35,year:2010,category:"code",theme:"php",title:"HeadFirst Изучаем PHP и MySQL",author:"Бейли",authorName:"Линн",pages:"786",isLearned:!1,dateLearned:""},{id:36,year:2010,category:"code",theme:"php",title:"Web 2.0. Создание приложений на PHP",author:"Зервас",authorName:"Квентин",pages:"544",isLearned:!1,dateLearned:""},{id:37,year:2010,category:"code",theme:"php",title:"PHP 5/6 и MySQL 6 (2е)",author:"Колисниченко",authorName:"Денис",pages:"536",isLearned:!1,dateLearned:""},{id:38,year:2010,category:"code",theme:"php",title:"PHP 5/6",author:"Кузнецов",authorName:"Максим",pages:"1024",isLearned:!1,dateLearned:""},{id:39,year:2010,category:"code",theme:"php",title:"HTML, JavaScript, PHP и MySQL (3е)",author:"Прохоренок",authorName:"Николай",pages:"901",isLearned:!1,dateLearned:""},{id:40,year:2010,category:"code",theme:"php",title:"PHP и MySQL. Библия программиста (2е)",author:"Суэринг",authorName:"Стив",pages:"912",isLearned:!1,dateLearned:""},{id:41,year:2010,category:"code",theme:"php",title:"PHP глазами хакера (2е)",author:"Фленов",authorName:"Михаил",pages:"334",isLearned:!1,dateLearned:""},{id:42,year:2011,category:"code",theme:"php",title:"PHP MySQL XML (3е)",author:"Бенкен",authorName:"Елена",pages:"288",isLearned:!1,dateLearned:""},{id:43,year:2011,category:"code",theme:"php",title:"PHP и MySQL. Создание интернет-магазина (2е)",author:"Дари",authorName:"Кристиан",pages:"640",isLearned:!1,dateLearned:""},{id:44,year:2011,category:"code",theme:"php",title:"PHP. Объекты, шаблоны (3е)",author:"Зандстра",authorName:"Мэтт",pages:"529",isLearned:!1,dateLearned:""},{id:45,year:2011,category:"code",theme:"php",title:"PHP 5/6 и MySQL 6 (3е)",author:"Колисниченко",authorName:"Денис",pages:"520",isLearned:!1,dateLearned:""},{id:46,year:2011,category:"code",theme:"php",title:"PHP и jQuery для профессионалов",author:"Ленгсторф",authorName:"Джейсон",pages:"352",isLearned:!1,dateLearned:""},{id:47,year:2012,category:"code",theme:"php",title:"PHP на примерах (2е)",author:"Кузнецов",authorName:"Максим",pages:"400",isLearned:!1,dateLearned:""},{id:48,year:2012,category:"code",theme:"php",title:"PHP это просто",author:"Ляпин",authorName:"Дмитрий",pages:"176",isLearned:!1,dateLearned:""},{id:49,year:2013,category:"code",theme:"php",title:"PHP и MySQL (4е)",author:"Колисниченко",authorName:"Денис",pages:"560",isLearned:!1,dateLearned:""},{id:50,year:2013,category:"code",theme:"php",title:"PHP и MySQL. Исчерпывающее руководство",author:"Маклафлин",authorName:"Бретт",pages:"512",isLearned:!1,dateLearned:""},{id:51,year:2013,category:"code",theme:"php",title:"Создаем динамические веб-сайты с помощью PHP, MySQL, JavaScript и CSS (2е)",author:"Никсон",authorName:"Робин",pages:"560",isLearned:!1,dateLearned:""},{id:52,year:2013,category:"code",theme:"php",title:"PHP и MySQL от новичка к профессионалу",author:"Янк",authorName:"Кевин",pages:"384",isLearned:!1,dateLearned:""},{id:53,year:2014,category:"code",theme:"php",title:"PHP для начинающих",author:"Жадаев",authorName:"Александр",pages:"288",isLearned:!1,dateLearned:""},{id:54,year:2014,category:"code",theme:"php",title:"128 рецептов PHP",author:"Ипатов",authorName:"Евгений",pages:"152",isLearned:!1,dateLearned:""},{id:55,year:2014,category:"code",theme:"php",title:"PHP и MySQL. Исчерпывающее руководство (2е)",author:"Маклафлин",authorName:"Бретт",pages:"544",isLearned:!1,dateLearned:""},{id:56,year:2015,category:"code",theme:"php",title:"РНР. Объекты, шаблоны (4е)",author:"Зандстра",authorName:"Мэтт",pages:"577",isLearned:!1,dateLearned:""},{id:57,year:2015,category:"code",theme:"php",title:"PHP и MySQL Разработка Web-приложений (5е)",author:"Колисниченко",authorName:"Денис",pages:"592",isLearned:!1,dateLearned:""},{id:58,year:2015,category:"code",theme:"php",title:"Создаем динамические веб-сайты с помощью PHP, MySQL, JavaScript, CSS и HTML5 (3е)",author:"Никсон",authorName:"Робин",pages:"688",isLearned:!1,dateLearned:""},{id:59,year:2015,category:"code",theme:"php",title:"HTML, JavaScript, PHP и MySQL (4е)",author:"Прохоренок",authorName:"Николай",pages:"766",isLearned:!1,dateLearned:""},{id:60,year:2015,category:"code",theme:"php",title:"PHP. Рецепты программирования (3е)",author:"Скляр",authorName:"Дэвид",pages:"784",isLearned:!1,dateLearned:""},{id:61,year:2015,category:"code",theme:"php",title:"PHP и MySQL. Cоздание интернет-магазинов (2е)",author:"Ульман",authorName:"Ларри",pages:"545",isLearned:!1,dateLearned:""},{id:62,year:2016,category:"code",theme:"php",title:"Руководство по PHP",author:"Cowburn",authorName:"Peter",pages:"432",isLearned:!1,dateLearned:""},{id:63,year:2016,category:"code",theme:"php",title:"PHP 7",author:"Котеров",authorName:"Дмитрий",pages:"1071",isLearned:!1,dateLearned:""},{id:64,year:2016,category:"code",theme:"php",title:"Создаем динамические веб-сайты с помощью PHP, MySQL, JavaScript, CSS и HTML5 (4е)",author:"Никсон",authorName:"Робин",pages:"768",isLearned:!1,dateLearned:""},{id:65,year:2016,category:"code",theme:"php",title:"PHP глазами хакера (3е)",author:"Фленов",authorName:"Михаил",pages:"247",isLearned:!1,dateLearned:""},{id:66,year:2017,category:"code",theme:"php",title:"Разработка веб-приложений с помощью PHP и MySQL (5е)",author:"Веллинг",authorName:"Люк",pages:"770",isLearned:!1,dateLearned:""},{id:67,year:2017,category:"code",theme:"php",title:"Laravel быстрая разработка на PHP MySQL CSS HTML",author:"Дронов",authorName:"Владимир",pages:"755",isLearned:!1,dateLearned:""},{id:68,year:2017,category:"code",theme:"php",title:"Изучаем РНР 7",author:" Скляр",authorName:"Дэвид",pages:"464",isLearned:!1,dateLearned:""},{id:69,year:2018,category:"code",theme:"php",title:"Самоучитель PHP 7",author:"Кузнецов",authorName:"Максим",pages:"448",isLearned:!1,dateLearned:""},{id:70,year:2018,category:"code",theme:"php",title:"PHP 7 для начинающих",author:"МакГрат",authorName:"Майкл",pages:"256",isLearned:!1,dateLearned:""},{id:71,year:2019,category:"code",theme:"php",title:"Учусь PHP",author:"tutorial",pages:"645",isLearned:!1,dateLearned:""},{id:72,year:2019,category:"code",theme:"php",title:"РНР. Объекты, шаблоны и методики программирования (5е)",author:"Зандстра",authorName:"Мэтт",pages:"736",isLearned:!1,dateLearned:""},{id:73,year:2019,category:"code",theme:"php",title:"Создаем динамические веб-сайты с помощью PHP, MySQL, JavaScript, CSS и HTML5 (5е)",author:"Никсон",authorName:"Робин",pages:"816",isLearned:!1,dateLearned:""},{id:74,year:2019,category:"code",theme:"php",title:"HTML, JavaScript, PHP и MySQL (5е)",author:"Прохоренок",authorName:"Николай",pages:"912",isLearned:!1,dateLearned:""},{id:75,year:2020,category:"code",theme:"php",title:"Symfony 5. Быстрый старт",author:"Potencier",authorName:"Fabien",pages:"360",isLearned:!1,dateLearned:""},{id:76,year:2020,category:"code",theme:"php",title:"PHP. Полное руководство",author:"Лукьянов",authorName:"Михаил",pages:"434",isLearned:!1,dateLearned:""},{id:77,year:2020,category:"code",theme:"php",title:"Laravel. Полное руководство (2е)",author:"Стаффер",authorName:"Мэтт",pages:"514",isLearned:!1,dateLearned:""},{id:78,year:2021,category:"code",theme:"php",title:"РНР 8. Объекты, шаблоны и методики программирования (6е)",author:"Мэтт Зандстра",pages:"868",isLearned:!1,dateLearned:""},{id:79,year:2021,category:"code",theme:"php",title:"Программирование на PHP в примерах и задачах",author:"Васильев",authorName:"Алексей",pages:"354",isLearned:!1,dateLearned:""},{id:80,year:2021,category:"code",theme:"php",title:"PHP и MySQL. 25 уроков для начинающих",author:"Дронов",authorName:"Владимир",pages:"434",isLearned:!1,dateLearned:""},{id:81,year:2021,category:"code",theme:"php",title:"Создаем динамические веб-сайты на PHP (4е)",author:"Татро",authorName:"Кевин",pages:"544",isLearned:!1,dateLearned:""},{id:82,year:2022,category:"code",theme:"php",title:"Laravel 8 Быстрая разработка веб сайтов на PHP",author:"Дронов",authorName:"Владимир",pages:"683",isLearned:!1,dateLearned:""},{id:83,year:2023,category:"code",theme:"php",title:"PHP 8. Наиболее полное руководство",author:"Котеров",authorName:"Дмитрий",pages:"994",isLearned:!1,dateLearned:""},{id:84,year:2023,category:"code",theme:"php",title:"Создаем динамические веб-сайты с помощью PHP, MySQL, JavaScript, CSS и HTML5 (6е)",author:"Никсон",authorName:"Робин",pages:"832",isLearned:!1,dateLearned:""},{}],[{id:1,year:2011,category:"code",theme:"python",title:"Программирование на Python (4е) 1 том",author:"Марк Лутц",pages:"992",isLearned:!1,dateLearned:""},{id:2,year:2011,category:"code",theme:"python",title:"Программирование на Python (4е) 2 том",author:"Марк Лутц",pages:"992",isLearned:!1,dateLearned:""},{id:3,year:2011,category:"code",theme:"python",title:"PyQt Создание оконных приложений на Python 3",author:"Николай Прохоренок",pages:"243",isLearned:!1,dateLearned:""},{id:4,year:2011,category:"code",theme:"python",title:"Python самое необходимое",author:"Николай Прохоренок",pages:"416",isLearned:!1,dateLearned:""},{id:5,year:2012,category:"code",theme:"python",title:"Python глазами хакера",author:"Джастин Сейтц",pages:"208",isLearned:!1,dateLearned:""},{id:6,year:2012,category:"code",theme:"python",title:"Python 3 и PyQT Разработка приложений",author:"Николай Прохоренок",pages:"704",isLearned:!1,dateLearned:""},{id:7,year:2014,category:"code",theme:"python",title:"Основы программирования на языке Python",author:"Буйначев",pages:"91",isLearned:!1,dateLearned:""},{id:8,year:2014,category:"code",theme:"python",title:"Программируем на Python (3е)",author:"Майкл Доусон",pages:"416",isLearned:!1,dateLearned:""},{id:9,year:2014,category:"code",theme:"python",title:"Python на практике",author:"Марк Саммерфилд",pages:"338",isLearned:!1,dateLearned:""},{id:10,year:2015,category:"code",theme:"python",title:"Самоучитель Python",author:"Дмитрий Мусин",pages:"136",isLearned:!1,dateLearned:""},{id:11,year:2015,category:"code",theme:"python",title:"Программирование для детей Scratch и Python",author:"Кэрол Вордерман",pages:"224",isLearned:!1,dateLearned:""},{id:12,year:2015,category:"code",theme:"python",title:"Программирование на Python для начинающих",author:"Майк МакГратт",pages:"192",isLearned:!1,dateLearned:""},{id:13,year:2015,category:"code",theme:"python",title:"Python Карманный справочник (5е)",author:"Марк Лутц",pages:"320",isLearned:!1,dateLearned:""},{id:14,year:2015,category:"code",theme:"python",title:"Python и анализ данных",author:"Уэс Маккинни",pages:"482",isLearned:!1,dateLearned:""},{id:15,year:2015,category:"code",theme:"python",title:"Python создание приложений (3е)",author:"Уэсли Чан",pages:"816",isLearned:!1,dateLearned:""},{id:16,year:2016,category:"code",theme:"python",title:"Простой Python",author:"Билл Любанович",pages:"480",isLearned:!1,dateLearned:""},{id:17,year:2016,category:"code",theme:"python",title:"Секреты Python",author:"Бретт Слаткин",pages:"272",isLearned:!1,dateLearned:""},{id:18,year:2016,category:"code",theme:"python",title:"Python на примерах",author:"Васильев",pages:"432",isLearned:!1,dateLearned:""},{id:19,year:2016,category:"code",theme:"python",title:"Построение систем машинного обучения на языке Python (2е)",author:"Луис Коэльо",pages:"302",isLearned:!1,dateLearned:""},{id:20,year:2016,category:"code",theme:"python",title:"Python. К вершинам мастерства",author:"Лучано Ромальо",pages:"768",isLearned:!1,dateLearned:""},{id:21,year:2016,category:"code",theme:"python",title:"Python и PyQt Разработка приложений",author:"Николай Прохоренок",pages:"832",isLearned:!1,dateLearned:""},{id:22,year:2016,category:"code",theme:"python",title:"Python Самое необходимое",author:"Николай Прохоренок",pages:"460",isLearned:!1,dateLearned:""},{id:23,year:2016,category:"code",theme:"python",title:"Скрапинг веб-сайтов с помощью Python",author:"Райан Митчелл",pages:"280",isLearned:!1,dateLearned:""},{id:24,year:2016,category:"code",theme:"python",title:"Введение в программирование на Python (2е)",author:"Северенс",pages:"232",isLearned:!1,dateLearned:""},{id:25,year:2016,category:"code",theme:"python",title:"Язык программирования Python (2е)",author:"Сузи",pages:"352",isLearned:!1,dateLearned:""},{id:26,year:2016,category:"code",theme:"python",title:"Hello World! Занимательное программирование",author:"Сэнд",pages:"400",isLearned:!1,dateLearned:""},{id:27,year:2016,category:"code",theme:"python",title:"Программирование компьютерного зрения на языке Python",author:"Ян Солем",pages:"312",isLearned:!1,dateLearned:""},{id:28,year:2017,category:"code",theme:"python",title:"Введение в машинное обучение с помощью Python",author:"Андреас Мюллер",pages:"393",isLearned:!1,dateLearned:""},{id:29,year:2017,category:"code",theme:"python",title:"Python для детей и родителей",author:"Брайсон Пэйн",pages:"352",isLearned:!1,dateLearned:""},{id:30,year:2017,category:"code",theme:"python",title:"Python для детей",author:"Джейсон Бриггс",pages:"320",isLearned:!1,dateLearned:""},{id:31,year:2017,category:"code",theme:"python",title:"Самоучитель Python",author:"Дмитрий Мусин",pages:"154",isLearned:!1,dateLearned:""},{id:32,year:2017,category:"code",theme:"python",title:"Основы Data Science и Big Data. Python и наука о данных",author:"Дэви Силен",pages:"336",isLearned:!1,dateLearned:""},{id:33,year:2017,category:"code",theme:"python",title:"Легкий способ выучить Python (3е)",author:"Зед Шоу",pages:"352",isLearned:!1,dateLearned:""},{id:34,year:2017,category:"code",theme:"python",title:"Основы программирования на языке Python (1е)",author:"Златопольский",pages:"284",isLearned:!1,dateLearned:""},{id:35,year:2017,category:"code",theme:"python",title:"Программируем с Minecraft с помощью Python",author:"Крэйг Ричардсон",pages:"368",isLearned:!1,dateLearned:""},{id:36,year:2017,category:"code",theme:"python",title:"HeadFirst Python (2е)",author:"Пол Бэрри",pages:"624",isLearned:!1,dateLearned:""},{id:37,year:2017,category:"code",theme:"python",title:"Программирование на языке Python",author:"Роберт Седжвик",pages:"736",isLearned:!1,dateLearned:""},{id:38,year:2017,category:"code",theme:"python",title:"Python и машинное обучение",author:"Себастьян Рашка",pages:"418",isLearned:!1,dateLearned:""},{id:39,year:2017,category:"code",theme:"python",title:"Автоматизация при помощи Python",author:"Эл Свейгарт",pages:"592",isLearned:!1,dateLearned:""},{id:40,year:2017,category:"code",theme:"python",title:"Разработка геоприложений на языке Python",author:"Эрик Вестра",pages:"446",isLearned:!1,dateLearned:""},{id:41,year:2017,category:"code",theme:"python",title:"Изучаем Python",author:"Эрик Мэтиз",pages:"496",isLearned:!1,dateLearned:""},{id:42,year:2018,category:"code",theme:"python",title:"Байесовские модели на Python",author:"Аллен Дауни",pages:"182",isLearned:!1,dateLearned:""},{id:43,year:2018,category:"code",theme:"python",title:"Python для сложных задач",author:"Вандер Плас",pages:"576",isLearned:!1,dateLearned:""},{id:44,year:2018,category:"code",theme:"python",title:"Python. Разработка на основе тестирования",author:"Гарри Персиваль",pages:"624",isLearned:!1,dateLearned:""},{id:45,year:2018,category:"code",theme:"python",title:"Чистый Python",author:"Дэн Бейдер",pages:"288",isLearned:!1,dateLearned:""},{id:46,year:2018,category:"code",theme:"python",title:"Основы программирования на языке Python (2е)",author:"Златопольский",pages:"396",isLearned:!1,dateLearned:""},{id:47,year:2018,category:"code",theme:"python",title:"Сам себе программист",author:"Кори Альтхофф",pages:"210",isLearned:!1,dateLearned:""},{id:48,year:2018,category:"code",theme:"python",title:"Программирование с нуля на языке Python",author:"Сысоев",pages:"180",isLearned:!1,dateLearned:""},{id:49,year:2018,category:"code",theme:"python",title:"Основы программирования на Python",author:"Федоров",pages:"167",isLearned:!1,dateLearned:""},{id:50,year:2018,category:"code",theme:"python",title:"Tkinter. Программирование GUI на Python",author:"Шапошникова",pages:"84",isLearned:!1,dateLearned:""},{id:51,year:2018,category:"code",theme:"python",title:"Учим Python делая крутые игры (4е)",author:"Эл Свейгарт",pages:"418",isLearned:!1,dateLearned:""},{id:52,year:2019,category:"code",theme:"python",title:"Python. Уроки (2е)",author:"Абдрахманов",pages:"157",isLearned:!1,dateLearned:""},{id:53,year:2019,category:"code",theme:"python",title:"Python. Справочник",author:"Алекс Мартелли",pages:"898",isLearned:!1,dateLearned:""},{id:54,year:2019,category:"code",theme:"python",title:"Изучение сложных систем с помощью Python",author:"Аллен Дауни",pages:"160",isLearned:!1,dateLearned:""},{id:55,year:2019,category:"code",theme:"python",title:"Прикладной анализ текстовых данных на Python",author:"Бенджамин Бенгфорт",pages:"368",isLearned:!1,dateLearned:""},{id:56,year:2019,category:"code",theme:"python",title:"Стандартная библиотека Python 3 (2е)",author:"Даг Хеллман",pages:"1375",isLearned:!1,dateLearned:""},{id:57,year:2019,category:"code",theme:"python",title:"Python для чайников (2е)",author:"Джон Мюллер",pages:"418",isLearned:!1,dateLearned:""},{id:58,year:2019,category:"code",theme:"python",title:"Python. Книга рецептов",author:"Дэвид Бизли",pages:"648",isLearned:!1,dateLearned:""},{id:59,year:2019,category:"code",theme:"python",title:"Вероятностное программирование на Python",author:"Дэвидсон-Пайлон",pages:"256",isLearned:!1,dateLearned:""},{id:60,year:2019,category:"code",theme:"python",title:"Язык программирования Python",author:"Жуков",pages:"216",isLearned:!1,dateLearned:""},{id:61,year:2019,category:"code",theme:"python",title:"Машинное обучение с Python",author:"Крис Элбон",pages:"386",isLearned:!1,dateLearned:""},{id:62,year:2019,category:"code",theme:"python",title:"Изучение робототехники с использованием Python",author:"Лентин Джозеф",pages:"250",isLearned:!1,dateLearned:""},{id:63,year:2019,category:"code",theme:"python",title:"Изучаем Python Том 1 (5е)",author:"Марк Лутц",pages:"832",isLearned:!1,dateLearned:""},{id:64,year:2019,category:"code",theme:"python",title:"Как устроен Python",author:"Мэтт Харрисон",pages:"272",isLearned:!1,dateLearned:""},{id:65,year:2019,category:"code",theme:"python",title:"Python. Экспресс-курс (3е)",author:"Наоми Седер",pages:"480",isLearned:!1,dateLearned:""},{id:66,year:2019,category:"code",theme:"python",title:"Python 3 и PyQt 5 (2е)",author:"Николай Прохоренок",pages:"832",isLearned:!1,dateLearned:""},{id:67,year:2019,category:"code",theme:"python",title:"Python 3. Самое необходимое (2е)",author:"Николай Прохоренок",pages:"610",isLearned:!1,dateLearned:""},{id:68,year:2019,category:"code",theme:"python",title:"Искусственный интеллект на Python",author:"Пратик Джоши",pages:"450",isLearned:!1,dateLearned:""},{id:69,year:2019,category:"code",theme:"python",title:"Простой Python просто с нуля",author:"Рик Гаско",pages:"258",isLearned:!1,dateLearned:""},{id:70,year:2019,category:"code",theme:"python",title:"Начинаем программировать на Python (4е)",author:"Тони Гэддис",pages:"770",isLearned:!1,dateLearned:""},{id:71,year:2019,category:"code",theme:"python",title:"Программирование на Python",author:"Федоров",pages:"126",isLearned:!1,dateLearned:""},{id:72,year:2019,category:"code",theme:"python",title:"Python для детей",author:"Шуман",pages:"344",isLearned:!1,dateLearned:""},{id:73,year:2020,category:"code",theme:"python",title:"Алгоритмы обучения с подкреплением на Python",author:"Андреа Лонца",pages:"286",isLearned:!1,dateLearned:""},{id:74,year:2020,category:"code",theme:"python",title:"Знакомство с PyTorch",author:"Брайан Макмахан",pages:"256",isLearned:!1,dateLearned:""},{id:75,year:2020,category:"code",theme:"python",title:"Python. Искусственный интеллект",author:"Дейтел",pages:"864",isLearned:!1,dateLearned:""},{id:76,year:2020,category:"code",theme:"python",title:"Путь Python",author:"Джульен Данжу",pages:"258",isLearned:!1,dateLearned:""},{id:77,year:2020,category:"code",theme:"python",title:"Классические задачи Computer Science на языке Python",author:"Дэвид Копец",pages:"258",isLearned:!1,dateLearned:""},{id:78,year:2020,category:"code",theme:"python",title:"Изучаем Python Том 2 (5е)",author:"Марк Лутц",pages:"722",isLearned:!1,dateLearned:""},{id:79,year:2020,category:"code",theme:"python",title:"Python. Непрерывная интеграция и доставка",author:"Мориц Ленц",pages:"168",isLearned:!1,dateLearned:""},{id:80,year:2020,category:"code",theme:"python",title:"Машинное обучение на Python",author:"Мэтт Харрисон",pages:"322",isLearned:!1,dateLearned:""},{id:81,year:2020,category:"code",theme:"python",title:"Байесовский анализ на Python",author:"Освальдо Мартин",pages:"340",isLearned:!1,dateLearned:""},{id:82,year:2020,category:"code",theme:"python",title:"Изучаем Python",author:"Эрик Мэтиз",pages:"512",isLearned:!1,dateLearned:""},{id:83,year:2020,category:"code",theme:"python",title:"Эволюционные нейросети на языке Python",author:"Ярослав Омельяненко",pages:"310",isLearned:!1,dateLearned:""},{id:84,year:2021,category:"code",theme:"python",title:"Секреты Python Pro",author:"Дейн Хиллард",pages:"320",isLearned:!1,dateLearned:""},{id:85,year:2021,category:"code",theme:"python",title:"Непрактичный Python",author:"Ли Воган",pages:"466",isLearned:!1,dateLearned:""},{id:86,year:2021,category:"code",theme:"python",title:"Python для сетевых инженеров",author:"Наташа Самойленко",pages:"766",isLearned:!1,dateLearned:""},{id:87,year:2023,category:"code",theme:"python",title:"Python, Django и Bootstrap для начинающих",author:"Анатолий Постолит",pages:"626",isLearned:!1,dateLearned:""},{}],[{id:1,year:1987,category:"code",theme:"pascal",title:"Программирование на языке Паскаль",author:"Прайс",authorName:"Д.",pages:"234",isLearned:!1,dateLearned:""},{id:2,year:1988,category:"code",theme:"pascal",title:"Азбука программирования",author:"Горстко",authorName:"А.",pages:"72",isLearned:!1,dateLearned:""},{id:3,year:1989,category:"code",theme:"pascal",title:"Паскаль. Руководство для пользователя",author:"Йенсен, Вирт",authorName:"А.",pages:"254",isLearned:!1,dateLearned:""},{id:4,year:1989,category:"code",theme:"pascal",title:"Сборник упражнений по языку Паскаль",author:"Пильщиков",authorName:"Владимир",pages:"164",isLearned:!1,dateLearned:""},{id:5,year:1991,category:"code",theme:"pascal",title:"Язык Паскаль в иллюстрациях",author:"Алкок",authorName:"Доналд",pages:"194",isLearned:!1,dateLearned:""},{id:6,year:1993,category:"code",theme:"pascal",title:"Программирование на языке Turbo Pascal 6.0 7.0",author:"Зуев",authorName:"Евгений",pages:"381",isLearned:!1,dateLearned:""},{id:7,year:1995,category:"code",theme:"pascal",title:"Программирование в среде Turbo Pascal 7.0",author:"Епанешников",authorName:"А.",pages:"283",isLearned:!1,dateLearned:""},{id:8,year:1998,category:"code",theme:"pascal",title:"Учимся программировать Pascal 7.0",author:"Гусева",authorName:"А.",pages:"273",isLearned:!1,dateLearned:""},{id:9,year:1999,category:"code",theme:"pascal",title:"Turbo Pascal 7.0. Самоучитель для школьников, студентов и начинающих",author:"Лукин",authorName:"С.",pages:"211",isLearned:!1,dateLearned:""},{id:10,year:2001,category:"code",theme:"pascal",title:"Delphi 6. Программирование на Object Pascal",author:"Культин",authorName:"Никита",pages:"520",isLearned:!1,dateLearned:""},{id:11,year:2001,category:"code",theme:"pascal",title:"Алгоритмы и программы на Turbo Pascal",author:"Федоренко",authorName:"Ю.",pages:"240",isLearned:!1,dateLearned:""},{id:12,year:2003,category:"code",theme:"pascal",title:"C++ и Pascal в Kylix 3. Разработка интернет-приложений и СУБД",author:"Боровский",authorName:"Андрей",pages:"528",isLearned:!1,dateLearned:""},{id:13,year:2003,category:"code",theme:"pascal",title:"Turbo Pascal 7.0 Начальный курс",author:"Фаронов",authorName:"Валерий",pages:"579",isLearned:!1,dateLearned:""},{id:14,year:2003,category:"code",theme:"pascal",title:"Turbo Pascal 7.0 на примерах",author:"Шпак",authorName:"Юрий",pages:"498",isLearned:!1,dateLearned:""},{id:15,year:2004,category:"code",theme:"pascal",title:"Динамические структуры данных. Язык Паскаль",author:"Вылиток",authorName:"А.",pages:"44",isLearned:!1,dateLearned:""},{id:16,year:2004,category:"code",theme:"pascal",title:"Программирование на языке Pascal",author:"Рапаков",authorName:"Георгий",pages:"474",isLearned:!1,dateLearned:""},{id:17,year:2004,category:"code",theme:"pascal",title:"Turbo Pascal в подлиннике",author:"Фаронов",authorName:"Валерий",pages:"1058",isLearned:!1,dateLearned:""},{id:18,year:2005,category:"code",theme:"pascal",title:"Алгоритмизация и программирование на Turbo Pascal",author:"Долинский",authorName:"Михаил",pages:"235",isLearned:!1,dateLearned:""},{id:19,year:2005,category:"code",theme:"pascal",title:"Программирование на языке Pascal Часть1",author:"Ружицкая",authorName:"Елена",pages:"56",isLearned:!1,dateLearned:""},{id:20,year:2005,category:"code",theme:"pascal",title:"Программирование на языке Pascal Часть2",author:"Ружицкая",authorName:"Елена",pages:"48",isLearned:!1,dateLearned:""},{id:21,year:2006,category:"code",theme:"pascal",title:"Turbo Paskal 7.0 Полная версия",author:"Алексеев",authorName:"Евгений",pages:"316",isLearned:!1,dateLearned:""},{id:22,year:2006,category:"code",theme:"pascal",title:"Изучаем Turbo Pascal",author:"Немнюгин",authorName:"Сергей",pages:"316",isLearned:!1,dateLearned:""},{id:23,year:2006,category:"code",theme:"pascal",title:"Turbo Pascal Решение сложных задач",author:"Потопахин",authorName:"Виталий",pages:"102",isLearned:!1,dateLearned:""},{id:24,year:2007,category:"code",theme:"pascal",title:"Паскаль Программирование на языке высокого уровня",author:"Павловская",authorName:"Татьяна",pages:"400",isLearned:!1,dateLearned:""},{id:25,year:2008,category:"code",theme:"pascal",title:"Самоучитель Turbo Pascal",author:"Меженный",authorName:"О.",pages:"330",isLearned:!1,dateLearned:""},{id:26,year:2009,category:"code",theme:"pascal",title:"Программирование это так просто",author:"Андреева",authorName:"Елена",pages:"92",isLearned:!1,dateLearned:""},{id:27,year:2009,category:"code",theme:"pascal",title:"Основы программирования в среде Turbo Pascal",author:"Зубок",authorName:"Дмитрий",pages:"70",isLearned:!1,dateLearned:""},{id:28,year:2010,category:"code",theme:"pascal",title:"Free Pascal и Lazarus. Учебник по программированию",author:"Алексеев",authorName:"Евгений",pages:"442",isLearned:!1,dateLearned:""},{id:29,year:2010,category:"code",theme:"pascal",title:"Основы программирования в среде Lazarus",author:"Мансуров",authorName:"К.",pages:"772",isLearned:!1,dateLearned:""},{id:30,year:2010,category:"code",theme:"pascal",title:"Паскаль для школьников",author:"Ушаков",authorName:"Денис",pages:"256",isLearned:!1,dateLearned:""},{id:31,year:2011,category:"code",theme:"pascal",title:"Самоучитель по программированию на Free Pascal и Lazarus",author:"Алексеев",authorName:"Евгений",pages:"505",isLearned:!1,dateLearned:""},{id:32,year:2011,category:"code",theme:"pascal",title:"Свободное программное обеспечение. FREE PASCAL для студентов и школьников",author:"Кетков",authorName:"Юлий",pages:"379",isLearned:!1,dateLearned:""},{id:33,year:2011,category:"code",theme:"pascal",title:"Turbo Pascal 7.0. Учебный курс",author:"Фаронов",authorName:"Валерий",pages:"727",isLearned:!1,dateLearned:""},{id:34,year:2012,category:"code",theme:"pascal",title:"Моделирование на языке Free Pascal в среде Lazarus",author:"Дмитриев",authorName:"Никита",pages:"58",isLearned:!1,dateLearned:""},{id:35,year:2012,category:"code",theme:"pascal",title:"Решение 50 типовых задач по программированию на языке Pascal",author:"Душистов",authorName:"Данил",pages:"68",isLearned:!1,dateLearned:""},{id:36,year:2012,category:"code",theme:"pascal",title:"Занимательные уроки с паскалем, или PascalABC.NET для начинающих",author:"Рубанцев",authorName:"Валерий",pages:"698",isLearned:!1,dateLearned:""},{id:37,year:2013,category:"code",theme:"pascal",title:"Программирование в среде Lazarus для школьников",author:"",authorName:"",pages:"41",isLearned:!1,dateLearned:""},{id:38,year:2014,category:"code",theme:"pascal",title:"Основы программирования в среде PascalABC.NET",author:"Долинер",authorName:"Леонид",pages:"130",isLearned:!1,dateLearned:""},{id:39,year:2014,category:"code",theme:"pascal",title:"Экспресс курс программирования в Lazarus",author:"Попов",authorName:"Е.",pages:"71",isLearned:!1,dateLearned:""},{id:40,year:2015,category:"code",theme:"pascal",title:"Теория и практика программирования на языке Паскаль",author:"Расолько",authorName:"Галина",pages:"449",isLearned:!1,dateLearned:""},{id:41,year:2016,category:"code",theme:"pascal",title:"Современное программирование с нуля",author:"Потопахин",authorName:"Виталий",pages:"241",isLearned:!1,dateLearned:""},{id:42,year:2016,category:"code",theme:"pascal",title:"Язык программирования Pascal ABC",author:"Цветков",authorName:"А.",pages:"46",isLearned:!1,dateLearned:""},{id:43,year:2017,category:"code",theme:"pascal",title:"Основы программирования на языке Паскаль. Часть 1. Учебное пособие",author:"Валова",authorName:"Ольга",pages:"312",isLearned:!1,dateLearned:""},{id:44,year:2017,category:"code",theme:"pascal",title:"Программирование в среде PascalABC.NET",author:"Рубанцев",authorName:"Валерий",pages:"356",isLearned:!1,dateLearned:""},{id:45,year:2018,category:"code",theme:"pascal",title:"Простой учебник программирования",author:"Гаско",authorName:"Рик",pages:"320",isLearned:!1,dateLearned:""},{id:46,year:2018,category:"code",theme:"pascal",title:"Песни о паскале",author:"Деревенец",authorName:"Олег",pages:"590",isLearned:!1,dateLearned:""},{id:47,year:2019,category:"code",theme:"pascal",title:"Информатика. Основы программирования на языке Паскаль. Учебное пособие",author:"Волобуева",authorName:"Татьяна",pages:"72",isLearned:!1,dateLearned:""},{id:48,year:2020,category:"code",theme:"pascal",title:"Практикум по программированию на языке Паскаль. Учебное пособие",author:"Горностаева",authorName:"Татьяна",pages:"125",isLearned:!1,dateLearned:""},{id:49,year:2020,category:"code",theme:"pascal",title:"Руководство по Object Pascal",author:"Канту",authorName:"Марко",pages:"773",isLearned:!1,dateLearned:""},{id:50,year:2020,category:"code",theme:"pascal",title:"Краткий курс программирования на языке PascalABC",author:"Мельниченко",authorName:"В.",pages:"57",isLearned:!1,dateLearned:""},{id:51,year:2021,category:"code",theme:"pascal",title:"Введение в язык Паскаль",author:"Абрамов",authorName:"Владимир",pages:"379",isLearned:!1,dateLearned:""},{id:52,year:2022,category:"code",theme:"pascal",title:"Динамические структуры данных. Язык Паскаль",author:"Вылиток",authorName:"Алексей",pages:"64",isLearned:!1,dateLearned:""},{id:53,year:2023,category:"code",theme:"pascal",title:"Программирование на языке высокого уровня Object Pascal",author:"Немцова",authorName:"Тамара",pages:"496",isLearned:!1,dateLearned:""},{}],[{id:1,year:1980,category:"основы",theme:"Программирование",title:"Программирование",author:"Любимский",authorName:"Эдуард",pages:"610",isLearned:!1,dateLearned:""},{id:1,year:1990,category:"основы",theme:"Программирование",title:"Жемчужины творчества программистов (1е)",author:"Бентли",authorName:"Джон",pages:"225",isLearned:!1,dateLearned:""},{id:2,year:2e3,category:"основы",theme:"Программирование",title:"Мифический человеко-месяц или как создаются программные системы",author:"Брукс",authorName:"Фредерик",pages:"304",isLearned:!1,dateLearned:""},{id:3,year:2001,category:"основы",theme:"Программирование",title:"Код. Тайный язык информатики (1е)",author:"Петцольд",authorName:"Чарльз",pages:"492",isLearned:!1,dateLearned:""},{id:4,year:2001,category:"основы",theme:"Программирование",title:"Основные копцепции языков программирования (5е)",author:"Себеста",authorName:"Роберт",pages:"659",isLearned:!1,dateLearned:""},{id:5,year:2002,category:"основы",theme:"Программирование",title:"Жемчужины программирования (2е)",author:"Бентли",authorName:"Джон",pages:"272",isLearned:!1,dateLearned:""},{id:6,year:2002,category:"основы",theme:"Программирование",title:"Основы программирования для чайников (2е)",author:"Вонг",authorName:"Уоллес",pages:"336",isLearned:!1,dateLearned:""},{id:7,year:2002,category:"основы",theme:"Программирование",title:"Инженерия программного обеспечения (6е)",author:"Соммервилл",authorName:"Иан",pages:"624",isLearned:!1,dateLearned:""},{id:8,year:2003,category:"основы",theme:"Программирование",title:"Экстремальное программирование",author:"Бек",authorName:"Кент",pages:"212",isLearned:!1,dateLearned:""},{id:9,year:2003,category:"основы",theme:"Программирование",title:"Распределённые системы. Принципы и парадигмы",author:"Таненбаум",authorName:"Эндрю",pages:"877",isLearned:!1,dateLearned:""},{id:10,year:2003,category:"основы",theme:"Программирование",title:"Рефакторинг. Улучшение существующего кода",author:"Фаулер",authorName:"Мартин",pages:"432",isLearned:!1,dateLearned:""},{id:11,year:2004,category:"основы",theme:"Программирование",title:"Психбольница в руках пациентов",author:"Купер",authorName:"Алан",pages:"322",isLearned:!1,dateLearned:""},{id:12,year:2004,category:"основы",theme:"Программирование",title:"Быстрая разработка программ",author:"Мартин",authorName:"Роберт",pages:"746",isLearned:!1,dateLearned:""},{id:13,year:2005,category:"основы",theme:"Программирование",title:"Основы инженерии программного обеспечения (2е)",author:"Гецци",authorName:"Карло",pages:"833",isLearned:!1,dateLearned:""},{id:14,year:2005,category:"основы",theme:"Программирование",title:"Совершенный код (2е)",author:"Макконнелл",authorName:"Стив",pages:"893",isLearned:!1,dateLearned:""},{id:15,year:2005,category:"основы",theme:"Программирование",title:"Занимательное программирование",author:"Мозговой",authorName:"Максим",pages:"208",isLearned:!1,dateLearned:""},{id:16,year:2006,category:"основы",theme:"Программирование",title:"Структура и интерпретация компьютерных программ",author:"Абельсон",authorName:"Харольд",pages:"608",isLearned:!1,dateLearned:""},{id:17,year:2006,category:"основы",theme:"Программирование",title:"Джоэл о программировании",author:"Спольски",authorName:"Джоэл",pages:"352",isLearned:!1,dateLearned:""},{id:18,year:2006,category:"основы",theme:"Программирование",title:"Введение в операционные системы",author:"Столяров",authorName:"Андрей",pages:"193",isLearned:!1,dateLearned:""},{id:19,year:2006,category:"основы",theme:"Программирование",title:"Программист-прагматик (1е)",author:"Хант",authorName:"Эндрю",pages:"289",isLearned:!1,dateLearned:""},{id:20,year:2007,category:"основы",theme:"Программирование",title:"Искусство управления IT-проектами",author:"Беркун",authorName:"Скотт",pages:"403",isLearned:!1,dateLearned:""},{id:21,year:2007,category:"основы",theme:"Программирование",title:"Мифический человеко-месяц",author:"Брукс",authorName:"Фредерик",pages:"298",isLearned:!1,dateLearned:""},{id:22,year:2007,category:"основы",theme:"Программирование",title:"Сколько стоит программный проект",author:"Макконнелл",authorName:"Стив",pages:"297",isLearned:!1,dateLearned:""},{id:23,year:2007,category:"основы",theme:"Программирование",title:"Лучшие примеры разработки ПО",author:"Спольски",authorName:"Джоэл",pages:"210",isLearned:!1,dateLearned:""},{id:24,year:2008,category:"основы",theme:"Программирование",title:"Основы программирования для чайников (4е)",author:"Вонг",authorName:"Уоллес",pages:"327",isLearned:!1,dateLearned:""},{id:25,year:2008,category:"основы",theme:"Программирование",title:"Не заставляйте меня думать (2е)",author:"Круг",authorName:"Стив",pages:"512",isLearned:!1,dateLearned:""},{id:26,year:2008,category:"основы",theme:"Программирование",title:"Софт - отстой! И что с этим делать",author:"Платт",authorName:"Дэвид",pages:"244",isLearned:!1,dateLearned:""},{id:27,year:2008,category:"основы",theme:"Программирование",title:"Джоэл о программировании",author:"Спольски",authorName:"Джоэл",pages:"355",isLearned:!1,dateLearned:""},{id:28,year:2008,category:"основы",theme:"Программирование",title:"Проблемы информационного общества",author:"Столяров",authorName:"Андрей",pages:"88",isLearned:!1,dateLearned:""},{id:29,year:2009,category:"основы",theme:"Программирование",title:"Ремесло программиста. Практика написания хорошего кода.",author:"Гудлиф",authorName:"Питер",pages:"697",isLearned:!1,dateLearned:""},{id:30,year:2009,category:"основы",theme:"Программирование",title:"Психбольница в руках пациентов",author:"Купер",authorName:"Алан",pages:"329",isLearned:!1,dateLearned:""},{id:31,year:2009,category:"основы",theme:"Программирование",title:"И снова о программировании",author:"Спольски",authorName:"Джоел",pages:"320",isLearned:!1,dateLearned:""},{id:32,year:2009,category:"основы",theme:"Программирование",title:"Игровой сервер",author:"Столяров",authorName:"Андрей",pages:"68",isLearned:!1,dateLearned:""},{id:33,year:2009,category:"основы",theme:"Программирование",title:"ОС unix",author:"Столяров",authorName:"Андрей",pages:"50",isLearned:!1,dateLearned:""},{id:34,year:2009,category:"основы",theme:"Программирование",title:"Эффективная работа с унаследованным кодом",author:"Физерс",authorName:"Майкл",pages:"400",isLearned:!1,dateLearned:""},{id:35,year:2010,category:"основы",theme:"Программирование",title:"Оптимизация ПО. Сборник рецептов",author:"Гербер",authorName:"Ричард",pages:"348",isLearned:!1,dateLearned:""},{id:36,year:2010,category:"основы",theme:"Программирование",title:"Программирование и конфликты. Теория и практика программной инженерии.",author:"Гласс",authorName:"Роберт",pages:"242",isLearned:!1,dateLearned:""},{id:37,year:2010,category:"основы",theme:"Программирование",title:"Совершенный код (2е)",author:"Макконнелл",authorName:"Стив",pages:"889",isLearned:!1,dateLearned:""},{id:38,year:2010,category:"основы",theme:"Программирование",title:"Путь программиста",author:"Никитин",authorName:"Александр",pages:"67",isLearned:!1,dateLearned:""},{id:39,year:2010,category:"основы",theme:"Программирование",title:"Чистый код. Создание, анализ и рефакторинг (1е)",author:"Мартин",authorName:"Роберт",pages:"466",isLearned:!1,dateLearned:""},{id:40,year:2010,category:"основы",theme:"Программирование",title:"Бережливое производство ПО. От идеи до прибыли",author:"Поппендик",authorName:"Мэри",pages:"256",isLearned:!1,dateLearned:""},{id:41,year:2010,category:"основы",theme:"Программирование",title:"Идеальная архитектура",author:"Спинеллис",authorName:"Диомидис",pages:"529",isLearned:!1,dateLearned:""},{id:42,year:2011,category:"основы",theme:"Программирование",title:"Почувствуй класс. Учимся программировать",author:"Мейер",authorName:"Бертран",pages:"776",isLearned:!1,dateLearned:""},{id:43,year:2011,category:"основы",theme:"Программирование",title:"Идеальный код",author:"Орам",authorName:"Энди",pages:"624",isLearned:!1,dateLearned:""},{id:44,year:2011,category:"основы",theme:"Программирование",title:"Кодеры за работой",author:"Сейбел",authorName:"Питер",pages:"539",isLearned:!1,dateLearned:""},{id:45,year:2011,category:"основы",theme:"Программирование",title:"Начала программирования",author:"Степанов",authorName:"Александр",pages:"272",isLearned:!1,dateLearned:""},{id:46,year:2011,category:"основы",theme:"Программирование",title:"Предметно-ориентированные языки программирования",author:"Фаулер",authorName:"Мартин",pages:"576",isLearned:!1,dateLearned:""},{id:47,year:2011,category:"основы",theme:"Программирование",title:"Модели параллельного программирования",author:"Федотов",pages:"384",isLearned:!1,dateLearned:""},{id:48,year:2011,category:"основы",theme:"Программирование",title:"Head First. Паттерны проектирования (1е)",author:"Фримен",authorName:"Эрик",pages:"384",isLearned:!1,dateLearned:""},{id:49,year:2012,category:"основы",theme:"Программирование",title:"Карьера программиста (5е)",author:"Макдауэлл",authorName:"Лакман",pages:"412",isLearned:!1,dateLearned:""},{id:50,year:2012,category:"основы",theme:"Программирование",title:"97 этюдов для программистов",author:"Мартин",authorName:"Роберт",pages:"256",isLearned:!1,dateLearned:""},{id:51,year:2012,category:"основы",theme:"Программирование",title:"Идеальный программист. Как стать профессионалом разработки ПО (1е)",author:"Мартин",authorName:"Роберт",pages:"224",isLearned:!1,dateLearned:""},{id:52,year:2013,category:"основы",theme:"Программирование",title:"Жемчужины проектирования алгоритмов",author:"Бёрд",authorName:"Ричард",pages:"330",isLearned:!1,dateLearned:""},{id:53,year:2013,category:"основы",theme:"Программирование",title:"Чистый код. Создание, анализ и рефакторинг (2е)",author:"Мартин",authorName:"Роберт",pages:"465",isLearned:!1,dateLearned:""},{id:54,year:2014,category:"основы",theme:"Программирование",title:"Разработка требований к программному обеспечению (3е)",author:"Вигерс",authorName:"Карл",pages:"737",isLearned:!1,dateLearned:""},{id:55,year:2014,category:"основы",theme:"Программирование",title:"Технологии экстремального программирования",author:"Кириченко",pages:"161",isLearned:!1,dateLearned:""},{id:56,year:2014,category:"основы",theme:"Алгоритмы",title:"Структуры данных и проектирование программ",author:"Круз",authorName:"Роберт",pages:"767",isLearned:!1,dateLearned:""},{id:57,year:2014,category:"основы",theme:"Программирование",title:"Работа мечты для программиста. Тестовые задачи и вопросы при собеседовании в ведущих IT компаниях",author:"Монган",authorName:"Джон",pages:"368",isLearned:!1,dateLearned:""},{id:58,year:2014,category:"основы",theme:"Программирование",title:"Программная инженерия",author:"Липаев",authorName:"Владимир",pages:"311",isLearned:!1,dateLearned:""},{id:59,year:2014,category:"основы",theme:"Программирование",title:"Языки программирования",author:"Тюгашев",authorName:"Андрей",pages:"336",isLearned:!1,dateLearned:""},{id:60,year:2015,category:"основы",theme:"Программирование",title:"Основы параллельного программирования (3е)",author:"Богачев",authorName:"Кирилл",pages:"343",isLearned:!1,dateLearned:""},{id:61,year:2015,category:"основы",theme:"Программирование",title:"Программист-фанатик (1е)",author:"Фаулер",authorName:"Чед",pages:"208",isLearned:!1,dateLearned:""},{id:62,year:2016,category:"основы",theme:"Программирование",title:"Основы параллельного программирования",author:"Карепова",authorName:"Евгения",pages:"357",isLearned:!1,dateLearned:""},{id:63,year:2016,category:"основы",theme:"Программирование",title:"Как управлять интеллектуалами",author:"Лопп",authorName:"Майкл",pages:"257",isLearned:!1,dateLearned:""},{id:64,year:2016,category:"основы",theme:"Программирование",title:"Карьера программиста (6е)",author:"Макдауэлл",authorName:"Лакман",pages:"690",isLearned:!1,dateLearned:""},{id:65,year:2016,category:"основы",theme:"Программирование",title:"Идеальный программист",author:"Мартин",authorName:"Роберт",pages:"224",isLearned:!1,dateLearned:""},{id:66,year:2016,category:"основы",theme:"Программирование",title:"Создание микросервисов",author:"Ньюмен",authorName:"Сэм",pages:"304",isLearned:!1,dateLearned:""},{id:67,year:2016,category:"основы",theme:"Программирование",title:"Программная инженерия. Технология разработки ПО (5е)",author:"Орлов",authorName:"Сергей",pages:"770",isLearned:!1,dateLearned:""},{id:68,year:2016,category:"основы",theme:"Программирование",title:"Как пасти котов. Наставление для программистов, руководящих другими программистами",author:"Рейнвотер",authorName:"Ханк",pages:"256",isLearned:!1,dateLearned:""},{id:69,year:2016,category:"основы",theme:"Программирование",title:"Отъявленный программист. Лайфхакинг из первых рук",author:"Савчук",authorName:"Игорь",pages:"272",isLearned:!1,dateLearned:""},{id:70,year:2016,category:"основы",theme:"Программирование",title:"Путь программиста",author:"Сонмез",authorName:"Джон",pages:"448",isLearned:!1,dateLearned:""},{id:71,year:2016,category:"основы",theme:"Программирование",title:"Программирование. Введение в профессию. Том 1. Азы программирования",author:"Столяров",authorName:"Андрей",pages:"467",isLearned:!1,dateLearned:""},{id:72,year:2016,category:"основы",theme:"Программирование",title:"Программирование. Введение в профессию. Том 2. Низкоуровневое программирование",author:"Столяров",authorName:"Андрей",pages:"499",isLearned:!1,dateLearned:""},{id:73,year:2016,category:"основы",theme:"Программирование",title:"Программирование. Введение в профессию. Том 3. Системы и сети",author:"Столяров",authorName:"Андрей",pages:"403",isLearned:!1,dateLearned:""},{id:74,year:2016,category:"основы",theme:"Программирование",title:"Программирование. Введение в профессию. Том 4. Парадигмы",author:"Столяров",authorName:"Андрей",pages:"659",isLearned:!1,dateLearned:""},{id:75,year:2016,category:"основы",theme:"Программирование",title:"Основы программирования. Часть 1",author:"Тюгашев",authorName:"Андрей",pages:"164",isLearned:!1,dateLearned:""},{id:76,year:2016,category:"основы",theme:"Программирование",title:"Вопрос на засыпку. Как заставить мозги шевелиться",author:"Фарндон",authorName:"Джон",pages:"188",isLearned:!1,dateLearned:""},{id:77,year:2016,category:"основы",theme:"Программирование",title:"Шаблоны корпоративных приложений",author:"Фаулер",authorName:"Мартин",pages:"544",isLearned:!1,dateLearned:""},{id:78,year:2016,category:"основы",theme:"Программирование",title:"Прибыльная веб студия",author:"Чипижко",authorName:"Александр",pages:"183",isLearned:!1,dateLearned:""},{id:79,year:2017,category:"основы",theme:"Программирование",title:"Шаблоны реализации корпоративных приложений",author:"Бек",authorName:"Кент",pages:"178",isLearned:!1,dateLearned:""},{id:80,year:2017,category:"основы",theme:"Программирование",title:"Экстремальное программирование. Разработка через тестирование",author:"Бек",authorName:"Кент",pages:"291",isLearned:!1,dateLearned:""},{id:81,year:2017,category:"основы",theme:"Программирование",title:"Не заставляйте меня думать (3е)",author:"Круг",authorName:"Стив",pages:"256",isLearned:!1,dateLearned:""},{id:82,year:2017,category:"основы",theme:"Программирование",title:"Программирование без дураков",author:"Пассиг",authorName:"Катрин",pages:"416",isLearned:!1,dateLearned:""},{id:83,year:2017,category:"основы",theme:"Программирование",title:"В работу с головой. Паттерны успеха от IT специалиста",author:"Ньюпорт",authorName:"Кэл",pages:"320",isLearned:!1,dateLearned:""},{id:84,year:2017,category:"основы",theme:"Программирование",title:"Семь языков за семь недель. Практическое руководство по изучению языков программирования",author:"Тейт",authorName:"Брюс",pages:"385",isLearned:!1,dateLearned:""},{id:85,year:2017,category:"основы",theme:"Программирование",title:"Погружение в рефакторинг",author:"Швец",authorName:"Александр",pages:"353",isLearned:!1,dateLearned:""},{id:86,year:2017,category:"основы",theme:"Программирование",title:"Путь в программисты",author:"Шереметьев",authorName:"Константин",pages:"41",isLearned:!0,dateLearned:"2021-08-23 пн"},{id:87,year:2018,category:"основы",theme:"Программирование",title:"IT архитектура от А до Я",author:"Алджанов",authorName:"Вадим",pages:"396",isLearned:!1,dateLearned:""},{id:88,year:2018,category:"основы",theme:"Программирование",title:"Сам себе программист",author:"Альтхофф",authorName:"Кори",pages:"208",isLearned:!1,dateLearned:""},{id:89,year:2018,category:"основы",theme:"Программирование",title:"Управление высокотехнологичными программами и проектами (4е)",author:"Арчибальд",authorName:"Рассел",pages:"466",isLearned:!1,dateLearned:""},{id:90,year:2018,category:"основы",theme:"Программирование",title:"Масштабирование приложений. Выращивание сложных систем",author:"Атчисон",authorName:"Ли",pages:"228",isLearned:!1,dateLearned:""},{id:91,year:2018,category:"основы",theme:"Программирование",title:"Брать или не брать. Как собеседовать разработчика",author:"Борисов",authorName:"Константин",pages:"112",isLearned:!1,dateLearned:""},{id:92,year:2018,category:"основы",theme:"Программирование",title:"Психбольница в руках пациентов",author:"Купер",authorName:"Алан",pages:"302",isLearned:!1,dateLearned:""},{id:93,year:2018,category:"основы",theme:"Программирование",title:"Идеальный программист (2е)",author:"Мартин",authorName:"Роберт",pages:"224",isLearned:!1,dateLearned:""},{id:94,year:2018,category:"основы",theme:"Программирование",title:"Чистая архитектура",author:"Мартин",authorName:"Роберт",pages:"352",isLearned:!1,dateLearned:""},{id:95,year:2018,category:"основы",theme:"Программирование",title:"Программируй! Самоучитель для девочек",author:"Сауджани",authorName:"Решма",pages:"179",isLearned:!1,dateLearned:""},{id:96,year:2018,category:"основы",theme:"Программирование",title:"Думай как программист. Креативный подход к созданию кода. C++ версия",author:"Спрол",authorName:"Антон",pages:"273",isLearned:!1,dateLearned:""},{id:97,year:2018,category:"основы",theme:"Программирование",title:"Теоретический минимум по Computer Science",author:"Фило",authorName:"Владстон",pages:"224",isLearned:!1,dateLearned:""},{id:98,year:2018,category:"основы",theme:"Программирование",title:"Head First. Паттерны проектирования (2е)",author:"Фримен",authorName:"Эрик",pages:"656",isLearned:!1,dateLearned:""},{id:99,year:2019,category:"основы",theme:"Программирование",title:"Распределенные системы. Паттерны проектирования",author:"Бернс",authorName:"Брендан",pages:"224",isLearned:!1,dateLearned:""},{id:100,year:2019,category:"основы",theme:"Программирование",title:"Наш код. Ремесло, профессия, искусство",author:"Бугаенко",authorName:"Егор",pages:"226",isLearned:!1,dateLearned:""},{id:101,year:2019,category:"основы",theme:"Программирование",title:"Чистый код (3е)",author:"Мартин",authorName:"Роберт",pages:"464",isLearned:!1,dateLearned:""},{id:102,year:2019,category:"основы",theme:"Программирование",title:"Код. Тайный язык информатики (2е)",author:"Петцольд",authorName:"Чарльз",pages:"448",isLearned:!1,dateLearned:""},{id:103,year:2019,category:"основы",theme:"Программирование",title:"Микросервисы. Паттерны разработки и рефакторинга",author:"Ричардсон",authorName:"Крис",pages:"546",isLearned:!1,dateLearned:""},{id:104,year:2019,category:"основы",theme:"Программирование",title:"Рефакторинг. Улучшение проекта существующего кода",author:"Фаулер",authorName:"Мартин",pages:"450",isLearned:!1,dateLearned:""},{id:105,year:2019,category:"основы",theme:"Программирование",title:"Программист-фанатик (2е)",author:"Фаулер",authorName:"Чед",pages:"208",isLearned:!1,dateLearned:""},{id:106,year:2020,category:"основы",theme:"Программирование",title:"Введение в архитектуру программного обеспечения",author:"Гаrарина",authorName:"Лариса",pages:"321",isLearned:!1,dateLearned:""},{id:107,year:2020,category:"основы",theme:"Программирование",title:"Карьера программиста (6е)",author:"Макдауэлл",authorName:"Лакман",pages:"688",isLearned:!1,dateLearned:""},{id:108,year:2020,category:"основы",theme:"Программирование",title:"Чистый Agile. Основы гибкости",author:"Мартин",authorName:"Роберт",pages:"272",isLearned:!1,dateLearned:""},{id:109,year:2020,category:"основы",theme:"Программирование",title:"Математическая логика",author:"Матросов",authorName:"Виктор",pages:"229",isLearned:!1,dateLearned:""},{id:110,year:2020,category:"основы",theme:"Программирование",title:"Практическая программная инженерия (4е)",author:"Мацяшек",authorName:"Лешек",pages:"959",isLearned:!1,dateLearned:""},{id:111,year:2020,category:"основы",theme:"Программирование",title:"Почувствуй класс. Учимся программировать (3е)",author:"Мейер",authorName:"Бертран",pages:"775",isLearned:!1,dateLearned:""},{id:94,year:2020,category:"основы",theme:"Программирование",title:"Основы программирования (10е)",author:"Окулов",authorName:"Станислав",pages:"339",isLearned:!1,dateLearned:""},{id:112,year:2020,category:"основы",theme:"Программирование",title:"Программист-прагматик (2е)",author:"Хант",authorName:"Эндрю",pages:"370",isLearned:!1,dateLearned:""},{id:113,year:2020,category:"основы",theme:"Программирование",title:"Ловушка для багов. Полевое руководство по веб-хакингу",author:"Яворски",authorName:"Питер",pages:"272",isLearned:!1,dateLearned:""},{id:114,year:2021,category:"основы",theme:"Программирование",title:"Мифический человеко-месяц или как создаются программные системы",author:"Брукс",authorName:"Фредерик",pages:"368",isLearned:!1,dateLearned:""},{id:115,year:2021,category:"основы",theme:"Программирование",title:"Программирование на ассемблере х64",author:"Ван Гуй",authorName:"Йо",pages:"332",isLearned:!1,dateLearned:""},{id:116,year:2021,category:"основы",theme:"Программирование",title:"Делай как в Google. Разработка ПО",author:"Винтерс",authorName:"Титус",pages:"544",isLearned:!1,dateLearned:""},{id:117,year:2021,category:"основы",theme:"Программирование",title:"Основы администрирования информационных систем",author:"Добынцев",authorName:"Денис",pages:"201",isLearned:!1,dateLearned:""},{id:118,year:2021,category:"основы",theme:"Программирование",title:"IBM. Падение и возрождение великой империи",author:"Кортада",authorName:"Джеймс",pages:"1180",isLearned:!1,dateLearned:""},{id:119,year:2021,category:"основы",theme:"Программирование",title:"Совершенный софт",author:"Леве",authorName:"Джувел",pages:"480",isLearned:!1,dateLearned:""},{id:120,year:2021,category:"основы",theme:"Программирование",title:"Еще более эффективный Agile",author:"Макконнелл",authorName:"Стив",pages:"228",isLearned:!1,dateLearned:""},{id:121,year:2021,category:"основы",theme:"Программирование",title:"Чистая архитектура",author:"Мартин",authorName:"Роберт",pages:"352",isLearned:!1,dateLearned:""},{id:122,year:2021,category:"основы",theme:"Программирование",title:"От монолита к микросервисам",author:"Ньюмен",authorName:"Сэм",pages:"274",isLearned:!1,dateLearned:""},{id:122,year:2021,category:"основы",theme:"Программирование",title:"Языки программирования и методы трансляции (3е)",author:"Свердлов",authorName:"Сергей",pages:"562",isLearned:!1,dateLearned:""},{id:123,year:2021,category:"основы",theme:"Программирование",title:"Программирование. Введение в профессию. Том 1. Азы программирования",author:"Столяров",authorName:"Андрей",pages:"707",isLearned:!1,dateLearned:""},{id:124,year:2021,category:"основы",theme:"Программирование",title:"Программирование. Введение в профессию. Том 2. Системы и сети",author:"Столяров",authorName:"Андрей",pages:"707",isLearned:!1,dateLearned:""},{id:125,year:2021,category:"основы",theme:"Программирование",title:"Программирование. Введение в профессию. Том 3. Парадигмы",author:"Столяров",authorName:"Андрей",pages:"707",isLearned:!1,dateLearned:""},{id:126,year:2021,category:"основы",theme:"Программирование",title:"Распределенные системы (3е)",author:"Таненбаум",authorName:"Эндрю",pages:"584",isLearned:!1,dateLearned:""},{id:127,year:2021,category:"основы",theme:"Программирование",title:"Погружение в паттерны проектирования",author:"Швец",authorName:"Александр",pages:"400",isLearned:!1,dateLearned:""},{id:128,year:2022,category:"основы",theme:"Программирование",title:"Agile. Основы",author:"Коробейник",authorName:"Андрей",pages:"54",isLearned:!1,dateLearned:""},{id:129,year:2022,category:"основы",theme:"Программирование",title:"Идеальная работа",author:"Мартин",authorName:"Роберт",pages:"384",isLearned:!1,dateLearned:""},{id:130,year:2022,category:"основы",theme:"Программирование",title:"Масштабируемый рефакторинг. Возвращаем контроль над кодом",author:"Лемер",authorName:"Мод",pages:"256",isLearned:!1,dateLearned:""},{id:131,year:2022,category:"основы",theme:"Программирование",title:"System Design. Подготовка к сложному интервью",author:"Сюй",authorName:"Алекс",pages:"304",isLearned:!1,dateLearned:""},{id:132,year:2022,category:"основы",theme:"Программирование",title:"Разработка интерфейсов. Паттерны проектирования",author:"Тидвелл",authorName:"Дженифер",pages:"558",isLearned:!1,dateLearned:""},{id:133,year:2022,category:"основы",theme:"Программирование",title:"Как проектировать программы",author:"Фелляйзен",authorName:"Маттиас",pages:"726",isLearned:!1,dateLearned:""},{id:134,year:2022,category:"основы",theme:"Программирование",title:"Введение в программирование и структуры данных",author:"Фислер",authorName:"Кати",pages:"442",isLearned:!1,dateLearned:""},{id:135,year:2022,category:"основы",theme:"Программирование",title:"Head First. Паттерны проектирования (2е)",author:"Фримен",authorName:"Эрик",pages:"641",isLearned:!1,dateLearned:""},{id:136,year:2022,category:"основы",theme:"Программирование",title:"Проектирование гибких программ. Как не загнать себя в угол",author:"Хансон",authorName:"Крис",pages:"369",isLearned:!1,dateLearned:""},{id:137,year:2023,category:"основы",theme:"Программирование",title:"Паттерны проектирования API",author:"Гивакс",authorName:"Джей",pages:"512",isLearned:!1,dateLearned:""},{id:138,year:2023,category:"основы",theme:"Программирование",title:"Разработка кроссплатформенного ПО",author:"Городничев",authorName:"Михаил",pages:"149",isLearned:!1,dateLearned:""},{id:139,year:2023,category:"основы",theme:"Программирование",title:"Сделай видеоигру один и не свихнись",author:"Грис",authorName:"Слава",pages:"202",isLearned:!1,dateLearned:""},{id:140,year:2023,category:"основы",theme:"Программирование",title:"Технология разработки ПО (3е)",author:"Зубкова",authorName:"Татьяна",pages:"252",isLearned:!1,dateLearned:""},{id:141,year:2023,category:"основы",theme:"Программирование",title:"Кодер с улицы",author:"Капаноглу",authorName:"Седат",pages:"320",isLearned:!1,dateLearned:""},{id:142,year:2023,category:"основы",theme:"Программирование",title:"Пять строк кода",author:"Клаусен",authorName:"Кристиан",pages:"369",isLearned:!1,dateLearned:""},{id:143,year:2023,category:"основы",theme:"Программирование",title:"Теория по программированию",author:"Лезвиев",authorName:"Станислав",pages:"60",isLearned:!1,dateLearned:""},{id:144,year:2023,category:"основы",theme:"Программирование",title:"Software. Ошибки и компромиссы при разработке ПО",author:"Лелек",authorName:"Томаш",pages:"464",isLearned:!1,dateLearned:""},{id:145,year:2023,category:"основы",theme:"Программирование",title:"Искусство чистого кода",author:"Майер",authorName:"Кристиан",pages:"240",isLearned:!1,dateLearned:""},{id:146,year:2023,category:"основы",theme:"Программирование",title:"Управление it проектом. От стартапа до высокотехнологичного бизнеса. Часть 1. Методология управления",author:"Максимова",authorName:"Татьяна",pages:"74",isLearned:!1,dateLearned:""},{id:147,year:2023,category:"основы",theme:"Программирование",title:"Управление it проектом. От стартапа до высокотехнологичного бизнеса. Часть 2. Теория и практика",author:"Максимова",authorName:"Татьяна",pages:"91",isLearned:!1,dateLearned:""},{id:148,year:2023,category:"основы",theme:"Программирование",title:"Микросервисы",author:"Митра",authorName:"Ронни",pages:"396",isLearned:!1,dateLearned:""},{id:149,year:2023,category:"основы",theme:"Программирование",title:"Архитектура и проектирование программных систем (2е)",author:"Назаров",authorName:"Станислав",pages:"375",isLearned:!1,dateLearned:""},{id:150,year:2023,category:"основы",theme:"Программирование",title:"Создание микросервисов (2е)",author:"Ньюмен",authorName:"Сэм",pages:"624",isLearned:!1,dateLearned:""},{id:151,year:2023,category:"основы",theme:"Программирование",title:"README. Суровые реалии разработчиков",author:"Риккомини",authorName:"Крис",pages:"304",isLearned:!1,dateLearned:""},{id:152,year:2023,category:"основы",theme:"Программирование",title:"Фундаментальный подход к программной архитектуре",author:"Ричардc",authorName:"Марк",pages:"448",isLearned:!1,dateLearned:""},{id:153,year:2023,category:"основы",theme:"Программирование",title:"Как стать программистом с нуля. После 30, без опыта, без образования",author:"Рузанов",authorName:"Борис",pages:"171",isLearned:!1,dateLearned:""},{id:154,year:2023,category:"основы",theme:"Программирование",title:"Рекурсивная книга о рекурсии",author:"Свейгарт",authorName:"Эл",pages:"336",isLearned:!1,dateLearned:""},{id:155,year:2023,category:"основы",theme:"Программирование",title:"Код, который умещается в голове",author:"Симан",authorName:"Марк",pages:"401",isLearned:!1,dateLearned:""},{id:156,year:2023,category:"основы",theme:"Программирование",title:"Тайная жизнь программ. Как создать код, который понравится вашему компьютеру",author:"Стейнхарт",authorName:"Джонатан",pages:"528",isLearned:!1,dateLearned:""},{id:157,year:2023,category:"основы",theme:"Программирование",title:"Современный подход к программной архитектуре",author:"Форд",authorName:"Нил",pages:"480",isLearned:!1,dateLearned:""},{id:158,year:2023,category:"основы",theme:"Программирование",title:"Ум программиста Как понять и осмыслить любой код",author:"Херманс",authorName:"Фелин",pages:"274",isLearned:!1,dateLearned:""},{id:159,year:2023,category:"основы",theme:"Программирование",title:"От джуна до сеньора. Как стать востребованным разработчиком",author:"Швец",authorName:"Владимир",pages:"190",isLearned:!1,dateLearned:""},{id:160,year:2024,category:"основы",theme:"Программирование",title:"Чистый Agile. Основы гибкости",author:"Мартин",authorName:"Роберт",pages:"272",isLearned:!1,dateLearned:""},{id:161,year:2024,category:"основы",theme:"Программирование",title:"Грокаем функциональное программирование",author:"Плахта",authorName:"Михал",pages:"512",isLearned:!1,dateLearned:""},{id:162,year:2024,category:"основы",theme:"Программирование",title:"Искусство Agile-разработки. Теория и практика быстрой разработки ПО (2е)",author:"Шор",authorName:"Джеймс",pages:"624",isLearned:!1,dateLearned:""},{}],[{id:1,year:1978,category:"основы",theme:"Алгоритмы",title:"Искусство программирования для ЭВМ",author:"Кнут",authorName:"Дональд",pages:"355",isLearned:!1,dateLearned:""},{id:2,year:1998,category:"основы",theme:"Алгоритмы",title:"Конкретная математика. Основы информатики",author:"Кнут",authorName:"Дональд",pages:"703",isLearned:!1,dateLearned:""},{id:3,year:2e3,category:"основы",theme:"Алгоритмы",title:"Структуры данных и алгоритмы",author:"Ахо",authorName:"Альлфред",pages:"383",isLearned:!1,dateLearned:""},{id:4,year:2e3,category:"основы",theme:"Алгоритмы",title:"Алгоритмы. Построение и анализ (1е)",author:"Кормен",authorName:"Томас",pages:"893",isLearned:!1,dateLearned:""},{id:5,year:2001,category:"основы",theme:"Алгоритмы",title:"Введение в компьютерные науки (6е)",author:"Брукшир",authorName:"Гленн",pages:"893",isLearned:!1,dateLearned:""},{id:6,year:2003,category:"основы",theme:"Алгоритмы",title:"Компиляторы. Принципы, технологии, инструменты",author:"Ахо",authorName:"Альлфред",pages:"769",isLearned:!1,dateLearned:""},{id:7,year:2003,category:"основы",theme:"Алгоритмы",title:"Структуры данных и алгоритмы",author:"Ахо",authorName:"Альлфред",pages:"382",isLearned:!1,dateLearned:""},{id:8,year:2004,category:"основы",theme:"Алгоритмы",title:"Основы современных алгоритмов",author:"Макконнелл",authorName:"Джефри",pages:"370",isLearned:!1,dateLearned:""},{id:9,year:2006,category:"основы",theme:"Алгоритмы",title:"Последовательные и параллельные алгоритмы",author:"Миллер",authorName:"Расс",pages:"409",isLearned:!1,dateLearned:""},{id:10,year:2007,category:"основы",theme:"Алгоритмы",title:"Алгоритмы и программы. Решение олимпиадных задач",author:"Порублев",authorName:"Илья",pages:"475",isLearned:!1,dateLearned:""},{id:11,year:2008,category:"основы",theme:"Алгоритмы",title:"Компиляторы. Принципы, технологии и инструментарий (2е)",author:"Ахо",authorName:"Альфред",pages:"1178",isLearned:!1,dateLearned:""},{id:12,year:2010,category:"основы",theme:"Алгоритмы",title:"Алгоритмы и структуры данных",author:"Вирт",authorName:"Никлаус",pages:"272",isLearned:!1,dateLearned:""},{id:13,year:2010,category:"основы",theme:"Алгоритмы",title:"Конкретная математика (2е)",author:"Кнут",authorName:"Дональд",pages:"786",isLearned:!1,dateLearned:""},{id:14,year:2010,category:"основы",theme:"Алгоритмы",title:"Введение в алгоритмы",author:"Корухова",authorName:"Людмила",pages:"26",isLearned:!1,dateLearned:""},{id:15,year:2010,category:"основы",theme:"Алгоритмы",title:"Основы алгоротмизации и программирования",author:"Пацей",authorName:"Наталья",pages:"289",isLearned:!1,dateLearned:""},{id:16,year:2011,category:"основы",theme:"Алгоритмы",title:"Алгоритмы и программы. Учебное пособие",author:"Афанасьева",authorName:"Татьяна",pages:"226",isLearned:!1,dateLearned:""},{id:17,year:2011,category:"основы",theme:"Алгоритмы",title:"Алгоритмы. Построение и анализ (2е)",author:"Кормен",authorName:"Томас",pages:"1296",isLearned:!1,dateLearned:""},{id:18,year:2011,category:"основы",theme:"Алгоритмы",title:"Алгоритмы. Руководство по разработке (2е)",author:"Скиена",authorName:"Стивен",pages:"715",isLearned:!1,dateLearned:""},{id:19,year:2013,category:"основы",theme:"Алгоритмы",title:"Структуры данных и алгоритмы в Java (2е)",author:"Лафоре",authorName:"Роберт",pages:"702",isLearned:!1,dateLearned:""},{id:20,year:2013,category:"основы",theme:"Алгоритмы",title:"Алгоритмы. Построение и анализ",author:"Кормен",authorName:"Томас",pages:"1328",isLearned:!1,dateLearned:""},{id:21,year:2013,category:"основы",theme:"Алгоритмы",title:"Алгоритмы и структуры данных",author:"Царев",authorName:"Роман",pages:"159",isLearned:!1,dateLearned:""},{id:22,year:2014,category:"основы",theme:"Алгоритмы",title:"Алгоритмы",author:"Дасгупта",authorName:"Санджой",pages:"319",isLearned:!1,dateLearned:""},{id:23,year:2014,category:"основы",theme:"Алгоритмы",title:"Сюрреальные числа",author:"Кнут",authorName:"Дональд",pages:"109",isLearned:!1,dateLearned:""},{id:24,year:2014,category:"основы",theme:"Алгоритмы",title:"Алгоритмы. Вводный курс",author:"Кормен",authorName:"Томас",pages:"208",isLearned:!1,dateLearned:""},{id:25,year:2014,category:"основы",theme:"Алгоритмы",title:"Структуры данных",author:"Круз",authorName:"Роберт",pages:"208",isLearned:!1,dateLearned:""},{id:26,year:2014,category:"основы",theme:"Алгоритмы",title:"Девять алгоритмов, которые изменили мир",author:"Маккормик",authorName:"Джон",pages:"237",isLearned:!1,dateLearned:""},{id:27,year:2014,category:"основы",theme:"Алгоритмы",title:"Алгоритмические трюки (2е)",author:"Уорен",authorName:"Генри",pages:"509",isLearned:!1,dateLearned:""},{id:28,year:2014,category:"основы",theme:"Алгоритмы",title:"Алгоритмы и структуры данных",author:"Фофанов",authorName:"Олег",pages:"123",isLearned:!1,dateLearned:""},{id:38,year:2014,category:"основы",theme:"Алгоритмы",title:"Программирование в алгоритмах (5е)",author:"Окулов",authorName:"Станислав",pages:"386",isLearned:!1,dateLearned:""},{id:29,year:2015,category:"основы",theme:"Алгоритмы",title:"Алгоритмы и структуры данных. Часть 1",author:"Овсянников",pages:"124",isLearned:!1,dateLearned:""},{id:30,year:2015,category:"основы",theme:"Алгоритмы",title:"Построение и анализ алгоритмов",author:"Селиванова",authorName:"Ирина",pages:"110",isLearned:!1,dateLearned:""},{id:31,year:2016,category:"основы",theme:"Алгоритмы",title:"Теория алгоритмов",author:"Игошин",authorName:"Владимир",pages:"800",isLearned:!1,dateLearned:""},{id:32,year:2016,category:"основы",theme:"Алгоритмы",title:"Алгоритмы. Разработка и применение",author:"Клейнберг",authorName:"Джон",pages:"800",isLearned:!1,dateLearned:""},{id:33,year:2016,category:"основы",theme:"Алгоритмы",title:"Машина Тьюринга",author:"Пильщиков",authorName:"Владимир",pages:"72",isLearned:!1,dateLearned:""},{id:34,year:2016,category:"основы",theme:"Алгоритмы",title:"Алгоритмы. Теория и практическое применение (1е)",author:"Стивенс",authorName:"Род",pages:"548",isLearned:!1,dateLearned:""},{id:35,year:2017,category:"основы",theme:"Алгоритмы",title:"Грокаем алгоритмы",author:"Бхаргава",authorName:"Адитья",pages:"288",isLearned:!1,dateLearned:""},{id:36,year:2017,category:"основы",theme:"Алгоритмы",title:"Сборник задач по теории алгоритмов",author:"Котов",authorName:"Владимир",pages:"185",isLearned:!1,dateLearned:""},{id:37,year:2017,category:"основы",theme:"Алгоритмы",title:"Теория алгоритмов",author:"Лобанова",authorName:"Валентина",pages:"95",isLearned:!1,dateLearned:""},{id:38,year:2017,category:"основы",theme:"Алгоритмы",title:"Программирование в алгоритмах (4е)",author:"Окулов",authorName:"Станислав",pages:"386",isLearned:!1,dateLearned:""},{id:39,year:2017,category:"основы",theme:"Алгоритмы",title:"Алгоритмы. Справочник (2е)",author:"Хайнеман",authorName:"Джордж",pages:"434",isLearned:!1,dateLearned:""},{id:40,year:2017,category:"основы",theme:"Алгоритмы",title:"Программирование. Теоремы и задачии (6е)",author:"Шень",authorName:"Александр",pages:"320",isLearned:!1,dateLearned:""},{id:41,year:2018,category:"основы",theme:"Алгоритмы",title:"Искусство программирования Том 1. Основные алгоритмы",author:"Кнут",authorName:"Дональд",pages:"722",isLearned:!1,dateLearned:""},{id:42,year:2018,category:"основы",theme:"Алгоритмы",title:"Искусство программирования Том 2. Получисленные алгоритмы",author:"Кнут",authorName:"Дональд",pages:"834",isLearned:!1,dateLearned:""},{id:43,year:2018,category:"основы",theme:"Алгоритмы",title:"Искусство программирования Том 3. Сортировка и поиск",author:"Кнут",authorName:"Дональд",pages:"834",isLearned:!1,dateLearned:""},{id:44,year:2018,category:"основы",theme:"Алгоритмы",title:"Искусство программирования Том 4А. Комбинаторные алгоритмы, часть 1",author:"Кнут",authorName:"Дональд",pages:"962",isLearned:!1,dateLearned:""},{id:45,year:2018,category:"основы",theme:"Алгоритмы",title:"Олимпиадное программирование",author:"Лааксонен",authorName:"Антти",pages:"301",isLearned:!1,dateLearned:""},{id:46,year:2018,category:"основы",theme:"Алгоритмы",title:"Алгоритмы для начинающих",author:"Луридас",authorName:"Панос",pages:"609",isLearned:!1,dateLearned:""},{id:47,year:2018,category:"code",theme:"Алгоритмы",title:"ТРИЗ. Теория решения изобретательских задач",author:"Петров",authorName:"Владимир",pages:"502",isLearned:!1,dateLearned:""},{id:48,year:2019,category:"основы",theme:"Алгоритмы",title:"Структуры данных и алгоритмы",author:"Ахо",authorName:"Альфред",pages:"402",isLearned:!1,dateLearned:""},{id:49,year:2019,category:"основы",theme:"Алгоритмы",title:"Дискретная математика",author:"Баврин",authorName:"Иван",pages:"194",isLearned:!1,dateLearned:""},{id:50,year:2019,category:"основы",theme:"Алгоритмы",title:"Алгоритмы и алгоритмические языки",author:"Белеванцев",authorName:"Андрей",pages:"248",isLearned:!1,dateLearned:""},{id:51,year:2019,category:"основы",theme:"Алгоритмы",title:"Компьютерные науки. Базовый курс (13е)",author:"Брукшир",authorName:"Гленн",pages:"992",isLearned:!1,dateLearned:""},{id:52,year:2019,category:"основы",theme:"Алгоритмы",title:"Алгоритмы и модели вычисления",author:"Голубенко",authorName:"Дмитрий",pages:"240",isLearned:!1,dateLearned:""},{id:53,year:2019,category:"основы",theme:"Алгоритмы",title:"Эффективные алгоритмы и сложность вычислений",author:"Кузюрин",pages:"368",isLearned:!1,dateLearned:""},{id:54,year:2019,category:"основы",theme:"Алгоритмы",title:"Алгоритмы и структуры обработки информации",author:"Курносов",authorName:"Михаил",pages:"211",isLearned:!1,dateLearned:""},{id:55,year:2019,category:"основы",theme:"Алгоритмы",title:"Совершенный алгоритм. Графовые алгоритмы",author:"Рафгарден",authorName:"Тим",pages:"258",isLearned:!1,dateLearned:""},{id:56,year:2019,category:"основы",theme:"Алгоритмы",title:"Совершенный алгоритм. Основы",author:"Рафгарден",authorName:"Тим",pages:"258",isLearned:!1,dateLearned:""},{id:57,year:2019,category:"основы",theme:"Алгоритмы",title:"Занимательные алгоритмы",author:"Эрвиг",authorName:"Мартин",pages:"354",isLearned:!1,dateLearned:""},{id:58,year:2019,category:"основы",theme:"Алгоритмы",title:"Введение в анализ алгоритмов",author:"Солтис",authorName:"Маайкл",pages:"279",isLearned:!1,dateLearned:""},{id:59,year:2020,category:"основы",theme:"Алгоритмы",title:"Дополнительные вопросы теории алгоритмов",author:"Дурнев",authorName:"Валерий",pages:"119",isLearned:!1,dateLearned:""},{id:60,year:2020,category:"основы",theme:"Алгоритмы",title:"Программирование. Типовые задачи, алгоритмы, методы (4е)",author:"Златопольский",authorName:"Дмитрий",pages:"226",isLearned:!1,dateLearned:""},{id:60,year:2020,category:"основы",theme:"Алгоритмы",title:"Введение в методы машинной обработки данных",author:"Курносов",authorName:"Михаил",pages:"227",isLearned:!1,dateLearned:""},{id:61,year:2020,category:"основы",theme:"Алгоритмы",title:"Алгоритмы обработки строк (4е)",author:"Окулов",authorName:"Станислав",pages:"258",isLearned:!1,dateLearned:""},{id:62,year:2020,category:"основы",theme:"Алгоритмы",title:"Структуры и алгоритмы обработки данных (2е)",author:"Павлов",authorName:"Леонид",pages:"256",isLearned:!1,dateLearned:""},{id:63,year:2020,category:"основы",theme:"Алгоритмы",title:"Совершенный аллгоритм",author:"Рафгарден",authorName:"Тим",pages:"258",isLearned:!1,dateLearned:""},{id:64,year:2020,category:"основы",theme:"Алгоритмы",title:"Гид по Computer Science. Для каждого программиста",author:"Спрингер",authorName:"Вильям",pages:"193",isLearned:!1,dateLearned:""},{id:65,year:2020,category:"основы",theme:"Алгоритмы",title:"Спортивное программирование",author:"Халим",authorName:"Стивен",pages:"604",isLearned:!1,dateLearned:""},{id:66,year:2021,category:"основы",theme:"Алгоритмы",title:"Структуры и алгоритмы обработки многомерных данных",author:"Гулаков",authorName:"Василий",pages:"355",isLearned:!1,dateLearned:""},{id:67,year:2021,category:"основы",theme:"Алгоритмы",title:"Алгоритмы обработки текста. 125 задач с решениями",author:"Крошемор",authorName:"Максим",pages:"313",isLearned:!1,dateLearned:""},{id:68,year:2021,category:"основы",theme:"Алгоритмы",title:"Введение в структуры и алгоритмы обработки данных",author:"Майер",authorName:"Алексей",pages:"108",isLearned:!1,dateLearned:""},{id:69,year:2021,category:"основы",theme:"Алгоритмы",title:"Структуры данных и алгоритмы",author:"Москвитин",pages:"145",isLearned:!1,dateLearned:""},{id:70,year:2021,category:"основы",theme:"Алгоритмы",title:"Распределенные данные. Алгоритмы работы современных систем хранения информации",author:"Петров",authorName:"Алекс",pages:"336",isLearned:!1,dateLearned:""},{id:71,year:2021,category:"основы",theme:"Алгоритмы",title:"Совершенный алгоритм. Алгоритмы для NP-трудных задач",author:"Рафгарден",authorName:"Тим",pages:"304",isLearned:!1,dateLearned:""},{id:72,year:2021,category:"основы",theme:"Алгоритмы",title:"Гид по Computer Science. Расширенное издание",author:"Спрингер",authorName:"Вильям",pages:"304",isLearned:!1,dateLearned:""},{id:73,year:2021,category:"основы",theme:"Алгоритмы",title:"Алгоритмы. Теория и практическое применение (2е)",author:"Стивенс",authorName:"Род",pages:"546",isLearned:!1,dateLearned:""},{id:74,year:2022,category:"основы",theme:"Алгоритмы",title:"Algorithms For Dummies (2nd) (eng)",author:"Mueller",authorName:"Paul",pages:"451",isLearned:!1,dateLearned:""},{id:75,year:2022,category:"основы",theme:"Алгоритмы",title:"Грокаем алгоритмы",author:"Бхаргава",authorName:"Адитья",pages:"288",isLearned:!1,dateLearned:""},{id:76,year:2022,category:"основы",theme:"Алгоритмы",title:"Введение в теорию алгоритмических языков и компиляторов",author:"Гагарина",pages:"176",isLearned:!1,dateLearned:""},{id:77,year:2022,category:"основы",theme:"Алгоритмы",title:"Основы теории и алгоритмы на графах (Учебное пособие)",author:"Гданский",authorName:"Николай",pages:"207",isLearned:!1,dateLearned:""},{id:78,year:2022,category:"основы",theme:"Алгоритмы",title:"Введение в логическое программирование",author:"Дженесерент",authorName:"Майкл",pages:"194",isLearned:!1,dateLearned:""},{id:79,year:2022,category:"основы",theme:"Алгоритмы",title:"Алгоритмы. Самый краткий и понятный курс",author:"Панос",authorName:"Луридас",pages:"195",isLearned:!1,dateLearned:""},{id:80,year:2022,category:"основы",theme:"Алгоритмы",title:"Алгоритмы. Руководство по разработке (3е)",author:"Скиена",authorName:"Стивен",pages:"860",isLearned:!1,dateLearned:""},{id:81,year:2022,category:"основы",theme:"Алгоритмы",title:"Введение в программирование и структуры данных",author:"Фислер",authorName:"Кати",pages:"442",isLearned:!1,dateLearned:""},{id:82,year:2023,category:"основы",theme:"Алгоритмы",title:"Computer Science для программиста-самоучки",author:"Альтхофф",authorName:"Кори",pages:"240",isLearned:!0,dateLearned:"2024-03-06 ср"},{id:83,year:2023,category:"основы",theme:"Алгоритмы",title:"Усовершенствованные структуры данных",author:"Брасс",authorName:"Петер",pages:"428",isLearned:!1,dateLearned:""},{id:84,year:2023,category:"основы",theme:"Алгоритмы",title:"Алгоритмы на практике",author:"Зингаро",authorName:"Даниэль",pages:"432",isLearned:!1,dateLearned:""},{id:85,year:2023,category:"основы",theme:"Алгоритмы",title:"Грокаем алгоритмы искусcтвенного интеллекта",author:"Харбанс",authorName:"Ришал",pages:"369",isLearned:!1,dateLearned:""},{id:86,year:2023,category:"основы",theme:"Алгоритмы",title:"Алгоритмы",author:"Эриксон",authorName:"Джефф",pages:"528",isLearned:!1,dateLearned:""},{id:87,year:2024,category:"основы",theme:"Алгоритмы",title:"Прикладные структуры данных и алгоритмы",author:"Венгроу",authorName:"Джей",pages:"513",isLearned:!1,dateLearned:""},{id:88,year:2024,category:"основы",theme:"Алгоритмы",title:"Продвинутые алгоритмы и структуры данных",author:"Ла Рокка",authorName:"Марчелло",pages:"848",isLearned:!1,dateLearned:""},{id:89,year:2024,category:"основы",theme:"Алгоритмы",title:"Алгоритмы и структуры для массивных наборов данных",author:"Меджедович",authorName:"Джейла",pages:"342",isLearned:!1,dateLearned:""},{}],[{id:1,year:1983,category:"основы",theme:"Компьютер",title:"Теория кодирования и теория информации",author:"Хэмминг",authorName:"Ричард",pages:"174",isLearned:!1,dateLearned:""},{id:2,year:1990,category:"основы",theme:"Компьютер",title:"Микропроцессор 80386 и его программирование",author:"Бpaмм",authorName:"Пенн",pages:"450",isLearned:!1,dateLearned:""},{id:3,year:1990,category:"основы",theme:"Компьютер",title:"Архитектура микропроцессора 80286",author:"Морс",authorName:"Стефен",pages:"303",isLearned:!1,dateLearned:""},{id:4,year:1991,category:"основы",theme:"Компьютер",title:"Периферийные устройства в вычислительных системах",author:"Ларионов",authorName:"Александр",pages:"337",isLearned:!1,dateLearned:""},{id:5,year:1992,category:"основы",theme:"Компьютер",title:"Язык Ассемблера для IBM PC и программирования",author:"Абель",authorName:"Питер",pages:"450",isLearned:!1,dateLearned:""},{id:6,year:1992,category:"основы",theme:"Компьютер",title:"Шина ISA персонального компьютера IBM",author:"Блохин",pages:"84",isLearned:!1,dateLearned:""},{id:7,year:1992,category:"основы",theme:"Компьютер",title:"Микропроцессор Z-80 Справочное пособие",author:"Шутов",pages:"98",isLearned:!1,dateLearned:""},{id:8,year:1993,category:"основы",theme:"Компьютер",title:"Руководство по архитектуре IBM PC AT",author:"Голенкова",authorName:"Жанэта",pages:"952",isLearned:!1,dateLearned:""},{id:9,year:1993,category:"основы",theme:"Компьютер",title:"IBM-совместимые ПК и их периферийные устройства. Книга 1",author:"Поляков",pages:"98",isLearned:!1,dateLearned:""},{id:10,year:1993,category:"основы",theme:"Компьютер",title:"IBM-совместимые ПК и их периферийные устройства. Книга 2",author:"Поляков",pages:"81",isLearned:!1,dateLearned:""},{id:11,year:1993,category:"основы",theme:"Компьютер",title:"IBM-совместимые ПК и их периферийные устройства. Книга 3",author:"Поляков",pages:"66",isLearned:!1,dateLearned:""},{id:12,year:1994,category:"основы",theme:"Компьютер",title:"IBM PC и PS2. Руководство по программированию",author:"Нортон",authorName:"Питер",pages:"339",isLearned:!1,dateLearned:""},{id:13,year:1994,category:"основы",theme:"Компьютер",title:"Процессор 80386DX в схеме ПК",author:"Поляков",pages:"98",isLearned:!1,dateLearned:""},{id:14,year:1998,category:"основы",theme:"Компьютер",title:"Процессоры Intel от 8086 до Pentium II",author:"Гук",authorName:"Михаил",pages:"224",isLearned:!1,dateLearned:""},{id:15,year:1999,category:"основы",theme:"Компьютер",title:"Интерфейсы ПК. Справочник",author:"Гук",authorName:"Михаил",pages:"402",isLearned:!1,dateLearned:""},{id:16,year:2e3,category:"основы",theme:"Компьютер",title:"Процессоры Pentium III, Athlon и другие",author:"Гук",authorName:"Михаил",pages:"479",isLearned:!1,dateLearned:""},{id:17,year:2e3,category:"основы",theme:"Компьютер",title:"Сопряжение компьютеров с внешними устройствами",author:"Смит",authorName:"Джордж",pages:"133",isLearned:!1,dateLearned:""},{id:18,year:2001,category:"основы",theme:"Компьютер",title:"Процессоры Pentium 4, Athlon и Duron",author:"Гук",authorName:"Михаил",pages:"513",isLearned:!1,dateLearned:""},{id:19,year:2002,category:"основы",theme:"Компьютер",title:"Аттестация А+ техник по обслуживанию ПК",author:"Брукс",authorName:"Чарльз",pages:"789",isLearned:!1,dateLearned:""},{id:20,year:2002,category:"основы",theme:"Компьютер",title:"Программирование дисковых подсистем",author:"Кулаков",authorName:"Владимир",pages:"762",isLearned:!1,dateLearned:""},{id:21,year:2002,category:"основы",theme:"Компьютер",title:"Архитектуры процессоров",author:"Ульянов",authorName:"Михаил",pages:"68",isLearned:!1,dateLearned:""},{id:22,year:2003,category:"основы",theme:"Компьютер",title:"Конспект лекций по дисциплине Вычислительные машины",author:"Бутаков",pages:"63",isLearned:!1,dateLearned:""},{id:23,year:2003,category:"основы",theme:"Компьютер",title:"Программирование на аппаратном уровне (2е)",author:"Кулаков",authorName:"Владимир",pages:"847",isLearned:!1,dateLearned:""},{id:24,year:2003,category:"основы",theme:"Компьютер",title:"Аппаратные средства ПК",author:"Сломенчук",authorName:"Валентин",pages:"500",isLearned:!1,dateLearned:""},{id:25,year:2003,category:"основы",theme:"Компьютер",title:"Архитектура компьютера (4е)",author:"Таненбаум",authorName:"Эндрю",pages:"699",isLearned:!1,dateLearned:""},{id:26,year:2003,category:"основы",theme:"Компьютер",title:"Организация ЭВМ (5е)",author:"Хамахер",authorName:"Карл",pages:"846",isLearned:!1,dateLearned:""},{id:27,year:2004,category:"основы",theme:"Компьютер",title:"Интерфейсы USB",author:"Агуров",authorName:"Павел",pages:"566",isLearned:!1,dateLearned:""},{id:28,year:2004,category:"основы",theme:"Компьютер",title:"Последовательные интерфейсы ПК",author:"Агуров",authorName:"Павел",pages:"482",isLearned:!1,dateLearned:""},{id:29,year:2004,category:"основы",theme:"Компьютер",title:"Компьютерная схемотехника",author:"Бабич",authorName:"Николай",pages:"577",isLearned:!1,dateLearned:""},{id:30,year:2004,category:"основы",theme:"Компьютер",title:"Вычислительные системы (2е)",author:"Бройдо",authorName:"Владимир",pages:"706",isLearned:!1,dateLearned:""},{id:31,year:2004,category:"основы",theme:"Компьютер",title:"Компоненты и архитектура компьютеров. Вопросы к экзамену",author:"Гуров",authorName:"Валерий",pages:"108",isLearned:!1,dateLearned:""},{id:32,year:2004,category:"основы",theme:"Компьютер",title:"Интерфейс RS232",author:"Кузьминов",authorName:"Алексей",pages:"168",isLearned:!1,dateLearned:""},{id:33,year:2004,category:"основы",theme:"Компьютер",title:"Архитектура компьютеров. Часть 1",author:"Поворознюк",authorName:"Анатолий",pages:"357",isLearned:!1,dateLearned:""},{id:34,year:2004,category:"основы",theme:"Компьютер",title:"Архитектура компьютеров. Часть 2",author:"Поворознюк",authorName:"Анатолий",pages:"298",isLearned:!1,dateLearned:""},{id:35,year:2005,category:"основы",theme:"Компьютер",title:"Устройство и ремонт персонального компьютера (2е)",author:"Бигелоу",authorName:"Стивен",pages:"971",isLearned:!1,dateLearned:""},{id:36,year:2005,category:"основы",theme:"Компьютер",title:"Компьютерные системы. Архитектура и программирование. Взгляд программиста",author:"Брайант",authorName:"Рэндал",pages:"1090",isLearned:!1,dateLearned:""},{id:37,year:2005,category:"основы",theme:"Компьютер",title:"Шины PCI, USB и FireWire. Энциклопедия",author:"Гук",authorName:"Михаил",pages:"539",isLearned:!1,dateLearned:""},{id:38,year:2005,category:"основы",theme:"Компьютер",title:"Архитектура ЭВМ",author:"Королев",authorName:"Лев",pages:"274",isLearned:!1,dateLearned:""},{id:39,year:2005,category:"основы",theme:"Компьютер",title:"Железо ПК",author:"Соломенчук",authorName:"Валентин",pages:"462",isLearned:!1,dateLearned:""},{id:40,year:2005,category:"основы",theme:"Компьютер",title:"Компьютер глазами хакера",author:"Фленов",authorName:"Михаил",pages:"331",isLearned:!1,dateLearned:""},{id:41,year:2006,category:"основы",theme:"Компьютер",title:"Железо ПК. Хитрости",author:"Байджелоу",authorName:"Стефан",pages:"405",isLearned:!1,dateLearned:""},{id:42,year:2006,category:"основы",theme:"Компьютер",title:"Хитрости. Компьютер без проблем (2е)",author:"Басе",authorName:"Стив",pages:"319",isLearned:!1,dateLearned:""},{id:43,year:2006,category:"основы",theme:"Компьютер",title:"Организация ЭВМ и систем",author:"Горнец",authorName:"Николай",pages:"319",isLearned:!1,dateLearned:""},{id:44,year:2006,category:"основы",theme:"Компьютер",title:"Сборка компьютера. Легкий старт (2е)",author:"Динман",pages:"142",isLearned:!1,dateLearned:""},{id:45,year:2006,category:"основы",theme:"Компьютер",title:"Современный компьютер",author:"Лаптев",authorName:"Дмитрий",pages:"170",isLearned:!1,dateLearned:""},{id:46,year:2006,category:"основы",theme:"Компьютер",title:"Железо ПК",author:"Мураховский",authorName:"Виктор",pages:"593",isLearned:!1,dateLearned:""},{id:47,year:2007,category:"основы",theme:"Компьютер",title:"Интерфейсы устройств хранения ATA, SCSI и другие",author:"Гук",authorName:"Михаил",pages:"447",isLearned:!1,dateLearned:""},{id:48,year:2007,category:"основы",theme:"Компьютер",title:"Архитектура микропроцессорных систем",author:"Костров",authorName:"Борис",pages:"302",isLearned:!1,dateLearned:""},{id:49,year:2007,category:"основы",theme:"Компьютер",title:"Вычислительные машины (2е)",author:"Мелехин",authorName:"Виктор",pages:"557",isLearned:!1,dateLearned:""},{id:50,year:2007,category:"основы",theme:"Компьютер",title:"Вычислительная техника",author:"Партыка",authorName:"Татьяна",pages:"611",isLearned:!1,dateLearned:""},{id:51,year:2007,category:"основы",theme:"Компьютер",title:"Архитектура вычислительных систем",author:"Степанов",authorName:"Анатолий",pages:"510",isLearned:!1,dateLearned:""},{id:52,year:2007,category:"основы",theme:"Компьютер",title:"Архитектура компьютера (5е)",author:"Таненбаум",authorName:"Эндрю",pages:"846",isLearned:!1,dateLearned:""},{id:53,year:2007,category:"основы",theme:"Компьютер",title:"Анатомия ПК",author:"Чистяков",authorName:"Виктор",pages:"163",isLearned:!1,dateLearned:""},{id:54,year:2008,category:"основы",theme:"Компьютер",title:"Современные информационные технологии",author:"Давидовская",pages:"425",isLearned:!1,dateLearned:""},{id:55,year:2008,category:"основы",theme:"Компьютер",title:"Организация ЭВМ и систем",author:"Тихонов",authorName:"Виктор",pages:"386",isLearned:!1,dateLearned:""},{id:56,year:2008,category:"основы",theme:"Компьютер",title:"Информатика. Аппаратные средства ПК",author:"Яшин",authorName:"Владимир",pages:"254",isLearned:!1,dateLearned:""},{id:57,year:2009,category:"основы",theme:"Компьютер",title:"Периферийные устройства: интерфейсы, схемотехника, программирование",author:"Авдеев",authorName:"Вадим",pages:"849",isLearned:!1,dateLearned:""},{id:58,year:2009,category:"основы",theme:"Компьютер",title:"Обслуживание и настройка компьютера",author:"Ватаманюк",authorName:"Александр",pages:"384",isLearned:!1,dateLearned:""},{id:59,year:2009,category:"основы",theme:"Компьютер",title:"Секреты флэшек и винчестеров USB",author:"Смирнов",authorName:"Юрий",pages:"447",isLearned:!1,dateLearned:""},{id:60,year:2009,category:"основы",theme:"Компьютер",title:"Сборка компьютера",author:"Степаненко",authorName:"Олег",pages:"532",isLearned:!1,dateLearned:""},{id:61,year:2010,category:"основы",theme:"Компьютер",title:"Железо 2010",author:"Асмаков",pages:"415",isLearned:!1,dateLearned:""},{id:62,year:2010,category:"основы",theme:"Компьютер",title:"Персональный компьютер (6е)",author:"Глушаков",authorName:"Сергей",pages:"482",isLearned:!1,dateLearned:""},{id:63,year:2010,category:"основы",theme:"Компьютер",title:"Тонкая настройка компьютера с помощью BIOS",author:"Зозуля",authorName:"Юрий",pages:"343",isLearned:!1,dateLearned:""},{id:64,year:2010,category:"основы",theme:"Компьютер",title:"Аппаратные средства PC (6е)",author:"Колесниченко",authorName:"Олег",pages:"782",isLearned:!1,dateLearned:""},{id:65,year:2010,category:"основы",theme:"Компьютер",title:"Схемотехника ЭВМ",author:"Лехин",authorName:"Сергей",pages:"665",isLearned:!1,dateLearned:""},{id:66,year:2010,category:"основы",theme:"Компьютер",title:"Архитектуры вычислительных систем",author:"Сергеев",authorName:"Сергей",pages:"240",isLearned:!1,dateLearned:""},{id:67,year:2010,category:"основы",theme:"Компьютер",title:"Железо ПК",author:"Соломенчук",authorName:"Валентин",pages:"446",isLearned:!1,dateLearned:""},{id:68,year:2011,category:"основы",theme:"Компьютер",title:"Организация ЭВМ и систем (2е)",author:"Орлов",authorName:"Сергей",pages:"688",isLearned:!1,dateLearned:""},{id:69,year:2012,category:"основы",theme:"Компьютер",title:"Прикладная архитектура базовой модели процессора Intel",author:"Довгий",authorName:"Павел",pages:"115",isLearned:!1,dateLearned:""},{id:70,year:2012,category:"основы",theme:"Компьютер",title:"Архитектура компьютеров и проектирование компьютерных систем (4е)",author:"Паттерсон",authorName:"Дэвид",pages:"788",isLearned:!1,dateLearned:""},{id:71,year:2012,category:"основы",theme:"Компьютер",title:"Компьютер глазами хакера (3е)",author:"Фленов",authorName:"Михаил",pages:"274",isLearned:!1,dateLearned:""},{id:72,year:2013,category:"основы",theme:"Компьютер",title:"Архитектура компьютера (6е)",author:"Таненбаум",authorName:"Эндрю",pages:"816",isLearned:!1,dateLearned:""},{id:73,year:2013,category:"основы",theme:"Компьютер",title:"Цифровая схемотехника и архитектура компьютера",author:"Харрис",authorName:"Дэвид",pages:"1662",isLearned:!1,dateLearned:""},{id:74,year:2015,category:"основы",theme:"Компьютер",title:"Архитектура компьютеров",author:"Буза",authorName:"Михаил",pages:"416",isLearned:!1,dateLearned:""},{id:75,year:2018,category:"основы",theme:"Компьютер",title:"Основы вычислительной техники",author:"Куль",authorName:"Татьяна",pages:"244",isLearned:!1,dateLearned:""},{id:76,year:2018,category:"основы",theme:"Компьютер",title:"20 уроков ассемблера под DOS",author:"Углев",authorName:"Семен",pages:"56",isLearned:!1,dateLearned:""},{id:77,year:2018,category:"основы",theme:"Компьютер",title:"Цифровая схемотехника и архитектура компьютера (2е)",author:"Харрис",authorName:"Дэвид",pages:"794",isLearned:!1,dateLearned:""},{id:78,year:2019,category:"основы",theme:"Компьютер",title:"Архитектура вычислительных систем и ассемблер",author:"Гагарина",authorName:"Лариса",pages:"369",isLearned:!1,dateLearned:""},{id:79,year:2019,category:"основы",theme:"Компьютер",title:"Анализ вредоносных программ",author:"Монаппа",pages:"453",isLearned:!1,dateLearned:""},{id:80,year:2019,category:"основы",theme:"Компьютер",title:"Основы компьютерной электроники (2е)",author:"Фомин",authorName:"Дмитрий",pages:"109",isLearned:!1,dateLearned:""},{id:81,year:2019,category:"основы",theme:"Компьютер",title:"Цифровая схемотехника и архитектура компьютера",author:"Харрис",authorName:"Дэвид",pages:"357",isLearned:!1,dateLearned:""},{id:82,year:2020,category:"основы",theme:"Компьютер",title:"API",author:"Константинов",authorName:"Сергей",pages:"86",isLearned:!1,dateLearned:""},{id:83,year:2021,category:"основы",theme:"Компьютер",title:"Работа с ядром Windows",author:"Йосифович",authorName:"Павел",pages:"400",isLearned:!1,dateLearned:""},{id:84,year:2022,category:"основы",theme:"Компьютер",title:"Компьютерные системы. Архитектура и программирование (3е)",author:"Брайант",authorName:"Рэндал",pages:"996",isLearned:!1,dateLearned:""},{id:85,year:2022,category:"основы",theme:"Компьютер",title:"Как на самом деле работают компьютеры",author:"Джастис",authorName:"Мэтью",pages:"429",isLearned:!1,dateLearned:""},{id:86,year:2023,category:"основы",theme:"Компьютер",title:"Архитектура встраиваемых систем",author:"Лакамера",authorName:"Даниэле",pages:"334",isLearned:!1,dateLearned:""},{id:87,year:2023,category:"основы",theme:"Компьютер",title:"ЭВМ и периферийные устройства",author:"Лянг",authorName:"Виктор",pages:"581",isLearned:!1,dateLearned:""},{id:88,year:2023,category:"основы",theme:"Компьютер",title:"Архитектура компьютерных систем",author:"Нисан",authorName:"Ноам",pages:"499",isLearned:!1,dateLearned:""},{id:89,year:2023,category:"основы",theme:"Компьютер",title:"Архитектура ЭВМ",author:"Скаков",authorName:"Павел",pages:"102",isLearned:!1,dateLearned:""},{}],[{id:1,year:2002,category:"основы",theme:"Bios",title:"Секреты BIOS",author:"Трасковский",authorName:"Антон",pages:"393",isLearned:!1,dateLearned:""},{id:2,year:2004,category:"основы",theme:"Bios",title:"Настройка BIOS",author:"Белунцов",pages:"404",isLearned:!1,dateLearned:""},{id:3,year:2005,category:"основы",theme:"Bios",title:"Секреты BIOS",author:"Белунцов",pages:"336",isLearned:!1,dateLearned:""},{id:4,year:2005,category:"основы",theme:"Bios",title:"Настройки BIOS",author:"Дмитриев",pages:"284",isLearned:!1,dateLearned:""},{id:5,year:2006,category:"основы",theme:"Bios",title:"BIOS. Оптимизация и разгон компьютера",author:"Карпов",authorName:"Борис",pages:"177",isLearned:!1,dateLearned:""},{id:6,year:2006,category:"основы",theme:"Bios",title:"BIOS Setup",author:"Михлин",authorName:"Евгений",pages:"241",isLearned:!1,dateLearned:""},{id:7,year:2007,category:"основы",theme:"Bios",title:"Настройки BIOS (3е)",author:"Дмитриев",pages:"289",isLearned:!1,dateLearned:""},{id:8,year:2007,category:"основы",theme:"Bios",title:"Bios и тонкая настройка ПК",author:"Донцов",pages:"79",isLearned:!1,dateLearned:""},{id:9,year:2008,category:"основы",theme:"Bios",title:"Bios",author:"Салихан",authorName:"Дармаван",pages:"763",isLearned:!1,dateLearned:""},{id:10,year:2009,category:"основы",theme:"Bios",title:"BIOS на 100%",author:"Зозуля",authorName:"Юрий",pages:"336",isLearned:!1,dateLearned:""},{id:11,year:2010,category:"основы",theme:"Bios",title:"Справочник по параметрам BIOS",author:"Вонг",authorName:"Адриан",pages:"149",isLearned:!1,dateLearned:""},{id:12,year:2013,category:"основы",theme:"Bios",title:"BIOS. Настройки (5е)",author:"Дмитриев",pages:"314",isLearned:!1,dateLearned:""},{}],[{id:1,year:2006,category:"основы",theme:"Операционные системы",title:"Операционные системы. Разработка и реализация (2е)",author:"Таненбаум",authorName:"Эндрю",pages:"576",isLearned:!1,dateLearned:""},{id:2,year:2007,category:"основы",theme:"Операционные системы",title:"Операционные системы. Разработка и реализация (3е)",author:"Таненбаум",authorName:"Эндрю",pages:"706",isLearned:!1,dateLearned:""},{id:3,year:2011,category:"основы",theme:"Операционные системы",title:"Ubuntu и Debian Linux для продвинутых",author:"Негус",authorName:"Кристофер",pages:"354",isLearned:!1,dateLearned:""},{id:4,year:2014,category:"основы",theme:"Операционные системы",title:"Операционные системы и среды",author:"Батаев",authorName:"Алексей",pages:"268",isLearned:!1,dateLearned:""},{id:5,year:2015,category:"основы",theme:"Операционные системы",title:"Современные операционные системы (4е)",author:"Таненбаум",authorName:"Эндрю",pages:"1120",isLearned:!1,dateLearned:""},{id:6,year:2020,category:"основы",theme:"Операционные системы",title:"Операционные системы",author:"Куль",authorName:"Эндрю",pages:"1120",isLearned:!1,dateLearned:""},{id:7,year:2021,category:"основы",theme:"Операционные системы",title:"Операционные системы",author:"Староверова",authorName:"Наталья",pages:"410",isLearned:!1,dateLearned:""},{id:8,year:2022,category:"основы",theme:"Операционные системы",title:"Основы разработки операционных систем",author:"Оношко",authorName:"Дмитрий",pages:"124",isLearned:!1,dateLearned:""},{}],[{id:1,year:1999,category:"основы",theme:"Компьютерные сети",title:"Локальные сети",author:"Андерсон",authorName:"Криста",pages:"458",isLearned:!1,dateLearned:""},{id:2,year:1999,category:"основы",theme:"Компьютерные сети",title:"Стандарты и протоколы Интернета",author:"Найк",authorName:"Дилип",pages:"362",isLearned:!1,dateLearned:""},{id:3,year:1999,category:"основы",theme:"Компьютерные сети",title:"TCP-IP. Сертификационный экзамен",author:"Титтел",authorName:"Эд",pages:"393",isLearned:!1,dateLearned:""},{id:4,year:2e3,category:"основы",theme:"Компьютерные сети",title:"Локальные сети. Архитектура, алгоритмы, проектирование",author:"Новиков",pages:"308",isLearned:!1,dateLearned:""},{id:5,year:2e3,category:"основы",theme:"Компьютерные сети",title:"TCP IP. Архитектура, протоколы и реализация(2е)",author:"Фейт",authorName:"Сидни",pages:"450",isLearned:!1,dateLearned:""},{id:6,year:2001,category:"основы",theme:"Компьютерные сети",title:"Интернет протоколы безопасности",author:"Блэк",pages:"282",isLearned:!1,dateLearned:""},{id:7,year:2001,category:"основы",theme:"Компьютерные сети",title:"Принципы маршрутизации в Internet (2е)",author:"Хелеби",authorName:"Сэм",pages:"404",isLearned:!1,dateLearned:""},{id:8,year:2002,category:"основы",theme:"Компьютерные сети",title:"Компьютерные сети",author:"Microsoft",pages:"659",isLearned:!1,dateLearned:""},{id:9,year:2002,category:"основы",theme:"Компьютерные сети",title:"Сети TCP IP. Том 3. Разработка приложений типа клиент сервер",author:"Камер",authorName:"Дуглас",pages:"576",isLearned:!1,dateLearned:""},{id:10,year:2002,category:"основы",theme:"Компьютерные сети",title:"Сеть своими руками",author:"Поляк-Брагинский",authorName:"Александр",pages:"319",isLearned:!1,dateLearned:""},{id:11,year:2002,category:"основы",theme:"Компьютерные сети",title:"Эффективное программирование TCP-IP",author:"Снейдер",authorName:"Йон",pages:"320",isLearned:!1,dateLearned:""},{id:12,year:2002,category:"основы",theme:"Компьютерные сети",title:"Компьютерные сети и сетевые технологии",author:"Спортак",authorName:"Марк",pages:"714",isLearned:!1,dateLearned:""},{id:13,year:2003,category:"основы",theme:"Компьютерные сети",title:"Сети TCP IP. Том 1. Принципы, протоколы и структура (4е)",author:"Камер",authorName:"Дуглас",pages:"847",isLearned:!1,dateLearned:""},{id:14,year:2003,category:"основы",theme:"Компьютерные сети",title:"Компьютерные сети (2е)",author:"Кульгин",authorName:"Максим",pages:"459",isLearned:!1,dateLearned:""},{id:15,year:2003,category:"основы",theme:"Компьютерные сети",title:"Офисные локальные сети",author:"Сергеев",authorName:"Александр",pages:"321",isLearned:!1,dateLearned:""},{id:16,year:2003,category:"основы",theme:"Компьютерные сети",title:"Протоколы TCP-IP. Практическое руководство",author:"Стивенс",authorName:"Ричард",pages:"339",isLearned:!1,dateLearned:""},{id:17,year:2003,category:"основы",theme:"Компьютерные сети",title:"Компьютерные сети (4е)",author:"Таненбаум",authorName:"Эндрю",pages:"993",isLearned:!1,dateLearned:""},{id:18,year:2003,category:"основы",theme:"Компьютерные сети",title:"Протоколы интернета",author:"Филимонов",authorName:"Александр",pages:"514",isLearned:!1,dateLearned:""},{id:19,year:2003,category:"основы",theme:"Компьютерные сети",title:"Технологии интернет",author:"Ходидев",authorName:"Баходыр",pages:"111",isLearned:!1,dateLearned:""},{id:20,year:2003,category:"основы",theme:"Компьютерные сети",title:"TCP IP. Учебный курс",author:"Чеппел",authorName:"Лора",pages:"976",isLearned:!1,dateLearned:""},{id:21,year:2004,category:"основы",theme:"Компьютерные сети",title:"Сеть для дома и офиса",author:"Alex One",pages:"404",isLearned:!1,dateLearned:""},{id:21,year:2004,category:"основы",theme:"Компьютерные сети",title:"Вычислительные системы, сети и телекоммуникации (2е)",author:"Бройдо",authorName:"Владимир",pages:"706",isLearned:!1,dateLearned:""},{id:22,year:2004,category:"основы",theme:"Компьютерные сети",title:"Сделай сам компьютерную сеть",author:"Колисниченко",pages:"403",isLearned:!1,dateLearned:""},{id:23,year:2004,category:"основы",theme:"Компьютерные сети",title:"Компьютерные сети (2е)",author:"Куроуз",authorName:"Джеймс",pages:"731",isLearned:!1,dateLearned:""},{id:24,year:2004,category:"основы",theme:"Компьютерные сети",title:"Локальная сеть своими руками",author:"Минаев",pages:"376",isLearned:!1,dateLearned:""},{id:25,year:2004,category:"основы",theme:"Компьютерные сети",title:"Проектирование и внедрение компьютерных сетей (2е)",author:"Палмер",authorName:"Майкл",pages:"756",isLearned:!1,dateLearned:""},{id:26,year:2004,category:"основы",theme:"Компьютерные сети",title:"TCP-IP. Сетевое администрирование (3е)",author:"Хант",authorName:"Крейг",pages:"816",isLearned:!1,dateLearned:""},{id:27,year:2005,category:"основы",theme:"Компьютерные сети",title:"Локальная сеть без проблем",author:"Буравчик",authorName:"Джон",pages:"230",isLearned:!1,dateLearned:""},{id:28,year:2005,category:"основы",theme:"Компьютерные сети",title:"Основы локальных сетей",author:"Новиков",pages:"360",isLearned:!1,dateLearned:""},{id:29,year:2005,category:"основы",theme:"Компьютерные сети",title:"Администрирование сети на примерах",author:"Поляк-Брагинский",authorName:"Александр",pages:"321",isLearned:!1,dateLearned:""},{id:30,year:2006,category:"основы",theme:"Компьютерные сети",title:"Компьютерные сети. Хитрости",author:"Айвенс",authorName:"Кэти",pages:"305",isLearned:!1,dateLearned:""},{id:31,year:2006,category:"основы",theme:"Компьютерные сети",title:"Сети ЭВМ и телекомуникация",author:"Анкудинов",authorName:"Георгий",pages:"176",isLearned:!1,dateLearned:""},{id:32,year:2006,category:"основы",theme:"Компьютерные сети",title:"Компьютерные сети",author:"Заика",pages:"436",isLearned:!1,dateLearned:""},{id:33,year:2006,category:"основы",theme:"Компьютерные сети",title:"Компьютерные сети. Первый шаг",author:"Одом",authorName:"Уэнделл",pages:"403",isLearned:!1,dateLearned:""},{id:34,year:2008,category:"основы",theme:"Компьютерные сети",title:"Сеть своими руками",author:"Глушаков",pages:"144",isLearned:!1,dateLearned:""},{id:35,year:2008,category:"основы",theme:"Компьютерные сети",title:"Компьютерные сети (3е)",author:"Максимов",authorName:"Николай",pages:"447",isLearned:!1,dateLearned:""},{id:36,year:2008,category:"основы",theme:"Компьютерные сети",title:"Интернет. Шаг за шагом",author:"Пащенко",authorName:"Игорь",pages:"478",isLearned:!1,dateLearned:""},{id:37,year:2008,category:"основы",theme:"Компьютерные сети",title:"TCP-IP. Сетевое администрирование (3е)",author:"Хант",authorName:"Крейг",pages:"813",isLearned:!1,dateLearned:""},{id:38,year:2009,category:"основы",theme:"Компьютерные сети",title:"Основы компьютерных сетей",author:"Олифер",authorName:"Виктор",pages:"352",isLearned:!1,dateLearned:""},{id:39,year:2010,category:"основы",theme:"Компьютерные сети",title:"Компьютерные сети. Принципы, технологии, протоколы (4е)",author:"Олифер",authorName:"Виктор",pages:"945",isLearned:!1,dateLearned:""},{id:40,year:2011,category:"основы",theme:"Компьютерные сети",title:"Локальная сеть. Самое необходимое (2е)",author:"Поляк-Брагинский",authorName:"Александр",pages:"576",isLearned:!1,dateLearned:""},{id:41,year:2012,category:"основы",theme:"Компьютерные сети",title:"Организация компьютерных сетей",author:"Коломоец",authorName:"Геннадий",pages:"158",isLearned:!1,dateLearned:""},{id:42,year:2012,category:"основы",theme:"Компьютерные сети",title:"Компьютерные сети (5е)",author:"Таненбаум",authorName:"Эндрю",pages:"960",isLearned:!1,dateLearned:""},{id:43,year:2014,category:"основы",theme:"Компьютерные сети",title:"Сеть. Как устроен интернет",author:"Блам",authorName:"Эндрю",pages:"136",isLearned:!1,dateLearned:""},{id:44,year:2014,category:"основы",theme:"Компьютерные сети",title:"Протокол SIP. Справочник",author:"Гольдштейн",pages:"456",isLearned:!1,dateLearned:""},{id:45,year:2014,category:"основы",theme:"Компьютерные сети",title:"Сетевая адресация, разрешение имен, мрашрутизация",author:"Дюгуров",authorName:"Денис",pages:"96",isLearned:!1,dateLearned:""},{id:46,year:2016,category:"основы",theme:"Компьютерные сети",title:"Компьютерные сети. Нисходящий подход (6е)",author:"Куроуз",authorName:"Джеймс",pages:"912",isLearned:!1,dateLearned:""},{id:47,year:2016,category:"основы",theme:"Компьютерные сети",title:"Компьютерные сети (5е)",author:"Олифер",authorName:"Виктор",pages:"996",isLearned:!1,dateLearned:""},{id:48,year:2019,category:"основы",theme:"Компьютерные сети",title:"Информационные кабельные сети",author:"Ходасевич",authorName:"Олег",pages:"197",isLearned:!1,dateLearned:""},{id:49,year:2020,category:"основы",theme:"Компьютерные сети",title:"Компьютерные сети (6е)",author:"Олифер",authorName:"Виктор",pages:"1010",isLearned:!1,dateLearned:""},{id:50,year:2021,category:"основы",theme:"Компьютерные сети",title:"ПО компьютерных сетей (2е)",author:"Исаченко",authorName:"Олег",pages:"159",isLearned:!1,dateLearned:""},{id:51,year:2021,category:"основы",theme:"Компьютерные сети",title:"HTTP 2 в действии",author:"Поллард",authorName:"Барри",pages:"425",isLearned:!1,dateLearned:""},{id:52,year:2022,category:"основы",theme:"Компьютерные сети",title:"Как работают компьютерные сети и интернет",author:"Северанс",authorName:"Чарльз",pages:"116",isLearned:!1,dateLearned:""},{id:53,year:2023,category:"основы",theme:"Компьютерные сети",title:"Коммуникационные сети",author:"Вальран",authorName:"Жан",pages:"270",isLearned:!1,dateLearned:""},{id:54,year:2023,category:"основы",theme:"Компьютерные сети",title:"Компьютерные сети (6е)",author:"Таненбаум",authorName:"Эндрю",pages:"992",isLearned:!1,dateLearned:""},{id:55,year:2023,category:"основы",theme:"Компьютерные сети",title:"Компьютерные сети",author:"Харитонов",authorName:"Антон",pages:"137",isLearned:!1,dateLearned:""},{}],[{id:1,year:"1 класс",category:"основы",theme:"Информатика",title:"Информатика 2018",author:"Рамин Махмудзаде",pages:"76",isLearned:!1,dateLearned:""},{id:2,year:"5 класс",category:"основы",theme:"Информатика",title:"Информатика 2013",author:"Босова Л.Л., Босова А.Ю.",pages:"186",isLearned:!1,dateLearned:""},{id:3,year:"6 класс",category:"основы",theme:"Информатика",title:"Информатика 2013",author:"Босова Л.Л., Босова А.Ю.",pages:"215",isLearned:!1,dateLearned:""},{id:4,year:"7 класс",category:"основы",theme:"Информатика",title:"Информатика 2013",author:"Босова Л.Л., Босова А.Ю.",pages:"226",isLearned:!1,dateLearned:""},{id:5,year:"8 класс",category:"основы",theme:"Информатика",title:"Информатика 2013",author:"Босова Л.Л., Босова А.Ю.",pages:"158",isLearned:!1,dateLearned:""},{id:5,year:"8 класс",category:"основы",theme:"Информатика",title:"Основы информатики 8 класс",author:"Болтаев",pages:"144",isLearned:!1,dateLearned:""},{id:6,year:"9 класс",category:"основы",theme:"Информатика",title:"Информатика 2013",author:"Босова Л.Л., Босова А.Ю.",pages:"182",isLearned:!1,dateLearned:""},{id:7,year:"9 класс",category:"основы",theme:"Информатика",title:"Информатика и ИКТ. Часть 1 2012",author:"Босова Л.Л., Босова А.Ю.",pages:"247",isLearned:!1,dateLearned:""},{id:8,year:"9 класс",category:"основы",theme:"Информатика",title:"Информатика и ИКТ. Часть 2 2012",author:"Босова Л.Л., Босова А.Ю.",pages:"82",isLearned:!1,dateLearned:""},{id:9,year:"9 класс ОГЭ",category:"основы",theme:"Информатика",title:"Информатика. ГИА. Учебно-справочные материалы 2011",author:"Авдошин С.М.",pages:"254",isLearned:!1,dateLearned:""},{id:10,year:"9 класс ОГЭ",category:"основы",theme:"Информатика",title:"Информатика. 10 тренировочных вариантов 2017",author:"Ушаков Д.М.",pages:"111",isLearned:!1,dateLearned:""},{id:11,year:"9 класс ОГЭ",category:"основы",theme:"Информатика",title:"Информатика. 20 тренировочных вариантов 2017",author:"Ушаков Д.М.",pages:"208",isLearned:!1,dateLearned:""},{id:12,year:"9 класс ОГЭ",category:"основы",theme:"Информатика",title:"Информатика. Большой сборник тематических заданий 2018",author:"Ушаков Д.М.",pages:"205",isLearned:!1,dateLearned:""},{id:13,year:"9 класс ОГЭ",category:"основы",theme:"Информатика",title:"Информатика. Новый полный справочник 2017",author:"Ушаков Д.М.",pages:"289",isLearned:!1,dateLearned:""},{id:14,year:"9 класс ОГЭ",category:"основы",theme:"Информатика",title:"Информатика. Типовые тестовые задания 2017",author:"Ушаков Д.М.",pages:"192",isLearned:!1,dateLearned:""},{id:9,year:"10 класс 2013",category:"основы",theme:"Информатика",title:"Информатика. Углубленный уровень. Часть 1",author:"Поляков К.Ю., Еремин Е.А.",pages:"347",isLearned:!1,dateLearned:""},{id:10,year:"10 класс 2013",category:"основы",theme:"Информатика",title:"Информатика. Углубленный уровень. Часть 2",author:"Поляков К.Ю., Еремин Е.А.",pages:"305",isLearned:!1,dateLearned:""},{id:11,year:"10 класс 2015",category:"основы",theme:"Информатика",title:"Информатика. Базовый уровень",author:"Семакин И.Г., Хеннер Е.К., Шеина Т.Ю.",pages:"265",isLearned:!1,dateLearned:""},{id:12,year:"10-11 класс 2015",category:"основы",theme:"Информатика",title:"Информатика и ИКТ. Базовый уровень",author:"Семакин И.Г., Хеннер Е.К.",pages:"249",isLearned:!1,dateLearned:""},{id:13,year:"11 класс 2016",category:"основы",theme:"Информатика",title:"Информатика. Базовый уровень",author:"Босова Л.Л., Босова А.Ю.",pages:"256",isLearned:!1,dateLearned:""},{id:14,year:"11 класс 2014",category:"основы",theme:"Информатика",title:"Информатика. Базовый уровень",author:"Семакин И.Г., Хеннер Е.К., Шеина Т.Ю.",pages:"228",isLearned:!1,dateLearned:""},{id:15,year:"11 класс 2013",category:"основы",theme:"Информатика",title:"Информатика. Углубленный уровень. Часть 1",author:"Поляков К.Ю., Еремин Е.А.",pages:"241",isLearned:!1,dateLearned:""},{id:16,year:"11 класс 2013",category:"основы",theme:"Информатика",title:"Информатика. Углубленный уровень. Часть 2",author:"Поляков К.Ю., Еремин Е.А.",pages:"307",isLearned:!1,dateLearned:""},{id:17,year:"11 класс 2013",category:"основы",theme:"Информатика",title:"Информатика. Пособие для подготовки к ЕГЭ",author:"Вовк Е.Т.",pages:"324",isLearned:!1,dateLearned:""},{id:19,year:"11 класс ЕГЭ 2020",category:"основы",theme:"Информатика",title:"Информатика. Справочник для подготовки к ЕГЭ",author:"Богомолова",pages:"495",isLearned:!1,dateLearned:""},{id:19,year:"2002",category:"основы",theme:"Информатика",title:"Информатика. Часть 1",author:"Майстренко",pages:"49",isLearned:!1,dateLearned:""},{id:19,year:"2002",category:"основы",theme:"Информатика",title:"Лекции по информатике",author:"Масюков",pages:"101",isLearned:!1,dateLearned:""},{id:19,year:"2004",category:"основы",theme:"Информатика",title:"Информатика",author:"Горяев",authorName:"Юрий",pages:"116",isLearned:!1,dateLearned:""},{id:19,year:"2004",category:"основы",theme:"Информатика",title:"Информатика для школ и колледжей",author:"Есипов",authorName:"Александр",pages:"470",isLearned:!1,dateLearned:""},{id:19,year:"2005",category:"основы",theme:"Информатика",title:"Информатика",author:"Набиулина",pages:"188",isLearned:!1,dateLearned:""},{id:19,year:"2007",category:"основы",theme:"Информатика",title:"Информатика",author:"Закирова",pages:"178",isLearned:!1,dateLearned:""},{id:19,year:"2008",category:"основы",theme:"Информатика",title:"Информационные технологии",author:"Михеева",pages:"189",isLearned:!1,dateLearned:""},{id:19,year:"2010",category:"основы",theme:"Информатика",title:"Информатика",author:"Грошев",authorName:"Александр",pages:"470",isLearned:!1,dateLearned:""},{id:19,year:"2011",category:"основы",theme:"Информатика",title:"Занимательная информатика",author:"Златопольский",pages:"425",isLearned:!1,dateLearned:""},{id:19,year:"2011",category:"основы",theme:"Информатика",title:"Информатика. Базовый курс (2е)",author:"Симонович",pages:"642",isLearned:!1,dateLearned:""},{id:19,year:"2011",category:"основы",theme:"Информатика",title:"Информатика. Базовый курс (3е)",author:"Симонович",pages:"638",isLearned:!1,dateLearned:""},{id:19,year:"2012",category:"основы",theme:"Информатика",title:"Краткий курс истории информатики",author:"Абламейко",authorName:"Сергей",pages:"184",isLearned:!1,dateLearned:""},{id:19,year:"2016",category:"основы",theme:"Информатика",title:"Теоретические основы информатики. Учебник для вузов",author:"Стариченко",authorName:"Борис",pages:"401",isLearned:!1,dateLearned:""},{id:20,year:"2017",category:"основы",theme:"Информатика",title:"Программирование теоремы и задачи (6е)",author:"Шень",authorName:"Александр",pages:"321",isLearned:!1,dateLearned:""},{id:20,year:"2022",category:"основы",theme:"Информатика",title:"Введение в теорию алгоритмических языков и компиляторов",author:"Гагарина",pages:"175",isLearned:!1,dateLearned:""},{id:20,year:"2022",category:"основы",theme:"Информатика",title:"Информатика для инженеров",author:"Лопатин",authorName:"Валерий",pages:"170",isLearned:!1,dateLearned:""},{id:18,year:"2023",category:"основы",theme:"Информатика",title:"Информатика. Учебник для колледжей (2е)",author:"Гуриков",authorName:"Сергей",pages:"567",isLearned:!1,dateLearned:""},{}],[{id:1,year:2001,category:"основы",theme:"ООП",title:"Приемы объектно-ориентированного проектирования. Паттерны проектирования",author:"Гамма",authorName:"Эрих",pages:"344",isLearned:!1,dateLearned:""},{id:2,year:2002,category:"основы",theme:"ООП",title:"Шаблоны проектирования. Новый подход к ООП",author:"Шаллоуей",authorName:"Алан",pages:"271",isLearned:!1,dateLearned:""},{id:3,year:2002,category:"основы",theme:"ООП",title:"Объектно-ориентированные методы. Принципы и практика (3е)",author:"Грэхем",authorName:"Иан",pages:"882",isLearned:!1,dateLearned:""},{id:4,year:2006,category:"основы",theme:"ООП",title:"ООП",author:"Бадд",authorName:"Т.",pages:"296",isLearned:!1,dateLearned:""},{id:5,year:2008,category:"основы",theme:"ООП",title:"Основы ООП",author:"Финогенов",authorName:"К.Г.",pages:"93",isLearned:!1,dateLearned:""},{id:6,year:2010,category:"основы",theme:"ООП",title:"Приемы объектно-ориентированного проектирования. Паттерны проектирования",author:"Гамма",authorName:"Эрих",pages:"368",isLearned:!1,dateLearned:""},{id:7,year:2011,category:"основы",theme:"ООП",title:"Алгоритмическое и ООП",author:"Холодов",authorName:"Георгий",pages:"459",isLearned:!1,dateLearned:""},{id:8,year:2012,category:"основы",theme:"ООП",title:"Практикуп по ООП (3е)",author:"Бабушкина",authorName:"Ирина",pages:"372",isLearned:!1,dateLearned:""},{id:9,year:2014,category:"основы",theme:"ООП",title:"Объектно-ориентированное мышление",author:"Вайсфельд",authorName:"Мэтт",pages:"304",isLearned:!1,dateLearned:""},{id:10,year:2014,category:"основы",theme:"ООП",title:"ООП Хорошая книга для хороших людей",author:"Комлев",authorName:"Николай",pages:"300",isLearned:!1,dateLearned:""},{id:11,year:2015,category:"основы",theme:"ООП",title:"Практикуп по ООП (4е)",author:"Бабушкина",authorName:"Ирина",pages:"369",isLearned:!1,dateLearned:""},{id:12,year:2015,category:"основы",theme:"ООП",title:"Приемы ООП. Паттерны проектирования",author:"Гамма",authorName:"Эрих",pages:"368",isLearned:!1,dateLearned:""},{id:13,year:2015,category:"основы",theme:"ООП",title:"ООП",author:"Николаев",authorName:"Евгений",pages:"225",isLearned:!1,dateLearned:""},{id:14,year:2015,category:"основы",theme:"ООП",title:"ООП Лабораторный практикум 1",author:"Николаев",authorName:"Евгений",pages:"183",isLearned:!1,dateLearned:""},{id:15,year:2015,category:"основы",theme:"ООП",title:"ООП Лабораторный практикум 2",author:"Николаев",authorName:"Евгений",pages:"156",isLearned:!1,dateLearned:""},{id:16,year:2016,category:"основы",theme:"ООП",title:"Основы ООП (ИНТУИТ)",author:"Мейер",pages:"970",isLearned:!1,dateLearned:""},{id:17,year:2018,category:"основы",theme:"ООП",title:"ООП. Настольная книга программиста",author:"Комлев",authorName:"Николай",pages:"299",isLearned:!1,dateLearned:""},{id:18,year:2020,category:"основы",theme:"ООП",title:"Практикум по ООП",author:"Бабушкина",authorName:"Ирина",pages:"369",isLearned:!1,dateLearned:""},{id:19,year:2020,category:"основы",theme:"ООП",title:"Паттерны объектно-ориентированного проектирования",author:"Гамма",authorName:"Эрих",pages:"448",isLearned:!1,dateLearned:""},{id:20,year:2023,category:"основы",theme:"ООП",title:"Объекты. Стильное ООП",author:"Нобак",authorName:"Маттиас",pages:"304",isLearned:!1,dateLearned:""},{}],[{id:1,year:1947,category:"основы",theme:"Математика",title:"Основы теоретической логики",author:"Гильберт",authorName:"Д.",pages:"153",isLearned:!1,dateLearned:""},{id:2,year:1959,category:"основы",theme:"Математика",title:"Введение в математическую логику",author:"Попов",authorName:"А.",pages:"109",isLearned:!1,dateLearned:""},{id:3,year:1961,category:"основы",theme:"Математика",title:"Математическая логика",author:"Гудстейн",authorName:"Р.",pages:"166",isLearned:!1,dateLearned:""},{id:4,year:1965,category:"основы",theme:"Математика",title:"Графы и их применение",author:"Оре",authorName:"Ойстин",pages:"175",isLearned:!1,dateLearned:""},{id:5,year:1972,category:"основы",theme:"Математика",title:"Алгебра логики в задачах",author:"Гиндикин",authorName:"Семен",pages:"288",isLearned:!1,dateLearned:""},{id:6,year:1973,category:"основы",theme:"Математика",title:"Теория графов",author:"Харари",authorName:"Ф.",pages:"306",isLearned:!1,dateLearned:""},{id:7,year:1978,category:"основы",theme:"Математика",title:"Дисциплина программирования",author:"Дейкстра",authorName:"Э.",pages:"276",isLearned:!1,dateLearned:""},{id:8,year:1980,category:"основы",theme:"Математика",title:"Теория графов",author:"Оре",authorName:"Ойстин",pages:"340",isLearned:!1,dateLearned:""},{id:9,year:1982,category:"основы",theme:"Математика",title:"Вычислительные машины",author:"Гэри",authorName:"Майкл",pages:"419",isLearned:!1,dateLearned:""},{id:10,year:1988,category:"основы",theme:"Математика",title:"Комбинаторика для программистов",author:"Липский",authorName:"В.",pages:"200",isLearned:!1,dateLearned:""},{id:11,year:1989,category:"основы",theme:"Математика",title:"Взаимодействующие последовательные процессы",author:"Хоар",authorName:"Чарльз",pages:"266",isLearned:!1,dateLearned:""},{id:12,year:2002,category:"основы",theme:"Математика",title:"Языки программирования. Разработка и реализация (4е)",author:"Пратт",authorName:"Теренс",pages:"690",isLearned:!1,dateLearned:""},{id:13,year:2002,category:"основы",theme:"Математика",title:"Введение в теорию автоматов (2е)",author:"Хопкрофт",authorName:"Джон",pages:"521",isLearned:!1,dateLearned:""},{id:14,year:2003,category:"основы",theme:"Математика",title:"Дискретная математика для программистов",author:"Хаггарти",authorName:"Р.",pages:"317",isLearned:!1,dateLearned:""},{id:15,year:2004,category:"основы",theme:"Математика",title:"Дискретная математика и комбинаторика",author:"Андерсон",authorName:"Джеймс",pages:"959",isLearned:!1,dateLearned:""},{id:16,year:2004,category:"основы",theme:"Математика",title:"Дискретная математика (3е)",author:"Белоусов",authorName:"Алексей",pages:"743",isLearned:!1,dateLearned:""},{id:17,year:2004,category:"основы",theme:"Математика",title:"Дискретная математика",author:"Шапорев",authorName:"С.",pages:"131",isLearned:!1,dateLearned:""},{id:18,year:2006,category:"основы",theme:"Математика",title:"Комбинаторика",author:"Виленкин",authorName:"Наум",pages:"401",isLearned:!1,dateLearned:""},{id:19,year:2008,category:"основы",theme:"Математика",title:"Введение в теорию автоматов, языков и вычислений (2е)",author:"Хопкрофт",authorName:"Джон",pages:"528",isLearned:!1,dateLearned:""},{id:20,year:2009,category:"основы",theme:"Математика",title:"Теория графов",author:"Карпов",authorName:"Дмитрий",pages:"563",isLearned:!1,dateLearned:""},{id:21,year:2009,category:"основы",theme:"Математика",title:"Дискретная математика для программистов (3е)",author:"Новиков",authorName:"Федор",pages:"384",isLearned:!1,dateLearned:""},{id:22,year:2011,category:"основы",theme:"Математика",title:"Введение в информационный поиск",author:"Маннинг",authorName:"Кристофер",pages:"512",isLearned:!1,dateLearned:""},{id:23,year:2013,category:"основы",theme:"Математика",title:"Дискретная математика (2е)",author:"Новиков",authorName:"Кристофер",pages:"400",isLearned:!1,dateLearned:""},{}],[{id:1,year:2012,category:"framework",theme:"node",title:"Node.js. Разработка серверных веб-приложений на JavaScript",author:"Хэррон",authorName:"Дэвид",pages:"146",isLearned:!1,dateLearned:""},{id:2,year:2015,category:"framework",theme:"node",title:"Node.js. Путеводитель по технологии",author:"Сухов",authorName:"Кирилл",pages:"420",isLearned:!1,dateLearned:""},{id:3,year:2017,category:"framework",theme:"node",title:"Учусь node.js",author:"stackoverflow",pages:"441",isLearned:!1,dateLearned:"",origin:{year:2017,title:"Learning Node.js",author:"stackoverflow"}},{id:4,year:2017,category:"framework",theme:"node",title:"Учусь node.js (eng)",author:"stackoverflow",pages:"441",isLearned:!1,dateLearned:"",origin:{year:2017,title:"Learning Node.js",author:"stackoverflow"}},{id:5,year:2017,category:"framework",theme:"node",title:"Веб разработка Node и Express",author:"Браун",authorName:"Итан",pages:"336",isLearned:!1,dateLearned:""},{id:6,year:2017,category:"framework",theme:"node",title:"Шаблоны проектирования Node.JS (2-е изд)",author:"Каскиаро",authorName:"Марио",pages:"397",isLearned:!1,dateLearned:"",origin:{year:2016,title:"Node.js Design Patterns",author:"Mario Casciaro"}},{id:8,year:2017,category:"framework",theme:"node",title:"Изучаем Node (2-е изд)",author:"Пауэрс",authorName:"Шелли",pages:"304",isLearned:!1,dateLearned:"",origin:{year:2016,title:"Learning Node (2nd)",author:"Shelley Powers"}},{id:10,year:2018,category:"framework",theme:"node",title:"Руководство по Node.js",author:"ruvds",pages:"121",isLearned:!1,dateLearned:""},{id:11,year:2018,category:"framework",theme:"node",title:"Node.JS в действии (2-е изд)",author:"Кантелон",authorName:"Майк",pages:"432",isLearned:!1,dateLearned:""},{id:12,year:2021,category:"framework",theme:"node",title:"Веб разработка с применением Node и Express (2-е изд)",author:"Браун",authorName:"Итан",pages:"336",isLearned:!1,dateLearned:""},{id:13,year:2023,category:"framework",theme:"node",title:"Основы разработки на node.js",author:"Государев",authorName:"Илья",pages:"179",isLearned:!1,dateLearned:""},{}],[{id:1,year:2017,category:"framework",theme:"angular",title:"Изучаем Angular 2",author:"Дилеман",authorName:"Пабло",pages:"357",isLearned:!1,dateLearned:""},{id:2,year:2017,category:"framework",theme:"angular",title:"Стек MEAN. Mongo, Express, Angular, Node",author:"Холмс",authorName:"Саймон",pages:"496",isLearned:!1,dateLearned:""},{id:3,year:2018,category:"framework",theme:"angular",title:"Angular и TypeScript",author:"Файн",authorName:"Яков",pages:"464",isLearned:!1,dateLearned:""},{id:4,year:2018,category:"framework",theme:"angular",title:"Angular для профессионалов (2е)",author:"Фримен",authorName:"Адам",pages:"800",isLearned:!1,dateLearned:""},{id:5,year:2018,category:"framework",theme:"angular",title:"Angular. Сборник рецептов",author:"Фрисби",authorName:"Мэтт",pages:"466",isLearned:!1,dateLearned:""},{}],[{id:1,year:2017,category:"framework",theme:"react",title:"React.js. Быстрый старт (1е)",author:"Стоян Стефанов",pages:"304",isLearned:!1,dateLearned:""},{id:2,year:2018,category:"framework",theme:"react",title:"React и Redux",author:"Алекс Бэнкс",pages:"336",isLearned:!1,dateLearned:""},{id:3,year:2018,category:"framework",theme:"react",title:"React.js для начинающих (2е)",author:"Пацианский",pages:"147",isLearned:!0,dateLearned:"2022-07-27 ср"},{id:4,year:2018,category:"framework",theme:"react",title:"Основы Redux",author:"Пацианский",pages:"102",isLearned:!1,dateLearned:""},{id:5,year:2018,category:"framework",theme:"react",title:"Путь к изучению React",author:"Робин Верух",pages:"231",isLearned:!1,dateLearned:""},{id:6,year:2018,category:"framework",theme:"react",title:"Путь к изучению React (eng)",author:"Робин Верух",pages:"231",isLearned:!1,dateLearned:""},{id:7,year:2019,category:"framework",theme:"react",title:"React быстро",author:"Азат Мардан",pages:"560",isLearned:!1,dateLearned:""},{id:8,year:2019,category:"framework",theme:"react",title:"React быстро (eng)",author:"Азат Мардан",pages:"560",isLearned:!1,dateLearned:""},{id:9,year:2019,category:"framework",theme:"react",title:"Учебный курс по React",author:"Боб Зиролл",pages:"278",isLearned:!1,dateLearned:""},{id:10,year:2019,category:"framework",theme:"react",title:"Изучаем React (2е)",author:"Кирупа Чиннатамби",pages:"368",isLearned:!1,dateLearned:""},{id:12,year:2022,category:"framework",theme:"react",title:"React. Современные шаблоны для разработки приложений (2е)",author:"Алекс Бэнкс",pages:"320",isLearned:!1,dateLearned:""},{id:13,year:2019,category:"framework",theme:"react",title:"React в действии",author:"Марк Томас",pages:"368",isLearned:!1,dateLearned:""},{id:12,year:2023,category:"framework",theme:"react",title:"React. Сборник рецептов",author:"Гриффитс",pages:"530",isLearned:!1,dateLearned:""},{id:13,year:2023,category:"framework",theme:"react",title:"React. Быстрый старт (2е)",author:"Стоян Стефанов",pages:"304",isLearned:!1,dateLearned:""},{}],[(De={id:1,year:2019,category:"framework",theme:"vue",title:"Vue.js в действии",author:"Хэнчетт"},Fe(De,"author","Эрик"),Fe(De,"pages","306"),Fe(De,"isLearned",!1),Fe(De,"dateLearned",""),De),{}],[{id:1,year:2016,category:"framework",theme:"bootstrap",title:"Bootstrap Быстрое создание современных сайтов",author:"Машнин",authorName:"Тимур",pages:"145",isLearned:!0,dateLearned:"2021-08-14 сб"},{id:2,year:2016,category:"framework",theme:"bootstrap",title:"Bootstrap. Руководство",author:"Мержевич",authorName:"Влад",pages:"58",isLearned:!0,dateLearned:"2021-08-12 чт"},{id:3,year:2017,category:"framework",theme:"bootstrap",title:"Bootstrap в примерах",author:"Морето",authorName:"Сильвио",pages:"314",isLearned:!1,dateLearned:""},{id:4,year:2021,category:"framework",theme:"bootstrap",title:"Bootstrap и CSS-препроцессор Sass",author:"Прохоренок",authorName:"Николай",pages:"497",isLearned:!1,dateLearned:""},{}],[{id:1,year:2009,category:"framework",theme:"jquery",title:"jQuery в действии (1е)",author:" Бибо",authorName:"Бер",pages:"373",isLearned:!1,dateLearned:""},{id:2,year:2010,category:"framework",theme:"jquery",title:"jQuery. Новый стиль программирования на JavaScript",author:" Прохоренок",authorName:"Николай",pages:"272",isLearned:!1,dateLearned:""},{id:3,year:2010,category:"framework",theme:"jquery",title:"jQuery. Сборник рецептов (1е)",author:"Самков",authorName:"Геннадий",pages:"416",isLearned:!1,dateLearned:""},{id:4,year:2010,category:"framework",theme:"jquery",title:"Изучаем jQuery 1.3",author:"Чаффер",authorName:"Джонатан",pages:"448",isLearned:!1,dateLearned:""},{id:5,year:2011,category:"framework",theme:"jquery",title:"jQuery в действии (2е)",author:"Бибо",authorName:"Бер",pages:"612",isLearned:!1,dateLearned:""},{id:6,year:2011,category:"framework",theme:"jquery",title:"jQuery. Сборник рецептов (2е)",author:"Самков",authorName:"Геннадий",pages:"416",isLearned:!1,dateLearned:""},{id:7,year:2012,category:"framework",theme:"jquery",title:"HeadFirst jQuery",author:"Бенедетти",authorName:"Райан",pages:"528",isLearned:!1,dateLearned:""},{id:8,year:2012,category:"framework",theme:"jquery",title:"Изучаем jQuery (2е)",author:"Каслдайн",authorName:"Эрл",pages:"400",isLearned:!1,dateLearned:""},{id:9,year:2012,category:"framework",theme:"jquery",title:"jQuery учебник для начинающих",author:"Шевчук",authorName:"Антон",pages:"122",isLearned:!1,dateLearned:""},{id:10,year:2013,category:"framework",theme:"jquery",title:"jQuery для профессионалов",author:"Фримен",authorName:"Адам",pages:"960",isLearned:!1,dateLearned:""},{id:11,year:2013,category:"framework",theme:"jquery",title:"jQuery Mobile Разработка приложений для смартфонов и планшетов",author:"Фритман",authorName:"Максимилиано",pages:"256",isLearned:!1,dateLearned:""},{id:12,year:2014,category:"framework",theme:"jquery",title:"Расширение библиотеки jQuery",author:"Вуд",authorName:"Кит",pages:"400",isLearned:!1,dateLearned:""},{id:13,year:2015,category:"framework",theme:"jquery",title:"JavaScript и jQuery исчерпывающее руководство (3е)",author:"Макфарланд",authorName:"Дэвид",pages:"880",isLearned:!1,dateLearned:""},{id:14,year:2015,category:"framework",theme:"jquery",title:"Разработка интерактивных сайтов jQuery",author:"Перепелица",authorName:"Филипп",pages:"142",isLearned:!1,dateLearned:""},{id:15,year:2016,category:"framework",theme:"jquery",title:"jQuery для начинающих",author:"Шевчук",authorName:"Антон",pages:"156",isLearned:!0,dateLearned:"2021-09-27 пн"},{id:16,year:2017,category:"framework",theme:"jquery",title:"jQuery в действии (3е)",author:"Бибо",authorName:"Бер",pages:"528",isLearned:!1,dateLearned:""},{id:17,year:2017,category:"framework",theme:"jquery",title:"JavaScript и jQuery. Интерактивная разработка",author:"Дакетт",authorName:"Джон",pages:"640",isLearned:!1,dateLearned:""},{}],[{id:1,year:2008,category:"cms",theme:"1С Битрикс",title:"Корпоративный портал. Руководство администратора",author:"1С Битрикс",authorName:"",pages:"130",isLearned:!1,dateLearned:""},{id:2,year:2009,category:"cms",theme:"1С Битрикс",title:"Управление сайтом. Визуальный HTML редактор",author:"1С Битрикс",authorName:"",pages:"82",isLearned:!1,dateLearned:""},{id:3,year:2009,category:"cms",theme:"1С Битрикс",title:"1С Битрикс Постройте профессиональный сайт сами",author:"Басыров",authorName:"Роберт",pages:"302",isLearned:!1,dateLearned:""},{id:4,year:2009,category:"cms",theme:"1С Битрикс",title:"Открываем интернет-магазин с помощью 1С-Битрикс",author:"Басыров",authorName:"Роберт",pages:"511",isLearned:!1,dateLearned:""},{id:5,year:2010,category:"cms",theme:"1С Битрикс",title:"1С-Битрикс. Корпоративный портал. Повышение эффективности компании",author:"Басыров",authorName:"Роберт",pages:"320",isLearned:!1,dateLearned:""},{id:6,year:2012,category:"cms",theme:"1С Битрикс",title:"Управление сайтом. Администратор. Модули",author:"1С Битрикс",authorName:"",pages:"510",isLearned:!1,dateLearned:""},{id:7,year:2012,category:"cms",theme:"1С Битрикс",title:"Управление сайтом. Разработчик Bitrix Framework",author:"1С Битрикс",authorName:"",pages:"661",isLearned:!1,dateLearned:""},{id:8,year:2012,category:"cms",theme:"1С Битрикс",title:"Сайт на 1C-Битрикс. Создание, поддержка и продвижение",author:"Расторгуев",authorName:"",pages:"256",isLearned:!1,dateLearned:""},{id:9,year:2017,category:"cms",theme:"1С Битрикс",title:"Осваиваем популярные системы управления сайтом (CMS)",author:"Горнаков",authorName:"",pages:"326",isLearned:!1,dateLearned:""},{id:1,year:2010,category:"cms",theme:"Drupal",title:"Drupal",author:"Байрон",authorName:"Анжела",pages:"577",isLearned:!1,dateLearned:""},{id:2,year:2011,category:"cms",theme:"Drupal",title:"CMS Drupal 7 (3е)",author:"Томлинсон",authorName:"Тодд",pages:"560",isLearned:!1,dateLearned:""},{id:3,year:2013,category:"cms",theme:"Drupal",title:"Профессиональная разработка на Drupal 7",author:"Мелансон",authorName:"",pages:"688",isLearned:!1,dateLearned:""},{id:1,year:2007,category:"cms",theme:"Joomla",title:"Руководство пользователя для Joomla 1.0.11 Open Source",author:"Joomla",authorName:"",pages:"212",isLearned:!1,dateLearned:""},{id:2,year:2008,category:"cms",theme:"Joomla",title:"Движок для вашего сайта. CMS Joomla, Slaed, PHP-nuke",author:"Колисниченко",authorName:"Денис",pages:"363",isLearned:!1,dateLearned:""},{id:3,year:2008,category:"cms",theme:"Joomla",title:"Joomla! Практическое руководство",author:"Норт",authorName:"Бэрри",pages:"448",isLearned:!1,dateLearned:""},{id:4,year:2008,category:"cms",theme:"Joomla",title:"Самоучитель Joomla",author:"Рамел",authorName:"Дэн",pages:"450",isLearned:!1,dateLearned:""},{id:5,year:2009,category:"cms",theme:"Joomla",title:"Создание веб-сайтов с помощью Joomla 1.5",author:"Граф",authorName:"Хаген",pages:"296",isLearned:!1,dateLearned:""},{id:6,year:2009,category:"cms",theme:"Joomla",title:"Joomla 1.5. Руководство пользователя",author:"Колисниченко",authorName:"Денис",pages:"212",isLearned:!1,dateLearned:""},{id:7,year:2010,category:"cms",theme:"Joomla",title:"Joomla 1.5. Практическое руководство (2е)",author:"Норт",authorName:"Бэрри",pages:"463",isLearned:!1,dateLearned:""},{id:8,year:2011,category:"cms",theme:"Joomla",title:"Joomla 1.7. Руководство для начинающего пользователя",author:"Граф",authorName:"Хаген",pages:"254",isLearned:!1,dateLearned:""},{id:9,year:2012,category:"cms",theme:"Joomla",title:"10 легких шагов к освоению Joomla 3",author:"Граф",authorName:"Хаген",pages:"111",isLearned:!1,dateLearned:""},{id:10,year:2012,category:"cms",theme:"Joomla",title:"Руководство для начинающего пользователя Joomla 2.5",author:"Граф",authorName:"Хаген",pages:"278",isLearned:!1,dateLearned:""},{id:11,year:2013,category:"cms",theme:"Joomla",title:"Joomla. Программирование",author:"Декстер",authorName:"Марк",pages:"587",isLearned:!1,dateLearned:""},{id:12,year:2013,category:"cms",theme:"Joomla",title:"Joomla 3.0. Руководство пользователя",author:"Колисниченко",authorName:"Денис",pages:"257",isLearned:!1,dateLearned:""},{id:13,year:2013,category:"cms",theme:"Joomla",title:"Joomla 3.0. Официальное руководство",author:"Мэрриотт",authorName:"Дженнифер",pages:"496",isLearned:!1,dateLearned:""},{id:14,year:2014,category:"cms",theme:"Joomla",title:"Joomla для профессионалов",author:"Рамел",authorName:"Дэн",pages:"441",isLearned:!1,dateLearned:""},{id:15,year:2014,category:"cms",theme:"Joomla",title:"Создание компонента для CMS Joomla 2.5",author:"Рекун",authorName:"Дмитрий",pages:"159",isLearned:!1,dateLearned:""},{id:1,year:2021,category:"cms",theme:"Tilda",title:"Создание сайтов на Tilda",author:"Молочков",authorName:"Владимир",pages:"354",isLearned:!1,dateLearned:""},{id:1,year:2008,category:"cms",theme:"Wordpress",title:"Создание 3-х колоночного шаблона для Wordpress",author:"Квентор",authorName:"Игорь",pages:"66",isLearned:!1,dateLearned:""},{id:2,year:2009,category:"cms",theme:"Wordpress",title:"WordPress инструкция по применению",author:"Беляйкин",authorName:"Артем",pages:"102",isLearned:!1,dateLearned:""},{id:3,year:2011,category:"cms",theme:"Wordpress",title:"Создаем свой сайт на WordPress",author:"Грачев",authorName:"Андрей",pages:"288",isLearned:!1,dateLearned:""},{id:4,year:2014,category:"cms",theme:"Wordpress",title:"Создаем свой сайт на WordPress (2е)",author:"Грачев",authorName:"Андрей",pages:"272",isLearned:!1,dateLearned:""},{id:5,year:2014,category:"cms",theme:"Wordpress",title:"Погружение в WordPress",author:"Коер",authorName:"Крис",pages:"167",isLearned:!1,dateLearned:""},{id:6,year:2014,category:"cms",theme:"Wordpress",title:"WordPress для профессионалов. Разработка и дизайн сайтов",author:"Уильямс",authorName:"Брэд",pages:"167",isLearned:!1,dateLearned:""},{id:7,year:2015,category:"cms",theme:"Wordpress",title:"Wordpress Помогатор 2.0",author:"Seoxa",authorName:"",pages:"122",isLearned:!1,dateLearned:""},{id:8,year:2015,category:"cms",theme:"Wordpress",title:"WordPress. Блог с нуля. Руководство от А до Я",author:"Мартынов",authorName:"Алексей",pages:"116",isLearned:!1,dateLearned:""},{id:9,year:2015,category:"cms",theme:"Wordpress",title:"Создание сайтов на основе WordPress",author:"Сергеев",authorName:"Алексей",pages:"122",isLearned:!1,dateLearned:""},{id:10,year:2016,category:"cms",theme:"Wordpress",title:"Wordpress Помогатор 3.0",author:"Seoxa",authorName:"",pages:"83",isLearned:!1,dateLearned:""},{id:11,year:2019,category:"cms",theme:"Wordpress",title:"Как создать сайт. Комикс-путеводитель по HTML, CSS и WordPress",author:"Купер",authorName:"Нейт",pages:"266",isLearned:!1,dateLearned:""},{id:12,year:2021,category:"cms",theme:"Wordpress",title:"Разработка веб-приложений на WordPress (2е)",author:"Мессенленер",authorName:"Брайан",pages:"529",isLearned:!1,dateLearned:""},{id:13,year:2022,category:"cms",theme:"Wordpress",title:"Свой сайт на Wordpress. Легко, быстро, бесплатно",author:"Козодой",authorName:"Маргарита",pages:"93",isLearned:!1,dateLearned:""},{id:14,year:2022,category:"cms",theme:"Wordpress",title:"Создание сайтов на основе WordPress (3е)",author:"Сергеев",authorName:"Алексей",pages:"120",isLearned:!1,dateLearned:""},{}],[{id:1,year:2007,category:"tools",theme:"Ajax",title:"Ajax и PHP. Разработка динамических веб-приложений",author:"Дари",authorName:"Кристиан",pages:"334",isLearned:!1,dateLearned:""},{id:2,year:2009,category:"tools",theme:"Ajax",title:"Ajax программирование для интернета",author:"Бенкен",authorName:"Елена",pages:"436",isLearned:!1,dateLearned:""},{id:3,year:2009,category:"tools",theme:"Ajax",title:"Ajax на примерах",author:"Овчаренко",authorName:"Андрей",pages:"431",isLearned:!1,dateLearned:""},{}],[{id:1,year:2019,category:"tools",theme:"Docker",title:"Микросервисы и контейнеры Docker",author:"Кочер",authorName:"Парминдер",pages:"240",isLearned:!1,dateLearned:""},{id:2,year:2020,category:"tools",theme:"Docker",title:"Docker на практике",author:"Мил",authorName:"Иан",pages:"516",isLearned:!1,dateLearned:""},{id:3,year:2023,category:"tools",theme:"Docker",title:"Контейнеризатор приложений Docker",author:"Ананченко",authorName:"Игорь",pages:"57",isLearned:!1,dateLearned:""},{id:4,year:2023,category:"tools",theme:"Docker",title:"Docker Compose для разработчика",author:"Гадзурас",authorName:"Эммануил",pages:"221",isLearned:!1,dateLearned:""},{}],[{id:1,year:2010,category:"tools",theme:"Git",title:"Магия Git",author:"Лин",authorName:"Бен",pages:"49",isLearned:!1,dateLearned:""},{id:2,year:2016,category:"tools",theme:"Git",title:"Git для профессионального программиста",author:"Чакон",authorName:"Скотт",pages:"496",isLearned:!1,dateLearned:""},{id:3,year:2018,category:"tools",theme:"Git",title:"Git Методология разработки",author:"Лебедюк",authorName:"Эдуард",pages:"41",isLearned:!1,dateLearned:""},{id:4,year:2019,category:"tools",theme:"Git",title:"Pro Git (2е)",author:"Чакон",authorName:"Скотт",pages:"533",isLearned:!1,dateLearned:""},{id:5,year:2021,category:"tools",theme:"Git",title:"Git. Практическое руководство",author:"Фишерман",pages:"306",isLearned:!1,dateLearned:""},{id:6,year:2024,category:"tools",theme:"Git",title:"Head First. GIT. Лучший способ понять Git изнутри",author:"Ганди",authorName:"Раджу",pages:"466",isLearned:!1,dateLearned:""},{}],[{id:1,year:2019,category:"tools",theme:"GraphQL",title:"GraphQL язык запросов",author:"Бэнкс",authorName:"Алекс",pages:"240",isLearned:!1,dateLearned:""},{id:2,year:2023,category:"tools",theme:"GraphQL",title:"Разработка веб приложений GraphQL React",author:"Лион",authorName:"Уильям",pages:"264",isLearned:!1,dateLearned:""},{}],[{id:1,year:2003,category:"tools",theme:"RegExp",title:"Регулярные выражения (2е)",author:"Фридл",authorName:"Джеффри",pages:"465",isLearned:!1,dateLearned:""},{id:2,year:2005,category:"tools",theme:"RegExp",title:"Регулярные выражения. 10 минут на урок",author:"Форта",authorName:"Бен",pages:"175",isLearned:!1,dateLearned:""},{id:3,year:2008,category:"tools",theme:"RegExp",title:"Регулярные выражения (3е)",author:"Фридл",authorName:"Джеффри",pages:"598",isLearned:!1,dateLearned:""},{id:4,year:2010,category:"tools",theme:"RegExp",title:"Регулярные выражения. Сборник рецептов",author:"Гойвертс",authorName:"Ян",pages:"607",isLearned:!1,dateLearned:""},{id:5,year:2015,category:"tools",theme:"RegExp",title:"Регулярные выражения. Основы",author:"Фицджеральд",authorName:"Майкл",pages:"144",isLearned:!1,dateLearned:""},{}],[{id:1,year:1993,category:"tools",theme:"SQL",title:"Понимание SQL",author:"Грубер",authorName:"Мартин",pages:"291",isLearned:!1,dateLearned:""},{id:2,year:1997,category:"tools",theme:"SQL",title:"Эффективная работа с СУБД",author:"Горев",pages:"445",isLearned:!1,dateLearned:""},{id:3,year:2001,category:"tools",theme:"SQL",title:"Microsoft SQL Server 2000",author:"Артемов",authorName:"Дмитрий",pages:"570",isLearned:!1,dateLearned:""},{id:4,year:2001,category:"tools",theme:"SQL",title:"SQL. Полное руководство (2е)",author:"Грофф",authorName:"Джеймс",pages:"800",isLearned:!1,dateLearned:""},{id:5,year:2001,category:"tools",theme:"SQL",title:"SQL. Справочник",author:"Новик",authorName:"Владимир",pages:"126",isLearned:!1,dateLearned:""},{id:6,year:2001,category:"tools",theme:"SQL",title:"Основы реляционных баз данных",author:"Райордан",authorName:"Ребекка",pages:"390",isLearned:!1,dateLearned:""},{id:7,year:2002,category:"tools",theme:"SQL",title:"MySQL",author:"Аткинсон",authorName:"Леон",pages:"619",isLearned:!1,dateLearned:""},{id:8,year:2002,category:"tools",theme:"SQL",title:"Программирование для Microsoft SQL Server",author:"Малколм",authorName:"Грэм",pages:"318",isLearned:!1,dateLearned:""},{id:9,year:2003,category:"tools",theme:"SQL",title:"Администрирование SQL Server 2000",author:"Microsoft",pages:"634",isLearned:!1,dateLearned:""},{id:10,year:2004,category:"tools",theme:"SQL",title:"SQL Server 2000. Программирование. Часть 1",author:"Вьейра",authorName:"Роберт",pages:"723",isLearned:!1,dateLearned:""},{id:11,year:2004,category:"tools",theme:"SQL",title:"SQL Server 2000. Программирование. Часть 2",author:"Вьейра",authorName:"Роберт",pages:"800",isLearned:!1,dateLearned:""},{id:12,year:2005,category:"tools",theme:"SQL",title:"SQL за 10 минут (3е)",author:"Форта",authorName:"Бен",pages:"287",isLearned:!1,dateLearned:""},{id:13,year:2006,category:"tools",theme:"SQL",title:"Введение в Oracle",author:"Перри",authorName:"Джеймс",pages:"697",isLearned:!1,dateLearned:""},{id:14,year:2007,category:"tools",theme:"SQL",title:"Изучаем SQL",author:"Бьюли",authorName:"Алан",pages:"308",isLearned:!1,dateLearned:""},{id:15,year:2009,category:"tools",theme:"SQL",title:"Введение в реляционные базы данных",author:"Кириллов",authorName:"Владимир",pages:"451",isLearned:!1,dateLearned:""},{id:15,year:2009,category:"tools",theme:"SQL",title:"SQL. Сборник рецептов",author:"Молинаро",authorName:"Энтони",pages:"668",isLearned:!1,dateLearned:""},{id:16,year:2009,category:"tools",theme:"SQL",title:"Рефакторинг SQL приложений",author:"Фаро",authorName:"Стефан",pages:"330",isLearned:!1,dateLearned:""},{id:17,year:2010,category:"tools",theme:"SQL",title:"MySQL 5.0. Библиотека программиста",author:"Гольцман",authorName:"Виктор",pages:"253",isLearned:!1,dateLearned:""},{id:18,year:2010,category:"tools",theme:"SQL",title:"SQL и реляционная теория",author:"Дейт",pages:"475",isLearned:!1,dateLearned:""},{id:19,year:2010,category:"tools",theme:"SQL",title:"Базы данных для инженеров",author:"Зрюмов",pages:"133",isLearned:!1,dateLearned:""},{id:20,year:2010,category:"tools",theme:"SQL",title:"SQL справочник (3е)",author:"Кляйн",authorName:"Кевин",pages:"652",isLearned:!1,dateLearned:""},{id:21,year:2010,category:"tools",theme:"SQL",title:"SQL Библия пользователя (2е)",author:"Кригель",authorName:"Алекс",pages:"752",isLearned:!1,dateLearned:""},{id:22,year:2010,category:"tools",theme:"SQL",title:"Базы данных. Язык SQL",author:"Ржеуцкая",authorName:"Светлана",pages:"160",isLearned:!1,dateLearned:""},{id:23,year:2010,category:"tools",theme:"SQL",title:"MySQL. Оптимизация производительности (2е)",author:"Шварц",authorName:"Бэрон",pages:"823",isLearned:!1,dateLearned:""},{id:24,year:2012,category:"tools",theme:"SQL",title:"Изучаем SQL. HeadFirst",author:"Бейли",authorName:"Линн",pages:"573",isLearned:!1,dateLearned:""},{id:25,year:2012,category:"tools",theme:"SQL",title:"Базы данных (7е)",author:"Фуфаев",pages:"320",isLearned:!1,dateLearned:""},{id:26,year:2013,category:"tools",theme:"SQL",title:"Семь баз данных за семь недель",author:"Редмонд",authorName:"Эрик",pages:"386",isLearned:!1,dateLearned:""},{id:27,year:2013,category:"tools",theme:"SQL",title:"SQL",author:"Фиайли",authorName:"Крис",pages:"454",isLearned:!1,dateLearned:""},{id:28,year:2014,category:"tools",theme:"SQL",title:"SQL для простых смертных",author:"Грабер",authorName:"Мартин",pages:"383",isLearned:!1,dateLearned:""},{id:29,year:2014,category:"tools",theme:"SQL",title:"Построение запросов и программирование на SQL",author:"Маркин",pages:"384",isLearned:!1,dateLearned:""},{id:30,year:2014,category:"tools",theme:"SQL",title:"SQL за 10 минут (4е)",author:"Форта",authorName:"Бен",pages:"287",isLearned:!1,dateLearned:""},{id:31,year:2015,category:"tools",theme:"SQL",title:"SQL Полное руководство (3е)",author:"Грофф",authorName:"Джеймс",pages:"959",isLearned:!1,dateLearned:""},{id:32,year:2015,category:"tools",theme:"SQL",title:"Базы данных. Занимательное программирование",author:"Такахаси",authorName:"Мана",pages:"238",isLearned:!1,dateLearned:""},{id:33,year:2017,category:"tools",theme:"SQL",title:"Работа с PostgreSQL (5е)",author:"Васильев",pages:"288",isLearned:!1,dateLearned:""},{id:34,year:2017,category:"tools",theme:"SQL",title:"Язык SQL. Базовый курс",author:"Моргунов",authorName:"Евгений",pages:"257",isLearned:!1,dateLearned:""},{id:35,year:2018,category:"tools",theme:"SQL",title:"PostgreSQL. Основы языка SQL",author:"Моргунов",authorName:"Евгений",pages:"337",isLearned:!1,dateLearned:""},{id:36,year:2018,category:"tools",theme:"SQL",title:"СУБД для программиста",author:"Тарасов",authorName:"Сергей",pages:"320",isLearned:!1,dateLearned:""},{id:37,year:2019,category:"tools",theme:"SQL",title:"Основы использования и проектирования баз данных",author:"Илюшечкин",authorName:"Владимир",pages:"214",isLearned:!1,dateLearned:""},{id:38,year:2019,category:"tools",theme:"SQL",title:"Работа с MySQL в примерах",author:"Куликов",authorName:"Святослав",pages:"547",isLearned:!1,dateLearned:""},{id:39,year:2019,category:"tools",theme:"SQL",title:"PostgreSQL11 Мастерство разработки",author:"Шениг",authorName:"Ганс-Юрген",pages:"353",isLearned:!1,dateLearned:""},{id:40,year:2020,category:"tools",theme:"SQL",title:"Путь программиста T-SQL",author:"Трунин",authorName:"Виталий",pages:"204",isLearned:!1,dateLearned:""},{id:41,year:2021,category:"tools",theme:"SQL",title:"SQL за 10 минут (5е)",author:"Форта",authorName:"Бен",pages:"335",isLearned:!1,dateLearned:""},{}],[{id:1,year:2017,category:"theme",theme:"Data Science",title:"Data Science. Наука о данных с нуля",author:"Грас",authorName:"Джоэл",pages:"337",isLearned:!1,dateLearned:""},{id:2,year:2020,category:"theme",theme:"Data Science",title:"Наука о данных",author:"Скиена",authorName:"Стивен",pages:"544",isLearned:!1,dateLearned:""},{id:3,year:2021,category:"theme",theme:"Data Science",title:"Практическая статистика Data Science (2е)",author:"Брюс",authorName:"Питер",pages:"354",isLearned:!1,dateLearned:""},{id:4,year:2021,category:"theme",theme:"Data Science",title:"Теоретический минимум по Big Data",author:"Ын",authorName:"Анналин",pages:"208",isLearned:!1,dateLearned:""},{}],[{id:1,year:2018,category:"theme",theme:"Deep Learning",title:"Глубокое обучение (2е)",author:"Гудфеллоу",authorName:"Ян",pages:"653",isLearned:!1,dateLearned:""},{id:2,year:2019,category:"theme",theme:"Deep Learning",title:"Грокаем глубокое обучение",author:"Траск",authorName:"Эндрю",pages:"354",isLearned:!1,dateLearned:""},{id:3,year:2020,category:"theme",theme:"Deep Learning",title:"Основы глубокого обучения",author:"Будума",authorName:"Нихиль",pages:"306",isLearned:!1,dateLearned:""},{id:4,year:2020,category:"theme",theme:"Deep Learning",title:"Глубокое обучение для чайников",author:"Мюллер",authorName:"Джон",pages:"402",isLearned:!1,dateLearned:""},{id:5,year:2022,category:"theme",theme:"Deep Learning",title:"Глубокое обучение. Самый краткий и понятный курс",author:"Келлехер",authorName:"Джон",pages:"162",isLearned:!1,dateLearned:""},{}],[{id:1,year:2013,category:"theme",theme:"DevOps",title:"Проект Феникс DevOps",author:"Ким",authorName:"Джин",pages:"228",isLearned:!1,dateLearned:""},{id:2,year:2017,category:"theme",theme:"DevOps",title:"Философия DevOps. Искусство управления IT",author:"Дэвис",authorName:"Дженнифер",pages:"416",isLearned:!1,dateLearned:""},{id:3,year:2018,category:"theme",theme:"DevOps",title:"Руководство по DevOps",author:"Ким",authorName:"Джен",pages:"514",isLearned:!1,dateLearned:""},{id:4,year:2020,category:"theme",theme:"DevOps",title:"Kubernetes для DevOps",author:"Арундел",authorName:"Джон",pages:"384",isLearned:!1,dateLearned:""},{id:5,year:2020,category:"theme",theme:"DevOps",title:"Безопасный DevOps",author:"Вехен",authorName:"Джульен",pages:"434",isLearned:!1,dateLearned:""},{id:6,year:2020,category:"theme",theme:"DevOps",title:"Ускоряйся. Как создавать и масштабировать",author:"Форсгрен",authorName:"Николь",pages:"180",isLearned:!1,dateLearned:""},{id:7,year:2020,category:"theme",theme:"DevOps",title:"DevOps для современного предприятия",author:"Херинг",authorName:"Мирко",pages:"233",isLearned:!1,dateLearned:""},{id:8,year:2021,category:"theme",theme:"DevOps",title:"Kubernetes лучшие практики",author:"Бернс",authorName:"Брендан",pages:"288",isLearned:!1,dateLearned:""},{id:9,year:2022,category:"theme",theme:"DevOps",title:"Python и DevOps. Ключ к автоматизации Linux",author:"Гифт",authorName:"Ной",pages:"544",isLearned:!1,dateLearned:""},{id:10,year:2023,category:"theme",theme:"DevOps",title:"Python для сетевых инженеров. DevOps (3е)",author:"Чоу",authorName:"Эрик",pages:"528",isLearned:!1,dateLearned:""},{id:11,year:2024,category:"theme",theme:"DevOps",title:"Kubernetes и сети для DevOps",author:"Стронг",authorName:"Джеймс",pages:"322",isLearned:!1,dateLearned:""},{}],[{id:1,year:2017,category:"theme",theme:"Machine Learning",title:"Машинное обучение",author:"Бринк",authorName:"Хенрик",pages:"338",isLearned:!1,dateLearned:""},{id:2,year:2020,category:"theme",theme:"Machine Learning",title:"Машинное обучение без лишних слов",author:"Бурков",authorName:"Андрей",pages:"192",isLearned:!1,dateLearned:""},{}],[{id:1,year:2007,category:"theme",theme:"web",title:"Фриланс Когда сам себе начальник",author:"Мурадова",authorName:"Анна",pages:"92",isLearned:!0,dateLearned:"2021-07-21 ср"},{id:2,year:2010,category:"theme",theme:"web",title:"HeadFirst Изучаем веб-дизайн",author:"Вотролл",authorName:"Этан",pages:"485",isLearned:!1,dateLearned:""},{id:3,year:2010,category:"theme",theme:"web",title:"Веб дизайн",author:"Нильсен",authorName:"Якоб",pages:"511",isLearned:!1,dateLearned:""},{id:4,year:2010,category:"theme",theme:"web",title:"Веб дизайн. Анализ по движению глаз",author:"Нильсен",authorName:"Якоб",pages:"496",isLearned:!1,dateLearned:""},{id:5,year:2011,category:"theme",theme:"web",title:"SEO искусство раскрутки сайтов",author:"Энж",authorName:"Эрик",pages:"592",isLearned:!1,dateLearned:""},{id:6,year:2012,category:"theme",theme:"web",title:"Как самому создать сайт",author:"Гладкий",authorName:"Алексей",pages:"250",isLearned:!1,dateLearned:""},{id:7,year:2012,category:"theme",theme:"web",title:"Веб дизайн",author:"Макнейл",authorName:"Патрик",pages:"272",isLearned:!1,dateLearned:""},{id:8,year:2012,category:"theme",theme:"web",title:"Отзывчивый веб-дизайн",author:"Маркотт",authorName:"Итан",pages:"112",isLearned:!1,dateLearned:""},{id:9,year:2013,category:"theme",theme:"web",title:"Веб дизайн",author:"Кирсанов",authorName:"Дмитрий",pages:"368",isLearned:!1,dateLearned:""},{id:10,year:2013,category:"theme",theme:"web",title:"Веб мастеринг на 100%",author:"Клименко",authorName:"Роман",pages:"512",isLearned:!1,dateLearned:""},{id:11,year:2013,category:"theme",theme:"web",title:"Контентная стратегия для мобильных устройств",author:"Макгрейн",authorName:"Карен",pages:"224",isLearned:!1,dateLearned:""},{id:11,year:2013,category:"theme",theme:"web",title:"Веб-программирование",author:"Романчик",authorName:"Валерий",pages:"407",isLearned:!1,dateLearned:""},{id:12,year:2013,category:"theme",theme:"web",title:"Современный веб-дизайн (2е)",author:"Сырых",authorName:"Юлия",pages:"368",isLearned:!1,dateLearned:""},{id:13,year:2013,category:"theme",theme:"web",title:"Книга веб-программиста",author:"Хоган",pages:"288",isLearned:!1,dateLearned:""},{id:14,year:2014,category:"theme",theme:"web",title:"Разработка одностраничных веб приложений",author:"Миковски",authorName:"Майкл",pages:"512",isLearned:!1,dateLearned:""},{id:15,year:2014,category:"theme",theme:"web",title:"Создание сайта от начала и до конца",author:"Русаков",authorName:"Михаил",pages:"172",isLearned:!1,dateLearned:""},{id:16,year:2014,category:"theme",theme:"web",title:"Веб дизайн",author:"Макнейл",authorName:"Патрик",pages:"288",isLearned:!1,dateLearned:""},{id:17,year:2015,category:"theme",theme:"web",title:"Основы разработки веб-приложений",author:"Пьюривал",authorName:"Сэмми",pages:"272",isLearned:!1,dateLearned:""},{id:18,year:2016,category:"theme",theme:"web",title:"Семантический веб",author:"Антониоу",authorName:"Григорис",pages:"240",isLearned:!1,dateLearned:""},{id:19,year:2016,category:"theme",theme:"web",title:"Введение в технологии создания Интернет-узлов (2е)",author:"ИНТУИТ, Полубояров",pages:"489",isLearned:!1,dateLearned:""},{id:20,year:2016,category:"theme",theme:"web",title:"Основы клиентской оптимизации (2е)",author:"ИНТУИТ, Мациевский",pages:"300",isLearned:!1,dateLearned:""},{id:21,year:2016,category:"theme",theme:"web",title:"Основы работы с XHTML и CSS",author:"ИНТУИТ, Д.Р.Адамс, К.С.Флойд",pages:"568",isLearned:!1,dateLearned:""},{id:22,year:2017,category:"theme",theme:"web",title:"Frontend клиентская разработка",author:"Аквино",authorName:"Крис",pages:"512",isLearned:!1,dateLearned:""},{id:23,year:2017,category:"theme",theme:"web",title:"Идеальный Landing Page",author:"Петроченков",pages:"316",isLearned:!1,dateLearned:""},{id:24,year:2018,category:"theme",theme:"web",title:"Создание web страниц",author:"Рамазанова",pages:"133",isLearned:!1,dateLearned:""},{id:25,year:2019,category:"theme",theme:"web",title:"Путь фрилансера",author:"Исламов",authorName:"Артем",pages:"218",isLearned:!0,dateLearned:"2021-07-02 пт"},{id:26,year:2019,category:"theme",theme:"web",title:"Основы дизайна и композиции (2е)",author:"Павловская",authorName:"Елена",pages:"184",isLearned:!1,dateLearned:""},{id:27,year:2020,category:"theme",theme:"web",title:"Проектирование и разработка web-приложений (2е)",author:"Заяц",authorName:"Анатолий",pages:"119",isLearned:!1,dateLearned:""},{id:28,year:2020,category:"theme",theme:"web",title:"Реактивные веб сайты (3е)",author:"Мациевский",pages:"334",isLearned:!1,dateLearned:""},{id:29,year:2021,category:"theme",theme:"web",title:"Самостоятельное создание сайта",author:"Дащинский",authorName:"Александр",pages:"109",isLearned:!1,dateLearned:""},{id:29,year:2021,category:"theme",theme:"web",title:"Web на практике. CSS, HTML, JavaScript, MySQL, PHP для fullstack-разработчиков",author:"Кириченко",authorName:"А.В.",pages:"434",isLearned:!1,dateLearned:""},{id:29,year:2021,category:"theme",theme:"web",title:"Построение пользовательских интерфейсов",author:"Малышев",authorName:"Кирилл",pages:"270",isLearned:!1,dateLearned:""},{id:30,year:2021,category:"theme",theme:"web",title:"Разработка защищенных интерфейсов веб приложений",author:"Марухленко",authorName:"Анатолий",pages:"175",isLearned:!1,dateLearned:""},{id:31,year:2021,category:"theme",theme:"web",title:"Веб дизайн для начинающих (5е)",author:"Роббинс",authorName:"Дженнифер",pages:"943",isLearned:!1,dateLearned:""},{id:31,year:2022,category:"theme",theme:"web",title:"Разработка веб-приложений",author:"Полуэктова",authorName:"Н.Р.",pages:"205",isLearned:!1,dateLearned:""},{id:31,year:2022,category:"theme",theme:"web",title:"Разработка интерфейсов. Паттерны проектирования (3е)",author:"Тидвелл",authorName:"Дженифер",pages:"560",isLearned:!1,dateLearned:""},{id:31,year:2023,category:"theme",theme:"web",title:"Линкбилдинг. Продвижение сайта путем построения связей и репутации",author:"Климович",authorName:"Николай",pages:"292",isLearned:!1,dateLearned:""},{id:31,year:2023,category:"theme",theme:"web",title:"Настольная книга веб-дизайнера",author:"Никулина",authorName:"Ирина",pages:"275",isLearned:!1,dateLearned:""},{}],[{id:1,year:2006,category:"theme",theme:"Системный администратор",title:"Системное администрирование на 100%",author:"Бормотов",authorName:"Сергей",pages:"257",isLearned:!1,dateLearned:""},{id:2,year:2010,category:"theme",theme:"Системный администратор",title:"Практическое руководство системного администратора",author:"Кенин",authorName:"Александр",pages:"459",isLearned:!1,dateLearned:""},{id:3,year:2012,category:"theme",theme:"Системный администратор",title:"Самоучитель системного администратора (3е)",author:"Кенин",authorName:"Александр",pages:"512",isLearned:!1,dateLearned:""},{id:4,year:2013,category:"theme",theme:"Системный администратор",title:"Практическое руководство системного администратора (2е)",author:"Кенин",authorName:"Александр",pages:"532",isLearned:!1,dateLearned:""},{id:5,year:2016,category:"theme",theme:"Системный администратор",title:"Самоучитель системного администратора (4е)",author:"Кенин",authorName:"Александр",pages:"527",isLearned:!1,dateLearned:""},{id:6,year:2018,category:"theme",theme:"Системный администратор",title:"Практика системного и сетевого администрирования. Том 1 (3е)",author:"Лимончели",authorName:"Томас",pages:"1106",isLearned:!1,dateLearned:""},{id:7,year:2019,category:"theme",theme:"Системный администратор",title:"Самоучитель системного администратора (5е)",author:"Кенин",authorName:"Александр",pages:"608",isLearned:!1,dateLearned:""},{id:8,year:2021,category:"theme",theme:"Системный администратор",title:"Основы администрирования информационных систем",author:"Бобынцев",authorName:"Денис",pages:"201",isLearned:!1,dateLearned:""},{id:9,year:2021,category:"theme",theme:"Системный администратор",title:"Самоучитель системного администратора (6е)",author:"Кенин",authorName:"Александр",pages:"610",isLearned:!1,dateLearned:""},{}]],We=(Oe=[]).concat.apply(Oe,Ie);function Re(e){return function(e){if(Array.isArray(e))return Be(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||He(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function He(e,t){if(e){if("string"==typeof e)return Be(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Be(e,t):void 0}}function Be(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,i=new Array(t);r<t;r++)i[r]=e[r];return i}function ze(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,i=new Array(t);r<t;r++)i[r]=e[r];return i}var Je={};function Ge(e){return Ge="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ge(e)}function Ue(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,(void 0,a=function(e,t){if("object"!==Ge(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var i=r.call(e,"string");if("object"!==Ge(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(i.key),"symbol"===Ge(a)?a:String(a)),i)}var a}function qe(e){var t="function"==typeof Map?new Map:void 0;return qe=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,i)}function i(){return Qe(e,arguments,Xe(this).constructor)}return i.prototype=Object.create(e.prototype,{constructor:{value:i,enumerable:!1,writable:!0,configurable:!0}}),Ke(i,e)},qe(e)}function Qe(e,t,r){return Qe=Ye()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&Ke(a,r.prototype),a},Qe.apply(null,arguments)}function Ye(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function Ke(e,t){return Ke=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Ke(e,t)}function Xe(e){return Xe=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Xe(e)}Je.input=We,Je.category=function(e){var t={result:{},learned:[]};return e.forEach((function(e){e.category&&!(e.category in t.result)&&(t.result[e.category]={}),e.theme&&!(e.theme in t.result[e.category])&&(t.result[e.category][e.theme]=[]),e.category&&e.theme&&t.result[e.category][e.theme].push(e),!0===e.isLearned&&t.learned.push(e)})),t}(Je.input),Je.elements=function(e){var t=document.createElement("aside");t.className="aside";var r=document.createElement("main");r.className="list";var i=document.createElement("h2"),a=document.createElement("ol");a.id="books";var o={},l=[],n=function(r){var o=document.createElement("a");o.href="#",o.innerHTML=r,l.push(o);var n=[],s=function(t){var o=document.createElement("a");o.href="#",o.innerHTML=t,n.push(o);var l,s=[],d=function(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=He(e))){r&&(e=r);var i=0,a=function(){};return{s:a,n:function(){return i>=e.length?{done:!0}:{done:!1,value:e[i++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,l=!0,n=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return l=e.done,e},e:function(e){n=!0,o=e},f:function(){try{l||null==r.return||r.return()}finally{if(n)throw o}}}}(e.result[r][t]);try{for(d.s();!(l=d.n()).done;){var h=l.value;s.push(h)}}catch(e){d.e(e)}finally{d.f()}var p=function(e){var t;(t=e).sort((function(e,t){return e.year===t.year?e.author===t.author?e.title.localeCompare(t.title,"en"):e.author.localeCompare(t.author,"en"):e.year-t.year})),e=t;for(var r=[],i=function(t){var i,a=document.createElement("li");a.addEventListener("mouseover",(function(){a.classList.add("over")})),a.addEventListener("mouseout",(function(){a.classList.remove("over")})),a.innerHTML="\n    <strong>[".concat(e[t].year,"] ").concat(e[t].title,"</strong>\n    <div><em>").concat(e[t].authorName?e[t].authorName+" ":"").concat(e[t].author,"</em></div>\n    <div>").concat(e[t].pages," стр</div>\n    <div>Изучено ").concat(e[t].isLearned,"</div>\n    <div>").concat((i=e[t]).origin?"(\n        <strong>".concat(i.origin.title,"</strong>\n        - <em>").concat(i.origin.author,"</em>\n        )"):"","</div>"),r.push(a)},a=0;a<e.length;a++)i(a);return r}(s);o.addEventListener("click",(function(e){e.preventDefault(),c(n,o),i.innerHTML=t,a.innerHTML="",a.append.apply(a,Re(p))}))};for(var d in e.result[r])s(d);o.addEventListener("click",(function(e){e.preventDefault(),c(l,o),t.classList.remove("none"),t.innerHTML="",t.append.apply(t,n);var r=new Event("click");n[0].dispatchEvent(r)}))};for(var s in e.result)n(s);function c(e,t){e.forEach((function(e){e.classList.remove("active")})),t.classList.add("active")}return function(){var r=document.createElement("a");r.href="#",r.innerHTML="learned",l.push(r);var o=function(e){e.sort((function(e,t){return e.dateLearned.replace(/[^0-9]/gi,"")-t.dateLearned.replace(/[^0-9]/gi,"")}));for(var t=[],r=function(r){var i,a=document.createElement("li");a.addEventListener("mouseover",(function(){a.classList.add("over")})),a.addEventListener("mouseout",(function(){a.classList.remove("over")})),a.innerHTML="\n    <span>".concat(e[r].dateLearned,"</span>\n    <div><strong>[").concat(e[r].year,"] ").concat(e[r].title,"</strong></div>\n    <div><em>").concat(e[r].authorName?e[r].authorName+" ":"").concat(e[r].author,"</em></div>\n    <div>").concat(e[r].pages," стр</div>\n    <div>Изучено ").concat(e[r].isLearned,"</div>\n    <div>").concat((i=e[r]).origin?"(\n        <strong>".concat(i.origin.title,"</strong>\n        - <em>").concat(i.origin.author,"</em>\n        )"):"","</div>"),t.push(a)},i=0;i<e.length;i++)r(i);return t}(e.learned);r.addEventListener("click",(function(e){e.preventDefault(),c(l,r),i.innerHTML="Прочитанные книги",t.classList.add("none"),a.innerHTML="",a.append.apply(a,Re(o))}))}(),r.append(i,a),o.navDiv=l,o.aside=t,o.main=r,o}(Je.category),Je.mainNav=function(e){var t,r=document.createElement("nav");r.className="nav",r.id="main-nav",r.append.apply(r,function(e){if(Array.isArray(e))return ze(e)}(t=e.navDiv)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||function(e,t){if(e){if("string"==typeof e)return ze(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?ze(e,t):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}());var i=new Event("click");return e.navDiv[0].dispatchEvent(i),r}(Je.elements),Je.elemSection=function(e){var t=document.createElement("section");return t.className="main__aside",t.append(e.aside,e.main),t}(Je.elements);var Ze=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Ke(e,t)}(l,e);var t,r,i,a,o=(i=l,a=Ye(),function(){var e,t=Xe(i);if(a){var r=Xe(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===Ge(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function l(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),o.call(this)}return t=l,(r=[{key:"connectedCallback",value:function(){this.innerHTML='<h1>Online ресурсы для верстальщика</h1> <div class="article"> <div class="anchor" id="contents"></div> <h2>Содержание</h2> <div class="article__contents"> <a href="#validator" class="contents__link">Validator</a> <a href="#code-guide" class="contents__link">Code guide</a> <a href="#logo" class="contents__link">Logo</a> <a href="#fonts" class="contents__link">Fonts</a> <a href="#icons" class="contents__link">Icons</a> <a href="#favicon" class="contents__link">favicon</a> <a href="#background" class="contents__link">Background</a> <a href="#colors" class="contents__link">Colors</a> <a href="#makets" class="contents__link">Макеты для верстки</a> <a href="#escape" class="contents__link">Символы для html</a> <a href="#css-js" class="contents__link">CSS и JS</a> </div> </div> <article class="article"> <div class="anchor" id="validator"></div> <h2>Validator</h2> <ol> <li><a href="https://caniuse.com/">caniuse.com</a></li> <li><a href="https://www.mydevice.io/">mydevice.io</a></li> <li><a href="https://validator.w3.org/">validator.w3.org</a><br>Markup Validator (HTML, XHTML, MathML)</li> <li><a href="https://jigsaw.w3.org/css-validator/">jigsaw.w3.org/css-validator</a><br>CSS Validator</li> <li><a href="https://jsonlint.com/">jsonlint.com</a><br>JSON Validator</li> </ol> </article> <article class="article"> <div class="anchor" id="code-guide"></div> <h2>Code guide</h2> <ol> <li><a href="https://codeguide.academy/">codeguide.academy</a></li> </ol> </article> <article class="article"> <div class="anchor" id="logo"></div> <h2>Logo</h2> <ol> <li><a href="https://www.logodesign.net/">logodesign.net</a></li> <li><a href="https://gfto.ru/index/graffitit_text_maker/0-139">gfto.ru</a></li> <li><a href="https://maketext.io/">maketext.io</a></li> </ol> </article> <article class="article"> <div class="anchor" id="fonts"></div> <h2>Fonts</h2> <ol> <li><a href="https://fonts.google.com">fonts.google.com</a><br>шрифты google</li> <li> <a href="https://gwfh.mranftl.com/fonts">gwfh.mranftl.com/fonts</a> <br>google-webfonts-helper скачать и подключить </li> <li><a href="https://fontstorage.com/ru/">fontstorage.com</a><br>шрифты fontstorage</li> <li><a href="https://www.font2web.com/">font2web.com</a><br>шрифты font2web</li> <li><a href="https://webfonts.pro">webfonts.pro</a><br>шрифты webfonts</li> <li><a href="https://icomoon.io/">icomoon.io</a><br>иконочные шрифты</li> </ol> <h3>Icon Fonts Иконочные шрифты</h3> <ol> <li><a href="https://fontawesome.ru/">fontawesome.ru</a><br>иконочные шрифты</li> <li><a href="https://fontawesome.com/">fontawesome.com</a><br>иконочные шрифты</li> <li><a href="https://icomoon.io/">icomoon.io</a><br>иконочные шрифты</li> </ol> </article> <article class="article"> <div class="anchor" id="icons"></div> <h2>Icons</h2> <ol> <li><a href="https://www.flaticon.com/">flaticon.com</a><br>png бесплатно, svg платно</li> <li><a href="https://icons8.ru/">icons8.ru</a><br>png svg бесплатно, можно выбрать размер</li> <li><a href="https://icon-icons.com/ru/">icon-icons.com</a><br>png ico бесплатно, svg нет</li> <li><a href="https://svgpng.ru/">svgpng.ru</a></li> <li><a href="https://www.svgrepo.com/">svgrepo.com</a></li> </ol> </article> <article class="article"> <div class="anchor" id="favicon"></div> <h2>Favicon</h2> <ol> <li><a href="https://favicon.io/">favicon.io</a></li> <li><a href="https://www.favicon.by/">favicon.by</a></li> <li><a href="https://www.favicon.cc/">favicon.cc</a></li> </ol> </article> <article class="article"> <div class="anchor" id="background"></div> <h2>Remove background</h2> <ol> <li><a href="https://www.remove.bg/ru">remove.bg</a></li> </ol> </article> <article class="article"> <div class="anchor" id="colors"></div> <h2>Colors Цвета для страницы</h2> <ol> <li> <a href="https://encycolorpedia.ru/">encycolorpedia.ru</a> <br>color </li> <li> <a href="https://colorscheme.ru/html-colors.html">colorscheme.ru</a> <br>colorscheme.ru </li> <li> <a href="https://derzky.ru/generator-css-filtrov-dlja-zadannogo-cveta/">Генератор цветовых CSS фильтров из заданного цвета</a> <br><a href="https://cssmatic.com/box-shadow/">Генератор тени в CSS</a> </li> </ol> </article> <article class="article"> <div class="anchor" id="makets"></div> <h2>Макеты для верстки</h2> <ol> <li><a href="https://www.frontendmentor.io/">frontendmentor.io</a></li> </ol> </article> <article class="article"> <div class="anchor" id="escape"></div> <h2>Символы для html (или escape-последовательности)</h2> <ol> <li><a href="https://www.lexium.ru/2009/05/343/">lexium.ru/2009/05/343/</a></li> </ol> </article> <article class="article"> <div class="anchor" id="css-js"></div> <h3>Как сделать ... на чистом CSS и JS </h3> <ol> <li>Анимация кнопки <p><a href="https://www.whitelabeldevelopers.ru/articles/20-udivitelnyix-animirovannyix-knopok-na-chistom-css">20 УДИВИТЕЛЬНЫХ АНИМИРОВАННЫХ КНОПОК НА ЧИСТОМ CSS (whitelabeldevelopers.ru)</a></p> <p><a href="https://www.creativosonline.org/ru/botones-css-gratuitos.html">41 бесплатная кнопка CSS с небольшим количеством JavaScript</a></p> </li> <li>Анимация элементов при скролле <p><a href="https://webgolovolomki.com/poyavlenie-elementov-pri-skrolle/">Появление элементов при скролле (2021-01-16)</a></p> <p><a href="https://xhtml.ru/2021/css/how-to-trigger-a-css-animation-on-scroll/">Как запускать CSS-анимацию при прокрутке страницы (2021-04-27)</a></p> </li> <li>Бургер меню <p><a href="https://webgolovolomki.com/kak-sdelat-gamburger-menyu-gotovyj-kod-i-podrobnoe-obyasnenie/">Как сделать гамбургер (бургер) меню — готовый код и подробное объяснение (2020-11-25)</a></p> <p><a href="https://codelab.pro/prostoe-burger-menyu-na-chistom-javascript/">Простое бургер-меню на чистом JavaScript (2022-03-16)</a></p> </li> <li>Липкий header <p><a href="https://html5css.ru/howto/howto_js_sticky_header.php">Как сделать - фиксированный/липкий заголовок (html5css)</a></p> <p><a href="https://webref.ru/course/position/sticky">Липкое позиционирование (webref)</a></p> </li> <li>Модальное окно <p><a href="https://prog-time.ru/modalnoe-okno-na-chistom-javascript-prostoe-modalnoe-ovno-dlya-sajta/">Модальное окно на чистом JavaScript (2019-05-28)</a></p> <p><a href="https://webdevtips.pro/js/pure-js-popup/">Попап на чистом JS (2021-07-04)</a></p> </li> <li>Слайдер <p><a href="https://itchief.ru/javascript/slider">Слайдер для сайта на CSS и JavaScript</a></p> <p><a href="https://lantana-studio.ru/howto/simpleslider/">Простой слайдер на чистом javascript</a></p> </li> </ol> </article> '}}])&&Ue(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),l}(qe(HTMLElement));function $e(e){return $e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},$e(e)}function et(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,(void 0,a=function(e,t){if("object"!==$e(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var i=r.call(e,"string");if("object"!==$e(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(i.key),"symbol"===$e(a)?a:String(a)),i)}var a}function tt(e){var t="function"==typeof Map?new Map:void 0;return tt=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,i)}function i(){return rt(e,arguments,ot(this).constructor)}return i.prototype=Object.create(e.prototype,{constructor:{value:i,enumerable:!1,writable:!0,configurable:!0}}),at(i,e)},tt(e)}function rt(e,t,r){return rt=it()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&at(a,r.prototype),a},rt.apply(null,arguments)}function it(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function at(e,t){return at=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},at(e,t)}function ot(e){return ot=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},ot(e)}customElements.define("edu-edu",Ze);var lt=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&at(e,t)}(l,e);var t,r,i,a,o=(i=l,a=it(),function(){var e,t=ot(i);if(a){var r=ot(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===$e(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function l(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),o.call(this)}return t=l,(r=[{key:"connectedCallback",value:function(){this.innerHTML='\n    <div class="front-edu" id="front-edu">\n      <section class="main__aside">\n        <aside class="aside"></aside>\n        <main class="main" id="edu">\n          <edu-edu></edu-edu>\n        </main>\n      </section>\n    </div>\n    '}}])&&et(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),l}(tt(HTMLElement));function nt(){var e=800,t=function(e,t){return Math.random()*(t-e)+e},r=function(){this._reset()};r.prototype.render=function(e){e.strokeStyle="white",e.beginPath(),e.moveTo(this.x,this.y),e.lineTo(this.x+this.size,this.y-this.size),e.closePath(),e.stroke()},r.prototype.update=function(){this.x+=this.hVelocity,this.y+=this.velocity,this.isOffscreen()&&this._reset()},r.prototype.isOffscreen=function(){return this.y>600+this.size||this.x>e+this.size||this.x<-this.size},r.prototype._reset=function(){this.size=t(1,6),this.x=t(-240,1280),this.y=t(0,600),this.velocity=this.size,this.hVelocity=-this.size/3};var i=function t(r,i){!function(t){t.clearRect(0,0,e,600)}(r),i.forEach((function(e){e.render(r),e.update()})),requestAnimationFrame(t.bind(null,r,i))};!function(){var t=document.querySelector("#playground-rain");if(t){var a=t.getContext("2d");t.width=e,t.height,a.fillStyle="green";var o=new Array(600).fill("").map((function(){return new r}));i(a,o)}}()}customElements.define("front-edu",lt);var st=r(62),ct=r.n(st),dt=new URL(r(477),r.b);const ht='<h1>The Rolling Scopes School <br>Javascript Frontend 2022Q1 Stage 0 <br>13 декабря 2021 - 22 февраля 2022</h1> <div class="article"> <div class="anchor" id="contents"></div> <h2>Содержание</h2> <div class="article__contents"> <a href="#stage0" class="contents__link">Stage 0</a> <a href="#week1" class="contents__link">Week 1</a> <a href="#week2" class="contents__link">Week 2</a> <a href="#week3" class="contents__link">Week 3</a> <a href="#week4" class="contents__link">Week 4</a> <a href="#week5" class="contents__link">Week 5</a> <a href="#week6" class="contents__link">Week 6</a> <a href="#week7" class="contents__link">Week 7</a> <a href="#week8" class="contents__link">Week 8</a> <a href="#week9" class="contents__link">Week 9</a> <a href="#week10" class="contents__link">Week 10</a> <a href="#week11" class="contents__link">Week 11</a> <a href="#certificate" class="contents__link">certificate</a> </div> </div> <article class="article"> <a href="https://github.com/rolling-scopes-school/tasks/tree/master/stage0">Программа stage0</a> <br>Приватный репозиторий Stage0 2022Q1 <a href="https://github.com/rolling-scopes-school/frontend200tb-JSFEPRESCHOOL"> frontend200tb-JSFEPRESCHOOL</a> <br>Финальный проект Stage0 2023Q2 <a href="https://rolling-scopes-school.github.io/frontend200tb-JSFEPRESCHOOL/portfolio">portfolio</a> <br>Макет в figma <a href="https://www.figma.com/file/1A1SJ7FYyMUiBqhU3WUiBI/Portfolio">figma.com portfolio</a> <br>Discord channel <a href="https://discord.com/channels/516715744646660106/917120666782801991">Stage 0</a> <br>Учебная платформа <a href="https://app.rs.school/">app.rs.school</a> </article> <article class="article"> <div class="anchor" id="stage0"></div> <h2>Javascript Frontend 2022Q1 Stage 0</h2> <p>Подготовительный этап поможет тем, кто мало знаком или совсем не знаком с программированием и хотел бы впоследствии успешно обучаться в RS School.</p> <p>Описание <br>- Зачисляются все желающие <br>- Время обучения: 13 недель <br>- Формат: самообучение, групповое обучение, общение в Discord, задания проверяют в процессе кросс-чек и автоматически <br>- По окончании подготовительного этапа оставьте Отзыв школе, чтобы мы могли сделать ее лучше. Если вы покидаете курс во время обучения, по возможности, тоже оставьте отзыв, указав причину ухода.</p> </article> <article class="article"> <div class="anchor" id="week1"></div> <h3>Неделя 1 (13 декабря 2021)</h3> <ul> <li> <strong>2021-12-13 пн </strong>Self-studying Подготовительный курс. Неделя #1 <br><strong>2021-12-13 пн - 2021-12-21 вт </strong>Auto-test RSS Test <br><strong>2021-12-14 вт - 2021-12-21 вт </strong>Auto-test Test HTML Basics <br><a href="https://ru.code-basics.com/languages/html">ru.code-basics.com/languages/html</a> <br>Онлайн курс HTML Basics<br><strong>2021-12-13 пн </strong>Online Lecture Знакомство с RSSchool <br><strong>2021-12-14 вт </strong>Online Lecture Знакомство с профессией JS/Frontend разработчик <br><strong>2021-12-16 чт </strong>Online Lecture Chrome Dev Tools и VS Code </li> </ul> </article> <article class="article"> <div class="anchor" id="week2"></div> <h3>Неделя 2 (21 декабря 2021)</h3> <ul> <li> <strong>2021-12-21 вт </strong>Self-studying Подготовительный курс. Неделя #2 <br><strong>2021-12-21 вт - 2021-12-28 вт </strong>Auto-test Test Css Basics<br><a href="https://ru.code-basics.com/languages/css">ru.code-basics.com/languages/css</a><br>Онлайн курс CSS Basics <br><strong>2021-12-21 вт - 2021-12-28 вт </strong>Auto-test Git Test <br><a href="https://uleming.github.io/gitbook/index.html">uleming.github.io/gitbook</a> <br>Хорошие материалы от Git-комьюнити <br><strong>2021-12-21 вт - 2022-01-06 чт </strong>Auto-test <a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/cv/git-markdown.md">CV#1. Markdown & Git</a> <br><strong>2021-12-21 вт - 2022-01-06 чт </strong>Auto-test <a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/cv/html-css-git.md">CV#2. HTML, CSS & Git Basics</a> <br><strong>2021-12-21 вт </strong>Online Lecture HTML/CSS Basics <br><strong>2021-12-24 пт </strong>Online Lecture Git for beginners <br><strong>2021-12-25 сб </strong>Online Lecture CSS Flex </li> </ul> </article> <article class="article"> <div class="anchor" id="week3"></div> <h3>Неделя 3 (28 декабря 2021)</h3> <ul> <li> <strong>2021-12-28 вт </strong>Self-studying Подготовительный курс. Неделя #3 <br><strong>2021-12-27 пн - 2022-01-04 вт </strong>Auto-test Test CSS Flex <br><a href="https://habr.com/ru/post/467049/">habr.com/ru/post/467049</a> <br>Полное руководство по Flexbox <br><strong>2021-12-28 вт - 2022-01-06 чт </strong>Cross Check <a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/cv/cv-stage0.md">CV#3. CV. Cross Check</a> <br><a href="https://codeguide.academy/html-css.html">codeguide.academy/html-css.html</a> <br>Гайдлайн кода <br><strong>2021-12-28 вт - 2022-01-18 вт </strong>Auto-test <a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/codewars/preschool-2022-codewars1.md">Codewars Part 1</a> <br><strong>2021-12-29 ср </strong>Online Lecture JS Basics </li> </ul> </article> <article class="article"> <div class="anchor" id="week4"></div> <h3>Неделя 4 (4 января 2022)</h3> <ul> <li> <strong>2022-01-04 вт </strong>Self-studying Подготовительный курс. Неделя #4 <br><strong>2022-01-04 вт - 2022-02-25 пт </strong>Auto-test <a href="https://github.com/rolling-scopes-school/human-readable-number">Human Readable Number</a> <br><strong>2022-01-04 вт - 2022-02-25 пт </strong>Auto-test <a href="https://github.com/rolling-scopes-school/reverse-int">Reverse Int</a> <br><strong>2022-01-04 вт - 2022-01-11 вт </strong>Cross Check <a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/portfolio/portfolio.md">Portfolio</a> <br><a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/portfolio/portfolio-part1.md">Portfolio#1 Фиксированная вёрстка Требования и критерии оценки</a> <br><a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/portfolio/portfolio-part1-hints.md">Portfolio#1 Фиксированная вёрстка Советы по выполнению задания</a> <br><a href="https://github.com/rolling-scopes-school/frontend200tb-JSFEPRESCHOOL">Приватный репозиторий</a> <br><strong>2022-01-04 вт </strong>Online Lecture Знакомство с Codewars <br><strong>2022-01-06 чт </strong>Online Lecture JS Functions </li> </ul> </article> <article class="article"> <div class="anchor" id="week5"></div> <h3>Неделя 5 (11 января 2022)</h3> <ul> <li> <strong>2022-01-11 вт </strong>Self-studying Подготовительный курс. Неделя #5 <br><strong>2022-01-14 вт - 2022-01-25 вт </strong>Auto-test Test JS Basics [RU] <br><strong>2022-01-11 вт - 2022-01-25 вт </strong>Cross Check <a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/portfolio/portfolio.md">Portfolio</a> <br><a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/portfolio/portfolio-part2.md">Portfolio#2 Адаптивная вёрстка Требования и критерии оценки</a> <br><a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/portfolio/portfolio-part2-hints.md">Portfolio#2 Адаптивная вёрстка Советы по выполнению задания</a> <br><strong>2022-01-13 чт </strong>Online Lecture JS Objects and Arrays </li> </ul> </article> <article class="article"> <div class="anchor" id="week6"></div> <h3>Неделя 6 (18 января 2022)</h3> <ul> <li> <strong>2022-01-18 вт </strong>Self-studying Подготовительный курс. Неделя #6 <br><strong>2022-01-18 вт - 2022-01-31 вт </strong>Auto-test <a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/codewars/preschool-2022-codewars2.md">Codewars Part 2</a> <br><strong>2022-01-18 вт - 2022-02-01 вт </strong>Cross Check <a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/portfolio/portfolio.md">Portfolio</a> <br><a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/portfolio/portfolio-part3.md">Portfolio#3 Добавление функционала Требования и критерии оценки</a> <br><a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/portfolio/portfolio-part3-hints.md">Portfolio#3 Добавление функционала Советы по выполнению задания</a> <br><strong>2022-01-20 чт </strong>Online Lecture DOM API/ DOM Events </li> </ul> </article> <article class="article"> <div class="anchor" id="week7"></div> <h3>Неделя 7 (25 января 2022)</h3> <ul> <li> <strong>2022-01-25 вт </strong>Self-studying Подготовительный курс. Неделя #7 <br><strong>2022-01-25 вт - 2022-02-25 пт </strong>Auto-test <a href="https://github.com/romacher/morse-decoder">JS: Morse-decoder</a> <br><strong>2022-01-25 вт - 2022-02-25 пт </strong>Auto-test <a href="https://github.com/rolling-scopes-school/towel-sort/blob/master/README.md">Towel Sort</a> <br><strong>2022-01-04 вт - 2022-02-25 пт </strong>Auto-test <a href="https://github.com/rolling-scopes-school/brackets">JS: Brackets</a> <br><strong>2022-01-27 чт </strong>Online Lecture Algorythms and Data Structures </li> </ul> </article> <article class="article"> <div class="anchor" id="week8"></div> <h3>Неделя 8 (1 февраля 2022)</h3> <ul> <li> <strong>2022-02-01 вт </strong>Self-studying Подготовительный курс. Неделя #8 <br><strong>2022-02-01 вт - 2022-02-15 вт </strong>Auto-test <a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/codewars/preschool-2022-codewars3.md">Codewars Part 3</a> <br><strong>2022-02-01 вт - 2022-02-15 вт </strong>Auto-test <a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/js30%23/js30.md">js30#1.1-eco-sounds</a> <br><strong>2022-02-01 вт - 2022-02-15 вт </strong>Auto-test <a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/js30%23/js30.md">js30#1.2-audio-player</a> <br><strong>2022-02-01 вт - 2022-02-15 вт </strong>Auto-test <a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/js30%23/js30.md">js30#1.3-custom-video</a><br><strong>2022-02-02 ср </strong>Online Lecture Q&A Session </li> </ul> </article> <article class="article"> <div class="anchor" id="week9"></div> <h3>Неделя 9 (8 февраля 2022)</h3> <ul> <li> <strong>2022-02-08 вт </strong>Self-studying Подготовительный курс. Неделя #9 <br><strong>2022-02-08 вт - 2022-02-22 вт </strong>Auto-test <a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/js30%23/js30.md">js30#2.1-random-jokes</a> <br><strong>2022-02-08 вт - 2022-02-22 вт </strong>Auto-test <a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/js30%23/js30.md">js30#2.2-image-galery</a> <br><strong>2022-02-08 вт - 2022-02-22 вт </strong>Auto-test <a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/js30%23/js30.md">js30#2.3-movie-app</a> <br><strong>2022-02-09 ср </strong>Online Lecture Q&A Session </li> </ul> </article> <article class="article"> <div class="anchor" id="week10"></div> <h3>Неделя 10 (15 февраля 2022)</h3> <ul> <li> <strong>2022-02-15 вт </strong>Self-studying Подготовительный курс. Неделя #10 <br><strong>2022-02-15 вт - 2022-02-22 вт </strong>Auto-test <a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/js30%23/js30.md">js30#3.1-tic-tac-toe</a> <br><strong>2022-02-15 вт - 2022-02-22 вт </strong>Auto-test <a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/js30%23/js30.md">js30#3.2-memory-game</a> <br><strong>2022-02-15 вт - 2022-02-22 вт </strong>Auto-test <a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/js30%23/js30.md">js30#3.3-random-game</a> <br><strong>2022-02-16 ср </strong>Online Lecture Q&A Session </li> </ul> </article> <article class="article"> <div class="anchor" id="week11"></div> <h3>Неделя 11 (22 февраля 2022)</h3> <ul> <li> <strong>2022-02-22 вт </strong>Self-studying Подготовительный курс. Неделя #11<br><strong>2022-02-24 чт </strong>Online Lecture Q&A Session </li> </ul> </article> <article class="article"> <div class="anchor" id="certificate"></div> <h2>Я закончил на позиции 140 и получил certificate</h2> <p><img src="'+ct()(dt)+'" alt="certificate" class="certificate"></p> </article>';var pt=new URL(r(289),r.b);const ut='<h1>DSR (Doing Software Right)</h1> <div class="article"> <h2>Бесплатный онлайн курс .Net School (2 октября 2023 - 25 января 2024)</h2> <div class="anchor" id="contents"></div> <h2>Содержание</h2> <div class="article__contents"> <a href="#konspekt" class="contents__link">Конспект лекций</a> <a href="#video" class="contents__link">Видеоуроки по C# .NET</a> <a href="#netschool" class="contents__link">.NET School</a> <a href="#certificate" class="contents__link">certificate</a> </div> </div> <article class="article"> <div class="anchor" id="konspekt"></div> <h2>Конспект лекций</h2> <p> Лекции проходят в зуме по понедельникам в 18.00 c 2 октября по 18 декабря (12 лекций) <br><a href="https://us02web.zoom.us/j/84088711032?pwd=ZWVYcWl4TGY4dWlZb3BpVCs5bmVvZz09">us02web.zoom.us</a> </p> <p> Лекция в четверг 9.11.2023 в 18.30 <br><a href="https://us02web.zoom.us/j/81870430183?pwd=V29GVGYwVHd3Z2ZubzdLUnVtVGRUdz09">us02web.zoom.us</a> </p> <p> Workshop в 18.30 по четвергам с 23 ноября по 28 декабря (6 практик) <br><a href="https://us02web.zoom.us/j/88437456596?pwd=R0dzS1JoRFlYY2tVWGh1WlpjMGZ0QT09">us02web.zoom.us</a> </p> <p> Финальное тестирование в понедельник 18.30 29 января 2024. Результаты теста в понедельник в 18.30 5 февраля 2024. </p> <p> Репозиторий с примерами и практикой <br><a href="https://github.com/KononovAndrey/NetSchool2023">github.com/KononovAndrey/NetSchool2023</a> </p> </article> <article class="article"> <h3>26.09.2023 .net school presentation</h3> <p><a href="https://youtu.be/mUO4KCUGokw">Запись презентации курса</a></p> <p><a href="dsr/dsr-lecture0.html" class="js-dsr-lecture">Конспект Лекция 0</a></p> </article> <article class="article"> <h3>02.10.2023 Lecture #1 Software Developer</h3> <p><a href="https://youtu.be/Ljt1nBHcccs">Запись лекции 1 </a></p> <p><a href="dsr/dsr-lecture1.html" class="js-dsr-lecture">Конспект Лекция 1</a></p> </article> <article class="article"> <h3>09.10.2023 Lecture #2 C# типы данных</h3> <p><a href="https://youtu.be/AhLj2poT4m8">Запись лекции 2</a></p> <p><a href="dsr/dsr-lecture-2.html" class="js-dsr-lecture">Конспект Лекция 2</a></p> </article> <article class="article"> <h3>16.10.2023 Lecture #3 C# part 2</h3> <p><a href="https://youtu.be/Z2WW5MLrmOg">Запись лекции 3</a></p> <p><a href="dsr/dsr-lecture-3.html" class="js-dsr-lecture">Конспект Лекция 3</a></p> </article> <article class="article"> <h3>23.10.2023 Lecture #4 Web application</h3> <p><a href="https://youtu.be/zGsMv5Fa3kc">Запись лекции 4</a></p> <p><a href="dsr/dsr-lecture-4.html" class="js-dsr-lecture">Конспект Лекция 4</a></p> </article> <article class="article"> <h3>30.10.2023 Lecture #5 Web application</h3> <p><a href="https://youtu.be/zwXRDDHY-1M">Запись лекции 5</a></p> <p><a href="dsr/dsr-lecture-5.html" class="js-dsr-lecture">Конспект Лекция 5</a></p> </article> <article class="article"> <h3>09.11.2023 Lecture #6 DBMS</h3> <p><a href="https://youtu.be/fSapZRio5Ao">Запись лекции 6</a></p> <p><a href="dsr/dsr-lecture-6.html" class="js-dsr-lecture">Конспект Лекция 6</a></p> </article> <article class="article"> <h3>13.11.2023 Lecture #7 Net platform</h3> <p><a href="https://youtu.be/-ffoytULxdg">Запись лекции 7</a></p> <p><a href="dsr/dsr-lecture-7.html" class="js-dsr-lecture">Конспект Лекция 7</a></p> </article> <article class="article"> <h3>20.11.2023 Lecture #8 ASP Net Core</h3> <p><a href="https://youtu.be/WV1RH22Yswk">Запись лекции 8</a></p> <p><a href="dsr/dsr-lecture-8.html" class="js-dsr-lecture">Конспект Лекция 8</a></p> </article> <article class="article"> <h3>23.11.2023 Workshop #1</h3> <p><a href="https://youtu.be/bBcZaBUcUOo">Запись Workshop 1</a></p> <p><a href="dsr/dsr-workshop-1.html" class="js-dsr-workshop">Конспект Workshop 1</a></p> </article> <article class="article"> <h3>27.11.2023 Lecture #9 Persistence layer</h3> <p><a href="https://youtu.be/34FFP4nMm-w">Запись лекции 9</a></p> <p><a href="dsr/dsr-lecture-9.html" class="js-dsr-lecture">Конспект Лекция 9</a></p> </article> <article class="article"> <h3>30.11.2023 Workshop #2</h3> <p><a href="https://youtu.be/RgNwnHefKdM">Запись Workshop 2</a></p> <p><a href="dsr/dsr-workshop-2.html" class="js-dsr-workshop">Конспект Workshop 2</a></p> </article> <article class="article"> <h3>04.12.2023 Lecture #10 Persistence layer P2</h3> <p><a href="https://youtu.be/tiZCQof7i1c">Запись лекции 10</a></p> <p><a href="dsr/dsr-lecture-10.html" class="js-dsr-lecture">Конспект Лекция 10</a></p> </article> <article class="article"> <h3>07.12.2023 Workshop #3</h3> <p><a href="https://youtu.be/OroUwZbZc-Y">Запись Workshop 3</a></p> <p><a href="dsr/dsr-workshop-3.html" class="js-dsr-workshop">Конспект Workshop 3</a></p> </article> <article class="article"> <h3>11.12.2023 Lecture #11 Presentation layer P1</h3> <p><a href="https://youtu.be/tGFONRJgsEk">Запись лекции 11</a></p> <p><a href="dsr/dsr-lecture-11.html" class="js-dsr-lecture">Конспект Лекция 11</a></p> </article> <article class="article"> <h3>14.12.2023 Workshop #4</h3> <p><a href="https://youtu.be/pA5mtPERhMY">Запись Workshop 4</a></p> <p><a href="dsr/dsr-workshop-4.html" class="js-dsr-workshop">Конспект Workshop 4</a></p> </article> <article class="article"> <h3>18.12.2023 Lecture #12 Presentation layer P2</h3> <p><a href="https://youtu.be/p_Q_f3CNhJw">Запись лекции 12</a></p> <p><a href="dsr/dsr-lecture-12.html" class="js-dsr-lecture">Конспект Лекция 12</a></p> </article> <article class="article"> <h3>21.12.2023 Workshop #5</h3> <p><a href="https://youtu.be/JQK2_TAEBg0">Запись Workshop 5</a></p> <p><a href="dsr/dsr-workshop-5.html" class="js-dsr-workshop">Конспект Workshop 5</a></p> </article> <article class="article"> <h3>28.12.2023 Workshop #6</h3> <p><a href="https://youtu.be/4rD_Gzv6VfQ">Запись Workshop 6</a></p> <p><a href="dsr/dsr-workshop-6.html" class="js-dsr-workshop">Конспект Workshop 6</a></p> </article> <article class="article"> <div class="anchor" id="video"></div> <h2>Видеоуроки по C# .NET</h2> <p> <a href="https://www.youtube.com/@itproger/videos">Школа itProger / Программирование</a> youtube channel </p> <p> <a href="https://www.youtube.com/playlist?list=PLDyJYA6aTY1laYPs6iS-SrYl9DZLVCUKr">Уроки C# для начинающих / Программирование на C#</a> youtube channel playlist 28 video 2021 </p> <p> <a href="https://www.youtube.com/@user-kn3jz5es6q/videos">Нуб Кодер</a> youtube channel </p> <p> <a href="https://www.youtube.com/playlist?list=PLagM_ZoXVZ8Y5IZe44eDJXjGZTV45RezB">Нуб Кодер. Уроки по C#</a> youtube channel playlist 15 video 2023 </p> <p> <a href="https://www.youtube.com/watch?v=w8rRhAup4kg">C# 2023 С НУЛЯ ДО ПРОФИ | СЛИВ ЛУЧШЕГО КУРСА</a> Роман Сакутин - GameDev </p> <p> <a href="https://www.youtube.com/@Intuitube/videos">НОУ ИНТУИТ</a> youtube channel </p> <p> <a href="https://www.youtube.com/playlist?list=PLDrmKwRSNx7L1zDHBxD5_vYSYW3Jno1lq"> НОУ ИНТУИТ. Программирование на C# для школьников</a> youtube channel playlist 8 video 2018 </p> <p> <a href="https://www.youtube.com/playlist?list=PLDrmKwRSNx7JuqTbAzUhUR9T-bMSys3VT">НОУ ИНТУИТ. Классические алгоритмы и игры на C# для школьников</a> youtube channel 10 видео 2018 </p> <p> <a href="https://www.youtube.com/playlist?list=PLDrmKwRSNx7K-VRJbpAogEr11ZxlUiw1V">НОУ ИНТУИТ. Объектное программирование в классах на С# 3.0</a> youtube channel 19 видео 2013 </p> <p> <a href="https://www.youtube.com/playlist?list=PLDrmKwRSNx7I05X0NQiJu3afmGFBFPezc">НОУ ИНТУИТ. Основы программирования на С# 3.0: ядро языка</a> youtube channel 13 видео 2013 </p> <p> <a href="https://www.youtube.com/@CODEBLOG/videos">CODE BLOG</a> youtube channel </p> <p> <a href="https://www.youtube.com/playlist?list=PLIIXgDT0bKw4OmiZ9yGmShKsY0XncViZ8">CODE BLOG. C# уроки</a> youtube channel playlist 30 video 2018 </p> <p> <a href="https://www.youtube.com/@abankingeducation6518">Abanking Education</a> youtube channel </p> <p> <a href="https://www.youtube.com/watch?v=pX3ZaVEOczM&list=PL51FNaeWDci4jKExHuuc6YkSKAqwv_7XN">Abanking Education. Лекции 2022. Дима Егоров .NET</a> youtube channel playlist 41 video 2022 </p> <p> <a href="https://www.youtube.com/watch?v=izuBWaijegk">Abanking Education. Лекции 2023. Михаил .NET</a> youtube channel 1 видео </p> </article> <article class="article"> <div class="anchor" id="netschool"></div> <h2>О курсе .NET School</h2> <p> <a href="https://ru.dsr-corporation.com/">ru.dsr-corporation.com</a> DSR создана инженерами для инженеров </p> <p> <a href="https://ru.dsr-corporation.com/student/">ru.dsr-corporation.com/student</a> Учебный центр </p> <p> <a href="https://ru.dsr-corporation.com/student/courses/dotnet-school/"> ru.dsr-corporation.com/student/courses/dotnet-school</a> .NET School </p> <p>ДЦ "Тезис", ул. Свободы, 69, Воронеж, Воронежская обл., 394006</p> <p>Окунемся в мир .NET веб-разработки под чутким руководством инженеров DSR Corporation. Во время прохождения курса вы узнаете, как разрабатывается реальное приложение, из чего оно состоит и как выглядит процесс промышленной разработки ПО.</p> <p> Следите за новостями учебного центра в группе ВК, ТГ-каналах для России и Ташкента.</p> <p>Курс .NET School – это все что нужно знать и уметь Junior .NET разработчику. Мы пройдем полный цикл разработки WebAPI от проектирования БД до CI/CD и рассмотрим полезные инструменты, необходимые программисту на всех этапах создания приложения.</p> <p>Темы: <br>о профессии: чем программист похож на садовода и как «выращивают» программы; <br>обзор и области применения фреймворка .NET; <br>архитектура веб-приложений; <br>инфраструктура для веб-разработки; <br>основы программирования на С#; <br>СУБД: виды и области применения; <br>предметное знакомство с ASP.NET; <br>слои архитектуры серверной части веб-приложения; <br>тестирование: виды, уровни, методы и инструменты; <br>что такое комбинация CI/CD и зачем она нужна. </p> <p>Формат: онлайн: лекции + практические занятия + курсовой проект.</p> <p>Преимущества: <br>полностью бесплатное обучение; <br>преподаватели курса — опытные веб-разработчики; <br>самых талантливых пригласим на собеседование. </p> <p>Результат: <br>узнаете о современной веб-разработке из первых рук; <br>приобретете знания и навыки Junior .NET разработчика; <br>напишете работающее веб-приложение на C#; <br>получите рекомендации по дальнейшему профессиональному развитию. </p> <p>Что нужно, чтобы успешно пройти курс: <br>базовые знания С#; <br>базовые навыки программирования в Visual Studio; <br>интерес к разработке веб-приложений; <br>компьютер или ноутбук под управлением Windows/MacOS. </p> <p>Курс ориентирован на студентов ВУЗов Ташкента и Воронежа. Входное тестирование отсутствует. Курс длится 2 семестра и завершится в мае 2024 года. Презентация и занятия — онлайн.</p> </article> <article class="article"> <div class="anchor" id="certificate"></div> <h2>Я сдал финальный тест и получил certificate</h2> <p><img src="'+ct()(pt)+'" alt="certificate" class="certificate"></p> </article>';var mt=new URL(r(302),r.b);const gt='<h1>The Rolling Scopes School <br>Javascript Frontend 2023Q2 Stage 0 <br>26 июня 2023 - 30 октября 2023</h1> <div class="article"> <div class="anchor" id="contents"></div> <h2>Содержание</h2> <div class="article__contents"> <a href="#stage0" class="contents__link">Stage 0</a> <a href="#week1" class="contents__link">Week 1</a> <a href="#week2" class="contents__link">Week 2</a> <a href="#week3" class="contents__link">Week 3</a> <a href="#week4" class="contents__link">Week 4</a> <a href="#week5" class="contents__link">Week 5</a> <a href="#week6" class="contents__link">Week 6</a> <a href="#week7" class="contents__link">Week 7</a> <a href="#week8" class="contents__link">Week 8</a> <a href="#week9" class="contents__link">Week 9</a> <a href="#week10" class="contents__link">Week 10</a> <a href="#week11" class="contents__link">Week 11</a> <a href="#week12" class="contents__link">Week 12</a> <a href="#week13" class="contents__link">Week 13</a> <a href="#week14" class="contents__link">Week 14</a> <a href="#week15" class="contents__link">Week 15</a> <a href="#week16" class="contents__link">Week 16</a> <a href="#week17" class="contents__link">Week 17</a> <a href="#week18" class="contents__link">Week 18</a> <a href="#certificate" class="contents__link">certificate</a> </div> </div> <article class="article"> <a href="https://github.com/rolling-scopes-school/tasks/tree/master/stage0">Программа stage0</a> <br>Приватный репозиторий Stage0 2023Q2 <a href="https://github.com/rolling-scopes-school/frontend200tb-JSFEPRESCHOOL2023Q2">frontend200tb-JSFEPRESCHOOL2023Q2</a> <br>Финальный проект Stage0 2023Q2 <a href="https://rolling-scopes-school.github.io/frontend200tb-JSFEPRESCHOOL2023Q2/library/">library</a> <br>Макет в figma <a href="https://www.figma.com/file/SGY7eOpXC1xBddFNsb72o7/%D0%91%D0%B8%D0%B1%D0%BB%D0%B8%D0%BE%D1%82%D0%B5%D0%BA%D0%B0-stage0?type=design&node-id=0-1&mode=design">figma.com library</a> <br>Discord channel <a href="https://discord.com/channels/516715744646660106/917120666782801991">Stage 0</a> <br>Учебная платформа <a href="https://app.rs.school/">app.rs.school</a> </article> <article class="article"> <div class="anchor" id="stage0"></div> <h2>Javascript Frontend 2023Q2 Stage 0</h2> <h3>RS School. Курс JS/Frontend-разработка. Подготовительный этап</h3> <ul> <li> <p>Подготовительный этап поможет тем, кто мало знаком или совсем не знаком с программированием и хотел бы впоследствии успешно обучаться в RS School.</p> <p>Описание <br>- Зачисляются все желающие <br>- Время обучения: 13 недель <br>- Формат: самообучение, групповое обучение, общение в Discord, задания проверяют в процессе кросс-чек и автоматически <br>- По окончании подготовительного этапа оставьте Отзыв школе, чтобы мы могли сделать ее лучше. Если вы покидаете курс во время обучения, по возможности, тоже оставьте отзыв, указав причину ухода.</p> </li> <li> <a href="https://github.com/rolling-scopes-school/tasks/tree/master/stage0">Программа stage0</a> <br>Приватный репозиторий Stage0 2023Q2 <a href="https://github.com/rolling-scopes-school/frontend200tb-JSFEPRESCHOOL2023Q2">frontend200tb-JSFEPRESCHOOL2023Q2</a> <br><a href="https://www.figma.com/">figma.com</a> </li> </ul> </article> <article class="article"> <div class="anchor" id="week1"></div> <h3>Неделя 1 (26 июня 2023)</h3> <ul> <li> <h4>Модуль "Знакомство с RS School"</h4> Приблизительное время прохождения модуля 4 часа <p>Посмотреть запись вводного занятия набора 2022Q2 <a href="https://www.youtube.com/watch?v=wyS_UpMfzKw">JS/FE Stage#0 2022Q2 Знакомство с RS School</a> - 2 часа</p> <p>Прочитать документацию о курсе <a href="https://docs.rs.school/">https://docs.rs.school/</a></p> <p>Посмотреть запись YouTube стрима <a href="https://www.youtube.com/watch?v=mCnOni_mqdk">RSSchool для гуманитария</a> - 2 часа</p> <p><a href="https://docs.google.com/spreadsheets/d/1STe2AtPckojasiQI_j6s0cLRWEjvHG0LCSxN3yv5dBA/edit#gid=0">Список лучших финальных проектов 2020Q3</a> - 0.5 часа</p> <p><a href="https://docs.google.com/spreadsheets/d/1IACz3tcZTx71Qh9z6ZXu8VimgISJvrO-bJUBLpQ-bVM/edit#gid=0">Фидбек о школе студентов 2020q3</a> - 0.5 часа</p> </li> <li> <h4>Модуль "Профессия "JS/Front-end разработчик"</h4> Приблизительное время прохождения модуля 2 часа <p>Посмотреть запись вебинара <a href="https://www.youtube.com/watch?v=5g1U06QjWZk">Week #1. Introduction to Front-End JS/FE Pre-school 2021Q3</a> - 2ч 31м</p> <p>Ознакомиться с <a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage0/modules/js-fe-developer/js-l1-position-requirements.md">требованиями</a> к JS/Front-end разработчику в EPAM</p> <p>Прочитать <a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/materials/english.md">рекомендации по изучению английского языка</a></p> <p>Посмотреть запись YouTube стрима <a href="https://www.youtube.com/watch?v=pQ0hr5U8RL0">Профориентация 2020 Q3</a> - 1.5 часа</p> <p>Отличная книга по JS на русском <a href="https://learn.javascript.ru/">learn.javascript.ru</a> Главы, которые желательно прочитать в первую очередь: <br><a href="https://learn.javascript.ru/first-steps">Основы JavaScript</a> <br><a href="https://learn.javascript.ru/object-basics">Объекты: основы</a> <br><a href="https://learn.javascript.ru/data-types">Типы данных</a> <br><a href="https://learn.javascript.ru/document">Документ</a> <br><a href="https://learn.javascript.ru/events">Введение в события</a></p> </li> <li> <h4>Модуль "Знакомство с системой контроля версий Git"</h4> Приблизительное время прохождения модуля Теория: 3 часа Практика: 4 часа <p>Посмотреть запись лекции по Git прошлого набора <a href="https://youtu.be/6i0Wg-Pohg8?list=PLzLiprpVuH8df24MzZp-l5QMsJWJbi9qP">JS/FE Stage#0 2022Q2 Git for beginners</a> 2 часа</p> <p>Просмотреть практические видео-материалы <a href="https://www.youtube.com/watch?v=Dlr_E7WfA08">RS School Basics - s01e10 - Git Workshop (Part 1)</a> (0.5 часа)</p> <p>Для практического задания ознакомиться с <a href="https://guides.github.com/features/mastering-markdown/">документацией Markdown</a></p> <p>Видео о том как работать с gh-pages <a href="https://www.youtube.com/watch?v=0lvKcqP3aP0">JS/FE 2022 Q2 Deploy to GitHub Pages</a></p> <p>Посмотреть видео Базовые основы по git, github<a href="https://www.youtube.com/watch?v=8Dd7KRpKeaE">Git, GitHub, & GitHub Desktop for beginners</a> ( графический интерфейс )</p> <p>Основы Git. <a href="https://git-scm.com/book/ru/v2/%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%9E-%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B5-%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8F-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D0%B9">Учебник</a></p> <p><a href="https://github.com/TUstiugov/ssh-hints-for-win/blob/main/ssh-hints-for-win.md">Инструкция</a> по добавлению SSH в Git</p> <p>Хорошие материалы от Git-комьюнити в виде документации: <a href="https://uleming.github.io/gitbook/index.html">https://uleming.github.io/gitbook/index.html</a></p> <p>Интерактивный тренажер по Git: <a href="https://learngitbranching.js.org/?locale=ru_RU">https://learngitbranching.js.org/?locale=ru_RU</a></p> <p><a href="https://www.youtube.com/watch?v=W4hoc24K93E&list=PLDyvV36pndZFHXjXuwA_NywNrVQO0aQqb">Скринкаст по Git</a> (learn.javascript.ru)</p> <p><a href="https://www.evernote.com/shard/s368/client/snv?noteGuid=b1359883-2b9e-419a-b9de-dd959fc05f05&noteKey=97c0f19486d851b3&sn=https%3A%2F%2Fwww.evernote.com%2Fshard%2Fs368%2Fsh%2Fb1359883-2b9e-419a-b9de-dd959fc05f05%2F97c0f19486d851b3&title=Git">Конспект по Git</a></p> <p>Тренажёр по Git <a href="https://githowto.com/ru">https://githowto.com/ru</a></p> <p><a href="https://www.w3schools.com/git/default.asp?remote=github">Git Tutorial for beginners ENG</a></p> </li> <li> <h4>Модуль "Chrome Dev Tools, VS Code, Terminal"</h4> Приблизительное время прохождения модуля 4 часа <p>Интернет и Браузер <a href="https://webref.ru/course/introduction">webref.ru/course/introduction</a></p> <p>Вебинар: Браузеры. VS Code – установка и настройка <a href="https://www.youtube.com/watch?v=nd2VYxOsOwY">Webinar 11.09.2019 Browsers. IDEs. Web Technologies 2019Q3</a> 2 часа</p> <p>Терминал <a href="https://www.digitalcitizen.life/command-prompt-how-use-basic-commands">Basic Windows</a> <a href="https://www.imore.com/how-use-terminal-mac-when-you-have-no-idea-where-start">Basic Mac</a></p> <p>How browser works <a href="https://www.youtube.com/watch?v=gdriDw-ciH8">RS School 2020Q3. How browser works</a> 1 час</p> <p><a href="https://habr.com/ru/post/490754/">habr.com/ru/post/490754/</a> - 2h</p> <p><a href="https://itchief.ru/javascript/vscode-configuration-for-frontend-development">itchief.ru/javascript/vscode-configuration-for-frontend-development</a> - 1h</p> <p><a href="https://solidados.github.io/plugins_vscode/">Шпаргалка</a> по плагинам для VSCode</p> </li> <li> <h4>Проект "CV"</h4> <p>Описание проекта</p> <p>CV (сurriculum vitae) - документ, в котором соискатель описывает своё образование и опыт работы. В отличие от резюме, которое редактируется под требования каждой конкретной вакансии, в CV отображаются профессиональные достижения и навыки за весь период учёбы и работы.</p> <p>Задание состоит из трёх частей</p> <p>CV#1. Markdown & Git</p> <p>CV#2. HTML, CSS & Git Basics</p> <p>CV#3. CV. Cross-Check</p> <p>Рекомендации EPAM HR department</p> <p>1. Имя и фамилия</p> <p>2. Контакты для связи</p> <p>3. Краткая информация о себе (ваша цель и приоритеты, подчеркните свои сильные стороны, расскажите о своём опыте работы, если опыта работы нет, расскажите о своём стремлении учиться и узнавать новое)</p> <p>4. Навыки (языки программирования, фреймворки, методологии, системы контроля версий и инструменты разработки, которыми вы владеете)</p> <p>5. Примеры кода</p> <p>6. Опыт работы. Junior Dev может перечислить учебные проекты с указанием использованных навыков и ссылками на исходный код.</p> <p>7. Образование (включая пройденные курсы и тренинги)</p> <p>8. Английский язык (уровень английского языка, если была языковая практика, расскажите о ней)</p> </li> <li> <h4>Проект "CV". CV#1. Markdown & Git</h4> Ваша задача - оформить репозиторий согласно требованиям, добавить в него своё CV в формате markdown, задеплоить CV в формате markdown на GitHub Pages. </li> </ul> </article> <article class="article"> <div class="anchor" id="week2"></div> <h3>Неделя 2 (3 июля 2023)</h3> <ul> <li> <h4>Модуль "Основы HTML"</h4> Приблизительное время прохождения модуля 12 часов <p>Вам необходимо пройти интерактивный курс <a href="https://code-basics.com/ru/languages/html">code-basics.com/ru/languages/html</a> (11 часов)</p> <p>Просмотреть запись лекции по основам HTML и CSS <a href="https://youtu.be/4Zj7tRlQJao?list=PLzLiprpVuH8df24MzZp-l5QMsJWJbi9qP">JS/FE Stage#0 2022Q2 HTML/CSS Basics</a></p> <p>Полный курс по HTML от WEB.dev ( google ) <a href="https://web.dev/learn/html/">web.dev/learn/html</a> 16 часов</p> <p>Расширенный курс по работе с формами от WEB.dev ( google ) <a href="https://web.dev/learn/forms/">web.dev/learn/forms</a> 6 часов</p> <p>Расширенный курс по работе с изображениями от WEB.dev ( google ) <a href="https://web.dev/learn/images/">web.dev/learn/images</a> 4 часа</p> <p>Влад Мержевич Полный курс по HTML <a href="https://webref.ru/course/html-tutorial">webref.ru/course/html-tutorial</a> 4 часа</p> <p>Влад Мержевич Работа с формами в HTML <a href="https://webref.ru/course/html5-form">webref.ru/course/html5-form</a> 2 часа</p> <p>Дежереми Томас Основы HTML <a href="https://webref.ru/course/html-basics">webref.ru/course/html-basics</a> 2 часа</p> <p>Дежереми Томас Оформление текста в HTML <a href="https://webref.ru/course/html-content">webref.ru/course/html-content</a> 2 часа</p> </li> <li> <h4>Модуль "Основы CSS"</h4> Приблизительное время прохождения модуля 9 часов <p>Вам необходимо пройти интерактивный курс <a href="https://code-basics.com/ru/languages/css">code-basics.com/ru/languages/css</a> (8 часов)</p> <p>Просмотреть запись лекции по основам HTML и CSS <a href="https://www.youtube.com/watch?v=4Zj7tRlQJao&list=PLzLiprpVuH8df24MzZp-l5QMsJWJbi9qP">JS/FE Stage#0 2022Q2 HTML/CSS Basics</a></p> <p><a href="https://webref.ru/course/css-basics">webref.ru/course/css-basics</a> - 4 часа</p> <p>Изучение селекторов посредством игры <a href="https://flukeout.github.io/">flukeout.github.io</a> 1 час</p> </li> <li> <h4>Проект "CV". CV#2. HTML, CSS & Git Basics</h4> Ваша задача - в репозитории rsschool-cv от ветки gh-pages создать ветку rsschool-cv-html, добавить в неё файлы index.html и style.css которые содержат базовые пустые шаблоны или шаблоны с минимальным содержанием (вёрстка и стилизация CV будет выполняться в следующем задании), задеплоить их на GitHub Pages. <p>Символы для html <a href="https://www.lexium.ru/2009/05/343/">Escape-последовательности</a></p> </li> <li> <h4>Проект "CV". CV#3. CV. Cross-Check</h4> В этой части задания ставится задача сверстать CV. <p>Основу содержания данной страницы составят данные, которые вы добавили в markdown-документ, созданный в ходе выполнения задания CV#1. Markdown & Git. Эти данные могут быть изменены, дополнены, отредактированы.</p> <p>Кроме текста на страницу необходимо добавить ваше фото или аватарку.</p> </li> </ul> </article> <article class="article"> <div class="anchor" id="week3"></div> <h3>Неделя 3 (10 июля 2023)</h3> <ul> <li> <h4>Модуль "Позиционирование в CSS. Flex."</h4> Приблизительное время прохождения модуля 6 часов <p>Изучить <a href="https://webref.ru/course/position">webref.ru/course/position</a> 2 часа</p> <p>Изучить <a href="https://webref.ru/course/block-model">webref.ru/course/block-model</a> 2 часа</p> <p>Изучить <a href="https://webref.ru/course/block-inline">webref.ru/course/block-inline</a> 1 час</p> <p>Изучить <a href="https://webref.ru/layout/flexbox-tutorial">webref.ru/layout/flexbox-tutorial</a> 2 часа</p> <p>Изучить <a href="https://habr.com/ru/post/467049/">habr.com/ru/post/467049</a> 1 час</p> <p>Посмотреть видео по основам Flex позиционирования <a href="https://youtu.be/zeKsh5uPeg0?list=PLzLiprpVuH8df24MzZp-l5QMsJWJbi9qP">JS/FE Stage#0 2022Q2 CSS Flex</a> 1,5 часа</p> <p>Посмотреть видео лекция Position. Floats. Flex. Semantic. CSS3 <a href="https://www.youtube.com/watch?v=iSQcOjxttNg&list=PLe--kalBDwji8WXKVjhON39X4v_Uj6T_R&index=3">RS School Ubekistan. Position. Floats. Flex. Semantic. CSS3 2019</a> 1,5 часа</p> <p>Изучить <a href="https://www.evernote.com/shard/s368/client/snv?noteGuid=4346cdea-9386-4738-bfff-f9faafc05e94&noteKey=fb6ec76312f7111b&sn=https%3A%2F%2Fwww.evernote.com%2Fshard%2Fs368%2Fsh%2F4346cdea-9386-4738-bfff-f9faafc05e94%2Ffb6ec76312f7111b&title=CSS%253A%2BFlexbox%2B%2528htmlacademy.ru%2529">CSS: Flexbox</a></p> <p>Изучить Шпаргалка по Flexbox (CSS3 Flexible Box) <a href="https://habr.com/ru/articles/313938/">habr.com/ru/articles/313938</a></p> <p><a href="https://flexboxfroggy.com/#ru">Изучение флексбоксов посредством игры</a></p> </li> <li> <h4>Модуль "Figma"</h4> Приблизительное время прохождения модуля 30 минут <p>Инструкция <a href="https://breezzly.ru/guides/start-v-figma-dlya-verstalshhika">Фигма для верстальщика</a> 30 минут</p> </li> <li> <h4>Проект "Library"</h4> <p>Описание проекта</p> <p>Library – задание stage#0 в ходе выполнения которого вы сверстаете landing page сайта по подбору и продаже книг, сделаете его адаптивным и интерактивным.</p> <p>Задание состоит из трёх частей:</p> <p>Часть 1. Фиксированная вёрстка</p> <p>Часть 2. Адаптивная вёрстка</p> <p>Часть 3. Добавление функционала</p> <p>Изучить <a href="https://htmlacademy.ru/blog/html/figma">Старт в Figma для верстальщика</a></p> <p>Изучить <a href="https://breezzly.ru/guides/start-v-figma-dlya-verstalshhika">Инструкция по работе в Figma для верстальщика</a></p> <p>Посмотреть на youtube <a href="https://www.youtube.com/playlist?list=PL5_s7xdj2Vsw-bCx5nOZJMFIiHwRgok--">Верстка сайта с нуля из Figma</a></p> <p>вебинары Сергея Шаляпина <br><a href="https://youtu.be/UQavTWiTpnA">Stream 11.02.2020</a></p> <br><a href="https://youtu.be/PhRVJC0kBGE">Stream 03.03.2020</a><p></p> <br><a href="https://youtu.be/_5f0kznOM_A">Stream 10.03.2020</a><p></p> <br><a href="https://youtu.be/0M9Rz-wXYas">Stream 17.03.2020</a><p></p> <br><a href="https://youtu.be/fFDw7AH2OXo">Stream 26.03.2020</a><p></p> </li> <li> <h4>Проект "Library". Library#1. Фиксированная вёрстка</h4> <p>Описание и требования задания</p> <p>Вам необходимо сверстать страницу согласно макету - только Desktop Ширина контента 1440рх не должна изменяться при изменении размера окна браузера.</p> </li> <li> <h4>Кросс-чек проверка проекта "CV#3. CV. Cross-Check"</h4> </li> </ul> </article> <article class="article"> <div class="anchor" id="week4"></div> <h3>Неделя 4 (17 июля 2023)</h3> <ul> <li> <h4>Модуль "Знакомство с JavaScript"</h4> <p>Вам необходимо пройти интерактивный курс <a href="https://code-basics.com/ru/languages/javascript">code-basics.com/ru/languages/javascript</a> (20 часов)</p> <p>Просмотреть лекцию по основам Javascript <a href="https://www.youtube.com/watch?v=PH37Zvp3vDY&list=PLzLiprpVuH8df24MzZp-l5QMsJWJbi9qP">JS/FE Stage#0 2022Q2 JS Basics</a></p> <p>Хороший русскоязычный курс: <a href="https://learn.javascript.ru/first-steps">learn.javascript.ru/first-steps</a> - 16 часов</p> <p>Руководство от комьюнити Mozilla: <a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide">developer.mozilla.org/ru/docs/Web/JavaScript/Guide</a></p> </li> </ul> </article> <article class="article"> <div class="anchor" id="week5"></div> <h3>Неделя 5 (24 июля 2023)</h3> <ul> <li> <h4>Модуль "Знакомство с Codewars. Алгоритмические задачи Часть #1"</h4> <p>Посмотреть лекцию по основам Codewars и алгоритмическим задачам <a href="https://youtu.be/m2SwEM1EISQ?list=PLzLiprpVuH8df24MzZp-l5QMsJWJbi9qP">JS/FE Stage#0 2022Q2 Знакомство с Codewars и RS Algorithmic tasks</a> 1.5 часа</p> <p>Выполнить задания на codewars</p> <p>8 kyu https://www.codewars.com/kata/function-1-hello-world</p> <p>8 kyu https://www.codewars.com/kata/quarter-of-the-year</p> <p>8 kyu https://www.codewars.com/kata/capitalization-and-mutability</p> <p>8 kyu https://www.codewars.com/kata/century-from-year</p> <p>8 kyu https://www.codewars.com/kata/convert-a-number-to-a-string</p> <p>8 kyu https://www.codewars.com/kata/convert-a-string-to-a-number</p> <p>8 kyu https://www.codewars.com/kata/convert-to-binary</p> <p>8 kyu https://www.codewars.com/kata/even-or-odd</p> <p>8 kyu https://www.codewars.com/kata/fake-binary/javascript</p> <p>7 kyu https://www.codewars.com/kata/largest-square-inside-a-circle</p> <p>7 kyu https://www.codewars.com/kata/number-of-decimal-digits</p> <p>8 kyu https://www.codewars.com/kata/opposite-number</p> <p>7 kyu https://www.codewars.com/kata/perimeter-sequence</p> <p>8 kyu https://www.codewars.com/kata/remove-first-and-last-character</p> <p>8 kyu https://www.codewars.com/kata/remove-string-spaces</p> <p>7 kyu https://www.codewars.com/kata/string-ends-with</p> <p>8 kyu https://www.codewars.com/kata/simple-multiplication</p> <p>8 kyu https://www.codewars.com/kata/string-repeat</p> <p>8 kyu https://www.codewars.com/kata/students-final-grade</p> <p>8 kyu https://www.codewars.com/kata/switch-it-up</p> <p>8 kyu https://www.codewars.com/kata/thinkful-logic-drills-traffic-light</p> <p>8 kyu https://www.codewars.com/kata/third-angle-of-a-triangle</p> <p>8 kyu https://www.codewars.com/kata/transportation-on-vacation</p> <p>8 kyu https://www.codewars.com/kata/type-of-sum</p> <p>8 kyu https://www.codewars.com/kata/will-you-make-it</p> </li> </ul> </article> <article class="article"> <div class="anchor" id="week6"></div> <h3>Неделя 6 (31 июля 2023)</h3> <ul> <li> <h4>Модуль "Закрепление основ JavaScript. Функции"</h4> Приблизительное время прохождения модуля 3 часов <p>Изучить Функции на <a href="https://learn.javascript.ru/function-basics">learn.javascript.ru/function-basics</a> - 1 час</p> <p>Изучить Function Expression на <a href="https://learn.javascript.ru/function-expressions">learn.javascript.ru/function-expressions</a> - 1 час</p> <p>Изучить Функции-стрелки, основы на <a href="https://learn.javascript.ru/arrow-functions-basics">learn.javascript.ru/arrow-functions-basics</a> - 30 минут</p> <p>Запись лекции <a href="https://www.youtube.com/watch?v=LBBg9L_B-tk&list=PLzLiprpVuH8df24MzZp-l5QMsJWJbi9qP">JS/FE Stage#0 2022Q2 JS Functions</a> 2 часа 30 минут</p> <p>Решить алгоритмические задачи: <br>https://github.com/Shastel/human-readable-number <br>https://github.com/Shastel/reverse-int</p> <p>Инструкция по алгоритмическим задачам <a href="https://github.com/TUstiugov/algorithmic-tasks-hints/blob/main/algorithmic-tasks-hints.md">algorithmic-tasks-hints</a></p> <p>Запись вебинара Functions <a href="https://www.youtube.com/watch?v=fShrn50Fkhw&list=PLe--kalBDwji8WXKVjhON39X4v_Uj6T_R&index=6">RS Uzbekistan. Functions 2019</a> 2 часа 30 минут</p> </li> <li> <h4>Кросс-чек проверка проекта "Library#1"</h4> </li> <li> <h4>Проект "Library" Library#2. Адаптивная вёрстка</h4> </li> </ul> </article> <article class="article"> <div class="anchor" id="week7"></div> <h3>Неделя 7 (7 августа 2023)</h3> <ul> <li> <h4>Модуль "Обьекты и массивы в JavaScript"</h4> </li> <li> <h4>Модуль "Codewars Часть#2"</h4> </li> </ul> </article> <article class="article"> <div class="anchor" id="week8"></div> <h3>Неделя 8 (14 августа 2023)</h3> <ul> <li> <h4>Модуль "DOM API"</h4> </li> <li> <h4>Модуль "DOM Events"</h4> </li> <li> <h4>Проект "Library" Library#3. Добавление функционала</h4> </li> </ul> </article> <article class="article"> <div class="anchor" id="week9"></div> <h3>Неделя 9 (21 августа 2023)</h3> <ul> <li> <h4>Модуль "Codewars Часть#3"</h4> </li> <li> <h4>Модуль "Алгоритмы и Структуры Данных"</h4> </li> </ul> </article> <article class="article"> <div class="anchor" id="week10"></div> <h3>Неделя 10 (28 августа 2023)</h3> <ul> <li> <h4>JS-101</h4> </li> </ul> </article> <article class="article"> <div class="anchor" id="week11"></div> <h3>Неделя 11 (4 сентября 2023)</h3> <ul> <li> <h4>Модуль "Алгоритмы и Структуры Данных. Часть 2"</h4> </li> </ul> </article> <article class="article"> <div class="anchor" id="week12"></div> <h3>Неделя 12 (11 сентября 2023)</h3> <ul> <li> <h4>Кросс-чек проверка проекта "Library#3"</h4> </li> <li> <h4>"CSS Mem Slider"</h4> </li> </ul> </article> <article class="article"> <div class="anchor" id="week13"></div> <h3>Неделя 13 (18 сентября 2023)</h3> <ul> <li> <h4>"JS-30 Audio Player"</h4> </li> <li> <h4>Кросс-чек проверка проекта "CSS Mem Slider"</h4> </li> <li> <h4>Сдача хвостов (тесты, задачи, Codewars)</h4> </li> </ul> </article> <article class="article"> <div class="anchor" id="week14"></div> <h3>Неделя 14 (25 сентября 2023)</h3> <ul> <li> <h4>"JS-30 Image Gallery"</h4> </li> <li> <h4>Кросс-чек проверка проекта "JS-30 Audio Player"</h4> </li> </ul> </article> <article class="article"> <div class="anchor" id="week15"></div> <h3>Неделя 15 (2 октября 2023)</h3> <ul> <li> <h4>"JS-30 Random Game"</h4> </li> <li> <h4>Кросс-чек проверка проекта "JS-30 Image Gallery"</h4> </li> </ul> </article> <article class="article"> <div class="anchor" id="week16"></div> <h3>Неделя 16 (9 октября 2023)</h3> <ul> <li> <h4>Продолжаем выполнение "JS-30 Random Game"</h4> </li> </ul> </article> <article class="article"> <div class="anchor" id="week17"></div> <h3>Неделя 17 (16 октября 2023)</h3> <ul> <li> <h4>Кросс-чек проверка проекта "JS-30 Random Game"</h4> </li> </ul> </article> <article class="article"> <div class="anchor" id="week18"></div> <h3>Неделя 18 (23 октября 2023)</h3> <ul> <li> <h4>Сдача хвостов (тесты, задачи, Codewars)</h4> </li> <li> <h4>Получение сертификата</h4> </li> </ul> </article> <article class="article"> <div class="anchor" id="certificate"></div> <h2>Я закончил на позиции 1 и получил certificate</h2> <p><img src="'+ct()(mt)+'" alt="certificate" class="certificate"></p> </article>',ft='<h1>Frontend quiz</h1> <div class="article"> <div class="anchor" id="contents"></div> <h2>Содержание</h2> <div class="article__contents"> <a href="#rs-test" class="contents__link">RS Auto Test</a> <a href="#dsr-exam" class="contents__link">DSR Exam</a> <a href="#quiz" class="contents__link">quiz</a> <a href="#rain" class="contents__link">Дождь</a> </div> </div> <article class="article"> <div class="anchor" id="rs-test"></div> <h2>RS Auto Test</h2> <ol> <li><a href="rs-test/rs-test-rss.html" class="js-rs-test">RSS</a> (100 из 100)</li> <li><a href="rs-test/rs-test-git.html" class="js-rs-test">Git</a> (94 из 100)</li> <li><a href="rs-test/rs-test-fundinternet.html" class="js-rs-test">Fundamentals of the internet</a> (100 из 100)</li> <hr> <li><a href="rs-test/rs-test-jsbasics.html" class="js-rs-test">JS Basics</a> (100 из 100)</li> <li><a href="rs-test/rs-test-jstypes.html" class="js-rs-test">JS Types</a> (100 из 100)</li> <li><a href="rs-test/rs-test-jsscope.html" class="js-rs-test">JS Scope & Functions</a> (100 из 100)</li> <li><a href="rs-test/rs-test-jsevolution.html" class="js-rs-test">JS Evolution</a> (93 из 100)</li> <li><a href="rs-test/rs-test-htmlbasics.html" class="js-rs-test">HTML Basics</a> (100 из 100)</li> <li><a href="rs-test/rs-test-cssbasics.html" class="js-rs-test">CSS Basics</a> (100 из 100)</li> <hr> <li><a href="rs-test/rs-test-cssflexbox.html" class="js-rs-test">CSS Positioning & Flexbox</a> (96 из 100)</li> <li><a href="rs-test/rs-test-cssgrid.html" class="js-rs-test">CSS Grid</a> (85 из 100)</li> <li><a href="rs-test/rs-test-sass.html" class="js-rs-test">Preprocessors. SASS</a> (86 из 100)</li> <li><a href="rs-test/rs-test-cssmodules.html" class="js-rs-test">CSS Modules And Some CSS New Features</a> (81 из 100)</li> <li><a href="rs-test/rs-test-mediaqueries.html" class="js-rs-test">Media Queries & Responsive</a> (93 из 100)</li> <hr> <li><a href="rs-test/rs-test-htmlform.html" class="js-rs-test">HTML Form</a> (74 из 100)</li> <li><a href="rs-test/rs-test-domapi.html" class="js-rs-test">DOM Api</a> (82 из 100)</li> <li><a href="rs-test/rs-test-domevents.html" class="js-rs-test">DOM Events</a> (84 из 100)</li> <li><a href="rs-test/rs-test-gitgithub.html" class="js-rs-test">Git & GitHub #2</a> (96 из 100)</li> <li><a href="rs-test/rs-test-algorithms.html" class="js-rs-test">Algorithms & Data structures</a> (92 из 100)</li> <hr> <li><a href="rs-test/rs-test-cleancode.html" class="js-rs-test">Clean-code</a> (88 из 100)</li> <li><a href="rs-test/rs-test-linters.html" class="js-rs-test">Linters, Formatters and Husky</a> (85 из 100)</li> <hr> <li><a href="rs-test/rs-test-modules.html" class="js-rs-test">Modules in JavaScript</a> (78 из 100)</li> <li><a href="rs-test/rs-test-bundlers.html" class="js-rs-test">Introduction to Bundlers</a> (86 из 100)</li> <hr> <li><a href="rs-test/rs-test-chrome.html" class="js-rs-test">Chrome DevTools</a> (94 из 100)</li> <li><a href="rs-test/rs-test-client.html" class="js-rs-test">Client - Server interaction</a> (94 из 100)</li> <hr> <li><a href="rs-test/rs-test-classes.html" class="js-rs-test">Classes & Prototypes</a> (96 из 100)</li> <li><a href="rs-test/rs-test-oop.html" class="js-rs-test">OOP Test</a> (95 из 100)</li> <li><a href="rs-test/rs-test-final.html" class="js-rs-test">Final test stage#1</a> (91 из 100)</li> <hr> <li><a href="rs-test/rs-test-tsbasics.html" class="js-rs-test">[St2] TypeScript Basics</a> (88 из 100)</li> <li><a href="rs-test/rs-test-tsadvanced.html" class="js-rs-test">[St2] TypeScript Advanced</a> (85 из 100)</li> <hr> <li><a href="rs-test/rs-test-codereview.html" class="js-rs-test">[St2] Code-Review</a> (82 из 100)</li> <li><a href="rs-test/rs-test-spa.html" class="js-rs-test">[St2] Single Page Application</a> (88 из 100)</li> <hr> <li><a href="rs-test/rs-test-webstorage.html" class="js-rs-test">[St2] Web Storage</a> (88 из 100)</li> </ol> </article> <article class="article"> <div class="anchor" id="dsr-exam"></div> <h2>DSR NetSchool 2023/24 Exam</h2> <p><a href="dsr/dsr-exam.html" class="dsr-exam">DSR NetSchool 2023/24 Exam</a> (55 из 100)</p> </article> <article class="article"> <div class="anchor" id="quiz"></div> <h2>quiz</h2> <p><a href="https://voverg.github.io/js-apps/frontend-quiz/index.html">Frontend quiz</a> Здесь вы можете пройти тесты по HTML, CSS и JavaScript</p> <p><a href="https://frontend-quiz.ru/">frontend-quiz.ru</a> Здесь вы можете пройти тесты по HTML, CSS и JavaScript</p> <p><a href="https://ku13shov.github.io/quiz/">Веб-приложение Frontend Quiz</a> Это приложение предоставляет фронтенд разработчикам возможность проверить свои знания в области HTML, CSS, JavaScript и React</p> <p><a href="https://www.jschallenger.com/overview">jschallenger.com</a></p> </article> <article class="article"> <div class="anchor" id="rain"></div> <h2>Дождь на canvas</h2> <canvas id="playground-rain" class="playground" height="600"></canvas> </article> ';var bt=['<article class="article"> <div id="link-to-dsr2023net" class="btn-back">назад</div> <h1>2023-09-26 DSR .NET School 2023/24 online presentation</h1> </article> <article class="article"> <p>Еще раз всем привет. Я думаю что основная масса уже к нам присоединилась. Большое спасибо что пришли. Предлагаю начать с небольшого ролика компании. Нашей компании недавно исполнилось 25 лет. Буквально на днях. Давайте посмотрим чего же мы достигли за эти четверть века. Да, и просьба, если вдруг у вас микрофон включен, пожалуйста выключите его.</p> </article> <article class="article"> <h3>That\'s Doing Software Right!</h3> <p>September 17, 1998: Opening of the headquarters in Denver, Colorado</p> <p>April 1, 2004: Establishment of the office in Voronezh</p> <p>2017: DSR boasts a team of 100 engineers</p> <p>May 23, 2017: Establishment of DSR Europe office in Portugal</p> <p>2020: Establishment of the DSR Asia office in Japan</p> <p>2021: Our team now consists of 200 engineers</p> <p>December 6, 2021: Establishment of the DSR Tashkent office</p> <p>25 Years of Technological Evolution and Innovation</p> <h3>DSR Training Center</h3> <p>7 free courses in total</p> <p>fully online</p> <p>35+ graduates invited to job interviews at DSR in 2023</p> <p>8 areas of trainee program</p> <p>Applicants from 15+ countries</p> <p>12 years of sharing expertise</p> <p>30 teachers, managers, and mentors</p> <p>1500+ graduates</p> <p>Thankful for our taltnted, relentless, skilled team</p> <p>Thank you to everyone who supported us</p> <p>We look forward to continuing to build amazing teams, help our customers get their products to market, and advance innovation</p> <p>That\'s Doing Software Right!</p> </article> <article class="article"> <p>Нам нужна вторая серия. Здравствуйте. Техническая неполадка. Антон, ты здесь?</p> <p>А, все, да. Я не включил просто микрофон, извините. Собственно говоря вы посмотрели короткий ролик о нашей компании. И думаю многие из вас читали на сайте или в соцсетях про нас, чем мы занимаемся и что мы делаем. Сейчас кратко о том, что сегодня у нас будет. Вы познакомитесь с нашими преподавателями курса дотнет скул и его автором Андреем Кононовым. После короткой презентации курса, не слишком длинной, скажем так, у нас будет QA сессия. Вы можете задать вопросы как голосом так и в чате. А мы будем на них отвечать. И сегодня к нам присоединится Эльвира Рахматуллаева, наша IT рекрутер из Ташкента. Вы пока слушайте презентацию. Если что-то непонятно или возникают вопросы, вы можете спокойно их задавать в чате. Мы на них на все ответим. Теперь я передаю слово Андрею.</p> </article> <article class="article"> <p>Спасибо. Всем добрый вечер. Рад вас всех видеть. Пока в виде текстов и имен. Надеюсь лично увидемся как-нибудь. Хотя бы в чате. Я сейчас запущу презентацию. Немножко расскажу про наш курс. Надо разобраться как это сделать в зуме.</p> </article> <article class="article"> <h3>.NET school program and goals</h3> <p>Отлично. Видно презентацию? В чатике плюсики поставьте, пожалуйста, если все хорошо. Спасибо. Итак. Позвольте мне представить вам наш новый курс. Ну как новый. Он каждый год новый. На самом деле вы будете уже третьим потоком, который по нему работает. Наверное, это даже хорошо, потомучто за время нашей работы много что было переосмыслено. Курс каждый год улучшается. Мы убираем лишние вещи. Добавляем более востребованные и нужные задачи, которые как раз требуются для начинающих специалистов.</p> </article> <article class="article"> <h3>Course program</h3> <p>12 lectures <br>&nbsp;&nbsp;- Start in October 2023 <br>6 workshops <br>&nbsp;&nbsp;- Start in November 2023 <br>1 course project <br>&nbsp;&nbsp;- Start in February 2024 <br>&nbsp;&nbsp;- Finish in April 2024 <br>Features <br>&nbsp;&nbsp;- Minimal theory <br>&nbsp;&nbsp;- Maximum practice <br>&nbsp;&nbsp;- Help from teachers </p> </article> <article class="article"> <p>Что можно сказать про сам курс. Что он из себя будет представлять. В октябре, а это на следующей неделе в понедельник мы начнем читать лекции. У нас будет 12 лекций. Мы немножко сократили их количество. Убрали оттуда воду и добавили более важную информацию. И будет на один воркшоп больше. Это практические занятия. Воркшоп это практика. Вместо 5 занятий будет 6. Дополнительно к этому будет добавлен один важный курс. Я считаю что он будет интересен вам. Это по созданию unit и компонентных тестов. Крайне рекомендую его посетить. Это полезно.</p> <p>У нас будет один курсовой проект. Он стартует в феврале, после того как закончится основная теоретическая и практическая часть. И на курсовой проект будет выделено три месяца. В конце апреля мы завершаем прием курсовых работ. И, соответственно, награждаем специалистов, которые это сделали хорошо.</p> <p>Почему такую структуру мы придумали. Была мысль изначально сосредоточиться только на практике. Но мы от нее отказались. Практические занятия без теории, без понимания того зачем это делается превращаются в заучивания определенных правил. У студентов ограничивается кругозор. Он начинает делать только так как ему сказали. Мы от этого хотели отойти поэтому добавили лекции. На лекции будут объяснены важные вещи которые потом обязательно будут нужны в практике. Наши лекции это теоретическая часть, в которой достаточно подробно будет объяснено почему именно так надо делать. Лекции будут интересны не только тем кто хочет на нете дальше свою карьеру строить, но они будут полезны и тем кто будет просто бекэнд заниматься. Не важно на каком языке java или node.js. И будут архитектурные навыки. На практике будем использовать все что расскажут на лекции. Крайне не рекомендую их пропускать. Никакой лишней информации там не будет. Если вы хотите хорошо курс пройти и получить знания.</p> <p>Цель курса не в том чтобы вы прошли курс и получили медальки. Цель курса в том чтобы вы курс прошли и смогли работать как младший специалист в любой IT компании. Контролировать посещаемость, контролировать ваши знания мы не будем. Это чисто на вашей совести. На вашей ответственности. Кому хочется получить информацию - он ее будет получать, он будет стараться и работать. Если кому-то надо пересидеть лекции и получить какую-то бумажку - пересидите. Есть ли какой-то в этом смысл - решайте сами. Поэтому здесь полная свобода. Это основной принцип, основное требование к вам со стороны преподавателя, со стороны DSR</p> <p>Когда вы будете работать программистом уже на конкретных рабочих местах. Вам не будет никто толком объяснять что надо делать. Ваша карьера будет целиком в ваших руках. И от того как вы себя покажете, как вы будете работать дальше, будете заинтересованы в своей работе, будете смотреть не только то что вам дали, а немножко шире - будет зависеть ваша карьера и успешность, деньги. Привыкайте к самостоятельности. Программист это вообще человек самостоятельный. Он будет постоянно учиться всю жизнь. Никто его за ручку до конца вести не будет. В этом есть сложность, но и большая свобода, большой плюс. Лично мне такой подход нравится.</p> </article> <article class="article"> <p>Вернемся к нашим лекциям. Лекции начнутся со следующего понедельника. Мы планируем в 18.30 делать лекции. В телеграм канале, на который рекомендую всем подписаться, будут выкладываться темы лекций, будут выкладываться оповещения какие необходимо сделать. Чтобы вы не пропустили ни в коем случае. Лекции мы будем записывать на youtube. И выкладывать на них ссылки. Запись будет сделана с небольшим лагом по времени. Время надо чтобы обработать, чтобы залить на сам youtube и для того чтобы опубликовать эту информацию. Можете пересматривать эти лекции самостоятельно и готовиться по ним.</p> <p>Та же ситуация будет с практическими занятиями. Мы их начнем в 20х числах ноября после того как пройдут базовые основные лекции, которые нам нужны будут. До конца года мы все практические занятия закончим. Где-то 28 декабря у нас будет последняя практика. Дальше все идут на каникулы. Потом студенты идут на сессию. После сессии мы вернемся к окончанию нашего курса и старту курсового проекта.</p> <p>Как я уже говорил, курсовой проект у нас будет один. На курсовой проект попадут не все. Для того, чтобы на него попасть, надо будет хорошо пройти наши занятия. Все что я сказал что мы не будем вас контролировать - это не означает что мы не будем контролировать и тестировать ваши результаты. На автомате просто проползти на получение курсового проекта не получится. Нужно постараться. Что во время курсов получится. Во первых, мы постараемся дать минимальную теорию, это та теория которая будет в доступном виде и она будет та которая нужна для практики. Максимум практики. На примере предыдущих двух лет. </p><p>Мы будем с нуля создавать полностью приложение. От момента что вы хотите сделать, до момента когда вы это сможете пощупать руками. И полноценная помощь учителей как в рамках лекций и практических занятий, так и в рамках курсового проекта.\tЗа каждым кто будет делать курсовой проект будет закреплен наш специалист, ведущий специалист уровня синьер и выше. Которые будут помогать вам, отвечать на вопросы и контролировать как вы курсовую работу выполняете</p> </article> <article class="article"> <h3>Course goals</h3> <p>- Give general knowledge on how to develop .Net Famework web applications <br>- Step by step through the process of creating a real application <br>- Get practical skills in self-development of a web application </p> </article> <article class="article"> <p>Какие наши цели на этом курсе. Считайте что вы делаете маленький учебный проект. Мы вам даем информацию. Мы дадим знания по созданию готового приложения на базе .net Framework. Мы будем писать web API приложение. Полноценное, с докерами, со всеми подряд. Постараемся максимально компонентов для приложения добавить для того чтобы вы могли посмотреть как с ними работать. Будем небольшой микросервис писать. На фронт у нас будет Blazor. То есть целиком мы будем рассматривать стек .net framework и все мы будем рассматривать в рамках него. В итоге вы получите реально работающее полноценное приложение. Которое можете использовать как бойлер плей у себя. Можете в качестве резюме приложить. Можете использовать как основу для написания в ВУЗах своих практических работ. Мы дадим практические скили, чтобы вы самостоятельно не боялись делать качественные приложения. Я больше чем уверен, что большая часть из вас уже что-то писала. С этим проблем ни у кого нет. Теперь вопрос как это сделать более профессионально.</p> </article> <article class="article"> <h3>Requirements</h3> <p>- Basic knowledge of C# <br>- Basic programming skills in Visual Studio <br>- Interest in web application development </p> </article> <article class="article"> <p>Что нам потребуется. Писать мы будем на языке c# под .net. Поэтому базовые знания по C# требуются. Но если нет и у вас есть знания по яве, наверно это не критично. Если знаний языков этих нет, придется постараться посильнее для того, чтобы понять. Язык C# не сложный поэтому проблем с этим не возникнет. Базовые скилы программирования в Visual Studio. Самое главное это интерес к разработке web application. Если вам это неинтересно, то курс будет вам скучен</p> </article> <article class="article"> <h3>Final testing</h3> <p>This course plans to give about 20 course projects. <br>In January <br>&nbsp;&nbsp;- Test execution <br>&nbsp;&nbsp;- Mini-interviews for the best performers </p> </article> <article class="article"> <p>Что такое финальное тестирование. Когда мы закончим лекции и практические занятия будет небольшой перерыв. Все пойдут на новогодние праздники. У студентов будет сессия. После сессии будет финальное тестирование. Зачем нам этот месяц нужен. Для того чтобы все успели подготовиться, информация уложилась, пересмотреть лекции, освежить знания по всему курсу. В конце января, в числах 25 - 29, будет проведено финальное тестирование по результатам работы. Оно будет проводиться автоматизированным образом. И 20 лучших результатов получат курсовые проекты. Курсовой проект получат не все. Поэтому если хотите делать курсовой проект - старайтесь делать тест лучше. Работайте лучше на занятиях, повышайте свой скил.</p> <p>Те студенты которые пройдут финальное тестирование получат сертификат об окончании курсов. Если после тестирования будут похожие результаты, спорные, то проведем мини интервью, пообщаемся и решим кого возьмем. Курсовой проект будут менторить специалисты высокого уровня. Их не так много и отвлекать их на обучение было достаточно сложно согласовать. Это достаточно ценно. Вас будут менторить на курсовом проекте одни из ключевых сотрудников компании. Достаточно высокого класса и уровня.</p> </article> <article class="article"> <h3>Course project</h3> <p>Goals: <br>- In practice, consolidate your knowledge <br>- Complete the project by yourself from design to implementation <br>- Real project for portfolio <br>Project topics: <br>- Own <br>- One of the suggested <br>Reporting: <br>- Personal repository on GitHub <br>- Exam a working application </p> </article> <article class="article"> <p>Что такое курсовой проект. Те которые пройдут на курсовой проект. Курсовой проект это не обязательно. Сделав самостоятельно практическую работу, вы уже будете чего-то знать. Курсовой проект это для того чтобы углубить и расширить свои знания.</p> <p>Цели курсового проекта. Мы практически соберем все знания. Все что мы попробуем, вы самостоятельно попробуете сделать руками. Пока вы все это делаете руками, у вас это лучше укладывается в мозгу. Руки начинают помнить и результат более хорош. Во-вторых, это самостоятельная работа. Полностью самостоятельная работа. Вам на старте дается тема. Можете сами свою предложить. Если она удовлетворит объемы курсового проекта, то можете делать свою. Согласовывайте ее с вашим ментором, который вам будет назначен и вперед. Раз в неделю будете сообщать о том что у вас есть вопросы или нет вопросов, как ведется работа. А ментор будет оценивать какой у вас прогресс. Можете отвечать на его вопросы, как вы справляетесь.</p> <p>И по факту будем смотреть что получилось. Может ли человек работать самостоятельно, принимает ли он обратную связь, умеет ли он думать, насколько он широко смотрит. Потому что были курсовые работы, которые серьезно превышали объем практической задачи которую ему давали. Ребята самостоятельно расширили свои знания, применили их. И курсовой проект получился гораздо лучше чем ожидался. Все в ваших руках. Вы точно так же можете сделать.</p> <p>Иходный код мы будем хранить в гитхабе, гитлабе, битбакете, где угодно. Главное чтобы он был доступен ментору на проверку. И самое главное. Если в финале вы сделаете прекрасный продукт, который у ментора не запустится, то скорее всего это будет фейл. Мало того что вы должны написать хороший качественный код, вы должны сделать его работоспособным. Поэтому на вас будет заложена задача по delivery вашего решения заказчику. Считайте что ментор - ваш заказчик. А его интересует не то как вы красиво разрулили dependency injection. Его интересует чтобы приложение запустилось и работало. Вот это вы обязаны будете самостоятельно проверить.</p> <p>Например, на компьютере разработчика все прекрасно работает. А в гитхаб не залит один важный файл. Проект не собирается. Считайте что после этого за проект будет минус. Те кто будет делать курсовой проект, мы к этому еще вернемся. Это ваш стартапчик, который вы должны сделать от начала до конца за 3 месяца.</p> </article> <article class="article"> <h3>Achievements</h3> <br>General part of the course + Test <br>- DSR Corporation Silver Certificate <br>General part of the course + Test + Course project <br>- DSR Corporation Gold Certificate </article> <article class="article"> <p>Что мы в итоге даем. Те студенты, которые прослушают наш курс, пройдут практические занятия и сдадут тест как минимум на 50%. Больше половины надо набрать правильных ответов. Получат серебряный сертификат. Электронный сертификат, в котором будет ваша фамилия, который вы можете приложить к себе в резюме. Это сертификат слушателя. Те кто еще сдадут курсовой проект на хорошую оценку - получат золотой сертификат. Он подтверждает не только что вы прошли курсы, но и что-то руками умеете делать. Это раз. Те кто курсовой проект получат, но до конца не сдадут - получать серебряный сертификат. Так что ничего не теряют.</p> <p>Те студенты, которые себя очень хорошо покажут в рамках курсового проекта и в рамках курса - их резюме будут у нас собраны, вы попадете к нам в резерв. Как только у нас появляется новый проект, мы вас будем разыскивать. Хорошая сдача курсового проекта серьезно повышает шанс того чтобы попасть в нашу компанию и работать вместе с нами, развиваться дальше.</p> </article> <article class="article"> <h3>What it will be like</h3> <p>Lectures (online) <br>Workshops (online live-coding) <br>Communication in a private telegram group <br>GitHub repository with lectures samples <br>Consultations with teachers </p> </article> <article class="article"> <p>Как будут проходить наши лекции. Лекции будут онлайн по понедельникам в 18.30. Единственный день это 6 ноября, это праздник, лекция будет перенесена на вторник или четверг. Практика тоже будет онлайн. Она будет проходить в режиме live-coding. Кто может - может повторять непосредственно сразу за мной. Писать, проверять, запускать. Записи лайв кодинга будут выложены, чтобы вы могли потом смотреть , повторять с паузами. Цель воркшопов это не просто посмотреть. Это делать надо вместе с ноутбуком или компьютером. Это задача каким образом собрать ваш проект, чтобы вы потом могли его запускать и он у вас заработал. Поверьте, если вы 20 раз посмотрите лекцию и ни разу это не запустите, то когда вам скажут запустите, вы ничего не сделаете. У вас просто ничего не получится. А вот если вы хотя бы один раз это соберете руками и наступите на грабли, на которые постоянно все наступают. За два года на одни и те же грабли наступают порядка 20% студентов. Не потому что они плохо слушают. А потому что эти грабли лежат так, что мимо них не пройдешь. И если их даже показать, то они быстро забываются. Наверняка тоже будет и у вас. Может быть нет. Может я ошибаюсь. В любом случае я советую практику проходить как практику а не просто смотреть. С запуском, с проверкой, с отладкой и т.д.</p> <p>У нас будет телеграм канал, в котором будут публиковаться новости и названия лекций, ссылки на записи. Следите, подпишитесь обязательно. Чтобы ничего не пропустить. Будет создан репозиторий для некоторых примеров. Примеры практических занятий будут выложены на гитхаб. Можете себе их скачать, с ними поиграться. Ну и , конечно, консультации. Вы можете в любой момент в телеграме написать вопрос и кто-нибудь из нас ответит. Очень пощрается если будете задвать вопросы и будете помогать друг другу. Программирование в мелких объемах может проводиться одним человеком. А большие системы чаще всего пишутся компанией. И там необходимо помогать друг другу. Делиться информацией, делиться знанием. Если кто-то вопрос зада, кто может помогите ответить на вопрос. Кто не знает, но решил ответить на вопрос - заодно приобретете знания.</p> </article> <article class="article"> <h3>Teachers. Who they are</h3> <h3>About teachers</h3> <p>Andrey Kononov</p> <p>Lead software engineer</p> <p>andrey.kononov@dsr-corporation.com</p> <p>Ekaterina Tikhomirova</p> <p>Software engineer</p> <p>ekaterina.tikhomirova@dsr-corporation.com</p> <p>Dmitriy Donskikh</p> <p>Software engineer</p> <p>dmitriy.donskikh@dsr-corporation.com</p> </article> <article class="article"> <p>Немножко о учителях. Кто будет учить. В этом году на курсе будут 3 преподавателя. Часть лекций буду вести я, часть лекций - Екатерина Тихомирова, часть лекций - Дмитрий Донских. Они сейчас о себе немножко расскажут самостоятельно. Специалисты опытные. Много информации знают. У них огромный практический опыт. Так что не стесняйтесь, задавайте вопросы. Я думаю вам будет полезно, а нам будет интересно. Если студент задает вопросы учителям, это всегда душу греет. Чувствуется какая-то заинтересованность и в итоге сможем сделать что-то больше. Я все рассказал. Давайте передам слово сейчас Екатерине</p> </article> <article class="article"> <p>Всем привет. Меня зовут Екатерина. Я инженер компании DSR. В DSR я уже работаю больше двух лет. И работаю над разными проектами. Начиная с довольно старых технологий дотнета и заканчивая более новыми. Так же работаю с десктопом, с web application. Очень много уже успела прощупать и сделать. На курсе я буду вам читать лекции по языку си шарп. И конечно же частично будут затронуты темы самой платформы дотнет, потомучто без этого никак. Надеюсь что вам все понравится. И мне все понравится. Спасибо.</p> </article> <article class="article"> <p>Спасибо, Кать. Дима. Дмитрий Донских.</p> </article> <article class="article"> <p>Всем привет. Меня зовут Дмитрий. Я в компании уже кажется четвертый год. Я уже не помню. Пришел после практики. После студенческой практики, которая будет наверно летом.</p> <p>Дим, я тебя немножко поправлю. Студенческая практика будет весной. Объявим мы о ней в конце зимы. Она называется производственная практика. В основном для студентов.</p> <p>Спасибо, Антон. В компании занимаюсь, в основном, бекэнд разработкой. На курсе в школе буду рассказывать большей частью про Blazor, про особенности, про нюансы, про подводные камни, коих там много. И возможно что-то еще. Надеюсь это будет полезно.</p> </article> <article class="article"> <p>Спасибо, Дима. Наверно мы перейдем сейчас к вопросам. У нас есть несколько вопросов в чате.</p> <p>Добрый вечер. Вопрос. Насколько могут быть эфективны программы на подобие codewars и leetcode в практике написания кода</p> <p>Однозначно они могут быть полезны. Любые знания, которые вы можете получить всегда полезны. Самый большой инструмент, который поможет вам в написании кода это ваши руки и компьютер. Ну и может быть гугл. Как говорится, кто такой хороший программист - это чемпион по гуглению. Так что считайте что leetcode - один из источников информации. Чаще всего в практических задачах не сильно требуются элегантные решения по коду. Это полезно, это здорово, это надо знать. Но в программировании самое важное это сделать рабочий продукт. А не то что вы его сделали шикарно. 90% сделали шикарно, 10% не доделали и в итоге он никому не нужен вообще. Это все будет иметь смысль не только когда вы будете это смотреть. Но и когда вы сами будете пробовать это руками запустить. Ваша память, как у программистов, не в глазах, а на кончиках ваших пальцев.</p> </article> <article class="article"> <p>Спасибо, Андрей. Кстати, отмечу, что к нам присоединилась Эльвира Рахматуллаева. Наш IT рекрутер DSR Ташкент. Поэтому если вас интересуют какие-то вопросы о найме и всем прочем, можете задавать в чате. Следующий вопрос. Здравствуйте, а сколько всего человек на курсе? Ну, пока у нас 100 с небольшим человек в канале, в нашем в телеграм. Будет больше.</p> <p>Как я уже сказал, мы ни каким образом не контроллируем, человек может смотреть, может не смотреть, учиться, не учиться. Все на его усмотрение</p> <p>Следующий вопрос. В каком формате будут проходить практические занятия?</p> <p>Онлайн. Лайв кодинг. То есть я буду с нуля создавать проект. Буду показывать как все собирать. Будем по ходу дела это запускать, билдить, смотреть ошибки, какие то особенности если есть. Какие-то ошибки, которые все делают. Если у вас есть возможность все это параллельно повторять. Я не буду стараться делать быстро. Будет хорошо если вы будете это дело повторять. Если онлайн повторять нет возможности, дождитесь выхода записи и повторяйте с паузой. Желательно чтобы вы тоже самое с нуля создали у себя на машине. И наступили на все нужные грабли. Куда без этого</p> <p>Окей. Еще один вопрос. Все практические работы индивидуальны? Или же есть также и командные проекты?</p> <p>Командный проект мы обычно не делаем. Здесь вопрос что вы хотите. Если курс как что-то научиться. Тогда вам стоит все самостоятельно сделать. Практическая работа, именно практика, будет у всех одинаковая. То есть мы будем делать какую-то одну маленькую тему и будем ее от и до прогонять. Курсовые проекты у всех уникальны. У каждого своя работа. Если вам не нужны знания, а нужна корочка, то можете списать. Но скорее всего менторы это дело увидят и результат будет не очень хороший. Если вы хотите действительно чему-то научиться, то лучше все сделать самостоятельно. Тем более, я больше чем уверен, что всем это под силу. Ничего там неподъемного не будет.</p> <p>Практические командные работы на самом деле, я не уверен, что в рамках обучения как программиста, командная работа будет чем-то интересным. Я готов ее рассмотреть при условии, что команда мне сделает кратно увеличенный размер проекта. Если курсовой проект в среднем маленький, какое-то приложение, например, небольшое. Для того чтобы команда могла за это взяться, придется вам написать несколько сервисов, сделать вылизанный, хороший фронт, сделать красивый бекэнд без всяких ошибок и написать кучу нормальных тестов. Если готовы идти на такой объем - не вопрос. Ну и заодно может быть прямо найдем и тим лида. Так что, предлагайте. Инициатива интересна. Почему нет. Но имейте ввиду, инициатива наказуема. Будет соответственно кратно увеличена сложность.</p> <p>Еще один вопрос. Если не будет хватать времени на курс, как с него уйти? Куда уйти? Ну, совсем уйти</p> <p>Вы можете посмотреть пару лекций. Если не понравится, то никто держать не будет. Если вам не будет хватать времени на лекцию. Можете пересмотреть запись когда вам будет удобно.</p> <p>Вы упомянули про практику. Будет ли по дотнет практика производственная?</p> <p>Практика производственная по дотнет это другой проект DSR. В рамках школы будет только курсовой проект. Он имеет свои цели, своих выпускников. У лучших выпускников резюме к нам в банк резюме положим. И оно будет рассмотрено в приоритетном порядке по мере появления вакансий, по мере появления интересных проектов.</p> <p>Спасибо за прекрасную лекцию. Я немного опоздал. Можете ли вы отправить слайды ppt в канал телеграм? Ну я скажу что будет видео. Слайды мы выкладывать не будем.</p> <p>Да, ppt мы выкладывать не будем PowerPoint. Кому интересно пусть по видео еще раз посмотрим. Если кому-то очень сильно нужны эти слайды. Пусть их перепишет. Написание шпаргалки иногда здорова помогает в изучении продукта. Можете считать это обучающим фактором. При наличии записи и возможности ставить ее на паузу. Сами поверпоинты смысла не имеют. Эти презентации это повод для того чтобы на экране что-то было пока я рассказываю.</p> <p>Какой фактор является ключевым при допуске на курсовую работу?</p> <p>Как я уже говорил у нас наго примерно на курс порядка 20 курсовых проекта мы берем. Потому что у нас очень сложно выделить ключевых специалистов для того чтобы они менторили. И так они перегружены. У каждого ментора несколько студентов получается. И мы ограничены здесь в возможностях. Надо попасть в 20ку лучших. По поводу тестов. Финальное тестирование будет автоматизировано. Порядка 100 вопросов. Надо будет ответить лучше всех. Будут и каверзные вопросы. Будут достаточно сложные вопросы. Все что на лекциях вы будете слушать - все там будет. Ничего сверхестественного не будет. Единственно, будет ограничено время прохождения теста. Есть еще вариант. Вы можете взять курсовую работу и делать ее самостоятельно без ментора. Я не знаю как проверить ее. Чисто для себя. Вы можете селф менеджментом заняться. Взять какую-то темку и попробовать сделать курсовую. Даже если не попадете к нам на менторинг, можете делать самостоятельно.</p> <p>Будем ли мы сдавать задания после лайв кодинга? Будет ли домашняя работа?</p> <p>Нет. Никаких домашних работ. Все на ваше усмотрение. То есть хотите чему-то научиться - вам домашнюю работу сдавать не надо. Вы ее сделаете - значит сделаете. Если не хотите - вас заставлять никто не будет.</p> <p>Если студент дойдет до курсового проекта, возможно ли предложить свою идею проекта? И даже если она не подойдет, получить фидбек имеет ли она ценность или нет?</p> <p>Конечно. У нас много студентов брали себе свои темы. Некоторые брали темы, которые они делают в качестве пет проекта. Кто-то даже пытался стартап у нас тут сделать. Почему нет? Своя тема это всегда интересно. Она ваша. Вы в ней более заинтересованы. Больше ее проработаете. И даже будет более интересным курсовым проектом. Те кто хочет может полгода пока думать над темой. У нас есть большое количество своих тем. У кого фантазии не хватит - выдадим стандартную.</p> <p>Да, время на подумать есть. Стек для курсового проекта будет ограничен или же есть свобода?</p> <p>Мы делаем нет скул, поэтому web api точно будет на нете. По поводу фронта можно поговорить. Я бы предпочел его делатьь тоже на нет стеке. Но уже если кому-то сильно хочется на каком-нибудь SPA фреймфорке - это оговаривается. Единственное, надо посмотреть кто сможет вас менторить. Но тот проект, который будет нестандартный по курсу, к нему будет повышенное внимание. Это с одной стороны хорошо, можно себя показать. С другой стороны плохо. Если вы сделаете плохо - это обязательно кто-то заметит. А менторы у нас сильные. Если кто-то один не заметит - мы соберемся и пошушукаемся. Считайте что курсовой проект это стартапчик, который вы пытаетесь DSR продать.</p> <p>Екатерина сказала, что занимается с desktop. Будут ли лекции, будут ли практические занятия по winforms и WPF?</p> <p>Сейчас у нас web api + Blazor. До сих пор никто не просил. Но можно подумать. Время еще есть. Может мы кусочек вставим. Но пока не планируется. Насколько это всем интересно? WinForms наверно уже вообще не интересно. Скорее всего уже умирающая технология. WPF может быть. Но он достаточно большой сам по себе. И вложить WPF в одну-две лекции достаточно сложно. Это будет по вершкам. Но если кому-то интересно, мы готовы рассмотреть WPF в качестве фронтенда для курсового проекта. Это нормально. Но в этом случае WPF на самостоятельную работу. В данном курсе, который сейчас есть, WPF мы не рассматриваем. WinForms, наверно, не будем рассматривать. Поверьте, вам web api + Blazor хватит чем позаниматься.</p> <p>В каком формате будет тест? Теория плюс кодинг или просто кодинг?</p>  <p>Там будут вопросы. Вопросы некоторые будут каверзные. В которых нужно просто указать правильный ответ. Плюс будут вопросы где надо будет что-то написать.</p> <p>Еще один вопрос. Пока последний в чате. Кстати можете задавать вопросы голосом, если хотите. Итак, вопрос. Важно ли иметь базовые знания по SQL? Или же в самом курсе есть часть, касающаяся этой темы? Также имеет ли смысл изучение MA UI и WPF и WP или можно ограничиться ASP?</p> <p>SQL у нас чуть-чуть будет. У нас будет одна лекция про базы данных целиком. Но сейчас тенденция такая, что для Web API для простого проекта SQL не нужен. Но может быть несколько вопросов по SQL будут в тестировании. Все вопросы которые будут в тесте, будут оговорены в рамках лекций и практики. Так что смотрите и не пропускайте. Базу знать не надо. Все что надо мы вам расскажем. Чуть подробней почитайте, разберетесь. SQL сам по себе не такой сложный язык. Надо ли изучать MA и WPF? В рамках данного проекта у нас будет web api и Blazor. MA и WPF это неплохо, если вы этим занимаетесь, но для курса знать их не надо. Мы про них немножко затронем, расскажем что они есть. На курсовом проекте если кто захочет может их использовать в клиентском приложении вместе с web api. Web API это будет обязательная часть, а фронт на ваше усмотрение. Можете сделать приложение, которое будет работать на мобилке. Хоть Flutter, но лучше использовать нет технологии, потому что у нас нет курс.</p> <p>Спасибо, Андрей. Ну что же. Пока вопросов больше нет. Или есть. Если успешно пройти курс, есть ли шанс попасть на стажировку?</p> <p>Стажировки как таковой у нас нет. Поэтому если вы хорошо пройдете курс, хорошо выполните курсовой проект, то вы пришлете резюме, менторы ваши пришлют по вам фидбек. Наш HR все это положит в банк. И когда появится надобность в специалистах вашего профиля и вашего уровня, мы с вами свяжемся в первую очередь. Но есть производственная пркатика. Там есть вступительный тест.</p> <p>Есть ли расписание курса и темы?</p> <p>Темы есть, расписание есть. Оно может немножко поменяться. Предварительно я в телеграме выложу, когда оно будет зафиксировано. И по мере приближения лекций, мы будем делать анонс о чем мы будем разговаривать на следующем занятии.</p> <p>И насчет стажировки, наверно, стоит уточнить что вы понимаете под стажировкой. Производственная практика это не стажировка. Возможно здесь мне поможет Эльвира Рахматуллаева. Если вы, Раул, из Узбекистана, может Эльвира нам поможет определиться есть ли в Ташкенте такая штука как стажировка.</p> <p>Добрай вечер. В Ташкенте нет стажировки. Но есть возможность пройти техническое интервью даже при наличии малого опыта. Если вас порекомендуют после курсов на техническое интервью.</p> <p>Английский язык важен? Какой уровень нужен?</p> <p>Курс будет на русском. Английския язык будет важен для вашей работы. Для программиста он крайне желателен. Чем выше тем лучше. Для работы как программиста достаточно нормально читать. Для того чтобы работать программистом английский пригодится. Как минимум, для того чтобы получать информацию. На английском гораздо больше справочной информации чем на русском</p> <p>Ссылки на доп. материалы будут или нет?</p> <p>Какие-то мы будем выкладывать. Но вы можете выкладывать ссылки самостоятельно, делиться. Если вопросы будут - ответим. Если ссылка на материал - прикрепим.</p> <p>На какое количество уделяемого времени, в целом рассчитан курс? Ясное дело, что все индивидуально. Но примерно, есть какая-то статистика уже? Сколько люди уделяли чтобы хорошо пройти.</p> <p>Тут по-разному. Есть студенты которые хорошо шли или у них хороший базис был. Они посмотрели лекции, сделали практиуку и нормально выполнили курсовой, были такие. Есть люди которые прошли лекции, я прям сейчас помню, начали практику и лекций хватило чтобы попасть на джуна, устроиться на работу. После этого курс был просто брошен. Программа курса будет выложена в телеграм канале - это темы и даты.</p> <p>Есть статистика того сколько в количестве за курс трудоустраивалось к вам?</p> <p>Статистика такая конечно же есть. Но мы ее не раскрываем. Потому что это наша внутренняя информация. Мы вам ответить не можем, но шанс всегда есть. Могу назвать статистику за 21 год. Каждый пятый выпускник наших курсов попал в команду.</p> <p>Будет ли подготовка к собеседованию?</p> <p>Наверно, с вашей стороны должна быть какая-то подготовка к собеседованию. Мы к собеседованию не готовим.</p> <p>В среднем, какого масштаба проекты создавались в прошедших потоках?</p> <p>Насколько я знаю, это не очень большие проекты. Сильно зависит от того кто что делал. Кто-то пытался свою социальную сеть сделать. В итоге переоценил свои силы и сделал какой-то кусочек ее. Кто-то сделал сервис для учета проката самокатов. Они не сложные. На самом деле цель курсового проекта не получить какое-то большое решение, а то чтобы вы его сделали самостоятельно. Сделали хорошо. Есть люди которые делали свой проект, например, сайт для заказа автозапчастей с техникой подбора товара. Можете сделать что-нибудь свое. Здесь надо ориентироваться на свои силы, на свои амбиции. Для ментора важно посмотреть на сколько хорошо вы усвоили лекции, на сколько хорошо разобрались с этим. Как вы это сделали практически. На сколько аккуратно. Это тоже оценивается. Если вы сдадите прекрасные проект, который просто скачав с гитхаба нельзя собрать и запустить - это будет не очень хорошо. Команда получит проект - полноценную систему.</p> <p>Какие минимальные требования к машинам? Рабочим ноутбукам. Версии виндовс, программы.</p> <p>Studio и Docker чувствительны к памяти. Если у вас 8гигабайт, то будет тяжеловато. Если у вас компьютер i5 16gb оперативной памяти, я думаю вы не будете чувствовать никаких проблем с курсом. Если выше то вообще все хорошо. Если 8gb то придется немножко помучаться. Будет подтормаживать. i3 тоже хорошо. Можно на линуксе. Но в этом случае некоторые вещи придется самостоятельно разбираться. Потомучто я буду показывать примеры на windows. Если кто-то пишет на линуксе, то там работа с докером это чисто командная строка. Вам придется ее дополнительно изучить. Можно на маке.</p> <p>В какой IDE нужно будет работать?</p> <p>В какой удобно. Мы будем показывать в Visual Studio Community Edition. Люди работают в райдере. Можно Visual Studio Code кто хочет. Это тоже возможно.</p> <p>Подразумеваетя наличие опыта именно веб разработки или в ходе курса будут рассмотрены азы?</p> <p>С нуля будем смотреть. Можете прямо с нуля посомтреть что такое web. Будет рассказ про архитектуру, про протоколы, про все подряд. Все что надо теоретическое для того чтобы понять что такое веб разработка. Потоп практические занятия с нуля по созданию web api + Blazor</p> <p>В курсовом проекте в первую очередь будут обращать внимание на бекенд или фронтенд тоже важен?</p> <p>Комплексно. Если вы хотите взять курсовую работу, сделали бекенд, но абсолютно не сделали фронтенд - считайте минус. Не надо было такой брать. Если вы сделали отличный фронтенд, а из бекенда только hello world, то наверно тоже не очень хорошо. Считайте что это стартап. Вы даете готовое решение заказчику. Заказчик в этом случае - мы. Пол работы отдавать, наверное не очень хорошо.</p> <p>Обязательно ли присутствие на лекциях в режиме онлайн? Возможно что не получится посещать лекции в день проведения из-зи расписания занятий в ВУЗе</p> <p>Не обязательно вообще. То есть будут записи. Главное чтобы вы их пересмотрели. Один, два, три, сколько угодно раз. Сколько потребуется. И уяснили что там есть.</p> <p>Надо ли деплоить курсовой проект? Или же пойдет гит с докером?</p> <p>Гит с докером конечно. Мы работаем с гитом. Вы должны будете на гите сделать репозиторий для курсового проекта. Предоставить к нему доступ. Ментор будет клонировать себе репозиторий. Запускать докер и смотреть запустилось или нет. Это было бы идеально. Для того чтобы заказчик, ментор не разбирался в вашем коде, они очень занятые люди и их время очень дорого стоит, надо сделать так чтобы им понравилось и их не напрягать. Заказчика вообще напрягать не очень хорошо. Такая тренировка перед работой с заказчиком.</p> <p>Наше время подходит к концу. Если будут вопросы задавайте их в телеграм канале. Он для этого и создан. Там будут и материалы и записи лекций и объявления важные. Пожелаю всем вам удачи в обучении. И большое спасибо что пришли сегодня. Большое спасибо нашим преподавателям, которые рассказали про курс. Нашему Андрею, который автор этого курса.</p> </article>','<article class="article"> <div id="link-to-dsr2023net" class="btn-back">назад</div> <h1>2023-10-02 Lecture #1 Software Developer</h1> </article> <article class="article"> <p>Лекцию читает Андрей Кононов (автор курса)</p> <p>Здравствуйте! Напишите, пожалуйста, меня видно, слышно? Требуется ли что-то прибавить? Отлично. Все, здорово. Немножко поставлю здесь чат. Если что – пишите, я буду поглядывать в него периодически и отвечать на вопросы. Итак, всем здравствуйте.</p> <p>Сегодня у нас первая лекция нашей школы. Надеюсь, это будет интересно и полезно всем. Сегодня у нас вводная лекция. Сегодня мы немножко поговорим на отвлеченные темы. Для разогрева. Я считаю, что эта лекция одна из самых выжных. По сути, просто поговорим, пообсуждаем. Приветствуется обратная связь, если у вас будут какие-то вопросы, пожелания или ответы на вопросы, я буду периодически задавать, не стесняйтесь, пишите в чат. Будем вместе разбираться.</p> <p>Немножко о курсе, еще раз. Тем, кто не был на презентации. У нас будет курс, который называется Web Appication Development. И он будет сосредоточен на платформе .NET как целевой. После того как вы этот курс успешно пройдете, вы вполне можете создать самостоятельно Web API приложение и клиент к нему. Как минимум на Blazor, как максимум кто соответственно на что готов. По большому счету различие для web клиента blazor или там например какое-то WPF приложение или какой-нибудь мобильный клиент, именно с точки зрения архитектуры и подхода нет. Разница будет только во фреймворке, в языках, но при этом концептуально все останется как есть. Это вот основная цель нашей школы. </p> <p>Но при этом мы не сосредотачиваемся только на изучении .NET и каких-то фреймворков. Они будут идти параллельно. Я и наши учителя постараемся дать вам базовые знания, которые пригодятся не только для .NET но и в целом для понимания что такое веб разработка, что такое вообще разработка. Лекция, которая сегодня будет проходить – она такая, вообще общая. Дальше поговорим об архитектуре. Какие-то вопросы, которые вам сильно могут помощь на прохождении собеседований. Так что будет интересно. Слушайте, задавайте, участвуйте активно. Если какие-то есть действительно вопросы, которые вас как-то волнуют или на которые требуется дать расширенный ответ, не стесняйтесь, можно будет писать и по ходу лекции я постараюсь на них ответить. Если они будут достаточно простенькими и не будут сильно влиять на процесс. Либо можно писать в наш телеграмм, ну и соответсвтенно кто может – отвечайте. Как я уже говорил, программирование - это командная работа. Наши преподаватели и я тоже будем стараться ответить. Отлично. Давайте начнем нашу лекцию.</p> </article> <article class="article"> <h3>Лекция 1 Профессия Software developer</h3> <p>Мы сегодня поговорим от том что такое Software developer, что такое Software development. Немножко расскажу о компаниях. Если вы будете работать как разработчик внутри IT компании. У вас будет понимание как там все изнутри устроено. Кто за что отвечает. И поможет вам решить в каким направлении вам интереснее развиваться. Потому что IT чем интересен, вы можете развиваться куда угодно. Можете стать программистом, можете стать PM или пойти в направление QA. Про это сегодня расскажем. Куда лежит душа. Все направления важны. Все направления интересны. Постараюсь дать ответы на вопросы, которые позволят вам для себя решить, что интереснее вам.</p> </article> <article class="article"> <h3>О чем будет эта лекция:</h3> <p>- Знакомство с профессией. Любая профессия должна давать какой-то продукт. <br>- Что производит программист <br>- Зачем нужна команда <br>- Почему писать системы сложно <br>- Почему не удается написать то, что планировали <br>- Деструктивные факторы в работе <br>- Качество работы программиста <br>- Инструменты и технологии <br>- Процесс разработки</p> </article> <article class="article"> <p>О чем будет сегодняшняя лекция. Что мы сегодня разберем. Поговорим немного о самой професси. Поговорим о продукте. Любая профессия должна давать какой-то продукт. Поговорим что же делает программист. О команде поговорим. Всевозможные правила как можно писать код, как нельзя писать код. Или, точнее, как не стоит писать. Писать код можно как угодно, как вам нравится. Но если вы хотите работать в команде, хотите работать эффективно. То есть сложившиеся временем правила. Поговорим по качеству. Поговорим об инструментах немножко. Это вводная лекция, поэтому записывать ничего не надо. Будет запись лекции. Можно будет ее пересмотреть. Чашечку кофе и чашечку чая с шоколадкой можно сделать.</p> </article> <article class="article"> <h3>Группы программистов:</h3> <p>- просто прохожие <br>- для себя <br>- сотрудники <br>- фрилансеры <br>- стартаперы</p> <p>Давайте сперва поговорим про программистов. Что такое программист. Я начну издалека и постепенно придем к современности. Первые программисты писали на перфокартах. Они делились на системных программистов, на математиков. Системные программисты делились на тех и на тех. Классификация это мое самое не любимое дело и когда я сам был студентом. Но при этом все преподаватели очень любили классификацию. Делили ее на группы, заставляли заучивать. Это все ерунда. Заучил, сдал, забыл. Главное понимать качество. Я , конечно пошутил , с классификацией. Мы этим заниматься не будем. Давайте посмотрим кто такие программисты. А вы попробуйте определить для себя кто вы для себя. Может быть какую-то роль себе найдете.</p> <p>Первый программист, которых я выделяю, это «прохожий». Сейчас неимоверное количество людей хотять в IT. Они даже не хотят стать программистами, они хотят в IT. Львиная часть тех, кто хочет в IT не понимает что такое IT, не понимает что такое программирование. Просто знают что здесь есть деньги, есть префиренции, может быть еще что-то и просто пытаются сюда попасть. Я таких называю просто прохожий. Из них, вполне возможно что есть те которые как-то изучат профессию и смогут что-то делать, но львиная чать – они пойдут посмотрят и ничего делать не будут. Они будут интересоваться, они будут читать какие-то научные статьи, максимум на habr посидят. Могут сыпать терминами. Знать что Java лучше чем .NET, а javascript бьет и .net и яву. По большому счету, в жизни не писали кода и никогда не напишут. Такие программисты считаются «зрители». Они вряд ли смогут профессионально работать.</p> <p>Следующая группа – это те которые пишут «для себя». Это те которым действительно интересно. Программирование – хобби. Они могут написать какой-то реально серьезный софт. Не исключено. Они могут спрограммировать не только какое-то приложение, сайт, они могут спрограммировать что-то на RASBERY.API, собрать что-то на Arduino, прицепить процессор и его запрограммировать и так далее. Они в итоге получают какие-то интересные решения, интересные вещи для себя. Они не собираются это профессионально отлаживать. Делать так чтобы это можно продовать и так далее.</p> <p>Следующие ребята – это «сотрудники». Львиная часть программистов, которые работают в IT сфере это именно «сотрудники». Чем занимаются сотрудники. Сотрудники пишут код по потребности которую им дает руководитель, дают клиенты. Они – исполнители.</p> <p>Еще выделяются «фрилансеры». Это по сути бизнесмен. То есть тот кто пишет что-то для себя, который не хочет видеть у себя начальника, он ценит свободу. Но при этом точно так же работает на клиента. Он действительно программист. Возможно в чем-то более широкий кругозор и более высококлассный программист, чем рядовой сотрудник. Хотя бы за счет того, что больше проектов делал, больше видел. Но он такой же сотрудник, только начальник у него – он сам.</p> <p>Есть «стартаперы». Это те, которые хотят сделать что-то новое. Самостоятельно, для себя, они начинают двигать индустрию. Львиная часть из них прогорает. Еще большая часть бросает на старте все это дело. Некоторые бросают свой стартап на моменте обсуждения «на чем мы будем писть». У них какая-то жилка и они пытаются сделать что-то свое. Когда-то многие сотрудники и фрилансеры пытались сделать свой стартап. Я не исключение. Я до сих пор хочу его сделать, идеи есть. Но, скорее всего, они как идеи и останутся. Им не интересно как работать над скучными задачами, над которыми работают сотрудники. Есть сотрудники, которые работают по найму, у них реально сложные проекты. Львиная часть сотрудников делают какие-то формочки, скриптики, таскают друг у друга с сайтов информацию. Так сложились звезды сейчас, к сожалению. Некоторые делают, например, систему заказов на Озон. Сравните – спарсить сайт или сделать распределенную систему, чтобы можно было большим количеством магазинов управлять.</p> <p>Это в общем. Кто-то здесь увидел себя, кто-то не увидел. Здесь нет плохих групп. Это всё группы по психологии и в большей части они определяют какой у вас сейчас внутренний настрой, что вам больше нравится. Просто «прохожий» – ну интересно. «Для себя» – что-то сделал и забыл. «Сотрудник» хочет работать по заказам, ему нужны задачи. Он не собирается и не хочет искать клиента, ему не нужны проблемы с бухгалтерией. Он хочет просто работать и получать зарплату. «Фрилансер» не хочет над собой никакой власти. Он может искать заказы, но при этом несет все риски. «Стартап» это вообще рисковый проект, все бросаем, все делаем, кто-то выстрелит, кто-то нет.</p> <p>Вы, как программист, как сотрудник, можете постоянно перемещаться между этими группами. Просто подумайте что вам нравится. Это может помочь вам выбрать комфортную область где можно применить ваши знания, где будет интересно.</p> </article> <article class="article"> <h3>Качества хорошего программиста</h3> <p>- интеллект и умение выражать свои мысли <br>- страсть <br>- настойчивость <br>- любовь к новому и самообучение <br>- гибкость мышления</p> <p>Мы поговорили кто такие программисты. Программист бывает хорошим или плохим. Давайте об этом поговорим. Что надо для того чтобы стать хорошим программистом. Самое главное, это интеллект и умение выражать свои мысли. Почему? Интеллект чтобы человек мог думать, у него должен быть кругозор. И умение выражать свои мысли. Очень важное качество. Человек, который не может четко выразить свои мысли, скорее всего хорошую программу написать не сможет. И управлять не сможет. Программирование - это перевод с каких-то мыслей на машинный код через язык программирования. Объясняет компьютеру как и что надо сделать. Компьютеры это устройства довольно тупые, им необходимо рассказать все очень четко и подробно. Если где-то что-то неправильно сделать и компьютер будет делать что-то неправильно. Отсюда и львиная часть ошибок. Что-то не учли, что-то не то сделали. Поэтому не программирование важно, а именно вот эта вещь.</p> <p>Следом, я бы отметил страсть. Настоящий программист он страстно увлечен этой профессией. Если со стороны посмотреть как выглядит программист. Это кто-то сидит на клавиатуре долбит, глаза горят. И для всех остальных выглядит немножко сумасшедшим. На самом деле для того чтобы писать программы необходимо это дело любить. Если вам не нравится профессия, скорее всего, вам будет здесь не комфортно. Это только на старте нового проекта интересно, а потом начнется работа с legacy, работа с какими-то скучными задачами однотипными, исправление каких-то багов. И если вам программирование не нравится, просто будет постоянно дискомфортно. И это еще одна из веще почему не все смогут стать программистами.</p> <p>У меня были знакомые в университете. Один знакомый. Я всегда его вспоминаю. Отличный программист. Все прекрасно делал. Жил программированием. Его отчислили из ВГУ по причине неявки и хронических пропусков занятий. Но при этом он не пропустил ни одного дня, ходил даже в субботу, в компьютерный класс. Это было достаточно давно. Компьютеры были редкостью. Только в институтах стояли. Ни у кого дома их не было. И он просто программировал. Самостоятельно что-то учился, изучал. Вот его отчислили за непосещаемость. При этом он не сильно расстроился и сейчас работает в очень хорошей компании. Потому что он это дело очень любил.</p> <p>Настойчивость. Особенно при исправлении багов. Или, например, доделки системы до конца. Без настойчивости будет большое желание все бросить на старте.</p> <p>Любовь к новому и самообучение. Это вечные студенты программисты. Постоянно новые фреймворки, постоянно новые технологии. Кто-то лучше придумал архитектуру, кто-то хуже. Надо посмотреть. Выучив один язык и на нем вечно жить наверно можно, но скорее всего не в России а где-нибудь в Америке где есть еще компании которые пишут на старых языках вплоть до фортрана. Большие здоровые системы. Те люди, которые их изучили получают там неплохие зарплаты и обслуживают этот старый язык. У них высокие зарплаты потому что их уже очень мало как динозавров. Если вы хотите двигаться в ногу со временем, скорее всего, придется постоянно учиться и будьте к этому готовы.</p> <p>Ну и гибкость мышления. С чем это может быть связано? Изучив, как мы на лекции как писать web api приложение, это будет архитектура которую я вам предложу. Вовсе не означает что эта архитектура идеальна со всех сторон. Она с какой-то стороны хороша, с какой-то стороны может быть улучшена. Но если вы будете это решение везде транслировать. Не попытаетесь посмотреть плюсы, минусы, что-то другое. В итоге сами себя ограничете. Надо постоянно смотреть по сторонам. Постоянно пытаться что-то придумать. Говорят, программирование – это искусство костылей. Если делать грамотный костыль для кода, то это тоже надо придумать каким образом это сделать.</p> <p>Обратите внимание что в качествах хорошего программиста я не написал ни математические знания, ни умение писать архитектуру, ни знание десяти языков программирования. Все, на самом деле, это не важно. Это все сложно, в некоторых местах пригодится. Но если у вас есть эти пять качеств, то выучить язык – вообще не проблема.</p> </article> <article class="article"> <h3>Программист или разработчик?</h3> <p>Чем программист отличается от разработчика? <br>- Программист – пишет код <br>- Разработчик – разрабатывает решение</p> <h3>Уровни квалификации (Position)</h3> <p>- Trainee <br>- Junior <br>- Normal <br>- Senior <br>- Lead </p> <p>Программист это специалист, который пишет код. Ничего больше. Задача на входе и код на выходе. Разработчик рассматривает немножко шире. Он разрабатывает решение. Например, программист пришивает пуговицы, а разработчик делает костюм. Некоторые скажут что разработчик равно программист. Но не всегда. Результат работы программиста это код. Хороший программист пишет хороший код. А разработчик смотрит не только на код, он смотрит на архитектуру, на ценности, на тест-кейсы. Поэтому разработчики ценятся повыше.</p> <p>Посмотрим какие есть уровни квалификации. Это очень приблизительная вещь. В каждой компании это понятие может варироваться. В некоторых компаниях сеньёрами считают тех кого смогли продать на сеньёрскую должность. Неважно какие у него знания. Если за него клиент платит как за сеньёра – он сеньёр. У каждой компании свои принципы. Я предложу мнение как можно определить на каком уровне вы и к чему надо стремиться. Я выделил пять типовых уровней.</p> <p>Trainee это начинающий. Может не знать язык, не знать технологию, но очень сильно хочет выучиться. Студент, практикант.</p> <p>Junior это уже программист. Он должен уметь писать код. Должен знать язык, какие-то основы. Он должен не просто писать какой-то код, он должен писать качественный код. Это минимальная позиция программиста. Junior это тот который делает работу. Он обязательно получает задачи. Конкретные, расписанные, с ограниченными сроками. Ему дают маленькую задачу и он должен ее качественно решить. Если вы идете на джуна, вы должны это уметь. Junior решения принимать не должен.</p> <p>Normal это человек, который может сам принимать какие-то решения относительно кода. Например, как сделать какую-то функцию по-другому. Ему дают уже не просто задачи, например, сделай мне функцию, в которой надо три параметра, которой надо на выходе такие-то поля. Его уже просят, например, сделай мне функцию расчета факториала. И он сам может разобрать что надо подать на вход, что должно быть на выходе. Он знает как внутри модуля сделать правильную архитектуру. Как разбить по слоям. С кем связаться. Какие библиотеки использовать. Это нормальный, состоявшийся программист у которого еще не хватает опыта, обязанностей для того чтобы вырасти на уровень выше.</p> <p>Senior это тот который может решать проблемы системы целиком. Проблемы заказчика. Если junior пишет код, normal решает проблемы приложения, senior уже решает проблемы заказчика. Он смотрит на архитектуру. Может создать с нуля систему. Может выбрать из двух систем лучшую. Может выбрать фреймворк. Необязательно все писать на .NET. Можно написать один модуль на .NET, второй на node.js, третий вообще на python или typescript. И если в кучу все это собрать то получится решение которое будет работать быстро и все делать хорошо. Сеньёр уже эту работу выполнить сможет. Он сможет сказать сколько на это потребуется времени и т.д. Сеньер это старший, считайте что вы уже научились.</p> <p>Lead на самом деле это тоже что и senior. Но я считаю что лид это немножко старше по психологии. Сеньер может быть очень отличным разработчиком. Но он может не быть лидом. У него не хватает каких-то софт качеств или он не хочет этим заниматься. Не все сеньеры хотят быть лидами. Он больше упирается в сторону железа. А лид уже с точки зрения того что у него команда, он умеет руководить людьми, умеет ставить задачи, нести за них ответственность, как их организовывать. Чаще всего лиды вырастают из сеньеров. Поэтому они примерно одной области. Считайте что лид это тот который может решить проблему заказчика с помощью других людей. Сеньер и лид равны, просто у них разное приложение сил.</p> </article> <article class="article"> <h3>Продукт, который делает программист</h3> <p>Продукт, который выпускает программист это код.</p> <h3>Почему важно писать хороший код:</h3> <p>Чтобы не тратить время на его понимание <br>- новым сотрудникам <br>- коллегам <br>- себе через месяц</p> <p>Чтобы код можно было поддерживать и развивать</p> <p>Чтобы проще искать и исправлять ошибки</p> <p>Чтобы относительно просто подстраиваться под изменения требований</p> <p>Чтобы не было мучительно стыдно в будущем</p> <p>Зачем нам писать хороший код? Если мы написали код, он скомпилировался, программа работает. Хороший код писать надо для того чтобы не тратить время на его понимание. Никто никогда не пытался посмотреть свой код, который год назад писали? Со словами «кто же это писал?». Представьте что у вас есть здоровая система, и там кто-то пишет реально плохой код. Приходит новый сотрудник и очень мучительно разбирается в нем. Ладно там все работает, но непонятно как работает. Но исправление мелкой неточности, которую нашел заказчик или исправление микрофичи выливается в огромное количество времени и еще может потом все сломаться. Писать хороший код надо чтобы коллеги и себе через месяц не тратить дополнительно время на понимение. Это навык, который со временем приходит. Если будете стараться писать код хорошо, он будет писаться сам.</p> <p>Чтобы код можно было поддерживать и развивать. Если плохой код, то его очень сложно поддерживать. Хороший код это где можно написать функцию, можно его расширить, быстрее найти ошибку. И самое главное, что вытекает из поддержки и развития это возможность вносить изменения. Хороший код с хорошей архитектурой позволяет его модифицировать. А заказчики это такие люди, которые постоянно что-то еще хотят. Это не плохо. Если заказчик хочет от вашего софта чтобы вы постоянно что-то допилили, доделали, это значит что он ему нужен и он будет деньги платить. Если заказчик скажет «мне от вас больше ничего не надо». Варианта два. Вы сделали что-то идеально что соответствует. Или что более вероятно заказчик в вас разочаровался и больше не хочет с вам дело имать. И никаких денег никто не получит. Поэтому это важно. Если заказчик просит какие-то фичи – это отлично.</p> <p>Если пишите хороший код – дальше будет лучше. Ну и ситуация. Вы сейчас джун, написали код. Потом вы нормал. Дописали модуль. Теперь вы сеньер. А пришел джун разбирается в коде и ругается. А вы понимаете что это ваш код. И вы как его начальник будете себя чувствовать не очень хорошо.</p> </article> <article class="article"> <h3>Метрики качества кода</h3> <p>Метрику качества я нашел в книжке «Идеальный код». Конечно шуточная. Это количество чертей в минуту. Если чертей мало , то это хороший код. Шутка, не шутка. Но это, наверно, единственно правильный подход. Если вы понимаете код, он читается и никаких претензий к коду нет – значит код хороший. Единого мнения, например сделать отступы и код будет считаться хорошим, - нет. У каждого проекта он свой. У каждой команды он тоже свой. Самое главное, чтобы код был понятен и не было желания выкинуть его на свалку и переписать.</p> <h3>Как улучшить качество кода.</h3> <p>Читать книги: <br>- Чистый код (Роберт Мартин) <br>- Рефакторинг (Мартин Фаулер) <br>Следовать устоявшимся стандартам и принципам <br>- Паттерны проектирования <br>- Принципы SOLID <br>Смотреть как делают другие, пытаться понять и повторить <br>Использовать иные источники информации <br>- Youtube, семинары, конференции и т.д. <br>Практиковаться </p> <p>Читать книжки. Читать какие-то материалы. Заниматься рефакторингом постоянно. Уделять время на архитектуру и дизайн. Не всегда это возможно. Не во всех проектах это возможно. Особенно в требованиях заказчики могут задать написать быстро систему и не давать время на рефакторинг. Но старайтесь хотя бы по мелочам это дело делать. Каждый раз когда вы приходите на шашлыки и увидели мусор – возьмите и уберите. То же самое, если в коде нашли какую-то ерунду – чуть-чуть поправьте ее. Единственное требование – не сломать. А то можно поправить так что потом вся система рухнет. И все очень аккуратно.</p> <p>Если вы начинающий программист да и в будущем, надо каким-то стандартам стараться следовать. Все эти принципы, паттерны это сложившиеся на практике решения, которые позволяют нормализовать процесс написания кода чтобы всем было понятно. Если вы будете писать по такому паттерну, кто-то на него глянет – «а! это вот так пишется» и поймет логику сразу. Есть некоторые вещи – тот же SOLID, мы его рассмотрим в этой лекции, который позволяет более качественно проектировать код и не добавлять плохой код в приложение.</p> <p>Очень крайне рекомендую смотреть как делают другие. У меня когда есть время я стараюсь с гитхаба стягивать интересные проекты и смотреть какая там архитектура, какие модули, как они имена называют. Это тоже полезно.</p> <p>Смотреть другие источники информации – youtube, семинары, конференции. Если есть возможность их смотреть или посещать то это всегда полезно. Не факт, что посетив семинар вы получите дзен как это надо делать, но появятся какие-то мысли, какие-то новые идеи, в голове отложится и потом скомпилируется и в результате будет хорошо.</p> <p>Ну и практиковаться это, пожалуй, самое важное. Если вы будете это все выполнять, но не будете писать код, вы будете просто теоретиком и, скорее всего, хороший код вы написать никогда не сможете. Программист учится кончиками пальцев.</p> <h3>Продукт, который делает команда.</h3> <p>Продукт, который делает команда – Решение проблемы заказчика.</p> <p>Внимание вопрос: почему нельзя сделать все самому?</p> <p>Сеньер способен решать проблему заказчика, но не значит, что он будет это делать. Но проблемы бывают разные. Если для фриланса один человек может сделать какое то мелкое решение, например, написать модуль, сайт, то серьезные системы в одиночку сделать нельзя. Это одна из основных причин почему стартапы рушатся. Потому что, во-первых, очень большое количество работы нужно сделать, которая не связана с программированием. Поэтому стартапы останавливаются еще в начале. А те, которые дальше прошли, они потом перерастают из программистов в бизнесмены и уже решают по-другому задачи. И поэтому нанимают в работу уже команду. Представьте, что команда не пишет код, а решает проблему. Когда вы будете работать в компании, имейте ввиду, что вы работаете не для себя, вы работаете для заказчика. Чем раньше вы это поймете, тем быстрее вы будете в связке с заказчиком и будете делать то что надо. У вас будет меньше потерь времени. И вы будете более ценны для вашего руководителя. И для вашей компании.</p> <p>Волшебный вопрос: почему нельзя сделать все самому?</p> <p>На самом деле можно. Если вы гений. Если у вас много свободного времени. Свободное время равно свободным деньгам. Нам надо зарабатывать деньги чтобы жить. Но если у вас очень много денег и вы готовы делать систему, возможно вам нет смысла делать эту систему, деньги можно по-другому зарабатывать, например, инвестиции. Ну допустим, у вас все есть. Это хобби. Можно сделать. Но что-то большое самостоятельно сделать нельзя.</p> </article> <article class="article"> <h3>Роли в команде разработки системы:</h3> <p>- PM (Product Manager) <br>- BA (Бизнес аналитики) <br>- Developers (Разработчики) <br>- QA (тестировщики) <br>- DevOps</p> <h3>О ком мы забыли еще</h3> <p>- Бухгалтерия <br>- Маркетинг / Продажи <br>- Техподдержка <br>-Администрация <br>- DBA / Sysadmins </p> <p>В каждой команде все друг другу помогают и часть работы на себя берут. Основные роли, которые есть в команде это проектные менеджеры, бизнес аналитики, разработчики, тестировщики. Каждая из этих работ слабо пересекается с другой, она очень специфическая. Совмещать, например, роль девелопера и девопса можно, но в этом случае вы будете работать не эффективно. Либо будут затраты по времени большие. Все работы будет делать один человек друг за дружкой. Либо качество снизится.</p> <p>Это только команда разработки. Если вы хотите сделать стартап, который будет что-то продавать, то у вас должна быть обязательно бухгалтерия. Продукт нужно продвигать. Пользователи начнут звонить со словами «почему у меня ничего не работает и почему эта кнопка красная». Когда становится много людей то появится еще и администрация. Например, в офис нужна еще и уборщица. Будут компы и их надо настраивать в сети и т.д. С ростом команды появляется и обслуживающий персонал. Делать все самостоятельно уже в принципе невозможно. Мелкое – легко, что-то среднее и большое – уже нет.</p> <h3>Роли команды</h3> <p>- Product Manager <br>- Project Manager <br>- Business Analytic <br>- System Analytic <br>- System Architect <br>- UI/UX desiner <br>- BE developer <br>- FE developer <br>- QAA engineer <br>- QA engineer <br>- DevOps </p> <p>Теперь подробнее о ролях в команде, которая занимается разработкой. Самый главный это Product Manager. Он знает что такое продукт, что он умеет делать, как он должен продаваться. Он определяет каким продукт должен быть. Он общается с заказчиком, может отказывать заказчикам. Он четко фокусируется на целевых группах клиентов и в них работает. Плохой продукт менеджер пытается всем все пообещать и в итоге вместо хорошего продукта появляется франкенштейн, который через какое-то время загнется. Продукт менеджер определяет стратегию развития продукта. Что надо сделать, кому будем продавать. Что будем делать в первую очередь и т.д. Без него не получится.</p> <p>Проджект менеджер - это человек, который будет управлять вашим проектом. Он будет делать то что продукт менеджер придумал. Основная задача проджект менеджера это загрузить команду. Обеспечить их работой, обеспечить их задачами. Связать все по времени. Если несколько отделов работает, то когда один закончил его результаты сразу подхватил второй без простоев. Он может следить за мотивацией, добавлять и удалять людей в команду. Он может не влиять на сам продукт. Он работает на то чтобы этот продукт был сделан.</p> <p>Бизнес аналитики бывают двух видов – бизнес аналитики и системные аналитики. В чем отличие? Бизнес аналитики – это аналитики, которые работают с клиентами, то есть они направлены наружу. Они собирают информацию от заказчика: что им требуется, в каком виде им требуется. Они додумывают за них какие-то схемы, какие-то правила, детализируют их. Например, поле ввода. Что надо сделать если в поле ввода пустое значение, какое сообщение надо показать. Выдаст ли ошибку. Он должен конспектировать все за заказчиком, чтобы не потерять. И пытаться все это свести. Потому что заказчики - это такие люди, которые путаются в показаниях, хотят противоположных вещей. Пул этих требований надо перевести из хаоса хотелок в направленный поток, который можно реализовать. И все документируется. Этим занимается бизнес аналитик. Бизнес аналитики не занимаются созданием систем вообще. Они создают концепт системы с точки зрения клиента.</p> <p>Системный аналитик – это тот, который как раз пишет систему. Ему от бизнес анализа приходит задача. Например, надо сделать форму регистрации. Он уже определяет, что в форме регистрации будут такие-то поля. Здесь мы поставим такой-то фреймворк. Система будет такой-то архитектуры. Они описывают техническую часть. В больших компаниях, где большие системы, такие роли разделяются. Чаще всего, бизнес аналитики и системные аналитики связаны в одной области. Например, есть бизнес аналитик сеньер который вышел из технической среды. Если системный аналитик вышел из QA не из программистов, то системный аналитик выполняет роль системного архитектора.</p> <p>Системный архитектор – это тот, который эту систему пишет, то есть проектирует. Какие базы использовать, какой структуры базы, будем это настраивать на вейселе или своих серверах, микросервис или монолит. Вот такие решения. Делает архитектуру приложения.</p> <p>UI/UX дизайнеры рисуют красивый интерфейс, чтобы нравилось заказчику. UI это картинка, а UX это user expirience чтобы было удобно пользоваться. Дизанер который только рисует красиво, но не думает как это сделать удобным для пользователя – это плохой дизайнер. Хороший дизайнер помимо того, что он рисует красиво, он обязан продумать как пользователь будет с этим интерфейсом работать. В том ли месте располагается кнопка. Хороший дизайнер тоже на вес золота. Чаще всего стараются какие-то дизайники нарисовать. Причем на дизайне все смотрится шикарно, но частенько дизайнеры пренебрегают тем что у пользователя могут быть фамилии с разным количеством букв. Нарисуют все на коротенькие фамилии и все смотрится красиво. А большие фамилии уже не помещаются. Хороший дизайнер должен это дело предусмотреть. А в современном мире надо еще на мобильные приложения смотреть.</p> <p>Бекенд девелоперы. Чаще всего все системы у нас это internet paste. Они где-то там лежат или на сервере. Бекенд девелоперы занимаются тем что они это ядро пишут. Это система которая лежит на сервере, любой бекенд. Они его разрабатывают. У них чаще всего нет никакого фронтенда. Они на ружу посавляют API.</p> <p>Фронтенд девелоперы. Делают модули для взаимодействия с пользователями. Это и web девелоперы и wpf (оконные на виндовс) девелоперы и мобильные девелоперы. Весь софт который общается и взаимодействует с клиентом это фронт. Все которые пишут систему это бекендеры.</p> <p>Могут быть QAA инженеры которые занимаются тестированием и автоматизированием. Они не обязательно есть во всех компаниях. Они пишут скрипты, настраивают тестовые стенды, пытаются приложение сломать с точки зрения нагрузки. Пишут кучу тестов, которые пытаются проверить чтобы ничего не сломалось. Хороший QAA инженер позволяет сократить риск появления регрессии. Регрессия это когда все работало, но вы поместили картинку и все сломалось.</p> <p>Есть еще QA инженеры. Это тестировщики. Они тестируют софт вручную. Не все можно протестировать автоматически. Тем более работа QAA достаточно сложная и сравнима с работой бизнес аналитика плюс программист. Тестирует не только то что сделано, но и все что придумал дизайнер и описал аналитик.</p> <p>Современные системы очень большие. DevOps заставляют вашу систему жить. Они смотрят на нагрузки, на каких серверах все это лежит. Востребованная и высокооплачиваемая работа. Хороших девопсов очень мало.</p> <p>Это типовые роли для разработки софта. Если есть какой-то продукт. Клиент что-то хочет сделать. То продукт менеджер может быть исключен. В роли продукт менеджера выступает клиент. При небольшом проекте роли объединяют и один специалист могжет делать несколько ролей. Не всегда это хорошо. На сильных синьеров навязывают работы PM и это не всегда счастье. Архитекторы это штучный товар и хорошехо архитектора вырастить достаточно сложно.</p> </article> <article class="article"> <h3>Качественный софт</h3> <p>Качественный софт должен сделать клиента счастливым. Если клиент получит не то что он хотел, то он не принесет столько денег или уйдет к другой компании разработчику. Поэтому обеспечить качественный продукт это очень важно. Самое первое качество к которому могут быть претензии это работа бизнес аналитика. Если бизнес аналитик не до конца понял что нужно клиенту, не доконца доказал и спустил эту информацию вниз. Уже все равно какой код вы написали, получится система которая не нужна заказчику. Он будет давать претенцзии что он хотел не то. Если клиент вам платит , то вам все равно, просто клиент получит больше расход на систему. В какой-то момент у него может закончится бюджет и он потратит деньги и может ничего не получить. И будет всем подряд говорить что эта компания плохая. Если клиент платит fixed cost это означает что вам нужно переделать уже за свой счет. А переделка за свой счет если есть ошибка в архитектуре, это будет тяжело, сложно, больно. Кому это хорошо? Никому.</p> <p>То есть первая ошибка – это бизнес аналитика. Потом это архитектура неправильная. Что-то не предусмотрели. Самый простой способ – где-то накосячил – хлопнул дверью и ушел в другую компанию. Не хороший подход. IT рынок высоких специалистов не такой большой. И можно попасть туда где будут знать как ты плохо сделал и ушел. Свою репутацию надо беречь всегда.</p> <p>Если вы просто рядовой программист. За джуном, конечно, приглядывают но особой ответственности он не несет. Normal пытается сделать свою работу, чтобы она была хорошая. Пытается смотреть за своими соседями, замечаете и исправляете их ошибки, ведете активную позицию. Руководство все это замечает. Если есть результат, то у вас будет быстрее проходить карьерный рост. Вы будете получать более интересные продукты. За вас будут драться PM. Это карьера, это деньги, это более интересная работа. Не пренебрегайте качеством, старайтесь сделать все лучше. Смотрите не только на свой кусок кода, но и пытайтесь посмотреть на всю систему в целом. Вы работаете в команде и если 9 человек из 10 сделали плохо, ваш идеальный результат никому не нужен, вы просто потратите время.</p> <h3>«Я не знаю точно, чего я хотел, но точно не этого».</h3> <p>Ни один заказчик никогда толком не скажет что он хочет. Уже на старте надо пытаться точно выяснить что он хочет. Что-то предлагать ему. Бывают ситуации когда он хотел одно, с ним детально поговорили и он хочет диаметрально другого. Просто он этого не понимал.</p> <p>Небольшой пример.</p> <p>На старте проекта Заказчик ставит задачу:</p> <p>Сделайте мне игру, где курочка будет ходить по двору и клевать зернышки. А я буду этой курочкой управлять чтобы она ходила. На мобильном приложении. Полгода, думаю вам должно хватить.</p> <p>В середине проекта Продукт менеджер говорит:</p> <p>Да, и доделайте еще, чтобы она махала крыльями и кудахтала.</p> <p>В конце проекта приходит Менеджер и говорит:</p> <p>Хочу чтобы в 3D</p> <p>Из-за того что программисты узнали что заказчик хочет в 3D уже в конце проекта, проект будет выкинут насмарку. Заказчик ничего не возьмет. У компании будет отрицательная репутация. Несколько слов может кардинально поменять сам объем работ. Имейте это ввиду и пытайтесь на старте всегда что-то выяснить. Если вы работаете программистом, пытайтесь это выяснить у вашего руководителя, у вашего лида. Не просто – «сделай мне функцию», а спросите «а какую функцию написать». Немножко продумайте получше.</p> <h3>С чем смириться сразу:</h3> <p>- Четких требований вам никто никогда не даст <br>- Требования будут меняться по ходу работы <br>- По инициативе заказчика <br>- В связи с техническими причинами <br>- В связи с ошибками проектирования и планирования <br>- В связи с новыми административными требованиями <br>- Вообще не понятно почему <br>- Заказчик будет уверен, что маленькие изменения ни на что не повлияют</p> <p>Ни заказчик, ни начальник четких требований не даст. Заказчик по причине того, что он толком не знает или хочет очень многого и не может это сформулировать. Для этого нужны бизнес аналитики чтобы понять и доказать заказчику что реально он хочет. Лиды или старшие товарищи просто загружены и четких указаний давать не будут, поэтому придется додумывать. С этим придется смириться.</p> <p>Требования всегда будут меняться по ходу работы. Заказчик еще чего-нибудь захотел. Или вы поняли что надо поменять архитектуру. Если вы пишете систему, связанную с данными, может выйти какой-нибудь закон о защите персональных данных. И чтобы не попасть под статью необходимо эту систему быстро переделать. Если пишете систему для бухгалтерии, то там периодически выходят новые формы, новые отчеты и надо чтобы было актуально и быстро иначе ваша система никому не будет нужна. Требования могут поменяться просто так. Вплоть до того что несколько бизнес аналитиков будут задачу по-разному понимать, по-разному описывать и в итоге будете делать что-то другое. И вам надо будет постоянно что-то переделывать. Просто к этому будьте готовы.</p> <p>Заказчик всегда уверен, что он просит какую-то мелочь которая ни на что не влияет. У меня заказчик попросил какую-то мелочь и считал что это мелочь. А для команды это вылилось в три месяца работы. Заказчик думал ерунда какая-то. В итоге сильно долго переделывали.</p> </article> <article class="article"> <h3>Как минимизировать влияние изменения требований:</h3> <p>- Максимально выясняете все на старте проекта, убедитесь, что заказчик вас правильно понял <br>- Активно коммуницируйте с заказчиком или потенциальными потребителями <br>- Договаривайтесь с заказчиком о правилах игры, если возможно <br>- Внимательно изучайте инструменты и технологии перед стартом <br>- Стройте правильную архитектуру системы, снижайте связность модулей <br>- Пишите качественный код <br>- Разрабатывайте автоматизированные тесты <br>- Документируйте все </p> <p>Как можно минимизировать. Я описал страшную ситуацию. На самом деле все не так страшно. Надо просто принять правила игры и с этим работать. Первое - выясняйте. Не просто выясняете что вы поняли что хочет заказчик. Имейте ввиду, когда заказчик вам что-то объяснил, вы что-то поняли, что-то в голове представили – вы решаете не его задачу, вы решаете свою задачу. После того как вы начнете делать, вы будете решать то что поняли вы. Убедитесь что он вас правильно понял. Сделайте ему макеты, нарисуйте, поговорите с ним несколько раз. Если действительно все правильно, вы его поняли, он вас понял. Вероятность того что вы все нормально сделаете будет 80 и выше процентов.</p> <p>Например, было задание на курсовую работу. Студент начал делать по-своему. И в итоге сделал все красиво, все много, все отлично. Но от того задания сделано было 50%. Проект в объеме больше на 300% а в задании сделано на 50%. Куча времени не туда и заказчик получил не то что хотел. Это можно избежать.</p> <p>Второе. Общайтесь с заказчиком, с потребителями чем больше тем лучше. Не надо думать что вы поняли что надо сделать и вы знаете лучше чем он. Ничего подобного. Вы будете смотреть со своей колокольни. Заказчику, возможно, надо что-то другое.</p> <p>С заказчиком надо договориться. Что если он вдруг чего-то меняет, то мы останавливаем работу, договоримся, подумаем что уже есть. Чтобы не встрять в ситуацию, что вы сделали работу, а заказчик потом говорит что он сам не знал что хотел. И соответственно он будет добавлять требований, менять. А в итоге у вас деньги закончатся, а софт не получится.</p> <p>Перед тем как что-то обещать заказчику, обязательно оцените чем вы можете это сделать. Не надо говорить «ну я это сделаю на том языке, то – на том». Посмотрите, технологие какие есть, можно ли ими пользоваться в будущем. Тот же пример, Docker или Dentity Server4, которые мы будем использовать в нашей работе. Ситуация в чем, оба были бесплатные. С какого-то время владельцы этих технологий посчитали что рынок они уже захватили и можно сделать их платными. Вот и смотрите заказчик готов будет заплатить за это или нет. Если нет, то вам эти технологии не подойдут. Это в принципе справедливо для уровня синьера и выше. Но все равно, просто знайте. На своем уровне тоже можете все это дело оттранслировать.</p> <p>Стройте правильную архитектуру, снижайте связность модулей. Для того чтобы можно было какие-то модули выкинуть, какие-то переписать. По возможности, чтобы это не ломало систему.</p> <p>Пишите качественный код, чтобы было понятно.</p> <p>Если у вас есть сложная система и есть возможность и время, потому что некоторые заказчики на тесты время не дают, разрабатывайте автоматизированные тесты. У вас будет уверенность что ваша система не сломается.</p> <p>И волшебная фраза – документируйте все. Чтобы не было мучительно больно вспоминать откуда такое требование. По возможности все сохраняйте, пишите, говорите когда и кто и т.д. В случае чего, можете вспомнить почему так сделалось. Либо можете заказчику показать почему так сделано – «ты же сам три недели назад сказал делать так». Если не будет документов, не будет доказательств, то скорее всего, вам скажут «я этого не говорил». И будете думать почему.</p> <p>Если система плохо спроектирована то она будет выглядеть как карточный домик, построенный на костылях.</p> <h3>Как думаете что произойдет если:</h3> <p>- тронуть какой-нибудь костыль <br>- отвяжется лодочка снизу <br>- вылезет еще один баг где-то внутри <br>- кто-то решит все поправить <br>- заказчик будет весить немного больше, чем QA инженер. </p> <p>Если у вас плохая архитектура, вы постоянно чего-то доделываете. Можете быть уверены, что какие-то вещи наверняка сломаются. Хороший код написан достаточно просто, структурно, повторяемо, в каком-то виде даже скучно. Но самое главное, у него нет магических связей, которые позволяют этот код сломать. Старайтесь такой делать. Если вы в вашем коде не пытаетесь решить проблему, а пытаетесь ее замазать, то система рано или поздно, вас подведет. И хорошо если подведет заранее. А если на презентации заказчику?</p> <h3>Диалог двух программистов вечером:</h3> <p>- Давай зальем наши правки <br>- Давай. Главное нам ничего не сломать <br>- Да, вроде бы, мы ничего, кроме своего модуля не трогали… Заливай… <br>- Заливаю… Готово. По домам? <br>- Ага <br>На следующий день: <br>- У меня ничего не работает! <br>- Кто удалил нужный мне файл? <br>- А! У заказчика база рухнула! </p> <p>Есть правило ничего не выкладывать в релиз перед выходными. Если вы не тестируете и ничего не проверяете. То скорее всего получите такую картиночку. Это не сказки. Я сам такие ситуации ловил. Рекомендую про это помнить и постараться не делать так. Получается что любая система как карточный домик, трогать ее нигде нельзя.</p> <h3>Что же делать, чтобы ничего не сломалось? Да хотя бы, чтобы не сломалось у заказчика</h3> <p>- Определяете правила корректности работы своих модулей <br>- Пишите тесты заранее, включайте их в процесс сборки <br>- Документируйте изменения и их причины <br>- Старайтесь смотреть на систему в целом, пытайтесь понять, что может «зацепить» ваше изменение <br>- Обязательно тестируйте перед публикацией в production и передачей заказчику <br>- Делайте резервные копии чаще </p> <p>Во-первых, определите для ваших модулей, когда они работают хорошо, а когда плохо. Чтобы было понятно – этот модуль работает хорошо если он делает то-то и то-то.</p> <p>Если есть возможность писать тесты – пишите.</p> <p>Про документирование я уже сказал.</p> <p>Важная вещь. Если будете смотреть на систему, то пытайтесь смотреть не только с точки зрения вашего модуля, а немножко выше. Как ваш модуль на что-то влияет. Когда один архитектор на это смотрит, у него один взгляд, он может перегружен и что-то не заметить. Если вся команда пытается посмотреть как модули между собой связаны, то у вас будет хорошая интеграция между модулями и все будет нормально.</p> <p>Важно. Перед тем как вы передаете, особенно в продакшн или заказчику – тестируйте. Тестируйте не только саму систему. Тестируйте процесс обновления. Если есть возможность скачайте базу с продакшн и попробуйте на нее накатить. Убедитесь что у вас прекрасно работает софт. Накатывайте заказчику. В итоге у заказчика ломается база данных или ваша система не работает или работает плохо.</p> <p>Перед тем как вы что-то сделаете – сделайте копию. Убедитесь что у вас есть возможность откатить.</p> </article> <article class="article"> <h3>Какое бывает тестирование</h3> <p>- ручное <br>- автоматизированное <br>- интеграционное </p> <p>Тесты важны для того чтобы заказчику не сделать плохо. Семь раз отмерь, один отрежь. Пословица как раз про это. Какое бывает тестирование? Ручное мы просто тестируем руками и смотрим что к чему. Если команда QA достаточно сильное, то ручное тестирование задокументировано, понятно куда заходить, какие-то цепочки путей прописаны. Я видел как наши тестировщики DSR делали таблички. Проверить name. Введите туда русскую букву, латинскую букву, юникод. И все вещи которые надо прогнать, ручной тестировщик прогоняет и убеждается что все есть. </p> <p>Если какие-то вещи можно автоматизировать, в частности мы будем в рамках курса, последняя практика, которая будет уже под новый год, будем писать тесты чтобы тестировать наш API. По возможности если можно что-то автоматизировать – сделайте это. Это будет проще, это будет лучше.</p> <p>Интеграционное это когда мы тестируем систему целиком. Не просто какой-нибудь unit test. Мы собираем наши данные, наши сервисы и смотрим как они между собой живут. Это достаточно большая работа. Я об этом много рассказывать не буду. В DSR есть QA school и QAA school. Добро пожаловать. Кто хочет поучиться. Точно так же бесплатно. Обращайтесь. Хороший тестировщик должен быть хороший программист и желательно иметь навык тестирования. В этом случае он будет больше видеть и лучше проектировать систему.</p> <h3>Тут все просто – сейчас сяду и напишу.</h3> <p>Как обычно происходит в жизни: <br>- Масштабные планы, революционные идеи, плащ героя на стене <br>- Что-то пошло не так… Да ладно, один костыль ничего не решает <br>- Этого мы не предусмотрели… Давайте заплатку поставим пока <br>- Этот модуль не работает совсем, давайте его перепишем <br>- Хм, что значит нет данных? Ок, надергаем из Интернета <br>- Угомоните уже нашего QA! <br>- Какие планы? Пусть хоть вообще заработает <br>- Вот это монстр получился <br>- Перепишем все заново? </p> <p>Программист говорит «сейчас я быстренько все напишу, тут же все понятно и опыт есть, я же сеньер». В жизни все происходит немножко не так. У нас есть какие-то планы. Мы придумали систему. Будем сейчас ее писать. Даже деньги поделили которые акционеры дадут за нашу систему. </p> <p>Начали что-то делать. Где-то что-то не учли. Влепили один костыль. Ну все нормально. Ничего страшного.</p> <p>Что-то еще не предусмотрели. И так далее.</p> <p>Модуль начал глючить. Мы его переписали.</p> <p>Стянули что-то с интернета. QA начал тестировать, начал ошибки кидать со скоростью пулемета. В итоге вместо того чтобы уже новый модуль делать у которого подходит срок, вы начинаете ошибки исправлять. Хотите этого QA пристрелить. Не надо этого делать. QA это важные люди. Они очень важны для команды.</p> <p>Планы летят в мусорку потому что уже ничего не работает. Какое развитие, нам бы уже хоть что-то сделать. В итоге что-то делаем и понимаем, что в начале хотели сделать идеальный продукт, а получился монстр. Единственное желание после этого это переписать все заново.</p> <p>На самом деле, это не такая юмористическая вещь. Потому что многие системы несколько раз переписываются. Даже крупные системы. И от этого никто не защищен. Лучше на старте больше думать чтобы этого хоть немножко избежать. Я думаю, вы пример в интернете найдете такой системы, которую писали, бросили и переписали заново. Это хотя бы наш рутуб. Кучу времени его писали, он достаточно медленный был. Сейчас другая команда его переписывает. Я даже уверен что они старый код поменяли. Просто мое мнение.</p> <p>Почему так происходит? </p> <h3>Проблема 100-го кирпича</h3> <p>На самом деле, в софте есть одна большая проблема. Называется проблема сотого кирпича. Строитель первый кирпич кладет долго. Потом второй. Когда доходит до последнего сотого кирпича, то у него уже опыт и система достраивается. И мастерок правильно держит. У него все автоматизируется. И уже сотый кирпич он кладет элементарно. В софте ничего так не получается. Самая легкая вещь, которую в разработке софта можно делать это первая. Каждое следующее добавление увеличивает сложность. Чем больше вы пишете тем система становится сложнее и какое-то изменение сделать сложнее. Проблема 100-го кирпича это причина почему софт получается не такой как мы хотели. Это был рассказ про сложность.</p> <h3>Так в чем сложность?</h3> <p>Первая сложность – это непосредственно сама сложность <br>- Алгоритмическая <br>- Трудоемкость разработки <br>- Информационная сложность <br>- Сложность тестирования <br>Вторая сложность – это не полная информация о задаче <br>Третья сложность – изменяемые или уточняемые требования <br>Четвертая сложность – окружение, инфраструктура <br>Пятая сложность – мотивация, выгорание, человеческий фактор </p> <p>Первая сложность в разработке системы - это сама сложность. Писать хороший код – само по себе сложно. У нас есть алгоритмические трудности, есть трудоемкость разработки. У нас есть информационна сложность, надо добиваться где-то данные доставать. Есть сложность тестирования. Простенькую программу протестировать можно, а попробуйте протестируйте микросервис. С каждым добавлением растет количество функций внутри. При добавлении новой фичи надо чтобы и предыдущие не сломались. Возможно старые вещи поменять под новую фичу. С каждым новым добавлением сложность растет.</p> <p>Вторая сложность - это не полная информация о задаче. Как красная линия идет. Вполне возможно, что вы решаете не ту задачу, которую надо решать.</p> <p>Третья – это требования. Это опять следствие того что у вас неполная задача.</p> <p>Четвертая – это окружение и инфраструктура. Писали-писали и вдруг поняли, что у вас сервер не справляется. Сервер – вещь дорогая. Что надо делать?</p> <p>И пятая, одна из основных, она вытекает из всех предыдущих. Это человеческий фактор: мотивация, выгорание, ошибки, отсутствие команды, переманивание в другие компании где больше денег платят. И чтобы сделать большую сложную систему этим всем надо каким-то образом управлять.</p> </article> <article class="article"> <h3>Что же делать?</h3> <p>- Со ложностью системы <br>- Не полной информацией о задаче <br>- Изменяемыми или уточняемыми требованиями <br>- Окружением, инфраструктурой <br>- Мотивацией, выгоранием, человеческим фактором <br>- Прочими сложностями </p> <p>Что можно сделать? Это скорее лекция к PM, но все равно будет интересно. Полезно послушать. Сложность системы надо снижать. По возможности убирать непонятные вещи, декомпозировать задачи. Разбивать сложные задачи на более мелкие, чтобы они были попроще. По неполной задаче пообщаться с заказчиком, попытаться что-то выявить. Требования - документировать. По мотивации – работать с людьми. Можно что-то делать и надо что-то делать. Если хотя бы один пункт пустите на самотек, то это может привести к катастрофическим последствиям.</p> <p>Ну пока вы рядовой программист это не сильно критично. Но если вы будете PM и не заметите что у вас программист сидит на headhunter, у вас в какой-то критический момент может просто напросто исчезнуть программист на проекте. Если это ключевой программист, то будет вообще больно. Если он не ключевой программист – вы теряете время, пока он ищет работу он не работает на вашем проекте, а это сроки, деньги. И у вас риски срыва проекта.</p> <h3>Получается, что разработка – это лотерея какая-то?</h3> <p>На самом деле нет. Все почему-то сравнивают разработку софта со строительством. Это не правильно. Разработка любой информационной системы, особенно на заказ никакого отношения к строительству не имеет. Поэтому и применять принцип строительства здесь нельзя. </p> <p>Разработка софта это скорее выращивание дерева. Если у вас две группы людей будут делать одну и туже систему (выращивать дерево), вы никогда не получите двух одинаковых деревьев. Они будут разные. Они будут с разными ответвлениями. Два одинаковых дома построить легко. Два одинаковых дерева вырастить невозможно математически. Считайте что софт это выращивание вашего сада. С этой стороны и смотрите. Как надо выращивать хороший сад? За ним надо ухаживать, его надо обрезать, его надо планировать, смотреть какие рядом деревья можно сажать, а какие – нет. Не сажать под большими деревьями кустарник, которому света не будет. Считайте что ваш софт – это живая система.</p> <h3>Очень-очень упрощенный процесс</h3> <p>Типовые стадии разработки системы <br>- Проработка бизнес требований <br>- Дизайн системы <br>- Составление плана и оценка бюджета <br>- Разработка (итерационно) <br>- Тестирование (итерационно) <br>- Презентация заказчику (итерационно) <br>- Доставка <br>- Поддержка </p> <p>Какие у нас вообще типовые стадии процесса могут быть при разработке системы. Проработка бизнес требований. На старте мы должны с заказчиком поговорить и выяснить что надо сделать. Потом спроектировать саму систему и согласовать. Дизайн системы это не только дизайн модулей. Скорее дизайн системы это где у нас какие блоки, какие фичи будут. После того как этот дизайн системы, видение системы, концепт системы, примерная архитектура были согласованы, всеми приняты и бизнесом, в том числе, архитекторами. Составляется план, высчитывается оценка и после этого идет разработка, тестирование, презентация и доставка. Доставка – это или дистрибутив отдать или выложить куда-нибудь на облако. Разработка, тестирование и презентация обычно идут итерационно, частями. Очень мало систем, особенно в софте, которые могут сделать за один раз. Это или какая-то система под ключ. Например, небольшая мобильная игра. Или действительно маленькая система. Если система для работы с людьми, то стоит организовать поддержку клиентов.</p> </article> <article class="article"> <h3>Как «выращивают» программы</h3> <p>- Подход «Водопад» (Waterfall model) <br>- Итерационный подход (iterative) <br>- Гибкий подход (agile – scrum, agile - kanban) </p> <p>Как выращивать программы? Подходов больше, я написал самые основные. Дря разных систем и задач применяются разные подходы. Водопад это проект в котором каждый следующий этап выполняется после того как предыдущий закончен. Применяется для систем с очень высокими требованиями к качеству, надежности. Например, система управления самолетом, навигационная система. Никакого agile там быть в принципе не может. Строго и досконально прописываются все требования, много раз дезайнится, досконально тестируется. Уже на этапе подготовки к дезайну пишутся тесты, критерии по которым данная система будет приниматься. Что надо ввести на вход, что в итоге должно получиться. Пишутся здоровенные, толстые талмуды с требованиями. И каждое тестирование проверяет насколько качестенно система выполняет требования ТЗ. Это промышленность, космос, военные. И внести изменения в такие проекты достаточно сложно. Сам заказчик на изменения уже не пойдет. Если вы при водопаде предложите windows заменит на linux - никто вам этого не позволит. Надо было думать заранее. Waterflow - это в одну сторону.</p> <p>Итерационный подход (iterative). Договорились о чем-то, оценили, сделали, показали. И такими кусочками идем. Если что-то сделали и не понравилось, до делаем ответвление – поменяли и вернулись. Есть свои технологии, фазы дизайна, разработки, тестирования. Основное это процесс идет кусочками. По такому принципу все и работают. </p> <p>Гибкий подход (agile, scrum, kanban). Здесь уже более четко описаны технологии итераций. Должен быть product owner. Он делает фичи, собирает бэклок. На основании бэклока команда и скрам мастер планируют спринт (это период 1-4 недель, за который надо сделать релиз). Команда быстро с этим делом работает. Каждый день проводятся дейли митинги. В конце спринта из всех задач делается релиз. Демо заказчику, если все хорошо, переходят на следующий этап. Получается что agile не имеет финишной цели. Гибкий подход применяем кодгда заказчик не знает что хочет. Он кидает разные тикеты. И на основании этих тикетов создается система. Но чтобы она делалась не просто абы как, сделали такой ритмичный подход. Есть Agile scram он работает по периодам. Есть Agile kanban</p> <p>Backlog – stories – to do – in progress – to verify - done <br>Гибкий подход (agile - kanban). У нас есть backlog. Мы просто складываем все в кучу. И никаких временных рабок нет. Каждый разработчик берет понравившуюся ему задачу, кладет в in progress. В to do определили, что задачу надо сделать важной и у нас здесь есть какое-то количество задач, например, сделать авторизацию, нарисовать логотип. С команды берут задачи с которыми могут справится, начинают ее делать, проверяется и кладется в done. Как только задачи из to do перерастают в done, делается релиз. Почему называется канбан? Это пошло из японии. Просто была доска и на ней были наклейки. И каждый брал и переклеивал. Если scrum это управляемая система со спринтами, то в kanban надо просто что-то делать. И у scrum и у kanban мы не знаем что в итоге у нас получится, мы работаем над тасками. Такие схемы работают за почасовую оплату. Сделал – за часы тебе заплатили. Заказчику чем хорошо? Не хочет платить – просто остановился и получил ту ситуацию, которая максимально приближена на тот момент. Он ее уже видел и он на ней работает. Если ему все еще дальше нравится, он просто платит и дает задачи. Мы ее делаем. И для команды разработки хорошо и заказчику хорошо. Это по поводу архитектуры.</p> <h3>Я художник, я так вижу!</h3> <p>Очень важно в разработке софта – правильно понять друг друга. Заказчик хочет одно, выразил это своими словами. Бизнес аналитик внес свою какую-то долю по непонятности. Программист понял по-своему, начал что-то делать. Дизайнер где-то увидел красивый интерфейс и хочет его применить. В итоге получается большое количество всяких нестыковок. На старте хорошо бы договориться между всеми командами об одном и том же, чтобы вы друг друга понимали. То есть надо согласовать общий словарь. Если вы говорите с заказчиком – говорите в терминах, которые понимает заказчик. Если вы работаете с бухгалтерией, то говорите в терминах счетов, проводок. Если вы работаете с заказами на товары, то это заказы, складские остатки. И уж точно не стоит заказчику говорить про entity, behavior, классы, слои – ему это не надо. Внутри команды заказы могут быть разные. Например заказ на склад и заказ на магазин. Это разные заказы и если вы с этим не разберетесь то будет дискомуникейшн.</p> <h3>Иван Иванович, можно я не буду читать его код? Ну пожалуйста!</h3> <p>Старайтесь писать код понятно <br>- Используйте принциаы CleanCode <br>- Будьте последовательными в написании кода <br>Не забывайте про хорошие комментарии <br>Старайтесь делать простую архитектуру. Там, где это возможно <br>Следуйте стандартам и договоренностям внутри команды <br>Не злоупотребляйте новыми конструкциями языка без необходимости <br>Если есть возможность, то делайте рефакторинг <br>Используйте средства для форматирования кода (LINT) </p> <p>Если ты пишешь плохой код, то его никто читать не хочет. А если никто не хочет его читать, очень трудно найти людей которые будут его поддерживать. А если это ваш код то вы будете с ним постоянно жить. Значит вас на новый проект могут не перевести потому что этим никто заниматься не хочет. Старайтесь код писать хорошо. Используйте принципы CleanCode. Будьте последовательны в написании кода. Не надо писать один модуль в одном стиле а другой модуль в другом стиле. Пишите хорошие комментарии. Не надо все комментировать. Хороший комментарий помогает понять что надо сделать. Хороший код сам себя комментирует. Если вы пишите понятный код – ему комментарии не нужны.</p> <p>Архитектуру не надо усложнять. Если есть возможность сделать по-простому, то сделайте по-простому. Не стоит злоупотреблять синтаксическим сахаром. В том же нете понапридумывали новые языки. Новый switch например, никто его не любит но он там есть. Обычно народ путается когда его видит. Если есть такой риск, то лучше им вообще не пользоваться. Пользуйтесь проверенными старыми стандартными кусками кода. Договоритесь внутри команды как вы будете писать код. Если к вам много пришло, чтобы все писали одинаково. На практике у меня была ситуация, когда один программист очень сильно любилделать табами отступы. Другой очень сильно любил двумя пробелами. Там драки были в курилке до реальной драки. Сейчас уже проще, есть линтеры которые могут все это дело привести. Но программисты всегда найдут где выделиться и вот этого лучше в команде не делать. Договориться и пользоваться одинково. Я бы вам посоветовал вообще код не переписывать. То что студия поставляет. Один раз привыкнуть чтобы потом с этим не мучаться.</p> </article> <article class="article"> <h3>Принцип хорошего кода DRY</h3> <p>don’t repeat youself <br>не повторяй себя. <br>Каждая часть знания должна иметь единственное, непротиворечивое и авторитетное представление в рамках системы <br>1. Не храните одни данные в разных местах (особенно в разном формате) <br>2. Не дублируйте данные или код (наш любимый копипаст) <br>3. Делайте декомпозицию задач, старайтесь повторно использовать свой код <br>4. Делайте модульную архитектуру <br>5. Применятся не везде </p> <p>Есть несколько принципов, которые позволяют хороший код собрать. Не надо делать копипасты. Не надо делать копипасты кода. Не надо делать копипасты базы данных. Надо писать так чтобы все было в одном месте. И если потом потребуется что-то поменять, то вы это поменяете только в одном месте, а не в нескольких местах.</p> <p>Например, база данных. Вы сделали таблицу юзеров. Потом вы делаете другой класс и вместо того чтобы сослаться на таблицу юзеров которая существует, вы делаете свою другую таблицу юзеров для нового модуля. Потом пишете скрипт, который с той таблицы юзеров что-то перемещает сюда. Во-первых, увеличится сложность. Во-вторых, сделаете кучу проблем. А что делать если одна таблица будет пустая?</p> <p>Если есть одинаковые куски кода то лучше вынести все в отдельный метод. Еще пример, формат. В одном месте вы храните в базе данных, в другом в XML. Не очень хорошо. Декомпозиция задач – если у вас есть код, который вы используете в двух местах, вынесете его в другую функцию. </p> <p>Не везде применяется этот подход. Это принципы, а не стандарты, не законы. Их надо использовать только там где вы четко знаете что они нужны. По возможности их стоит писать. Но если эффективнее без них, то лучше их не использовать. Допустим у вас есть интернет игра. Есть сервер, на котором лежит информация о том какой у вас набор танков, сколько у вас денег и т.д. Раз они лежат на сервере то мы можем с сервера их всегда брать. Можно делать запрос и он все вернет. Единственное, что никакие сервера такое количество запросов не выдержат. В этом случае часть информации копируется на клиент и работает там. Это нарушение принципа DRY потому что информация и там и там одинаковая. Но мы получили преимущество по производительности, снизили нагрузку на сервер. Но на сервере тоже самое делать не очень хорошо.</p> </article> <article class="article"> <h3>Принцип хорошего кода KISS</h3> <p>Keep it simple, stupid (keep it short and simple) <br>Сделай это проще <br>1. Не надо делать дополнительных функций, не перегружайте интерфейс не нужными методами (или кнопками) <br>2. Не пытайтесь реализовать бизнес логику, которая учитывает абсолютно все возможные варианты <br>3. Не надо увеличивать количество уровней абстракции <br>4. Не закладывайте функции «про запас» <br>5. Не используйте ненужные или модные фреймворки <br>6. Не пытайтесь достигнуть абсолютной точности или предельной детализации </p> <p>Принцип KISS заключается в том, что не надо делать лишнее. Если вас чего-то не просили – старайтесь этого не делать. Не надо делать бизнес логику слишком сложную. Например, в форме ввода данных не надо использовать все варианты данных, а только те, которые наиболее часто используются. При неправильно вводе можно написать «ваши данные неправильные», а можно написать «количество букв больше 100 и вы ввели запрещенные символы $ и т.д.». Напишите как короче, чтобы не усложнять бизнес логику. </p> <p>Если система не требует увеличения абстракции, то не надо это делать. Был случай, на одном из собеседований надо было hello world сделать. Там такое количество абстракций было сделано, что в итоге не успели это дописать. Было красиво, но код не работал. Не закладывайте функции «про запас». Если сейчас вам эта функция не нужна, то нет смысла ее писать. Во-первых, если вы ее напишите, ее потом надо будет тестировать, поддерживать. А она, возможно, никогда не пригодится. Плюс на нее надо кучу времени потратить. А функция реально может быть не нужна.</p> <p>На javascript, например, очень популярно использовать модные фреймворки. Это вредно, потому что каждый фрейвфорк цепляет за собой какое-то количество javascript кода и оно тянется на компьютер пользователя. Больше трафик, больше тормозов, больше памяти требуется. По возможности не надо использовать ненужное. Только если он действительно нужен и принесет пользу.</p> <p>Не пытайтесь достигнуть абсолютной точности или предельной детализации. Например, надо изготовить деталь ценой Х, и диаметром 10мм. Когда вы будете ее обрабатывать токарным станком, то диаметр может быть 10.01. Но если его сделать точно 10, то он будет уже в 100 раз дороже. Возможно, такое качество и не надо, зато будет гораздо дешевле. Не надо вылизывать весь код. Сделайте короче и попроще. Чтобы было проще понимать, проще тестировать. Если надо что-то уточнить, то потом уточните.</p> </article> <article class="article"> <h3>Принцип хорошего кода YAGNY</h3> <p>You aren’t gonna need it <br>Не надо делать того, что не нужно <br>1. Заказчик не должен платить за то, что он не заказывал <br>2. Заказчик не должен разбираться в том, чего ему не требуется <br>3. Разработчики не должны тратить свое время на то, что не требуется <br>4. Тестировщики не должны тестировать то, что не требуется заказчику <br>5. Надо будет обновлять документацию, конфигурировать CI/CD, править тесты <br>6. Реализация не нужных функций может повлиять на реализацию нужных функций </p> <p>Еще есть принцип YAGNY. Не надо делать того, что не нужно. Очено похоже на KISS. Смысл в том, что если это делать не надо, то не делайте это. Если заказчик не заплатил за супер систему логирования, а вы без нее жить не можете – не надо делать систему логирования. Если он хочет простую систему, например, почта, а вы для этого микросервис поднимаете – не надо микросервис делать. Заказчик не должен в этом разбираться. Даже ему это доказывать не надо. Используйте эти модули только если это реально надо. Разработчики тоже не должны тратить время на то, что не требуется. Тестировщики не должны тестировать если что-то не нужно. Пока вы будете делать не нужные функции, вы не напишите нужных функций. Возможно, то что вы хотите сделать – делать не надо.</p> </article> <article class="article"> <h3>Как съесть слона</h3> <p>Любая система сложная. И если ее делать бездумно, то она бездумная и получится. Если представить систему в виде огромного объема наботы. Ее надо декомпозировать. Разбейте задачу на несколько частей, на модули. Если модуль делается элементарно – делайте. Если нет – бейте его еще дальше пока не разобъете до элементарных. После этого посмотрите на все элементарные блоки и посмотрите, что из этого взаимозаменяемо, используется в нескольких местах. Например, формы создания диалогов. Можно вынести их в отдельный сервис. Общение с API сервером тоже вынесите в отдельный сервис. Вот так у вас получится правильная, хорошая архитектура. Смысл фразы «съесть слона» в том, что кажется что большую систему невозможно сделать, но когда ее декомпозируешь до мелочей, то она оказывается достаточно тривиальная. Можно поделить такие задачи между программистами и потом все собрать в единую систему.</p> </article> <article class="article"> <h3>Как управлять муравейником</h3> <h3>Инструмены</h3> <p>- Wiki (Wiki, TFS, GitLab) <br>- Ticket systems (TFS, Jira, GitLab) <br>- Bug Trackers (Mantis, Jira, TFS, GitLab) <br>- Source control system (SVN, GIT) <br>- UML, диаграммы Ганта, Word, Excel, Project </p> <h3>Методологии</h3> <p>- SOLID <br>- GoF patterns <br>- Стандарты разработки </p> <p>Если у вас сложная большая задача, то у вас есть большая команда «муравейник». Как им управлять? Идеальная команда – когда все отличные специалисты. Можно кидать задачи и они все делают. Но на практике реальная команда выглядит по-другому. У каждого программиста есть свои тараканы в голове, свои мнения, свои амбиции. Все вроде хорошие и веселые.</p> <p>Что нужно чтобы помагать команде. Идеальная команда самоорганизуется сама по себе. Реальной команде надо помочь. И для того чтобы помочь, в компании используются разные инструменты. Во времена, когда я учился, про это информации не было. А сейчас это наверное в институте проходят. Wiki это база знаний, где можно все записывать и отслеживать.</p> <p>Ticket systems. Тикеты это те же самые задачи которые наклеивались на канбан и в беклог кидались. Куча систем. Team foundation system, jira, gitlab. У github есть своя система работы. Автоматизированные системы управления тикетами. Платные и бесплатные.</p> <p>Баг трекеры. Jira подходит. Есть Mantis. Bug trackers это системы которые учитывают работу над ошибками. Тестировщик или клиент кидает что у него такая-то ошибка. Ее надо анализировать сколько дать время разработчику, тестировщику. И тот кто эту ошибку кинул может смотреть на какой стадии находится работа над ней. Обязательно сейчас используются системы контроля версий. Никуда без них. Самая популярная из них это GIT. Но кое-где еще используется SVN. Для описания можно применять UML, диаграммы Ганта. Если кто-то хочет этим позаниматься рекомендую посмотреть сервис Plant UML. Это новый подход. Смысл в том, что вы пишете диаграмки UML-ки в виде текстов. Можно написать в тексте и он нарисует по ней диаграмму. На базе Plant UML некоторые компании делают даже отчетность. У вас есть какое-то дерево сложное и надо распечатать это дерево. Это долго, нудно. Можно на основании диаграмм получить UML и получить картинку.</p> <p>Можно применять эти инструменты. В команде надо договариваться. Нужно обучать команду чтобы она использовала паттерны, чтобы писать примерно одинаково. Особенно в больших командах. И использовать стандарты внешние и внутренние. Использовать инструменты и договоренности.</p> <h3>У меня все ходы записаны</h3> <p>Кто стер пыль с моего стола? <br>Там был записан важный телефон! </p> </article> <article class="article"> <h3>Системы контроля версий</h3> <p>- git, svn, bazaar, mercurian <br>Назначение <br>- Хранение полной истории изменений <br>- Описание причин всех производимых изменений <br>- Откат изменений, если что-то пошло не так <br>- Поиск причины и ответственного за появления ошибок в программе <br>- Совместная работа группы над одним проектом <br>- Возможность изменять код, не мешая работе других пользователей <br>- Возможность экспериментировать без риска </p> <p>Система контроля версий нужна чтобы в любой момент времени можно было поднять слепок кода который был на момент вашего комита. Основная и самая популярная система – это git. Без нее уже не могут работать. Основная цель – это документирование всего процесса разработки, поднятие кода, откат изменений если что-то не пошло, можно посмотреть код и совместная работа. Гит позволяет сделать заливку изменений исходного кода контролируемо. И перед тем как залить, можно сделать код ревью. Опытный человек или команда могут заранее, пока еще код не испорчен, могут все проверить и попросить разработчика исправить ошибки. Этот процесс называется код ревью и он очень важен. Гит сейчас must have.</p> <h3>VCS – как это работает?</h3> <p>Как работает Version Contrl System. Репозиторий это папка на сервере, в которой мы храним код. У нас есть главная ветка, мы можем от нее сделать branch ( копию этой папки). Что то поделать в новой ветке. Причем главная ветка останется без изменений. От нее можем сделать еще одну ветку и второй человек будет работать на второй ветке. Когда все сделано, мы тестируем и потом сливаем эти ветки в главную.</p> <p>Как работает git? У нас есть удаленный сервер. Можно хранить и локально, но очень не рекомендую. На удаленном сервере хранится удаленная папка. Мы себе ее клонируем локально. С ней что-то делаем. Комитим ее в рабочую копию. И удаленный репозиторий отличается от локальноко. Каждый коммит имеет свой номер, видно что помнялось, можно посмотреть разницу. Потом делаем push на сервер и наши папки становятся идентичными. Тут нужна практика. С гитом надо научиться работать.</p> </article> <article class="article"> <h3>Я бы сделал, но у меня принципы</h3> <p>S Single responsibility principle <br>O Open/closed principle <br>L Liskov substitution principle <br>I Interface segregation principle <br>D Dependency inversion principle </p> <p>SOLID это набор пяти принципов. Которые очень сильно любят на собеседованиях. Их нужно понять и выучить. Это определенные наработки, которые позволяют сделать красивый, правильный код.</p> <p>Принцип единой ответственности. Каждый класс должен отвечать только за одну операцию. В одном методе, классе нужно делать только что-то одно. Если класс делает несколько вещей, то пока вы делаете одну вещь, то можете сломать другую. Он постоянно растет и поддерживать его сложно. Надо сделать несколько классов. Отдельный класс повар, класс садовник, класс водитель и использовать их по мере необходимости.</p> <p>Принцип открытости/закрытости. Классы должны быть открыты для расширения, но закрыты для модификации. Это нужно чтобы не сломать старое. Нужно писать такие классы которые можно расширять, развивать, но нельзя изменять, модифицировать. Если вы пишете класс и со временем класс меняет функциональность это означает что у вас будет здоровый мешок проблем.</p> <p>Принцип подстановки Барбары Лисков. Если есть класс и мы от него делаем класс наследник. То наследник должен делать то же что и родитель плюс что-то свое. Наследующий класс должен дополнять, а не замещать поведение базового класса. Например, мы пишем класс для работы с новым оборудованием, который наследуется от класса для работы со старым оборудованием. Теперь наш новый класс должен ументь работать и со старым оборудованием и с новым. Если в новом классе открючим возможность работы со старым оборудованием, то это наршит принцип подстановки Барбары Лисков и новое приложение будет уже не такое полезное как старое. Нужно грамотно проектировать новые классы чтобы не сломать старые существующие системы. Наследник не должен терять функционал предка. Он должен его расширить. Если кто-то попросит старый модуль, то наследник его выполнит.</p> <p>Принцип разделения интерфейсов. Не следует ставить клиент в зависимость от методов, которые он не использует. Не делайте один интерфейс, который делает все. Разбейте его на несколько где каждый выполняет только свою функцию. Когда мы получим класс с такими интерфейсами, то будет понятно что этот класс делает. У него не будет лишних методов, которые были все реализованы в одном интерфейсе, но не используются классом. Это влияет и на чистоту кода. Это будет гораздо проще тестировать. Если нам нужен наследник класса, то он должен полностью реализовать всю функциональность класса и добавить какую-то свою. Наследник сможет работать и со старыми модулями и с новыми.</p> <p>Принцип инверсии зависимостей. Модули верхнего уровня не должны зависеть от модулей нижнего уровня. И те, и другие должны зависеть от абстракций. Абстракции не должны зависеть от деталей. Детали должны зависеть от абстракций. Класс не должен зависить от реализации. Класс должен зависить от абстракций. Например, есть класс который может резать пиццу. Можно в классе написать что он режет пиццу круглым ножом. Этим мы повысили связанность кода. Вместо реализации круглого ножа в классе, нужно просто сделать так чтобы подключившись через интерфейс к данному классу можно было отрезать любым инструментом. На основании этой инверсии зависимостей мы будем потом смотреть как в .NET работает IDE. Не надо зависеть от конкретных реализаций. Если есть функция не специфичная данному классу, оберните ее в интерфейс и передайте ее снаружи. Желательно использовать принципы SOLID если вы пишите большую серьезную программу. На основании инверсии зависимостей мы будем потом смотреть как в нет работает IDE. Не надо зависеть от конкретных реализаций если у вас есть функция которая неспецифична данному классу, оберните ее интерфейосом и передайте снаружи.</p> <p>Некоторые принципы прямо просятся. Они стали подробными, популярными, ими все пользуются. Возможно и не осознавая этого. Если вы будете делать их это отлично. Если у вас одноразовая программа и никому это не надо, то вспомните принцип что не надо усложнять код.</p> </article> <article class="article"> <h3>Я все сделал! Действительно?</h3> <p>- Не бывает программ без багов. Бывают недостаточно протестированные <br>- Если что-нибдь может пойти не так, оно пойдет не так (закон Мерфи) <br>- Программисты просто не умеют тестировать качественно <br>- Все работало хорошо у вас на компьютере? А на сервер оно вообще установится? <br>- На 10 записях все летало! А на 100? А на 1000? Остановится? <br>- Не работает функционал, который сдали полгода назад? <br>- Что-то на лице заказчика нет радости? Может неудобно или непонятно? <br>- Как это мы сделали систему всего на 70%? По спецификачии все ок! </p> <p>Мы подошли к финишу, сделали софт, все работает, все прогнали. Готовы отдать клиенту. Уверены что готовы отдать? Давайте посмотрим. Программа без багов не бывает, бывает недостаточно протестированная. Для того чтобы была программа без багов, программист должен быть очень продвинутым тестировщиком. На практике программисты и тестировщики это разные люди. Если программист изучил навыки тестирования, понял как это делать – он свой уровень и ценность своего софта поднимает на порядок. Рекомендую.</p> <p>Пример на своем опыте. В начале карьеры я пришел на работу, прекрасно писал системы. Тестировщикам сказал что пишу отличный код и его тестировать не надо. Тестировщик говорит – покажи. Я даю маленькую самую лучшую программу и тестировщик ее ломает в течение одной минуты. Он в поле логина вводит строчку из 8 тысяч символов. Нажимает ОК и программа падает. Никто же не догадывался что такой длинный элемент вставлять в SQL нельзя. В SQL запрос упал. Никогда никто такую ошибку не проверял. А у тестировщика есть навыки и технологии и соответствующий склад ума. Они знают как софт сломать. Слосвл. И я понял что я делаю что-то не так.</p> <p>Вспоминаю одну интересную ситуацию. Когда я писал софт для скалада. Надо было обязательно все позиции учитывать каждый день. Склад должен был отчитываться в накладной о том сколько принял товара, сколько списал товара. Все сопротивлялись. Потому что это лишняя работа. Именно работники склада. А потом когда внедрили все утихло. Все работает. Начальство хвалит. Идилия длилась ровно полгода. Через полгода я просто решил немножко программу изменить по базе данных надо было запрос сделать. И все данные рухнули. Все отчеты поломались. Хорошо у меня бэкап был. Начал разбираться в чем проблема. Оказывается, я не предусмотрел, что в поле ввода количество можно вводить отрицательные значения. А пользователи это нашли в течение 15 минут. И они в конце дня просто подгоняли отрицательными значениями под то что им надо. И в итоге отчеты все были прекрасные, все было хорошо. До момента пока я не попытался сделать рефакторинг. Это ошибка QA. Это серьезная ошибка бизнеса, потому что задача не была решена. Руководство хотело получить четкую систему движения товара. В итоге получило систему которая себя обнуляла каждый день потому что пользователи могли это сделать. Это баги. Поэтому если ваша программа работает хорошо, то она просто недотестирована. Лучше предполагать что что-то будет не так.</p> <p>Если что-то может пойти не так, то оно пойдет не так. Программисты не умеют тестировать качественно по той причине, что программисты не будут делать так как ненадо. Они знают что если куда-то тыкать ненадо то они туда тыкать и не будут. Если программист долго писал свой код, он ему уже достаточно сильно надоел чтобы он его еще тестировал. Он прогонит какую-то базовую цепочку и все. Если вы умеете тестировать и хотите что вы будете лучше.</p> <p>Следующее. У вас на компьютере все работает. Но вы ни разу не пробовали установить это на сервер. Пример, написали приложение для .NET. В докере отлично работает. Выбрали продакшн сервис. А там на операционно системе нет .NET и установить его туда нельзя. Софт есть , а запустить его нельзя. Пришлось изучать как устанавливать систему без .NET и доделывать систему. Просто что-то не учли.</p> <p>Нагрузочное тестирование. Если софт прекрасно работает на 10 записях. Выкладываете всю эту систему наружу. К вам приходят 1000 пользователей и сервер падает. Желательно это тоже тестировать.</p> <p>Еще сюрприз может быть когда мы что-то долго делали и не проверяли. Новый функционал работает, а старый отломался. Просто забыли тестировать.</p> <p>Еще пример. Вы все прекрасно сделали а заказчику это не нравится. Заказчик посмотрел и ему показалось некрасиво. У него нет цели рботать с этим софтом у него цель работать меньше и проще. Если вы сделаете неудобный сложный интерфейс, он будет плохо к этому относиться.</p> <p>Заказчик может назвать список дел которые само по себе разумеется и это тоже надо было сделать. Но это само собой разумеещееся для него, а вовсе не для вас.</p> </article> <article class="article"> <h3>Служба QA</h3> <p>Главная задача: доказать, что продукт некаечественный. <br>Главная цель: сберечь вашу репутацию перед заказчиком. <br>- Помогает на ранней стадии проверить то ли мы сделали или нет <br>- Помогает на ранней стадии проверить гипотезы, заложенные при разработке <br>- Помогает отладить UI/UX <br>- Проверяет, ничего ли мы не сломали с выпуском новой версии <br>- Проверяет ресурсные требования, скорость работы, эргогомику <br>- Проверяет соответствие документации реальному функционалу </p> <p>Как с этим можно бороться? Для этих целей в больших компаниях вводится службе QA (тестировщики). Если вы как программист должны писать продукт качественный, то основная цель QA это доказать что продукт некачественный. Потому что вы эту некачественность исправите. А как доказать что продукт качественный если критерий качества нет? Главная цель – сберечь репутацию перед заказчиком. Грамотный тестировщик это очень ценный сотрудник для продукта. Они тестируют продукт с точки зрения пользователя. Они тестируют так что ни один разработчик не проверит. Будет тыкать куда попало, вводить разные гадости и заранее, до заказчика все эти ошибки найдет. Лучше их найдет внутренняя служба QA заранее чем их найдет заказчик. Или найдет клиент заказчика. Тогда будет вообще катастрофа. Эта штука работает на нас.</p> <p>Что нам помогает сделать служба QA и вообще тестировщики. На ранней стадии проверить как мы сделали бизнес требования. Можно проверить гипотезы. Тестировщик поработал и говорит это все неудобно, исправляйте. Отладка UI и UX. Вряд ли разработчики будут смотреть что видно в разных разрешениях. Проверяют требования, скорость, эргономику, документацию. Мы можем сделать то что документации не соответствует. Кто-то должен это проверить. Это делают QA вручную. QAA может прогнать автоматические тесты и софт будет тестироваться постоянно. Цель - качество.</p> </article> <article class="article"> <h3>Ну все, зовите Печкина</h3> <p>Каналы доставки: <br>- Рассылка (публикация) дистрибутивов <br>- Доставка через пакетный менеджер <br>- Публикация в AppStore, GooglePlay и т.д. <br>- Развертывание на серверах заказчика. <br>- Развертывание в облаке <br>- Доставка через исходный код <br>- Организация SaaS <br>- Обновление собственного сервиса </p> <p>Прошли тестирование. Тестировщик сказал «пойдет, сдавайте заказчику». Как можно наш софт отправить заказчику. Если это софт, то можно рассылкой дистрибутивов. Часто вместе с бумажками, красивым диском с логотипчиком и голограммками. Пакетный менеджер например, публикация через store, google play. Если заказчик просит все настроить ему то тогда развертывание на серверах заказчика или в облаке. Некоторые заказчики говорят дайте нам исходный код и настройте CI CD и мы будем сами делать. Иногда это SaaS (soft as a service) и заказчик получает обновленную версию сайта. Это способ доставки. Обычно этим уже занимаются девопсы. Если девопса нет, то тим лид или PM.</p> <h3>На что стоит обратить внимание</h3> <p>- Необходимо планировать и вести учет версий <br>- Вести Release Notes к выпущенным версиям <br>- Автоматизировать процессы сборки, тестирования и доставки <br>- Тестировать процесс обновления <br>- Почаще делать резервные копии <br>- Предупреждать пользователей о временной неработоспособности сервисов, если необходимо <br>- Собирать обратную связь от пользователей по работе обновления </p> <p>На что стоит обратить внимание когда вы будете отдавать заказчику эту информацию. Первое – на версии. Планируйте и ведите в них учет. По ним будете вести release notes и записывать что изменилось. Процессы сборки, тестирования и доставки лучше автоматизировать. Не проблема доставить софт один раз или два. Но когда это делать 200 раз то можно с ума сойти. Поэтому лучше это автоматизировать. Обязательно тестируйте процесс обновления. Мало того что вы код сделали. Накат обновлений на базу пользователей может привести к порче данных. Перед тем как это сделать желательно у себя иметь предыдущую базу данных и на ней все проверить чтобы заказчику не навредить.</p> <p>Делайте резервные копии почаще. Предупреждайте пользователей о том что сервис отвалится. А то некоторые втихоря обновляют, а у пользователя там открыты документы. Надо планировать этот процесс. Собирайте обратную связь, убедитесь что у заказчика прошло все хорошо. Все эти нехитрые действия помогут не получить негатив от заказчика.</p> <h3>А как же происходит на самом деле</h3> <p>- Проснуться <br>- Открыть бэклог, составить план на день, почитать и понять требования к задачам <br>- Поучаствовать в стендап-митинге, сказать, что все хорошо и готов к новым свершениям <br>- Сделать новую ветку в VCS, попробовать реализовать задачу <br>- Понять, что требования к заданию не полные или противоречивые, полдня попытаться выяснить что именно надо сделать <br>- Попробовать реализовать задачу снова еще раз <br>- Поймать какую-то проблему в реализации, еще полдня гуглить решение, пить много кофе, начать серьезно посматривать на подаренный кем-то и стоящий на полке шаманский бубен <br>- Найти на форуме способ решить проблему, доделать задачу, отдать ее на тестирование, уйти домой <br>- На утро получить от QA небольшую книжку с описанием сделанных ошибок, прочитать ее, начать всерьез думать, что работа таксистом не такая уж и плохая <br>- Исправить все баги, периодически постукивая в шаманский бубен и соображая кому надо молиться, чтобы, ну к примеру, SQL запрос отрабатывал немного быстрее. Отдать все в релиз <br>- Получить огромное облегчение и положительные эмоции после того, как все заработает так, как надо </p> <p>Это конечно юмористическое. На самом деле работа программиста достаточно интересная. Для меня самая лучшая. Она позволяет себя реализовать. Вы можете сделать новое, современное, деньги за это платят хорошие. Крайне рекомендую тем кто сможет этот путь пройти, получить кайф для себя. Она будет радовать.</p> </article> <article class="article"> <h3>Вопросы.</h3> <p>- Паттерны проектирования. Будут ли они рассматриваться?</p> <p>- Нет. Паттерны проектирования - это теоретическая вещь. Здесь мы будем больше иметь отношение к практике. Поэтому задача этого курса чтобы вы самостоятельно собрали готовое реальное приложение. Паттерны поучите сами. Там ничего особо сложного нет. Львиная часть паттернов, которые есть, студия сама уже реализовала. Если они вам пригодятся на практике, ну отлично, как-то разберетесь. Можно и без паттернов. Обычно стандартных подходов для работы вполне достаточно. Но это не означает что их не надо учить. Я рекомендую с ними ознакомиться. Чтобы понимать какие они есть и если вы их увидите в коде чтобы понимали что там делается. Паттерн чем хорош? Вы глянули – ага, это такой-то паттерн и уже кусок кода в голове собран. В рамках курса .NET изучаться не будет. Был Java курс там изучались. Возможно будут изучаться в будущем.</p> <p>- Рекомендуете ли вы идти начинающим программистам в магистратуру?</p> <p>- Это вообще никаким образом не связано. Как я уже говорил. У меня был знакомый, который институт бросил, но при этом прекрасный программист. Один раз я собеседовал человека который закончил магистратуру и аспирантуру, но при этом в IDE не смог мне толком цикл написать. Магистратура, она не повредит. Это в любом случае знания, статус, корочка. Если хотите, то почему нет.</p> <p>- Домашка будет?</p> <p>- Домашки не будет. Домашка будет самостоятельная. Я проверять ее не буду. У нас будет практика. Крайне рекомендую эту практику повторить. Набрать. Программист это тот кто пальцами пишет. И в память будет вбиваться через пальцы. Если вы будете просто читать, толку не будет.</p> <p>- Можно без образования?</p> <p>- Без вопросов. Для того чтобы программировать вам образование не нужно. Вам нужны знания, вам нужны навыки. Если вы будете писать серьезный софт для шифрования, там без математики и без образования никак. Для того чтобы простенькие сайты рисовать – не обязательно. Высшее образование – это такой период где вас учат самостоятельно учиться, самостоятельно что-то делать. Если вы это умеете, то почему нет.</p> <p>- Какую IDE будем использовать?</p> <p>- Мы будем использовать VS Code и VS Community, а вы можете любую использовать.</p> <p>- Будет предоставляться учебный план или расписание программы, потому что не знаем что мы будем проходить?</p> <p>- Учебный план сформирован. Я его в ближайшее время выложу в телеграмм. Какие будут лекции. Кто будет читать. В какие календари. Все обязательно будет. Но внутренний, разумеется, у нас есть.</p> <p>- Можно начинать говнокодить а после разбираться как написать лучше?</p> <p>- Говнокодить никогда не рекомендую. Старайтесь качественно писать настолько, насколько вы готовы. Не надо говнокодить специально. Это плохо. Никто не будет требовать от вас такого уровня, чтобы вы как сеньеры писали. Просто сделайте хорошо и все. Для начинающего это нормальная работа. Вы просто учитесь. У нас сначала будет вводный курс по шарпам. А потом мы будет просто пошагам делать. Вы можете делать тоже самое просто повторяя за мной. Вы откроете студио, откроете видео и начнете писать тоже самое. Понаступаете на грабли, но в этоге вы это соберете и у вас получите. И вы будете уже не trainee а как минимум джуны.</p> <p>- Есть у вас вакансия .NET разработчика?</p> <p>- У нас сейчас .NET вакансия немножко прекращена в связи с санкциями. Но я четко знаю что .NET разработчиков активно берут наши компании другие МТС, Озон, Касперский. Эта вакансия сама по себе весьма актуальна. Здесь 100%. Не исключаю что и у нас эти вакансии откроются. Так что попадайте к нам в резерв. У нас библиотека копится. Как только будет появляться возможность, будем искать. Наш HR очень сильно любит ваши резюме и ваши знания.</p> <p>- Насколько возможно получить оффер в конце обучения?</p> <p>- Возможно, но для этого надо быть выдающимся. Из-за того что у нас есть санкции, такого большого набора как раньше не будет. В этом году мы взяли одного человека. То есть оффер получить вполне возможно. Все зависит от вас. Но надо быть на голову выше чем остальные.</p> <p>- Онлайн ворк?</p> <p>- Да. Мы работаем онлайн. Офлайн по-разному.</p> <p>- Не нарушает ли solid принципы rich модели?</p> <p>- Нет. Не нарушает. На самом деле, даже когда вы делаете какие-то rich модели, вы можете их делать красиво. Со всеми приницами. Почему нет? Если вы в rich модели сделаете один метод который будет делать все - это плохо. Он нарушает single responsibility принцип. Разбейте этот метод на кусочки, сделайте какие-то приватные методы и у вас все принципы будет учтены. Все эти принципы solid, kiss, dry это не рекомендации к написанию кода. Это рекомендации к тому как код надо построить, к архитектуре кода. Оно придет со временем. Сперва будете писать код с кучей комментариев. Он будет длинный и постепенно вам будет надоедать, по себе знаю. И будете писать кода все меньше и меньше пока он на экране ноутбука не будет помещаться легко. Чтобы его легко было читать и легко понимать. И тогда можете делать следующим оразом. У вас есть сверху модуль. Вы например, end поинт пишите. Определили в end поинте методы add, create, delete. Описали методы, описали модельки. Эти модельки отдали куда-то дальше. И в итоге вы сверху пишете. У вас уже весь каркас снаружи есть. Осталось написать только внутренности. И вы будете эти внутренности настолько декомпозировать, что в каждом методе останется по 5 - 6 строчек кода. В итоге вы очень легко сможете понять где у вас что сломалось. Если систему логирования вы настроили. У вас стандартно будет логироваться красиво. Это придет со временем. На старте, если вы про это будете знать и обращать внимение - это время придет быстрее.</p> </article> <article class="article"> <p>Спасибо за внимание. Следующая лекция будет в следующий понедельник. У нас будет си шарп первая лекция. На неделе я сделаю расписание и опубликую в телеграмм. Будут вопросы – пишите в телеграмм. Добро пожаловать на курс. Удачи! Успехов!</p> </article>','<article class="article"> <div id="link-to-dsr2023net" class="btn-back">назад</div> <h1>2023-10-09 Lecture #2 C# типы данных</h1> </article> <article class="article"> <p>Лекцию читает Екатерина</p> <p>Меня зовут Екатерина. Я буду вам читать лекции по языку C#. В нашем курсе их предусмотрено 2 штуки. Сегодня будет первая лекция. В этой лекции мы в основном будем обсуждать основные конструкции языка, типы, как с ними можно работать, для чего они нужны. Иногда что лучше использовать, что не надо использовать. Преимущества и недостатки. Основная информация для этих лекций была взята из книги Джеффри Рихтера .net by c# CLR. (2013 Рихтер - CLR via C# (4е).pdf) </p> <p>Вы можете с ней ознакомиться, она очень большая и я не рекомендую начинать с нее изучение языка. Для начинающих я рекомендую почитать документацию Microsoft. Может быть что-то попроще, но не с этой книги. Если вы хотите углубиться, понять как на самом деле устроена платформа дотнет, что такое IL код, что такое garbage collector и т.д. нужно почитать эту книгу. Лекции у нас будут этому посвящены, но чуть позже. Сегодня мы будем разговаривать, в основном, про язык C#.</p> </article> <article class="article"> <h3>О чем будет эта лекция</h3> <p>- Основные сведения о типах <br>- Методы, параметры, свойства <br>- Делегаты и события <br>- Обобщения <br>- Интерфейсы и абстрактные классы</p> <p>Сегодня мы поговорим о типах, какие типы существуют в языке C# на платформе дотнет. Какие существуют члены типов, методы, параметры, свойства. Что такое делегаты и события. Поговорим немного об обобщениях и в конце обсудим интерфейсы, абстрактные классы, в чем различие, что лучше использовать.</p> </article> <article class="article"> <h2>1. Основные сведения о типах</h2> <h3>Классификация типов</h3> <p>- ссылочный тип (reference type) <br>- тип значения (value type) <br>В стеке (stack) хранятся типы значения (value types) и указатели на ссылочные типы (pointers to the reference type) <br>В куче (heap) хранятся ссылочные типы (reference types) </p> <p>Я надеюсь, что здесь не все новички, а люди знакомые с языком C#. Напишите, кто уже что-то писал на C#. Может что-то в университете, консольные приложения. Чтобы я понимала сколько тут новичков, сколько старичков. Для одних надо пояснить некоторые моменты, для других напомнить.</p> <p>На платформе дотнет существует два типа данных – ссылочные типы и типы значения. Что их, в основном, отличает друг от друга. Ссылочный тип хранятся в куче (Heap), а типы значения хранятся в стеке (Stack). То есть, когда мы создаем переменную типа значения int, то в стек будет записана переменная с этим значением. int равный трем будет лежать в стеке так как он есть. Если мы создаем ссылочный тип, например, экземпляр класса, то в стек будет записана переменная со значением адреса на кучу, в которой размещен экземпляр. Я думаю, что это основа основ.</p> <h2>Иерархия типов</h2> <p>Несмотря на это, базовым типом для всех типов в языке является тип Object. Поэтому все стринги, массивы, классы, которые вы объявляете в программе будут неявно наследовать этот тип. Вы можете явно его унаследовать, но это необязательно. Типы значения тоже наследуют тип Object неявным образом. Через тип System.ValueType. <code> System.Object - System.ValueType - System.Int32 <br>System.Object - System.ValueType - System.Boolean <br>System.Object - System.ValueType - System.Enum - All enums </code> <code> System.Object - System.String <br>System.Object - System.Array </code> Это сделано чтобы любой тип в вашей программе имел минимальный набор методов, например ToString, GetHashCode, Equals.</p> <h3>Приведение и преобразование типов</h3> <h3>- Неявное преобразование</h3> <p>Преобразования из меньших в большие целочисленные типы и преобразования из производных классов в базовые классы <code>// Derived class to base class <br>Derived d = new Derived(); <br>Base b = d; <br> <br>// 32-bit int to 64-bit long <br>Int num = 2147483647; <br>Long bigNum = num;</code> </p> <h3>- Явное преобразование (приведение)</h3> <p>Способ явно указать компилятору, что необходимо выполнить преобразование и что вам известно, что может произойти потеря данных или приведение может завершиться сбоем во время выполнения. <code>Double x = 1234.7; <br>Int a; <br>a = (int)x;</code> </p> <p>Так как у нас все типы наследуются, и мы можем их друг другу присваивать, существует механизм приведения и преобразования. Существует неявное преобразование и явное преобразование (приведение).</p> <p>Неявное преобразование работает при преобразовании производных классов в базовые классы. Это когда мы переменную типа наследника присваиваем в переменную базового класса.</p> <p>Тоже самое работает для значимых системных типов. Например int и long. Если int занимает меньше памяти 32 бита, то мы можем его без потери данных засунуть в long, который занимает 64 бита. Это можно сделать неявно, ничего не говоря компилятору. Компилятор сам все сделает безопасным способом и все будет хорошо.</p> <p>Но еще существует явное преобразование, оно называется приведение типов. Оно работает когда мы хотим double засунуть в int, мы должны компилятору явно сказать, что мы знаем о возможной потере данных. Мы явно указываем компилятору какой тип мы хотим видеть. Так можно делать со значимыми типами и с сылочными типами. Но даже если компилятор не заругается, в рантайме можно получить исключение invalid cast exception и все может рухнуть.</p> <h3>- Пользовательские преобразования</h3> <p>Преобразования выполняются специальными методами, которые можно определить для включения явных и неявных преобразований. <code>public static implicit operator byte(MyClass d) => d.digit; <br>public static explicit operator MyClass(byte b) => new MyClass(b);</code> </p> <h3>- Преобразования с использованием вспомогательных классов</h3> <p>System.Convert <br>Int32.Parse, Double.Parse <br>и т.д. </p> <p>Существуют еще пользовательские преобразования. Это операторы явных и неявных преобразований, которые вы описываете в своем классе. Например, тип MyClass приводим к типу byte неявным образом. И явным образом приводим тип byte к типу MyClass. Мы подробно не будем останавливаться на этих оперетарах. Просто знайте что они есть. Если хотите, побольше прочитайте о них. На моей практике еще не было случаев когда эти преобразования были нужны. Обычно используют вспомогательные классы - System.Convert, Int.Parse, Double.Parse и другие. Существует большое количество библиотек, которые поддерживают разные преобразования. Стоит только что-нибудь погуглить и все найдете.</p> <p>Таким образом, мы можем тип наследника всегда привести к базовому типу. И мы знаем, что значимый тип наследуется от типа Object. Значит мы тип можем привести к типу Object. Когда мы приводим значимый тип к типу Object то происходит процесс называемый Упаковка.</p> <h3>Упаковка и распаковка (boxing & unboxing)</h3> <h3>Упаковка значимых типов в ссылочные:</h3> <p>1. В управляемой куче выделяется память – длина значимого типа плюс специальные переменные. <br>2. Поля значимого типа копируются в выделенную память <br>3. Возвращается адрес объекта <code>int i = 123; // i – value type <br>object o = I; // boxing <br>int j = (int)o; // unboxing</code> </p> <p>В чем заключается этот процесс. Давайте посмотрим на пример. У нас есть переменная типа int. Мы ее создали, инициализировали и потом засунулимв переменную типа object. В этот момент происходит процесс упаковки. Выделяется область памяти в куче (Heap), где хранятся значения ссылочных типов. Туда переносим значение значимого типа. Возвращаем в переменную адрес на эту область памяти в куче. И эта переменная будет себя вести как ссылочный тип.</p> <p>Unboxing это обратная операция упаковки, когда мы хотим обратно получить значимый тип и снова с ним работать как с интежером. А не постоянно натыкаться на проблемы, что это объект и мы не можем складывать. Мы хотим дальше с ним работать как с интом. Нам надо его распаковать. Надо сделать явным образом приведение. И у нас в переменной j будет снова тип значения как он и был в переменной i изначально. Я надеюсь здесь все понятно.</p> <p>Это не самый быстрый процесс. Это нагружает работу с памятью и процессор. Рекомендуется таких преобразований не делать. Механизм языка позволяет это делать по-другому. Работать со значимыми типами и реализовывать для них такие структуры чтобы можно было с ними работать как со значимыми и как с сылочными типами. Так лучше не делать, но если вы это увидите, то знайте что происходит этот процесс.</p> <h3>2. Из чего состоит тип</h3> <h3>Члены типа</h3> <pre>\n    public class Dog\n    {\n      // Const\n      private const string BarkingSound = "woof";\n\n      // Field\n      private string _name;\n\n      // Property\n      public string Name\n      {\n        get\n        {\n          return _name;\n        }\n        set\n        {\n          _name = value;\n        }\n      }\n\n      // Auto-implemented properties for trivial get and set\n      public uint Age { get; set; }\n\n      // Static constructor is called at most one time, before any\n      // instance constructor is invoked or member is accessed.\n      static Dog() { }\n\n      // Constructor without parameters\n      public dog() {}\n\n      public string Bark()\n      {\n        return $"{BackingSound}-{BackingSound}";\n      }\n\n      // Overloaded operator ==\n      public static bool operator ==(Dog obj1, Dog obj2) {}\n\n      // Overloaded operator !=\n      public static bool operator !=(Dog obj1, Dog obj2) {}\n\n      // Implicit conversion operator\n      public static implicit operator Dog(Animal animal) {}\n\n      // Explicit conversion operator\n      public static explicit operator Dog(Animal animal) {}\n\n      // Event\n      public event Action DogWhining;\n\n      // Nested type\n      public enum Breed\n      {\n        Labrador,\n        Beagle,\n        Corgi\n      }\n    }\n  </pre> <p>Рассмотрим на примере класса Dog, который я создала. Подробнее мы будем обсуждать чуть позже в нашей лекции. Пока давайте ознакомимся с конструкциями, которые у него есть. У него есть следующие члены. У него есть константа - это поле времени компиляции которая будет подставлена в нужном месте. Здесь я создала стринговую константу "woof" как будет собачка говорить. Дальше я создала поле name. Обернула его в свойство. Вся эта конструкция может быть заменена на тривиальное автосгенерированное проперти { get; set; }. Мы это обсудим попозже.</p> <p>Дальше у нас есть конструкторы типов. Они помечены ключевым словом static. И конструкторы экземпляров. Их может быть сколько угодно. Они могут быть с параметрами или без, public или private. Это тоже мы обсудим. Может быть какие-то методы для работы с нашим классом. Например, собачка умеет гавкать в методе Bark. Дальше могут быть переопределены операторы. Например, оператор равенства == и оператор неравенства !=. Я здесь не написала никакой реализации данного метода. Просто чтобы была видна сигнатура.</p> <p>Дальше есть операторы явного преобразования. Я из животного хочу создавать собачку. Здесь какая-то логика должна быть. Но я поленилась и ее не добавила. И есть событие, которое помечается ключевым словом event. Оно имеет тип делегата. Событие того, что собачка заскулила.</p> <p>Любой класс может содержать вложенные типы. Например, у меня тип enum перечисление. Здесь три собачки - лабрадор, бигль и корги. Давайте посмотрим подробнее на каждый из этих компонентов класса. Но в начале мы поговорим, конечно же, про видимость. У нас класс, поле, свойство помечены модификатором. На самом деле есть модификаторы по умолчанию. Например у класса это internal. У поля и свойства это private. Но хорошая практика это везде писать модификатор. Чтобы не заставлять других разработчиков и себя самого через какое-то время вспоминать а какой же здесь модификатор по умолчанию. И код выглядит более лаконично и аккуратно.</p> </article> <article class="article"> <h3>Видимость</h3> <h3>Модификатор доступа</h3> <p>public – неограниченный доступ <br>protected – доступен из класса или типам, которые являются производными от содержащего класса <br>internal – доступен в текущей сборке <br>protected internal – доступен в текущей сборке и типам, которые являются производными от содержащего класса <br>private - доступен только содержащему классу <br>private protected – доступен содержащему классу и производному классу той же сборки C# 7.2 </p> <p>Давайте быстренько по ним пройдемся.</p> <p>Public это неограниченный достуа. Все что вы пометили public будет видно везде, во всех сборках, во всех классах. Его можно достать, посмотреть, изменить.</p> <p>Protected доступен только внутри класса, который его объявил, и внутри классов наследников. Дальше мы не можем никак его посмотреть.</p> <p>Internal доступен в текущей сборке. Если вы достали dll, подгрузили или взяли из другого проекта, и засунули к себе в приложение, то все что там помечено internal не будет доступно в вашем классе. Потому что он из другой сборки.</p> <p>Protected internal это небольшое расширение видимости internal. Доступен в текущей сборке и в производных типах от данного класса.</p> <p>Private доступен только из содержащего его класса.</p> <p>Private protected расширяет видимость private. Доступен также производному классу той же сборки. Производный класс из другой сборки его уже не видит.</p> <h3>Статические классы</h3> <p>Статический класс – удобный контейнер для группировки логически связанных членов (методов, полей, свойств или событий), которые не требуют получения или установки каких-либо внутренних полей экземпляра.</p> <pre>\n  public static class Math\n  {\n    public static double Abs(double value)\n    {\n      // calculating\n    }\n\n    public static double Min(double val1, double val2)\n    {\n      // calculating\n    }\n\n    //etc.\n  }\n\n  Math.Min(15/16, 12/13);\n  </pre> <pre>\n  public static class ValidationMessages\n  {\n    public const string EmailPhoneRequired = "Email or phone are required.";\n    public const string UserIdRequired = "User id is required.";\n    public const string UsernameRequired = "Username is required.";\n    public const string PhoneRequired = "Phone is required.";\n    public const string InvalidEmail = "Email is incorrect.";\n  }\n\n  ToastService.Show(ValidationMessages.UsernameRequired);\n  </pre> <p>Статические классы это те же классы, помеченые ключевым словом static. Все члены статического класса тоже должны быть помечены ключевым словом static. Зачем же такие классы создавать. Данные классы не могут содержать конструкторов экземпляра. Потому что они в принципе не могут иметь экземпляры. Они могут иметь конструкторы типов, которые инициализируют значения статических членов класса. Вы не знаете когда ваш класс будет создан, это регулируется непосредственно компилятором. Но мы знаем точно и наверняка, что он будет создан до того как мы обратимся к любому его члену. Время его жизни равно жизни приложения. Как работать с этим классом.</p> <p>Например, все знают класс Math для работы с математическими операциями. Там много методов, например Abs, Min. Мы не используем слово new, мы не создаем новый экземпляр класса. Мы просто пишем имя класса, точка, имя метода, круглые скобки с параметрами, например Math.Min(int a, int b).</p> <p>Или более практический пример. В вашем приложении вы хотите делать валидацию. И у вас много формочек, где пользователь вводит имя, телефон, емейл... Вы написали кучу правил валидации. И хотите отображать сообщение а что конкретно произошло не так. Когда пользователь, например, не ввел имя. Вы хотите показать "Username is required". Вы везде инлайново повтыкали эти строки. Потом вы поняли что это повторение кода. Тогда мы создаем статический класс ValidationMessages и помещаем в него все сообщения, связанные с валидацией. Тогда в нашем сервисе просто выводим поле статического класса вместо сообщения. ToastService.Show(ValidationMessages.UsernameRequired). Нам компилятор подскажет что там должно быть чтобы мы не ошиблись.</p> <p>Главное использование статических классов - для того чтобы сгруппировать связанные члены (методы, поля, свойства, события). И чтобы их было удобно доставать. Состояния здесь нет, экземпляров нет. Поэтому мы их используем через имя класса.</p> <h3>Статические классы</h3> <p>- Имеет модификатор static <br>- Содержит только статические члены <br>- Невозможно создать экземпляр <br>- Не может содержать конструкторы экземпляров <br>- Не может быть унаследован <br>- Не может наследовать ни один класс или интерфейс, кроме Object</p> <h3>Вопрос: Какая разница между private protected и protected</h3> <p>Private доступен только данному классу. Например вы создали класс Dog. Его свойство private name доступно только методам, свойству, конструктору данного класса. Поле private доступно только методам, операторам, свойствам, конструктору данного класса. То есть вы не сможете написать new Dog, засунуть его в переменную и попытаться достать поле name. Потому что его оттуда уже не видно. Поэтому мы пишем слово private, когда не хотим показывать вызывающему коду поле private name. Private protected открывает это поле для всех производных класса Dog в текущей сборке.</p> <h3>Вопрос: Почему свойства объявленные как const в классе static мы не помечаем как sttic?</h3> <p>Потому что константы по умолчанию уже static. В данном случае это синонимы. Как const static.</p> </article> <article class="article"> <h3>3. Константы и поля</h3> <p>Константа (const) – это идентификатор, значение которого никогда не меняется <br>Поле – это член данных, который хранит экземпляр значимого типа или ссылку на ссылочный тип. </p> <pre>\n  public class VeryUsefulClass\n  {\n    private const int ConstValue = 1;\n    private readonly int _fieldValue;\n\n    public VeryUsefulClass(int fieldValue)\n    {\n      _fieldValue = dieldValue;\n    }\n  }\n  </pre> <p> Константу надо понимать как константу компиляции. Это значит, что в момент когда скомпилировался код, везде вместо имени константы будет вставлено значение константы. Это немножко оптимизирует время выполнения кода. Потому что программа не будет каждый раз искать по имени константы ее значение где-то там в памяти. </p> <p> Поле это член данных, который зависит от типа. Может содержать значимый тип, ссылочный тип. Инициализируется во время выполнения. Константу никак нельзя инициализировать во время выполнения - она не изменяема. Поле мы можем инициализировать во время выполнения и потом изменить. </p> <p> Чем отличается константа и поле readonly? Всем, кроме того что их нельзя изменить по коду. Константа это константа компиляции. Readonly это константа времени выполнения. Readonly поле может быть инициализировано только в конструкторе и больше нигде. И когда компилятор будет натыкаться на это поле, он будет ходить и спрашивать "а чему оно равно?" в памяти. А когда компилятор будет сталкиваться с константой, он будет видеть сразу ее значение, а не имя. </p> <p> Const (константа компиляции) и readonly (константа времени выполнения) нельзя изменить по коду. Const должна быть инициализирована во время объявления. Readonly можно объявить, а потом инициализировать в конструкторе. </p> </article> <article class="article"> <h2>4. Методы</h2> <h2>Конструкторы</h2> <p>Конструкторы – это специальные методы, позволяющие корректно инициализировать новый экземпляр типа.</p> <p>Статические конструкторы (конструкторы типов) – это инициализаторы типа. Используются для инициализации любых статических данных или для выполнения определенного действия, которое необходимо выполнить только один раз.</p> <pre>\n  // Static constructor is called at most one time, before any\n  // instance constructor is invoked or member is accessed.\n  static Dog() {}\n\n  // Constructor without parameters\n  public Dog() {}\n  </pre> <p>Конструкторы это тоже методы. Методы, которые инициализируют экземпляры. Когда мы пишем myClass = new, то создаем конструктор, который будет инициализировать экземпляр.</p> <p>Статические конструкторы это методы, которые инициализируют типы. Служат, в основном, для инициализации статических полей. Это редкое явления, но оно есть. Мы не знаем когда будет вызван статический конструктор, но он обязательно будет вызван до того как мы обратимся к статическим членам. И мы не можем его контролировать. У статического конструктора нельзя поставить модификатор public и его нельзя вызвать извне. И он не может иметь параметры, потому что вызывает средой выполнения. </p> <h2>Виртуальные методы</h2> <pre>\n  public class Human\n  {\n    public void Introduce()\n    {\n      Console.WriteLine("I\'m a human!");\n    }\n  }\n\n  public class Student : Human\n  {\n    public void Introduce()\n    {\n      Console.WriteLine("I\'m a student!");\n    }\n  }\n\n  Human human = new Student();\n  human.Introduce(); // I\'m a human!\n  </pre> <h2>Виртуальные методы</h2> <p>Виртуальные члены класса могут быть переопределены в классе потомке <br>За счет виртуальных членов реализуется свойство ООП – полиморфизм </p> <pre>\n  public class Human\n  {\n    public virtual void Introduce()\n    {\n      Console.WriteLine("I\'m a human!");\n    }\n  }\n\n  public class Student : Human\n  {\n    public override void Introduce()\n    {\n      Console.WriteLine("I\'m a student!");\n    }\n  }\n\n  Human human = new Student();\n  human.Introduce(); // I\'m a student!\n  </pre> <pre>\n  public class BadlyConstructedType\n  {\n    protected bool IsReady = false;\n\n    public BadlyConstructedType()\n    {\n      Console.WriteLine("Calling base ctor.");\n      DoSomething();\n    }\n\n    // This will be overridden in the derived type.\n    public virtual void DoSomething()\n    {\n      Console.WriteLine("Base DoSomething");\n    }\n  }\n  </pre> <pre>\n  public class DerivedType : BadlyConstructedType\n  {\n    public DerivedType()\n    {\n      Console.WriteLine("Calling derived ctor.");\n      IsReady = true;\n    }\n\n    public override void DoSomething()\n    {\n      Console.WriteLine("Derived DoSomething is called. Am I ready? {0}", IsReady);\n    }\n  }\n\n  DerivedType derivedInstance = new DerivedType();\n  </pre> <p> С помощью ключевого слова virtual в базовом классе помечается метод, который может быть переопределен в классе наследнике. С помощью ключевого слова override в классе наследнике помечаем метод, который мы в нем переопределяем. Это важный механизм языка си шарп, который позволяет реализовать свойство ООП - полиморфизм. Это когда класс наследник ведет себя по другому чем класс родитель. </p> <p>Нельзя вызывать виртуальные члены в конструкторе. Потому что есть порядок вывполнения конструкторов при инициализации объектов. Когда мы вызываем конструктор наследника, то вначале вызовется конструктор базового класса и только потом конструктор наследника. Здесь неявным образом вызывается конструктор базового класса.</p> </article> <article class="article"> <h2>Методы расширений (extensions)</h2> <pre>\n  public class Student\n  {\n    public int Id { get; set; }\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n  }\n\n  var student = new Student()\n  {\n    Id = "1",\n    FirstName = "Michael",\n    LastName = "Scott"\n  };\n\n  var fullName = student.FullName(); //returns Michael Scott\n  </pre> <pre>\n    public class Student\n    {\n      public int Id { get; set; }\n      public string FirstName { get; set; }\n      public string LastName { get; set; }\n\n      public string FullName() => $"{FirstName} {LastName}";\n    }  \n  </pre> <pre>\n  public class Student\n  {\n    public int Id { get; set; }\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n  }\n\n  public static class StudentExtensions\n  {\n    public static string FullNema(this Student student) => $"{FirstName} {LastName}";\n  } \n  </pre> <p> Важный механизм языка си шарп - методы расширений. Представим что у нас есть класс public class Student. И у него есть свойства public int Id, public string FirstName, public string LastName. И пусть нам нужно определить метод public string FullName который конкатенирует FirstName и LastName. Но что, если нам не хочется изменять наш готовый класс Student? Для этого используют механизм расширений. Мы объявляем статический класс public static class StudentExtensions и в этом классе объявляем статический метод, который делает то что нам нужно. public static string FullName(this Student student) => $"{FirstName} {LastName}"; И теперь мы можем создать экземпляр класса var student = new Student() и вызвать у него этот метод var fullname = student.FullName(); </p> <p> Методы расширений могут иметь не только один параметр, помеченый ключевым словом this. Здесь можно много разных параметров передавать. Главное, что это должен мыть статический метод в статическом класси и первым параметром передается экземпляр того класса, для которого пишется этот метод расширения. </p> <p> Мы постараемся вам все дать за две лекции. Цель лекций дать вам больше практических знаний, чем углубляться во все сложности языка и конструкций. Все что будет рассказано на этих двух лекциях это больше практическое. Если кто-то уже писал на дотнете, то вы уже сталкивались с методами расширения. Те же linq это методы расширений, которые лежат в отдельном статическом классе. </p> </article> <article class="article"> <h2>5. Параметры</h2> <h2>Параметры методов</h2> <p>По умолчанию параметры передаются по значению. <br>- Для типов значений – копируется реальное значение в новую переменную <br>- Для ссылочных типов – копируется ссылка в новую переменную <br>Ключевые слова out и ref позволяют передавать объекты по ссылке. </p> <p> Поговорим про параметры методов. Все параметры передаются в методы по-умолчанию по значению. Для типов значения, значение будет скопировано в новую переменную. Для ссылочных типов будет скопирована ссылка в новую переменную. Чтобы передать параметры по ссылке нужно использовать ключевые слова out и ref. Первый параметр передается по значению, второй - по ссылке. При этом первая переменная изменится только внутри этого метода. Первая переменная копируется и изменится значение только в скопированной переменной. А вторая переменная изменится и внутри метода и снаружи. У второй переменной скопируется адрес на ее значение. Изменится значение в адресе, на который указывает и скопированная переменная и переданная переменная. </p> <p>Посмотрим как это работает. Пусть у нас есть метод, который увеличивает два числа на 1.</p> <pre>\n  public static void Increase(int a, ref int b)\n  {\n    a++;\n    b++;\n  }\n  \n  public static void Check()\n  {\n    int a = 10;\n    int b = 20;\n\n    Increase(a, ref b)\n    Console.WriteLine($"a = {a}, b = {b}"); // a = 10, b = 21\n  }\n  </pre> <pre>\n  public static void Change(Student a, Student b)\n  {\n    a.FirstName = "New Anna";\n    b = new Student()\n    {\n      firstName = \'new John\'\n    };\n  }\n\n  public static void Check()\n  {\n    Student a = new Student()\n    {\n      FirstName = "Anna"\n    };\n    Student b = new Student()\n    {\n      FirstName = "John"\n    };\n\n    Change(a, ref b);\n    Console.WriteLine($"a = {a.FirstName}, b = {b.FirstName}");\n    // a = New Anna, b = John\n  }\n  </pre> <p> Нужно ли для ссылочных переменных ключевое слово ref? Если мы передадим в метод два объекта типа Student и попытаемся изменить им имя. То ссылочные типы скопируются в новые переменный. В первой переменной мы поменяем значение и оно также изменится для переданной переменной. Во вторую переменную мы запишем новый объект типа Student и эта переменная будет уже ссылваться на другую область памяти в куче, где лежит этот новый объект. А вторая переданная переменная никак не изменится. Но если мы хотим чтобы новый экземпляр записался в переданную переменную, то надо ее передавать в метод с ключевым словом ref. То есть для изменения свойств объекта можно передавать без слова ref. Но если надо изменить весь объект целиком, то нужно слово ref. </p> <p>Вопрос: Какое отличие ref от out? Переменная передаваемая через ref должна быть инициализирована до передачи в метод. Переменная передаваемая через out должна быть инициализирована перед выходом из метода.</p> </article> <article class="article"> <h2>6. Свойства</h2> <pre>\n  // Field\n  private string _name;\n\n  // Property\n  public string Name\n  {\n    get\n    {\n      return _name;\n    }\n    set\n    {\n      _name = value;\n    }\n  }\n\n  //Auto-implemented properties for trivial get and set\n  publicunit Age { get; set; }\n  </pre> <p>Свойства помогают реализовать механизм ООП - инкапсуляция. Мы можем регулировать доступ к полю. Мы можем создать приватное свойство и установить к нему геттер и сеттер для доступа к нему. Например у нас есть закрытое свойство private string _name. И есть свойство public string Name с геттером, который возвращает значение этого свойства и сеттером, который устанавливает значение этого свойства. Из вызывающего кода мы не можем обратиться к молю _name. Но можем обратиться к свойству Name. В методе set можно установить проверку что имя не пустое.</p> <p>Все свойства это пара методов public uint Age { get; set; }. При этом будет сгенерировано закрытое поле и два метода для работы с ним. get и set могут иметь различные модификторы доступа. Мы можем написать Age { get; protected set; }. В этом случае get будет доступен всем, а set будет доступен только классам наследникам.</p> <h2>Особенности:</h2> <p>- в отличие от полей, можно регулировать доступ отдельно на чтение, отдельно на запись. <br>- свойства, по сути методы, могут вызывать исключения <br>- свойства нельзя передать в метод с ключевым словом ref или out. </p> </article> <article class="article"> <h2>7. Делегаты</h2> <p>Делегат – это тип, представляющий из себя цепочку ссылок на методы с определенными входными параметрами и типом возвращаемого значения</p> <pre>\n  public delegate int Counter(int x, int y);\n\n  public int Sum(int a, int b)\n  {\n    return a + b;\n  }\n\n  public int Subtraction(int a, int b)\n  {\n    return a - b;\n  }\n\n  public int Multiplication(int a, int b)\n  {\n    return a * b;\n  }\n  </pre> <p>Делегат - это сигнатура метода, которая позволяет использовать другой метод вместо него. Когда создаем что-то с ключевым словом delegate, то компилятор это разворачивает в класс, экземпляр которого будет содержать в себе цепочку. Когда мы пишем delegate, то мы создаем новый тип. И этот тип хранит в себе ссылки на методы.</p> </article> <article class="article"> <h2>8. События (Events)</h2> <p>События – вид членов, которые можно определить в типе. Если в типе определено событие, то этот тип (или экземпляр) может уведомлять другие объекты о некоторых особых ситуациях, которые могут случиться.</p> <p> Важной вещью являются события. Они сильно связаны с делегатами. Но это разные вещи. Событие это тоже член какого-то типа. И с помощью него можно отслеживать какие-то события, которые возникли в типе другими типами и как-то на них реагировать. Например, есть тип Publisher у которого есть события. На эти события могут подписаться классы, которые видят данный класс и эти события. Что значит подписаться? Это значит что они говорят, что мы хотим слушать когда это событие возникнет и как-то на него среагировать. Подписчик 1 подписывается на событие своим обработчиком, а подписчик 2 подписывается уже своим обработчиком на это же событие. Если в какой-то момент это событие вдруг происходит, все подписчики будут об этом уведомлены. И в этот момент отработает каждый обработчик этого события. </p> </article> <article class="article"> <h2>9. Обобщения (Generic)</h2> <p>Обобщения – это еще один механизм, позволяющий многократно использовать универсальный код.</p> <pre>\n  public static void GetInfo(object value)\n  {\n    Console.WriteLine(value.ToString());\n  }\n  </pre> <pre>\n  public static void GetInfo<T>(T value)\n  {\n    Console.WriteLine(value.ToString());\n  }\n  </T></pre> <p>Обобщения - это важный механизм, с которым вы будете много работать дальше. Особенно на практике в ходе данного курса. Иногда нужно написать метод, который работает не только с одним типом входных данных. Мы хотим чтобы он работал со всеми типами.</p> <h2>Ограничения обобщений</h2> <pre>\n  public class Human\n  {\n    protected string Name { get; set; }\n    public virtual void Introduce()\n    {\n      Console.WriteLine($"Hi! I\'m a human, my name is {Name}!");\n    }\n  }\n\n  public class Student : Human\n  {\n    public override void Introduce()\n    {\n      Console.WriteLine($"Hi! I\'m a student, my name is {Name}!");\n    }\n  }\n\n  public class Meeting<T>\n    where T: Human\n  {\n    private readonly T _firstHuman;\n    private readonly T _secondHuman;\n\n    public Meeting(T first, T second)\n    {\n      _firstHuman = first;\n      _secondHuman = second;\n    }\n\n    public void Introducing()\n    {\n      _firstHuman.Introduce();\n      _secondHuman.Introduce();\n    }\n  }\n\n  var meeting = new Meeting<Human>(new Human(){ Name = "John" }, new Student(){ Name = "Mike" });\n  meeting.Introducing();\n  </Human></T></pre> <p>Ограничения обобщений нужны для того чтобы класс работал только с одним классом и его наследником, а не со всеми типами сразу. Пусть у нас есть класс public class Human. И от него есть производный класс наследник public class Student: Human. Тогда с помощью ограничения обобщений мы можем написать класс public class Meeting<T> where T: Human, который работает только с классом Human и его наследниками.</T></p> </article> <article class="article"> <h2>10. Интерфейсы и абстрактные классы</h2> <p>Интерфейс – это именованный набор сигнатур методов. Если какой-то класс имплементирует интерфейс, он обязан реализовать все описанные с нем методы.</p> <h2>Для чего нужны интерфейсы:</h2> <p>- Единый контракт <br>- Уменьшение связности кода (SOLID) <br>- Множественное наследование </p> <p>Интерфейс это какой-то контракт, который показывает каким образом должен вести себя класс, который его реализует. И класс, который его реализует, обязательно должен реализовать все методы, объявленные в этом интерфейсе. Синтаксически наследование интерфейсов выглядит так же как и наследование классов. Ваши кусочки кода не должны зависеть друг от друга, а должны зависеть от абстарций. Интерфейс это абстракция, поэтому он реализует приницип SOLID. Это когда при изменении реализации одного кода менялся другой код. Си шарп не позволяет наследоваться от нескольких классов, но позволяет реализовывать несколько интерфейсов.</p> <p>Зачем нужно уменьшать связность кода и реализовывать несколько интерфейсов? Пусть мы написали игру и в ней есть персонаж Троль и арена, на которой троли будут биться. Арена это класс, который при инициализации принимает двух троллей, которые будут между собой биться. Такая арена будет только для тролей. Но вот в игру добавили еще персонажей - рыцарей. И теперь арену нужно переписывать, чтобы на ней могли драться и рыцари. Получился класс, который сильно привязан к реализации персонажа. Чтобы этого не было нужно создать интерфейс Персонаж, который описывает что умеет делать троль, рыцарь. И сделать троля и рыцаря реализацией этого интерфейса. Тогда и арена может работать с интерфейсом персонажа, а не с его реализацией - тролем, рыцарем. Интерфейс позволяет сделать код гибким и расширяемым.</p> <h2>Абстрактный класс</h2> <p>Абстрактный класс – это класс, в котором есть хотя бы один абстрактный член (сигнатура которого объявлена, а реализация не определена)</p> <pre>\n  abstract class Education\n  {\n    public abstract void Enter();\n    public abstract void Study();\n    public virtual void PassExams()\n    {\n      Console.WriteLine("Сдаем выпускные экзамены");\n    }\n  }\n\n  class school : Education\n  {\n    public override void Enter()\n    {\n      Console.WriteLine("Идем в первый класс");\n    }\n\n    public override void Study()\n    {\n      Console.WriteLine("Посещаем уроки, делаем домашние задания");\n    }\n  }\n\n  class University : Education\n  {\n    public override void Enter()\n    {\n      Console.WriteLine("Сдаем вступительные экзамены и поступаем в ВУЗ");\n    }\n\n    public override void Study()\n    {\n      Console.WriteLine("Посещаем лекции");\n      Console.WriteLine("Проходим практику");\n    }\n\n    public override void PassExams()\n    {\n      Console.WriteLine("Сдаем экзамен по специальности");\n    }\n  }\n  </pre> <p>Абстрактный класс не может иметь экземпляра. От абстрактного класса должен унаследоваться другой класс и реализовать абстрактные методы.</p> <p>В классе наследнике мы обязаны реализовать абстрактные методы класса родителя. И если захотим, то можем переопределить виртуальные методы. Если мы их не переопределим, то они будут использованы из абстрактного класса. Абстрактный класс нужен когда уже есть базовая логика, которую мы хотим расширять. Например класс abstract class Educaion с абстрактными методами public abstract void Enter(); и public abstract void Study(); и виртуальным методом public virtual void PassExams() {}. Во всех классах наследниках сдают выпускные экзамены, а варианты как можно поступить и обучаться будут разные.</p> <h2>Когда использовать абстрактные классы, а когда интерфейсы?</h2> <p>- Абстрактный класс используется когда есть система связанных типов, и требуется реализовать для них базовую функциональность, которую они будут использовать <br>- Интерфейсы же используются как описание некоторого перечня функций, присущих разрозненным объектам, каждый из которых реализует интерфейс по-своему. </p> </article> <article class="article"> <h2>Вопросы.</h2> <p>В следующей лекции мы будем разговаривать про более практические вещи, которые обязательно вам пригодятся на практике. Будем говорить про async, await. Будем говорить про асинхронное параллельное программирование. Про exception. Будут немного более сложные вещи, но более интересные и более практически важные.</p> <p>- Как событие работает в коде?</p> <p>- Событие может быть вызвано только в том классе, которое его объявило. Компилятор преобразует событие в закрытое поле с двумя методами Add и Remove. Add добавляет обработчик, Remove удаляет. Так как поле закрытое, то вызвать событие можно только из класса, в котором оно объявлено. В другом классе на него можно подписаться (начать его слушать).</p> <p>На следующей лекции мы будем обсуждать параллельное программирование. Но мы не будем углубляться в эту тему. Вам не придется самим выделять потоки и их дерижировать в своем приложении. Вам придется работать с тасками и с асинхронным кодом. Может быть обсудим что-то связанное с мониторами, локами, семафорами если хватит времени.</p> </article> ','<article class="article"> <div id="link-to-dsr2023net" class="btn-back">назад</div> <h1>2023-10-16 DSR .NET School 2023 Lecture #3 C# part 2</h1> </article> <article class="article"> <p>Лекцию читает Екатерина</p> <p>Мы можем начать. Кто опоздал посмотрит тогда в записи. Всем здравствуйте. Сегодня наша лекция будет посвящена также языку си шарп. Но в этот раз вещи будут еще более важные и более применимые на практике. Поговорим о коллекциях. Поговорим о LINQ для работы с коллекциями. Поговорим об исключениях, рефлексии, сериализации, многопоточности и асинхронности.</p> </article> <article class="article"> <h2>О чем будет эта лекция</h2> <p>1. Массивы и коллекции <br>2. LINQ <br>3. Исключения <br>4. Рефлексия <br>5. Сериализация <br>6. Многопоточность <br>7. Асинхронность </p> </article> <article class="article"> <h2>1. Массивы и коллекции</h2> <p>Начнем с массивов и коллекций. Все типы коллекций в языке си шарп наследуются от типа Object. И базовым интерфейсом для них является IEnumerable.</p> <p>Object - IEnumerable - ICollection - IList - System.Array</p> <p>Тип string тоже является коллекцией</p> <p>Object - IEnumerable - IEnumerable&lt;T&gt; - string</p> <p>Object - IEnumerable - IEnumerable&lt;T&gt; - ICollection&lt;T&gt; - IList&lt;T&gt;</p> <p>Object - IEnumerable - IEnumerable&lt;T&gt; - ICollection&lt;T&gt; - IDictionary&lt;TKey, TValue&gt;</p> <h2>Интерфейсы IEnumerable, ICollection, IList</h2> <p>IEnumerable&lt;T&gt; <br>- последовательный доступ <br>- только чтение</p> <p>ICollection&lt;T&gt; <br>- добавление, удаление, изменение</p> <p>IList&lt;T&gt; <br>- доступ по индексу</p> <pre>\n  public static void DoSomething(IEnumerable<int> list)\n  {\n    foreach (var element in list)\n    {\n      Console.WriteLine(element);\n    }\n  }\n\n  public static void DoSomething(ICollection<int> list)\n  {\n    list.Add(1);\n    list.Remove(1);\n  }\n\n  public static DoSomething(IList<int> list)\n  {\n    list[0] = 1;\n  }\n  </int></int></int></pre> <p>Давайте посмотрим по подробнее. Зачем их так много. Почему нельзя было использовать один. Каждый интерфейс является расширением другого интерфейса, который он наследует. Например, интерфейс IEnumerable предназначен для перебора коллекции методом foreach. Его расширением является интерфейс ICollection и он добавляет возможность добавления, удаления и изменения элементов. Его расширением является интерфейс IList и он предоставляет доступ по индексу.</p> <h2>Массивы</h2> <p>Массивы предоставляют собой особый механизм, позволяющий рассматривать отдельные элементы как единую коллекцию.</p> <pre>\n  // Одномерные массивы\n  int[] array1 = new int[5];\n  int[] array2 = { 1, 2, 3, 4, 5, 6 };\n  \n  // Многомерные массивы\n  int[,] array3 = new int[2, 3];\n  int[,] array4 = { {1, 2, 3}, {4,5,6} };\n  \n  // Вложенные массивы\n  int[][] array5 = new int[6][];\n  array5[0] = new int[4] {1, 2, 3, 4}\n  </pre> <p>Что такое массивы. Массивы бывают нескольких видов. Одномерные представлены в виде списка элементов. Если массивы хранятся в куче и хранят в себе элементы значащих типов, то эти элементы хранятся в куче как они есть. А если ссылочные элементы, то в элементах массива хранятся адреса на конкретные элементы в куче. Многомерные массивы это матрицы. Они имеют количество столбцов и строк. Вложенные массивы это массивы массивов. Где каждый элемент массива является другим массивом. Чем вложенный массив отличается от многомерного? Тем что вложенный массив может быть разноразмерный.</p> <h2>Массивы</h2> <p>Массивы являются ссылочным типом и располагаются в управляемой куче. Переменная массива хранит ссылку на расположение массива.</p> <p>Массивы значимых элементов хранят в куче непосредственно сами значения, а ссылочные - ссылки на элементы в куче.</p> <p>Все массивы являются наследниками типа System.Array и реализуют все его методы и свойства.</p> </article> <article class="article"> <h2>2. LINQ</h2> <p>LINQ - представляет собой простой и удобный язык запросов к источнику данных. В качества источника данных может выступать <br>- объект, реализующий интерфейс IEnumerable (например, стандартные коллекции, массивы) <br>- набор данных DataSet <br>- документ XML </p> <p>Принцип у LINQ один. Давайте рассмотрим его на примере списка целых чисел.</p> <h2>Использование LINQ</h2> <p>Пусть задан массив чисел. Требуется выбрать из него все числа делящиеся на 3 и отсортировать результат по убыванию.</p> <pre>\n  List&lt;int&gt; integers = new List&lt;int&gt;() { 1, 3, 9, 7, 3, 6, 2, 15 };\n  </pre> <pre>\n  Без LINQ\n\n  List&lt;int&gt; result = new List&lt;int&gt;();\n  foreach (var integer in integers) \n  {\n    if (integer % 3 == 0)\n      result.Add(integer);\n  }\n\n  result.Sort();\n  result.Reverse();\n  </pre> <pre>\n  Язык LINQ\n\n  var result = from integer in integers\n  where integer % 3 == 0\n  orderby integer descending\n  select integer;\n  </pre> <pre>\n  Методы расширений LINQ\n  var result = integers.Where(integer => integer % 3 ==0).OrderByDescending(integer => integer);\n  </pre> <p>LINQ представляет синтаксический сахар, который делает это быстрее и с более понятным кодом. С помощью ключевого слова where указываем фильтр для выбираемых элементов. С помощью ключевого слова orderby указываем что результат нужно отсортировать. Слово descending указывает на сортировку в обратном порядке. Ключевое слово select закрывает метод и выбирает тип элемента в возвращаемой коллекции.</p> <p>Существует и другой подход, который предоставляет библиотека LINQ. Мы также берем нашу коллекцию integers. И с помощью метода расширения Where, который на самом деле использует this IEnumerable, мы выбираем с помощью делегата наш фильтр (остаток от деления на три). Так как LINQ реализует паттерн builder, то после этого поставить точку и вызвать сразу другой метод. Метод Where возвращает IEnumerable и к нему можем применить уже другой метод OrderByDescending сортировка по убыванию.</p> <h2>Лямбда-выражения</h2> <p>Лямбда-выражение - это анонимная функция, которая может быть присвоена переменной делегата.</p> <pre>\n  public delegate int Counter(int x, int y);\n\n  public int Sum(int a, int b)\n  {\n    return a + b;\n  }\n\n  public int Subtraction(inta, int b)\n  {\n    return a - b;\n  }\n  public int Multiplication(int a, int b)\n  {\n    return a * b;\n  }\n\n  Counter counter = Sum;\n  counter += Subtraction;\n  counter += Multiplication;\n  </pre> <pre>\n  public delegate int Counter(int x, int y);\n\n  Counter counter = delegate(int i, int i1) { return i + i1; } //method Sum\n  counter += (i, i1) => i - i1; // method Subtraction\n  </pre> <h3>Методы расширений LINQ</h3> <pre>\n  var result = integers.Where(integer => integer % 3 == 0).OrderByDescending(integer => integer);\n  </pre> <p>Это полезная важная конструкция, которую мы опустили на прошлой лекции. Она непосредственно связана с делегатами. Анонимная функция создается инлайн в коде и сразу чему-то присваивается.</p> </article> <article class="article"> <h2>3. Исключения</h2> <p>Исключением называется ситуация, когда член типа не в состоянии решить возложенную на него задачу.</p> <p>Обработка исключений - это механизм, позволяющий восстановить состояние программы после возникновения ошибки</p> <p>Все исключения являются наследниками от типа System.Exception</p> <pre>\n  public bool TryDivideBy(double x, out double y)\n  {\n    try\n    {\n      y /= x; // DivideByZeroException\n      return true;\n    }\n    catch (DivideByZeroException ex)\n    {\n      Console.WriteLine($"DivideByZeroException {ex.Message}");\n      return false;\n    }\n    catch (Exception ex)\n    {\n      Console.WriteLine($"Exception {ex.Message}");\n      return false;\n    }\n    finally\n    {\n      Console.WriteLine("Finally");\n    }\n  }\n  </pre> <p>Выражение (например, деление), которое может вызвать ошибку (деление на ноль) поместим в блок try {}. И если в блоке try возникнет обшибка, то приложение не завершится с ошибкой, а эта ошибка будет обработана в следующем блоке catch {}. Может быть только один блок try {} и несколько блоков catch {}. В каждом блоке catch указываем тип ошибки, который он обрабатывает. Когда в блоке try возникает ошибка, то следующий блок catch пытается ее поймать. Если тип ошибки не совпадает с типом в блоке catch, то ошибка переходит к следующему блоку catch и т.д. В последнем блоке catch обычно указывают общий тип для всех ошибок. Получается, что если мы используем чужой код и не знаем какие он может выбросить ошибки, и если все блоки catch не поймали нужную ошибку, то последний блок обязательно выполнится, поскольку относится к базовому типу ошибки Exception.</p> <p>После блоков try и catch идет блок finally, который будет вызван в любом случае самым последним. Это нужно, например, когда в блоке try вы открываете файл для чтения и возникла ошибка. В блоке catch вы обработали эту ошибку, но файл так и остался открыт для чтения. Как раз в блоке finally надо закрыть файл.</p> <h2>Исключения</h2> <p>Вместе с блоком try должен быть хотя бы один блок catch и/или блок finally. <br>Типы ошибок должны идти сверху вниз от наиболее специализированного к наиболее общему. <br>Код блока finally выполняется всегда, независимо от того, было исключение или нет. <br>Блок finally нужен для очистки после выполнения операции, например, для закрытия файла. </p> <p>Допустимы конструкции try - finally, try - catch. То есть может не быть catch. А может не быть finally. Но чтобы и того и другого не было - так нельзя. Первый блок catch будет пытаться обработать ошибку которую мы ждем. Если это будет другая ошибка, то она будет обработана в последнем блоке catch для общих ошибок.</p> <h2>StackTrace</h2> <pre>\n  static void Main(string[] args)\n  {\n    try\n    {\n      Method3();\n    }\n    catch (Exception ex)\n    {\n      Console.WriteLine(ex.ToString());\n    }\n  }\n\n  static void Method3()\n  {\n    Method2();\n  }\n\n  static void Method2()\n  {\n    Method1();\n  }\n\n  static void Method1()\n  {\n    throw new Exception("There is a problem in Method1");\n  }\n  </pre> <pre>\n  System.Exception: There is a problem in Method1\n  at ConsoleApp2.Program.Method1() in C:\\..\\Program.cs:line 284\n  at ConsoleApp2.Program.Method2() in C:\\..\\Program.cs:line 289\n  at ConsoleApp2.Program.Method3() in C:\\..\\Program.cs:line 294\n  at ConsoleApp2.Program.Main(String[] args) in C:\\..\\Program.cs:line 301\n  </pre> <p>Рассмотрим на примере. У нас есть статический метод static void Main() и в нем есть конструкция try - catch. В блоке try мы вызываем Method3().В методе 3 мы вызываем Method2(). В методе 2 мы вызываем Method1(). В методе 1 возникает ошибка throw new Exception("problem");. После запуска приложения в блоке catch будет пойман Exception. И всю историю этой ошибки можно посмотреть в StackTrace. Ошибка возникла в методе 1, потом была выброшена в метод 2, потом в метод 3 и наконец в метод Main. И в методе Main она уже отловлена в блоке catch. Так будет выглядеть StackTrace.</p> <pre>\n    static void Method3()\n    {\n      Method2();\n    }\n\n    static void Method2()\n    {\n      Method1();\n    }\n\n    static void Method1()\n    {\n      throw new Exception("There is a problem in Method1");\n    }\n  </pre> <pre>\n    static void Main(string[] args)\n    {\n      try\n      {\n        Method3();\n      }\n      catch (Exception ex)\n      {\n        Console.WriteLine(ex.ToString());\n\n        // OK! Don\'t change stack information\n        throw;\n\n        // NOT OK! Re-throwing caught exception change stack information\n        // throw ex;\n      }\n    }\n\n  </pre> <p>Если в блоке catch мы хотим не только обработать ошибку, но и пробросить ее дальше в другой метод, который использует наш метод Main. Мы можем отдать ошибку дальше, потому что вызывающий метод должен понимать что произошло не так. Можно в методе catch выбросить новую ошибку throw; Но будет плохой практикой выбрасывать Exception throw ex; Потому что метод throw; ничего не изменит в StackTrace. И если на уровне выше он будет пойман catch то StackTrace будет таким же. Но если мы использовали имя ошибки throw ex; то StackTrace будет изменен. Потому что будет считаться что ошибка возникла в нашем методе. И вся история StackTrace заменится всего на один пункт, что ошибка возникла в Main. StackTrace это запись, по которой видно где возникла ошибка и через какие методы она к нам пришла.</p> <h2>Пользовательские исключения</h2> <pre>\n    class StudentNotFoundException : Exception\n    {\n      public int Id { get; }\n      public StudentNotFoundException(string message, int id)\n        : base(message)\n      {\n        Id = id;\n      }\n    }\n\n    public void UpdateStudentName(int id, string newName, List<Student> students)\n    {\n      var student = students.FirstOfDefault(students => student.Id == id);\n      if (student == null)\n        throw new StudentNotFoundException("Student not found", id);\n      student,Name = newName;\n    }\n\n    public void Main()\n    {\n      try\n      {\n        UpdateStudentName(-1, "John", new List<Student> {...});\n      }\n      catch (StudentNotFoundException ex)\n      {\n        Console.WriteLine(ex.Message);\n      }\n    }\n  </Student></Student></pre> <p>В своей программе вы можете определять свои, пользовательские исключения. Для этого нужно наследовать базовый для всех исключений тип Exception. Например, class StudentNotFoundException: Exception {}</p> <h2>Рекомендации</h2> <p>Используйте исключения аккуратно <br>Если в методе есть несколько участков,вызывающих одинаковые ошибки, лучше обрабатывать их отдельно <br>Активно используйте блок finally, естли внутри try вы: открываете файл, используете lock, открываете using. </p> <p>К сожалению, у нас немного времени на язык си шарп и такие конструкции. У нас не получится уместить все что хотелось бы рассмотреть. Поэтому в данном курсе в лекциях по си шарпу будут представлены именно те вещи которые вам понадобятся в разработке вашего приложения на практике.</p> </article> <article class="article"> <h2>4. Stream</h2> <p>Абстрактный тип System.IO.Stream представляет из себя абстрактную последовательность байтов, которую можно читать, записывать, изменять, копировать.</p> <p>Наиболее часто используются наследники этого типа: <br>- MemoryStream - использует массив в качестве резервного хранилища, то есть целиком находится в памяти. <br>- FileStream - использует файл в файловой системе машины в качестве хранилища. </p> <p>Любой тип и любой объект может быть представлен в виде последовательности байтов. Все можно привести в массив байтов. Потом с этим массивом байтов мы можем как-то работать. Это достаточно удобно и быстро.</p> <h2>Stream примеры</h2> <p>Давайте создадим два метода. Один метод будет читать байты из стрима, а другой метод будет их туда саписывать. Первый метод на вход принимает стрим. Создает массив байтов по размеру стрима. Ставим позицию стрим а на 0. Чтобы чтение стрима началось с его началом. И начинаем читать, записывая в наш массив result с нулевого индекса по последний и возвращает его. Это массив байтов и мы можем читать значения из этого массива с какого-то индекса по какой-то индекс.</p> <p>И тоже самое сделаем в обратную сторону. Здесь мы в стрим запишем байты. Установим также начальную позицию на ноль. И запишем в наш стрим наш массив байтов с нулевого элемента по последний. Дальше в методе Main мы создадим массив байтов и заполним его случайным числом от 0 до 255</p> <pre>\n    public static byte[] ReadFromStream(Stream stream) {\n      byte[] result = new byte[stream.Length];\n      stream.Position = 0;\n      stream.Read(result, 9, result.length);\n      return result;\n    }\n\n    public static void WriteToStream(Stream stream, byte[] bytes) {\n      stream.Position = 0;\n      stream.Write(bytes, 0, bytes.Length);\n    }\n\n    static void Main(string[] args) {\n      byte[] bytes = new byte[5000];\n      Random random = new Random();\n      for(int i = 0; i &lt; 500; i++) {\n        bytes[i] = (byte)(random.Next() % 256);\n      }\n\n      MemoryStream memoryStream = new MemoryStream();\n      WriteToStream(memoryStream, bytes);\n      var result_1 = ReadFromStream(memoryStream);\n      //memoryStream.Close();\n\n      FileStream fileStream = new FileStream("bytes.txt", FileMode.OpenOrCreate);\n      WriteToStream(fileStream, bytes);\n      var result_2 = ReadFromStream(fileStream);\n      fileStream.Close();\n    }\n    </pre> </article> <article class="article"> <h2>5. Reflection</h2> <p>Reflection (отражение) - механизм, позволяющий получать доступ из внешнего кода к информации о файле сборки через его метаданные.</p> <p>.dll/.exe сборка (Assembly) - (Манифест сборки, Метаданные, Ресурсы, Программный код)</p> <p>Метаданные - (Описание типов, Описание свойств, Описание методов, Описание событий) - внешний программный код</p> <p>Когда приложение компилируется, создаются файловые dll и exe. Они в себе хранят манифест сборки, метаданные, ресурсы, программный код. Метаданые это таблицы, которые хранят в себе информацию о типах, свойствах, методах, событиях. Механизм рефлексии позволяет в момент выполнения получить эту информацию. Давайте рассмотрим это на конкретном примере.</p> <pre>\n    public class Student\n    {\n      private readonly string name;\n      public Student(string name)\n      {\n        this.name = name;\n      }\n    }\n\n    Type type = typeof(Student);\n    ConstructorInfo constructorInfo = type.GetConstructor(new[] { typeof(string) });\n    object student = constructorInfo.Invoke(new object[] {"John"});\n    var fields = type.GetFields(BindingFlags.NonPublic | BindingFlags.Instance);\n    foreach (var field in fields)\n    {\n      if (field.Name == "name")\n      {\n        var value = field.GetValue(student);\n        Console.WriteLine(value);\n\n        field.SetValue(student, "New John");\n        value = field.GetValue(student);\n        Console.WriteLine(value);\n      }\n    }\n    </pre> <p>С помощью метода typeof мы можем получить тип студента. Экземпляр типа Type. У этого экземпляра типа Type можно вызвать конструктор и в этот конструктор передать массив объектов. Дальше этот конструктор с помощью метода invoke мы можем вызвать с набором параметров. Здесь могут передаваться массивы объектов.</p> <p>С помощью рефлексии мы можем изменять поля которые и закрытые и только для чтения.</p> </article> <article class="article"> <h2>6. Сериализация</h2> <p>Сериализация (serialization) - представляет собой процесс преобразования состояния объекта в форму, пригодную для сохранения или передачи.</p> <p>Обратное преобразование называется десериализацией (deserialization)</p> <h2>В дотнете есть множество библиотек, которые предоставляют различные механизмы сериализации.</h2> <p>System.Runtime.Serialization.Formatters.Binary Преобразовывает объект в массив байтов.</p> <p>System.Xml.Serialization Преобразовывает в xml формат.</p> <p>System.Text.Json Преобразовывает в формат Json.</p> <p>Newtonsoft.Json Преобразовывает в формат Json по своим алгоритмам.</p> <p>и т.д.</p> <p>Microsoft предоставляет системные сериализаторы, которые начинаются с System. Рекомендуется использовать их.</p> <h2>JsonSerialazer</h2> <pre>\n  public class User\n  {\n    public class Role\n    {\n      public string Name { get; set; }\n    }\n\n    public int Id { get; set; }\n\n    // Свойство игнорируется\n    [JsonIgnore]\n    public string FullName { get; set; }\n\n    // Имя свойства изменено\n    [JsonPropertyName("datetime")]\n    public DateTime DateTime { get; set; }\n\n    // Любые поля не считываются\n    private string privateField;\n    public string publicField;\n\n    // Открытые поля можно включать\n    [JsonInclude]\n    public int includedField;\n\n    public Role UserRole { get; set; }\n\n    // Коллекция будет сериализоваться\n    public List<user> Children { get; set; }\n    \n    // Обязательно должен быть конструктор без параметров\n    public User() {}\n\n    public User(string fullName, int id)\n    {\n      FullName = fullName;\n      Id = id;\n      DateTime = DateTime.Now;\n      UserRole = new Role()\n      {\n        Name = "role"\n      };\n    }\n  }\n  </user></pre> <p>Давайте посмотрим на Json сериализатор. У нас есть класс User. Он содержит класс Role. Это роль нашего юзера и она имеет свойство Name.</p> <p>У юзера еще есть свойство Id и свойство FullName. Перед свойством FullName стоит аттрибут JsonIgnore. Значит при сериализации класса User это свойство не попадет в выходную строку.</p> <p>Дальше есть свойство DateTime с аттрибутом JsonPropertyName, которое показывает под каким именем это свойство попадет в Json формат при сериализации.</p> <p>Следующие два поля privateField и publicField не попадут в выходную строку. Но если надо, их можно включить с помощью аттрибута JsonInclude</p> <p>У поля includedField стоит аттрибут JsonInclude, поэтому оно попадет в выходную строку.</p> <p>Если мы пишем конструктор с параметрами, то компилятор не создает конструктор без параметров. Поэтому мы сами должны написать еще и конструктор без параметров.</p> <p>В конструкторе с параметрами мы создаем пользователя с конкретным именем и конкретным id. Инициализируем пользователя с текущей датой и даем ему роль. Пусть любой юзер, который создается с помощью данного конструктора, имеет роль с именем "роль".</p> <pre>\n  static void Main(string[] args)\n  {\n    User user = new User("John D", 1);\n    user.Children = new List<User>()\n    {\n      new User("John1 D", 2), new User("John2 D", 3)\n    };\n\n    string jsonUser = JsonSerializer.Serialize(\n      user,\n      new JsonSerializerOptions()\n      {\n        // ...\n      }\n    )\n  }\n\n  {\n    "Id": 1,\n    "datetime": "2023-10-15T21:22:22.452033+03:00",\n    "UserRole": {\n      "Name": "role"\n    },\n    "Children"; [\n      {\n        "Id": 2,\n        "datetime": "2023-10-15T21:22:22.4552425+03:00",\n        "UserRole": {\n          "Name": "role"\n        },\n        "Children": null,\n        "includedField": 0\n      },\n      {\n        "Id": 3,\n        "datetime": "2023-10-15T21:22:22.4552523+03:00",\n        "UserRole": {\n          "Name": "role"\n        },\n        "Children": null,\n        "includedField": 0\n      },\n    ],\n    "includedField": 0      \n  }\n  </User></pre> <p>Посмотрим как это будет выглядеть в нашем статическом метода main. Мы создали нашего юзера John D с айдишником 1. И юзеру создали список чилдренов. С помощью new мы создали экземпляр листа и его проинициализировали тоже двумя юзерами John1 D и John2 D. После этого, с помощью JsonSerializer из System.TextJson. Мы вызываем статический метод Serialize и передаем ему тот экземпляр, который мы хотим сериализовать. Так же он принимает тип с настройками сериализации. И что мы получим в нашей строке jsonUser? Мы получим то что и ожидали - строку в формате json.</p> <p>Вопрос: в чем разница между мапинг и сериализация? Сериализация это форма, пригодная для сохранения и передачи. Чаще всего удобно работать со строкой, например, json когда вы его передаете по http. Мапинг это не преобразование вашего экземпляра в строку или массив байтов, а преобразование к экземпляру другого типа. Например, когда вы будете DataTransferObject создавать, когда вы будете передавать вашу модель на уровне базы данных на уровень выше, например, сервисный уровень или уровень контроллера, желательно ее преобразовывать к типам, с которыми будете работать на верхнем уровне. Здесь как раз выполняется процедура мапинга.</p> <p>Вопрос: Можно ли сделать копию большого объекта при помощи сериализации и десериализации? Да. Можно.</p> <p>Вопрос: Зачем использовать библиотеку для сериализации если можно написать свою?мНо если вы будете использовать готовую библиотеку, то там описана своя логика. Никто вам не запрещает написать свою логику сериализации. Но это будет не проще чем если использовать готовую библиотеку.</p> <p>Вопрос: Зачем нужен конструктор без параметра? Конструктор без параметра необходим именно для работы сериализации.</p> </article> <article class="article"> <h2>7. Многопоточность и асинхронность</h2> <h2>Процессы и потоки</h2> <p>Каждый экземпляр приложения запускается в отдельном процессе. Процессом называется набор ресурсов, используемый отдельным экземпляром приложения.</p> <p>Каждому процессу в Windows выделяется собственный поток исполнения (как минимум один). Если процесс перестанет отвечать, то будет заморожен только его поток исполнения, а вся система продолжит работу.</p> <p>Это тема достаточно сложная. Советую ее самостоятельно посмотреть и внимательно разобрать. Я попытаюсь дать быстрый и краткий обзор того что есть и с чем придется работать. Современные системы позволяют нам писать приложения с большик количеством потоков, которыми мы можем управлять. Поток является виртуализацией процесса.</p> <h2>System.Threading.Thread</h2> <pre>\n  static void DoWork()\n  {\n    for (int i = 0; i &lt; 10; i++)\n    {\n      Thread.Sleep(10); // milliseconds\n    }\n  }\n\n  static void NonParallelMethod()\n  {\n    Stopwatch stopwatch = new Stopwatch();\n\n    stopwatch.Start();\n    for (int i = 0; i &lt; 10; i++)\n    {\n      DoWork();\n    }\n    stopwatch.Stop();\n\n    Console.WriteLine($"{nameof(NonParallelMethod)}. Time: {stopwatch.ElapsedMilliseconds}");\n  }\n  </pre> <p>Наверно, кто-то из вас в университете работал с потоками из System.Threading.Thread. Мы рассмотрим его на искусственном примере чтобы понять как это будет работать для монопоточного и однопоточного выполнения одного и того же кода. Пусть у нас есть метод DoWork(), который будет имитировать работу. Он идет по циклу и на каждой инетации засыпает на 10 милисекунд. Просто притворяется что работает. И пусть есть метод NonParallelMethod(), который будет это выполнять в одном потоке. Здесь объявлен экземпляр типа StopWatch. Это удобная утилита позволяющая засекать время выполнения кода.</p> <p>В этом примере мы создали экземпляр stopwatch. Мы можем его запустить вызвав метод Start(), потом выполнить код, время работы которого мы хотим замерить, и оостановить вызвав метод Stop(). Время работы будет в свойстве ElapsedMilliseconds</p> <pre>\n  static void DoWork()\n  {\n    for (int i = 0; i &lt; 10; i++)\n    {\n      Thread.Sleep(10); // milliseconds\n    }\n  }\n\n  static void ParallelMethod()\n  {\n    Stopwatch stopwatch = new Stopwatch();\n\n    stopwatch.Start();\n    List<Thread> threads = new List<Thread>();\n    for (int i = 0; i &lt; 10; i++)\n    {\n      // public delegate void ThreadStart();\n      // public delegate void ParameterizedThreadStart(object? obj);\n      Thread thread = new Thread(DoWork);\n      threads.Add(thread);\n      thread.Start();\n    }\n\n    while (true)\n    {\n      if (threads.All(x => x.ThreadState == ThreadState.Stopped))\n        break;\n    }\n    stopwatch.Stop();\n\n    Console.WriteLine($"{nameof(ParallelMethod)}. Time: {stopwatch.ElapsedMilliseconds}");\n  }\n  </Thread></Thread></pre> <p>Рассмотрим тот же метод DoWork(). Но выполним его теперь не в одном потоке, а в нескольких потоках. Создадим часы, чтобы отследить время. Создадим список потоков. Дальше цикл на 10 итераций. На каждой итерации цикла мы будем создавать новый поток. Потоку давать работу и записывать его в список потоков. И запускать поток на выполнение. Потом мы запускаем бесконечный цикл while и ждем когда все потоки закончат выполнение работы. Когда все потоки завершат работу, их состояние ThreadState станет Stopped, то мы выйдем из цикла while. Останавливаем часы, которые замеряли время выполнения кода.</p> <pre>\n  static void Main(string[] args)\n  {\n    NonParallelMethod();\n    ParallelMethod();\n  }\n\n  NonParallelMethod. Time: 1569\n  ParallelMethod. Time 221\n  </pre> <p>Теперь запустим на выполнение оба наших метода и увидим разницу во времени выполнения. Вывод: чтобы выполнить работу быстрее, мы можем эту работу разделить между потоками. И каждому потоку выделить свою работу, которую он должен сделать. Но не все так просто. Есть общие, или разделяемые, ресурсы.</p> <h2>Доступ к общим ресурсам</h2> <p>- Monitor</p> <p>- lock</p> <p>- Mutex</p> <p>- Semafore</p> <h2>Разделяемые ресурсы</h2> <pre>\n  int globalCounter = 0;\n\n  List<Thread> threads = new List<Thread>();\n\n  for (int i = 0; i &lt; 100; i++)\n  {\n    Thread thread = new Thread(WorkWithoutLock);\n    threads.Add(thred);\n    thread.Start();\n  }\n\n  Console.WriteLine(globalCounter)\n\n  void WorkWithoutLock()\n  {\n    Thread.Sleep(10);\n    globalCounter++;\n  }\n  </Thread></Thread></pre> <p>В предыдущем примере была ситуация, кодга 10 потоков выполнялись параллельно и друг с другом никогда не пересекались. Такое вам не пригодится на практике. Потому что это вряд ли возможно. Чаще всего, бывает ситуация когда несколько потоков работают с одной переменной и пытаются ее изменить. Но даже инкремент счетчика (увеличение на единицу) не является атомарной операцией. Не атомарная значит что не выполняется за одно действие. Это не просто прибавить единицу. Надо сначала достать из памяти, посчитать новое значение, изменить его и записать обратно в память. Если несколько потоков обращаются к одной переменной, возможна ситуация что они одновременно считали значение переменной из памяти и получили одно и то же значение. Потом одинаково его изменили, например, прибавили единицу. Мы ожидали что каждый поток увеличит на единицу, а получили изменение только на одну единицу.</p> <p>Пусть у нас есть глобальный счетчик с начальным значением 0. Создадим функцию WorkWithoutLock которая увеличивает значение счетчика на 1. Создадим 100 потоков и каждому назначим выполнить один раз эту функцию. Когда все 100 потоков выполнятся. Мы ожидаем что каждый поток увеличил глобальный счетчик на единицу. Но результат нас удивит и это будет меньше 100.</p> <p>Поэтому нужно разделять доступ к общим ресурсам. Один из механизмов разделения общих ресурсов это Lock. Как будет работать поток. Поток заходит в метод WorkWithLock и видит что lockObject свободен, он его захватывает. И заходит в блок кода lock. Увеличивает счетчик, выходит из lock и освобождает захваченный им lockObject. Если другой поток приходит в функцию WorkWithLock и видит что lockObject занят, он встает в очередь и ждет когда lockObject станет доступен, чтобы его захватить и выполнить код. Теперь в итоге мы получим глобальный counter равный 100.</p> <h2>Lock</h2> <p>Ключевое слово Lock используется для установки блокировки на каком-то разделяемом ресурсе.</p> <pre>\n  object lockObject = new object();\n  void WorkWithLock()\n  {\n    Thread.Sleep(10);\n    lock(lockObject)\n    {\n      globalCounter++;\n    }\n  }\n  </pre> <p>Здесь нужно быть очень внимательным. Потому что со строчки lock(lockObject) наш код перестает быть параллельным. Он становится таким же как если бы мы работали только с одним потоком. Плохая идея поставить глобальный lock везде. Тогда не будет смысла создавать отдельные потоки. Во-первых вы тратите ресурсы на их создание и потом все равно будете синхронно выполнять код. Поэтому lock ставять только на разделяемых ресурсах, которые нужно заблокировать чтобы их не могли одновременно изменять несколько потоков.</p> <h2>Lock = Monitor</h2> <pre>\n  void WorkWithLock()\n  {\n    Thread.Sleep(10);\n    lock(lockObject)\n    {\n      globalCounter++;\n    }\n  }\n\n  void WorkWithLock()\n  {\n    Thread.Sleep(10);\n    try\n    {\n      Monitor.Enter(lockObject);\n      globalCounter++;\n    }\n    finally\n    {\n      Monitor.Exit(lockObject);\n    }\n  }\n  </pre> <p>Lock это и есть Monitor. Если вы знакомы с теорией параллельного программирования, то вы уже знакомы с таким объектом синхронизации как Monitor. Нашу функцию WorkWithLock написанную с использованием Lock компилятор переписывает на функцию написанную на Monitor. Функция Monitor.Enter захватывает переданный ей объект. А функция Monitor.Exit отпускает. Эта конструкция оборачивается в блок try - finally. Если в блоке try возникнет ошибка, то в блоке finally мы обязательно отпустим объект. Чтобы не писать try, finally, Monitor.Enter, Monitor.Exit был придуман синтаксический сахар Lock.</p> <h2>Mutex, Semaphore</h2> <p>Mutex - аналогичен lock, работает медленнее, но позволяет блокировать доступ не только между потоками, но и между процессами.</p> <p>Semaphore - разрешает одновременный доступ к ресурсу только ограниченному количеству потоков.</p> <p>На Mutax и Semaphore мы останавливаться не будем. Потому что на текущем курсе на практике вы с ними работать не будете. Если надо, можете ознакомиться с ними самостоятельно.</p> <h2>ThreadPool</h2> <p>- Пул потоков управляет потоками эффективно, уменьшая количество создаваемых, запускаемых и останавливаемых потоков.</p> <p>- Используя пул потоков, можно сосредоточиться на решении задачи, а не на инфраструктуре потоков приложения.</p> <p>Создание потоков это ресурсозатратная операция. Поэтому придумали ThreadPool. Когда вам нужно, вы не будете создавать новый поток с помощью конструкции new Thread. А вы будете брать готовый поток из изначально созданных потоков. Существует уже готовый пул потоков, откуда можно взять поток, сделать в нем нужную задачу и вернуть его обратно в пул потоков. И потом этот поток можно переиспользовать.</p> <h2>Task</h2> <p>Самым простым способом использования пула потоков является применение библиотеки параллельных задач (TPL).</p> <p>Task и Task<TResult> используют потоки из пула для выполнения задач.</TResult></p> <pre>\n  Task task = new Task(() => Console.WriteLine("Simple task"));\n  task.Start();\n\n  Task taskFactory = Task.Factory.StartNew(() => Console.WriteLine("Factory"));\n\n  var taskWithReturn = Task<string>.Factory.StartNew(() => "Task with return");\n  Console.WriteLine(taskWithReturn.Result);\n\n  await Task.Delay(-1);\n  </string></pre> <li>Посмотрим как работает Task. Создадим переменную типа Task. Инициализируем ее делегатов, в данном случае лямбда-функцией. Запускаем таск командой task.Start(). Используя Task.Factory можно создать экземпляр и сразу запустить его методомTask.Factory.StartNew. Далее пример метода который не только выполняет поток, но и возвращает результат, в данном случае возвращает строку. В пуле потоков лежат фоновые потоки. Это значит что если основное приложение заканчивает работу, то и фоновые потоки прекращают свою работу. И поскольку основной поток не знает когда выполнятся фоновые потоки, мы пишем await Task.Delay(-1), где -1 означает жди бесконечно.</li> <li>Эти два таска task и taskFactory выполняются параллельно и одновременно. И они обращаются к консоли, которая является разделяемым ресурсом. И неизвестно какой таск выполнит обращение к консоли раньше. Поэтому мы не знаем в каком порядке выведутся сообщения в консоль.</li> </article> <article class="article"> <h2>Async\\Await</h2> <p>Async\\Await - ключевые слова, синтаксический сахар позволяющий упростить работу с асинхронными методами.</p> <pre>\n  async Task DoWork()\n  {\n    await Task.Delay(1000);\n    Console.WriteLine("Done!");\n  }\n\n  Task task = DoWork();\n  AfterCall();\n  await task;\n  AfterAwait();\n  </pre> <p>Давайте напишем асинхронный метод. Это метод помеченный словом await. А слово async нужно компилятору, чтобы когда он собирал метеданные, знал что они будут асинхронные. Поэтому нужно помечать ключевым словом async все методы внутри которых есть слово await. Что же делает наш метод DoWork? Он ждет секунду и потом выводит с консоль "Done!". Когда мы создали и проинициализировали переменную task таким образом Task task = DoWork(), то сразу начинается уже работа и нам уже не нужно писать Start. Дальше поток выполняет код AfterCall() и потом на строчке await task ждет завершения нашего таска task. И только когда он завершится, то потом выполнит AfterAwait().</p> <p>Смысл асинхронной операции в том чтобы не заблокировать основной поток. Мы не хотим занимать наш основной поток. Мы хотим чтобы наш основной поток был всегда доступен. Чтобы приложение не зависало, обрабатывая чтото тяжелое, а всегда быстро реагировало на действия пользователя. А тяжелые задачи мы будем отдавать другим потокам</p> <p>Представьте что нам надо сделать оливье. Первым делом мы пошли варить картошку. Будем стоять и смотреть как варится картошка до тех пор пока она не сварится. После этого будем варить яйца. Потом резать колбасу. Это синхронное выполнение потока. Второй вариант. Вы позвали друзей и сказали им - ты будешь варить картошку, ты будешь варить яйца, а ты будешь резать колбасу. Это вы создали несколько потоков и дали им задачи на параллельное выполнение. Третий вариант. Вы поставили варить картошку, пока она варится вы поставили варить яйца, пока они варятся вы режете колбасу. Это асинхронное вывполнение.</p> </article> <article class="article"> <h2>Рекомендации</h2> <p>- CancellationToken</p> <p>- Synchronization Context</p> <p>- BackgroundWorker</p> </article> <article class="article"> <h2>Вопросы</h2> <p>Я советую почитать книги по теории параллельного программирования. По асинхронному программированию советую почитать Рихтера.</p> </article>','<article class="article"> <div id="link-to-dsr2023net" class="btn-back">назад</div> <h1>2023-10-23 DSR .NET School 2023/24 Lecture #4 Web application</h1> </article> <article class="article"> <p>Здравствуйте. Меня видно? Слышно? Давайте приступим. Прошу прощения за 5 минутную задержку. Настраивал оборудование, чтобы теперь все было хорошо. Первое что я хотел спросить. Нормально ли вам видно экран? Я знаю что у некоторых он очень мелкий. Посмотрите зум - там есть автоувеличение. У кого неудобно смотреть, то тогда попробуйте там. В принципе сегодня слайды будут такие - вчитываться в них не надо. В основном схемки, поэтому будет нормально. Давайте начнем. Чат я буду периодически поглядывать. Так что будут какие-то вопросы - пишите. По ходу дела я буду на них отвлекаться и отвечать. Если вдруг там не отвечу, значит в конце.</p> <p>Добро пожаловать на нашу очередную лекцию. Сегодня у нас четвертая лекция. Мы начинаем практическую часть с точки зрения веб приложения. Наш курс называется Web Application. Ну соответственно сегодня мы поговорим что такое веб приложения.</p> </article> <article class="article"> <h3>О чем будет эта лекция</h3> <p> 1. Что такое веб приложения <br>2. Что такое Интернет <br>3. Протоколы <br>4. Архитектура <br>5. Серверная часть <br>6. Клиентская часть <br>7. Что такое SOAP, REST, GraphQL, gRPC <br>8. Уязвимости </p> <p>Итак, о чем будет сегодняшняя лекция. Сегодняшняя лекция будет так и назваться Веб приложения. Мы поговорим о том что это такое. Поговорим вообще что такое Интернет. Как он работает в целом. Как получается что мы какую-то строчку вводим и она что-то нам находит где что-то лежит. Поговорим более детально о протоколах. Интернет это техническое решение и у него есть свои языки. Протокол это и есть. Архитектуру, серверную часть, клиентскую. Поговорим об архитектурных стилях. Ну и вконце про уязвимости. Чисто так для общего развития.</p> <p>Лекция вводная. Я буду говорить такие общие вещи для того чтобы примерно понимали что это такое. Потому что зачастую, все сосредотачиваются на технической части. Например, пишем сайт и мы упираемся в HTML, CSS и так далее. Но при этом абсолютно не понимая как вообще этот сайт работает. Для большей части программистов, для джунов, это не важно. Важно действительно писать хороший код, решать задачи. Но если вы хотите развиваться дальше, то желательно это понимать и просто интересно как это работает все.</p> </article> <article class="article"> <h2>1. Что такое веб приложение</h2> <p>Как было:</p> <p> - Просто сайт <br>- Сайт с какой-то логикой - Интернет-Портал <br>- Ну и может быть Интранет-портал </p> <p>Что такое веб приложение? В начале давайте в историю немножко окунемся. Изначально был просто сайт. Когда интернет только появился - сделали какой-то сайт. Сайт-визитка, информационный сайт. Место в интернете. Потом добавили туда какую-то логику, добавили чат, возможность заказывать что-то, оплату. Стал уже не просто сайт. Его стали называть интернет-портал. Потом они разделились на те к которым можно получить доступ из сети и те которые были только внутренние - интранет-порталы. И так было до какого-то времени. Интернет развивался. Появлялись новые мощные компьютеры, новые задачи и потребности.</p> <p>А сейчас?</p> <p> - Сайт, портал, интернет <br>- BE для мобильного приложения <br>- Межсервисное API <br>- API <br>- Виджет <br>- Плагин <br>- SPA <br>- BE для толстого клиента <br>- и т.д. </p> <p>Сейчас у нас есть сайт, портал, интернет. У нас есть backend для мобильного приложения. У нас есть несколько сервисов, которые мужду собой работают, общаются посредством веб приложений. Внешний API, виджет, который на сайт внедрился при помощи разметки. Плагины, SPA приложения. Даже backend для толстого клиента. Например, у нас есть система, которая вместо баз данных, обращается на сервис, шлет такие же запросы. С одной стороны это устанавливается на наш компьютер, а с другой у него ничего своего нет, он просто представляет удобный UI/UX для пользователя - клиент. А вся работа ведется через интернет. Проще сказать что является НЕ веб приложением. Мир ушел в сеть, ушел в интернет.</p> <h3>Примеры web-приложений</h3> <p> - Информационные сайты, порталы <br>- онлайн-магазины и электронная коммерция <br>- социальные сети <br>- почтовые сервисы <br>- медиа сервисы (аудио/видео) <br>- CRM, ERP, WMS <br>- Административные панели (cloud, hosting, constructors) <br>- онлайн сервисы (чаты, онлайн-запись) <br>- игры <br>- и т.д. </p> <p>Примеры веб приложений. Так, чтобы понимать. Сайт и портал. Здесь понятно, здесь вопросов нет. Онлайн-магазины, соцсети, почтовые сервисы - это тоже веб приложения. У вас где-то развернут SMTP сервер и он работает по сети. Медиа сервисы - это наши любимые ютубы, рутубы. Их сейчас очень много. CRM, ERP, WMS - это системы класса управления предприятием. Клиентские системы, системы упрвления предприятием, складские системы. Есть панели административные. Вы можете в клауде создать свое приложение. Средстави другого веб приложения делать свое новое веб приложение. Хостинги, конструкторы. Сейчас на каждом хостинге есть свой конструктор, где можете запрограммировать себе свой сайт. Платить небольшие деньги хостингу и у вас будет свой сайт. Онлайн сервисы, чаты, онлайн запись. Видели в уголочке обычно появляется запись - Поговорить с оператором. Это скорее всего не внутренняя система у сайта, а сделан какой-то виджет, внедряется внутрь сайта и живет вообще параллельно. Для его активации делаете какой-то код. И этот код уже на другом сайте, который час поставляет, выделяет определенную область и в ней работает ваш чат. Игры - отличный пример веб приложений. Игры можно рассмотреть как толстый клиент. У вас есть игра которая отрисовкой занимается, всем остальным но при этом все запросы, вся логика лежит на сервере. Типов веб приложений достаточно много. </p> <h3>Преимущества web-приложений</h3> <p> - Доступ с любого устройства <br>- Кроссплатформенность <br>- Отсутствие клиентского ПО (но не всегда) <br>- Безопасность <br>- Масштабируемость <br>- Снижение стоимости разработки и поддержки <br>- Снижение сложности администрирования <br>- Защита от потери данных- Экономия ресурсов поставщика </p> <p>Какие у нас есть преимущества. На самом деле, у любого приложения, есть и плюсы и минусы. Нам надо найти баланс, который нам важен и стратегию куда двигаться. Если плюсы от использования приложения, решения превалируют над минусами, значит это хорошее решение и надо туда идти. Первое преимущество это доступ с любого устройства. Кроссплатформенность. Раньше было много браузеров, сейчас поменьше. Все на хромиуме в основном пишется. Но есть windows, linux, всевозможные телефоны. Если писать под каждое приложение на нативном языке, то это будет долго, нудно и никому не надо. Здесь кроссплатформенность работает. Помимо кроссплатформенности клиента, где вы будете это приложение запускать, распространена кроссплатформенность сервера.</p> <p>Отсутствие клиентского ПО. Если вы какую-то игрушку ставите, то клиент вам все таки нужен. Но чаще всего вы заходите в браузер и не надо больше ничего инсталлировать. Если вам не понравилось - вы просто больеш этот сайт не открываете.</p> <p>Безопасность и масштабируемость. Поскольку веб приложение делается общее, то очень сложно при современных технологиях, если защищаться, поломать ваш компьютер, вашу систему. Плюс хорошая система, хорошее приложение должно и ваши данные еще защищать.</p> <p>Снижение стоимости разработки. Вместо десяти инсталляторов, надо будет поддерживать одну систему. Соответственно, ее и поддерживать проще.</p> <p>Администрирование. Если кто-то когда-то устанавливал приложения из сети. Можете представить. У кого-то работает, у кого-то не работает, у кого-то не скачалось, целая куча всяких проблем. Здесь достаточно просто всем ссылки разослать и проверить что все заработало.</p> <p>Потеря данных. Если хорошая система, ресурсы поставщика могут экономиться. Вы будете делать приложение, которое будет масштабироваться под ваши запросы. Если слабенькая нагрузка - мало платите в месяц. Когда станет побольше - только тогда побольше и заплатите. Не надо сразу вкладываться в большой сервер. Это только основные преимущества. Можно придумать и свои</p> <h3>Недостатки web-приложений</h3> <p> - Повышенные требования к качеству кода <br>- Повышенные требования к программной части системы <br>- Повышенные требования к аппаратной части системы <br>- Безопасность <br>- Масштабируемость <br>- Требования к квалификации разработчиков <br>- Усложнение процесса администрирования и поддержки <br>- Дополнительные затраты на резервное копирование и хранение <br>- Увеличенная стоимость владения системой </p> <p>Давайте подумаем про недостатки. Вы очень сильно удивитесь некоторые преимущества - они же становятся недостатками. Во-первых, качество кода. Программисты, которые пишут десктопное приложение и программисты, которые пишут серверное приложение с большой нагрузкой, должны иметь разные квалификации. Если написать какую-то ерунду на сервере, она обязательно выплывет. Программные системы. То что вы на клиенте никогда не использовали, например MySQL, здесь уже вам может не хватать. Postgress и так далее. Железо надо мощное. Оно мощное для приложения, но для клиента оно будет меньше.</p> <p>Безопасность и масштабируемость. Не так-то просто обеспечить безопасность на сервере и масштабируемость. Для этого сейчас есть специалисты - девопсы. Квалификация разработчиков - это уже по-сути качество кода.</p> <p>Администрирование и поддержка. Нужно смотреть работает - не работает, разделять доступ и т.д. Надо будет на что-то деньги вкладывать.</p> <p>Но, преимуществ гораздо больше хоты бы для того что можно очень быстро получить какой-то сервис, какую-то информацию. Например, вам нужны исходные коды - вы зашли в гитхаб и скачали исходные коды. Быстрый обмен информацией, быстрый доступ к информации. Защищенность. Все плюсы гораздо перевешивают все неудобства какие есть. И эти недостатки чаще всего относятся не к критическим недостаткам, а к сложностям. А со сложностями программист должен бороться. Компаниям, которые зарабатывают деньги это вообще не вопрос. Это сложности бизнеса, которые надо решать. Это вообще не недостаток. Инвестиции в современное железо легко отбиваются работой пользователями с вашим софтом. Интересен - железо будет не самой большой статьей затрат.</p> </article> <article class="article"> <h2>2. Что такое Интернет</h2> <p> Интернет (англ. Internet) - всемирная система объединенных компьютерных сетей, основанная на использовании протокола IP и маршрутизации пакетов данных. Понятие часто упоминается как "Всемирная сеть" и "Глобальная сеть". <br>1967 г - Начал разрабатываться ARPANET <br>1969 г Впервые связали два ПК по сети <br>1971 г - В сети уже 15 узлов <br>1972 г - объединены сетью 50 университетов и организаций в США <br>1983 г - Внедрение TCP / IP <br>1989 г - Разработана и реализована WWW <br>1990 г - Появился первый текстовый браузер <br>1994 г - Появились браузеры Mosaic, Netscape, IE <br>1995 г - Ответственность за интернет перешла в частный сектор </p> <p>Что такое интернет? Я здесь накидал небольшую историю. Он родился примерно в 1967 году. Это была сеть, которую в США начали придумывать как средство для военных. Для быстрого обмена информацией между штабами. Потом туда подвязалась Говернет. И институты между собой начали делать обмен. И постепенно система выросла уже в более интересную вещь. В 1967 году ARPANET начала разрабатываться, через два года умудрились соединить два компьютера по сети. Какой-то протокол и начали файлы передавать. С 67 года и до 95 интернет был проприетарным. В 1995 году он вышел в частный сектор. И тут пошел бум. Из простого информационного обмена файлами и обмена почтой он начал вырастать в то, что он есть сейчас. А это уже не просто интернет. Это в придачу ко всему и какая-то сеть, основанная на сети интернет. Локальная сеть, которая не ограничена вашей локальностью компьютера. Можете легко соединиться через WPN с США и работать, если вам требуется. Все так и делают.</p> <h3>Инфраструктура Интернета</h3> <p>Конечный пользователь - Локальный провайдер - Региональный провайдер - Магистральный провайдер</p> <p>Как работает у нас интернет. Если по общему смотреть. У нас конечный пользователь это все мы. Есть магистральный провайдер. Это обычно большие, те которые владеют оптикой. Есть региональный провайдер. У них есть протоколы, договоренности. Получить интернет конкретного магистрального провайдера вы не сможете никогда. Это оптовый продавец. Магистральный провайдер это уровня России. Региональный провайдер это какой-то регион. Локальный провайдер это с которым мы работаем. Например, теле2 или билайн, который нам интернет раздает. Мы кидаем информацию и она начинает каким-то образом ходить. Причем для нас это прозрачно. Это общая глобальная сеть. Кому интересно, почитайте как она устроена. Чаще всего, магистральный провайдер может соединять Россию или Европу с США, например. Идет здоровый оптоволоконный кабель по дну моря. И там дальше раздает уже.</p> </article> <article class="article"> <h3>OSI модель</h3> <p>7 Layers of the OSI Model <br>Application. <br>- End User layer <br>- HTTP, FTP, IRC, SSH, DNS <br>Presentation <br>- Syntax layer <br>- SSL, SSH, IMAP, FTP, MPEG, JPEG <br>Session <br>- Synch & send to port <br>- API\'s, Sockets, WinSock <br>Transport <br>- End-to-end connections <br>- TCP, UDP <br>Network <br>- Packets <br>- IP, ICMP, IPSec, IGMP <br>Data Link <br>- Frames <br>- Ethernet, PPP, Switch, Bridge <br>Physical <br>- Physical structure <br>- Coax, Fiber, Wireless, Hubs, Repeaters </p> <p>У нас есть компьютер. У нас есть сетевая карта, которая соединяется с другими сетевыми картами. Все делится на кусочки. Есть низкий уровень. То есть мы на уровне системы пишем в машинных кодах. Там программа работает. Потом навязывается уровень абстракции. И делает из этого на языке высокого уровня. И так далее. В конце сидит пользователь и пишет в чатике сообщение. Один пользователь написал в чате сообщение и как это идет к другому пользователю с точки зрения сети? Есть принятая слоеная модель OSI. Это модель которая делит на то каким образом эта вся информация приходит. На самом деле, в интернете физически буковки не летают нигде. И даже оптика, которая перекинута между странами, работает на физическом законе. И мы выделили логические моделки, которые делятся на несколько слоев.</p> <p>Физический уровень - это с чем мы работаем. Например, мы можем передать радиосигнал, мы можем передать световой сигнал. Запись на какой-нибудь кристалик на флешке. Это все физика. За счет чего ваша информация передается.</p> <p>Дальше слой Data Link. Это ethernet, bridges. Это все на чам работают роутеры. То что от нас скрыто. Есть специальные протоколы, которые кусочки информации отправляют по физическому каналу. Мы можем в роутер вогнать информацию с коаксиального кабеля а дальше пустить ее через оптику. Если роутер так умеет делать. Это уровень как мы данные между собой передаем.</p> <p>Network это каким образом мы передаем по сети. Это пакетики данных, которые надо собирать. У нас есть IP. Не просто данные, которые передались куда-то. А уже передались куда-то конкретно.</p> <p>Выше уровень транспортный. Он работает на базе нетворка. Есть TCP, UDP. Мы начинаем работать с двумя точками. Берем две точки и данные между ними перекидываем.</p> <p>Дальше сессии. Это сокеты, винсокеты. Мы на них можем уже влиять. Но не надо.</p> <p>Презентационный слой. Это то что мы качаем.</p> <p>И уровень апликейшн. Это работа с http, ftp. Здесь как раз мы сидим и работаем. Мы, как программисты, работаем на уровне приложения. Такая слоеная модель передачи информации. От радиосигнала до картинки.</p> <h3>Адресация в сети Интернет</h3> <p>Хост (сервер) - Локальная сеть - Компьютер пользователя</p> <p>Нетворк это связь нескольких узлов (устройств) между собой. Мы должны иметь возможность информацию, как минимум, находить. Например, вы пытаетесь послать письмо мне. Вы не знаете где я нахожусь. На каком компьютере, какой у меня адрес, он может поменяться в какой-то момент. Я могу с сотового телефона зайти. Процедуры, которые внизу, от нас скрыты. Компьютер не бездельничает, когда мы ничего не делаем. У каждой точечки и у каждого хоста должен быть какой-то адрес. Точки которые имеют реальное или виртуальное воплощение это хост. Мы можем работать с хостом по протоколам TCP и UDP. TCP это протокол который гарантирует корректность передачи данных. Он медленнее чем UDP и работает следующим образом.</p> <p>Мы соединяем два компьютера, найдя их по IP, и начинаем слать между ними информацию. Мы шлем информацию маленькими кусочками и у каждого подписана контрольная сумма. На транспортном уровне , берется наша посылка и автоматически разбивается на кусочки, кусочки подписываются и отправляются по сети в параллель. Они, кто быстрее а кто медленнее, приходят на приемник. Там уже сетевая карта их собирает, склеивает, проверяет. Если какой-то пакет пришел испорченный, она его еще раз перезапрашивает. В итоге получает всю посылку. Что отправили - то и пришло. Таким образом, TCP считается протоколом с гарантированной передачей данных. Либо дойдет все полностью, либо вообще не дойдет.</p> <p>UDP работает так - я вышел в сеть, прокричаль какую-то информацию. И сказал что информация нужна такому-то компьютеру, например Петровичу. Все ее услышали, но только Петрович ее поймал и что-то с ней сделал. Какие плюсы? Мне не надо подтверждение. Я информацию послал и отлично. Быстро установил коннект. Быстро прошла связь. По адресам ушло много информации. Какие минусы. Петрович меня может не услышать. Или он не понял, что к нему пришло. Это решается по TCP/IP. Но UDP считает так - я лучше десять раз крикну и это будет быстрее чем я напишу письмо , упакую и отправлю.</p> <p>Как компьютеры друг друга видят. IP4 это четырех значная 8-байтовая маска (четыре цифры, размером по 8 байт) по которой определяется адрес компьютера в сети. IP (192.168.70.1). Ей все всегда пользовались. Она хорошая, удобная но есть один минус. У нее порядка 4 миллиардов адресов. Но с ростом количества компьютеров, мобильных устройств и прочее, число IP адресов может быстро закончиться. Поэтому придумывают IP6. Много устройств еще работают на IP4, поэтому он еще поддерживается.</p> <p>HOST <br>TCP UDP <br>IP (192.168.70.1) <br>Port <br>0 - 1023 системные <br>1024 - 49151 зарегистрированные <br>49152 - 65535 динамические </p> <p>IP это любой один компьютер. Но глупо было бы делать так что внутри одного компьютера всего одно приложение. Например, установили на компьютер базу данных и больше ничего там нет. Часто компьютер может много чего в себе держать. Например, две базы данных. Поэтому внутри компьютера есть возможность добавлять порты. Это уже дополнительный идентификатор к IP который показывает не только хост, но и место, куда послать. В рамках одного компьютера хост и порт может быть открыт один. И вся информация в него сваливается. Каким образом? Мне в сеть кидается информация - IP такой-то, порт такой-то получи пакет данных. Все остальные его проигнорировали. Кому не надо он вообще не попал. А кому надо он попал. Все все слышат и только нужные адресаты получают.</p> <p>Первые 1024 порта системные. Сюда лезть не желательно.</p> <p>Интернет дает возможность людям быстро находить. Для этого нужно писать человеческим языком, а не цифрами. Например, буквами. Что при этом происходит. Пользователь ввел строку из букв selectel.ru. Наш компьютер ничего об этом не знает и передает их дальше на резолвер. Резолвер это DNS это сервер. Dynamic Name System. Есть пачки серверов и каждому из них прописан конкретный ip-шник. Когда вы свой сайт будете регистрировать. Вы покупаете доменное имя. И если вы хотите чтобы доменное имя работало, вы непосредственно у вашего провайдера где вы будете должны сказать - мое купленное имя лежит здесь. И если кто-то ввел это слово, то адресуй его сюда. Я здесь подхвачу и все отдам. DNS сервера все это дело поддерживают. Мы обратились к резолверу, если у него этого адреса нет, то он обращается к более крупному, например в зоне ru и тот уже передает адрес нужному DNS серверу у которого есть ip этого сайта. DNS сервер возвращает нам на наш компьютер ip-шник и мы уже на этот ip-шник шлем запрос. И мы попадаем на selectel.ru.</p> <p>Примерно так работает DNS. DNS обновляется автоматически. Если мы поменяли сайт, то в течении 3 часов это обновляется. Если сайт хранится очень далеко, например, в Африке. То вы сначала обновите ваш DNS потом следующий и так по времени до суток. DNS сервер периодически эту информацию спрашивает у сайтов, с которыми он связан. И таким образом поддерживается актуальная инфомрация. Также компьютер кеширует эту информацию. И мы можем сделать эмуляцию в файле windows host на какой-то ip-шник поставить какое-то имя. Так же можно и от реклам отцепиться. Узнать ip-шники adware сервисов и их на себя замкнуть и никакие рекламы приходить не будут. Таким образом работает DNS. Есть по DNS вопросы? DNS это система , которая позволяет читабельное для человека имя превратить в ip-шник. И ничего больше. А уже дальше работает веб сервер.</p> <h3>Что такое адрес cool.blog.mysite.ru</h3> <p>cool домен 4-го уровня <br>blog домен 3-го уровня <br>mysite домен 2-го уровня <br>ru домен 1-го (верхнего) уровня </p> <p>Что такое адрес. Мы должны определенным образом сформировать имя. Читаем справа налево до точки. Домен 1-го уровня, потом 2-го и так далее.</p> <h3>Что такое гиперссылка (href) http://user:pass@site.com:80/pa/th?q=val#hash</h3> <p>http - protocol <br>user - username <br>pass - password <br>site.com:80 - host <br>site.com - hostname <br>80 - port <br>/pa/th?q=val - path <br>/pa/th - pathname <br>?q=val - search <br>#hash - hash </p> <p>Что у нас вообще может быть в адресе. Рассмотрим URL. У нас есть протокол http. Может быть user password но не обязательно. Тот что до собачки. У нас есть hostname site.com. Порт 80. Путь к ресурсу, например, к страничке. Далее уже какие-то опции и хеш, чтобы адресоваться к конкретному месту на странице.</p> <p>Есть стандарт для именования URL/URI/URN</p> <h3>DNS</h3> <p>Типы записей DNS <br>A - адрес IPv4 <br>AAAA - адрес IPv6 <br>CNAME - псевдоним для доменного имени <br>MX - адрес почтового сервера <br>SRV - адреса и порты сетевых сервисов <br>NS - адреса DNS-серверов, ответственных за зону <br>PTR - доменное имя для IP-адреса <br>Другие редко используемые типы записей </p> <p>Запрос записей разных типов <br>nslookup -type=XXX yandex.ru </p> <p>Что такое DNS. Изначально он писался очень давно. На нем хранятся DNS записи соответствия адесов ip-шникам. Допустим мы купили доменное имя. Они продаются и перепродаются. Некоторые стоят больших денег. Если вы сможете купить yandex.ru и продать его то можно озолотиться. Есть бизнесмены которые скупают хорошие имена, а потом их продают. 99% не выстрелят, а один выстрелит и покроет затраты на все остальные. На самом деле это список, где написано хост такой-то лежит на таком-то адресе. Чаще всего с этим работает администратор и львиная часть девелоперов никогда в жизни с этим не сталкивается.</p> </article> <article class="article"> <h3>4. Архитектура web-приложения</h3> <p>Клиент - Интернет - Сервер</p> <p>Давайте поговорим про архитектуру web-приложения. У нас есть Клиенты , сеть Интернет. Почему интернет? Сейчас любая сеть поднимается в интернет, локальная сеть ушла в прошлое. Множество сервисов лежать внутри облаков, связанных между собой по сети интернет. Несколько клиентов обращаются к серверу, сервер возвращает ответ.</p> <h3>Что такое сервер</h3> <p>- Приложение, которое располагается на выделенном физическом или виртуальном сервере <br>- Имеет собственный IP адрес и порт <br>- Работает под управлением веб-сервера или является self-hosted <br>- Имеет известный протокол или API для взаимодействия с ним </p> <h3>Что такое клиент</h3> <p>- Браузер <br>- Различные API клиенты: <br>&nbsp;&nbsp;- Мобильные приложения <br>&nbsp;&nbsp;- Сторонние веб-серверы <br>- Специализированный "толстый" клиент <br>&nbsp;&nbsp;- ERP, CRM, WMS <br>&nbsp;&nbsp;- Мессенджеры <br>&nbsp;&nbsp;- Игровые клиенты <br>- Утилиты <br>- Аппаратные решения </p> <p>Львиная часть клиентов сейчас это браузер. Сторонние веб серверы в качестве клиента это когда два сервера между собой поговорили, например, что запрос от пользователя имеет право получить доступ к ресурсу. Мессенджеры, утилиты, аппаратные решения, к интернету может подключаться даже роутер. Вы купили роутер и через интернет его надо настроить и он на это время стал клиентом.</p> <h3>Клиент - Сервер</h3> <p>HTML <br>JSON <br>XML <br>Проприетарные форматы <br>Бинарные данные </p> <p>Какие у нас есть взаимодействия. Когда мы работаем с клиентом, то мы отправляем информацию и получаем информацию. Это примерно то же самое что мы делаем с методами. Мы вызвали метод и передали туда данные и получили результат. Здесь тоже самое только не внутри памяти вашего компьютера а внутри сети. Для того чтобы общаться клиенту с сервером были придуманы протоколы. Первый протокол, который стал базовым стандартом это HTML. Все браузеры должны его поддерживать. Правда сейчас chromium всех выкинул с рынка. Сделал все хорошо и бесплатно - забирайте себе и пользуйтесь. HTML для отображения страницы. Для передачи данных с сервера и на сервер это JSON. Удобный, компактный вариант. Еще есть XML в которой есть группы, подгруппы, параметры. JSON кроссплатформенный, с ним многие языки нативно работают. JSON сейчас популярен. Есть какие-то проприетарные форматы. Вы можете сделать свой протокол. Ну и бинарные данные. Когда данные ходят между сервисами. Не надо уже никаких ключей. Надо сделать быстро, желательно мгновенно, защищенно и не тратить лишнего траффика.</p> <h3>HTTP</h3> <p>Это Hyper Text Transfer Protocol. Он изначально разрабатывался как набор правил, который позволяет двум точкам понять друг друга. Когда вы посылаете информацию с точки на точку, то на самом деле вы посылаете текст. Клиент делает на сервер html request, который имеет header и body. В header говорится что нужно сделать, а в body какие-то данные. На что сервер отправляет http response, которые тоже имеет header и body. В header говорится на что сервер отвечает и в body сам ответ.Что из себя представляет он внутри.</p> <p>Где можно посмотреть эти запросы и ответы. В браузере надо открыть инструменты разработчика, выбрать network</p> <h3>HTTP - Коды ответов</h3> <p>1xx - Informational. The server acknowledges a request <br>2xx - Success. The server completed the request as expected <br>3xx - Redirection. The client must perform further actions to complete the request successfully <br>4xx - Client Eror. The API request failed with the information provided by the client <br>5xx - Server Error. The server failed to fulfill a valid request due to an error with server </p> <h3>HTTPS</h3> <p>Вся передаваемая информация ( даже логин и пароль ) по http видна всем промежуточным роутерам между клиентом и сервером. Поэтому поверх http накладывают tls и получают https протокол. На стороне клиента и сервера есть секретный ключ, который шифрует все данные. Есть симметричное и асимметричное шифрование. http и https это request и response. От клиента запрос, от сервера ответ. Если клиент ничего не спрашивает, то сервер ничего ему и не отвечает. Когда я первый раз отправляю https запрос к сайту. Я в ответ получаю ключ для симметричного шифрования. И с этим ключем в рамках этой сессии работаю.</p> <h3>WebSocket</h3> <p>Возникла потребность в протоколе, который позволит и серверу обращаться к клиенту. Придумали WebSocket. Это надстройка над http. А wss надстройка над https. Клиент по http соединяется с сервером и говорит - я хочу с тобой работать через websocket. Если сервер согласится, то на клиенте и на сервере поднимаются открытые сокеты, которые начинают слушать информацию друг от друга. Двунаправленное соединение. Сервер может по этому сокету что-то послать и клиент может по этому сокету что-то послать. Таким образом делают чаты. Не все серверы и клиенты могут делать вебсокет - не всем это разрешено.</p> <h3>HTML</h3> <p>Это один из подвидов XML. Язык гипертекстовой разметки. В нем есть один блок htlm, блок head и блок body. То что показывается на странице лежит в body. Web разработчики - frontend и fullstack должны уметь верстать на html. В браузере html трансформируется в DOM иерархическую структуру, по которой можно уже искать элементы и что-то с ними делать. Javascript в браузере работает не с текстом html, а с DOM.</p> <h3>CSS верстка</h3> <p>Раньше CSS позволял только поменять цвет, шрифт и остальные простые вещи. Сейчас CSS используется для адаптивности, когда сайт на разных устройствах и на разных размерах браузера выглядит по разному. При помощи CSS определяется размещение элементов.</p> <p>a { background-color: yellow; }</p> <p>Таким образом можно в CSS выбрать элемент и назначить ему стили. CSS это достаточно большая тема и выходит за рамки данного курса</p> <h3>CSS Фреймворки</h3> <p>Bootstrap <br>Foundation <br>Bulma <br>UIKit <br>Materialize <br>Tailwind CSS </p> <h3>CSS препроцессоры</h3> <p>Зачем нужны <br>- Позволяют упростить разработку <br>- Позволяют повторное использование кода <br>- Позволяют использовать переменные <br>- Позволяют минимизировать объем CSS кода <br>Какие есть препроцессоры <br>- Less <br>- Sass </p> <h3>JavaScript</h3> <p>- Интерпретируемый <br>- Регистрозависимый <br>- Однопоточный <br>- Имеет сборщик мусора <br>- Умеет автоматически приводить типы <br>- и многое другое </p> <p>Современные веб приложения и сайты не могут жить без JavaScript. JavaScript сейчас везде мейнстрим захватил.</p> <h3>TypeScript</h3> <p>- Строго типизированный <br>- Ранний поиск ошибок <br>- Обратно-совместимый с JS <br>- Более строгий и читаемый код <br>- Реализует ООП </p> <p>В 2012 году микрософт сделал typescript. Причем typescript разрабатывал Хейлсберг, который сначала разработал Delfi а потом разработал C#. Это развитие языка. Если Javascript интерпретируемый, то Typescript уже компилируемый язык. На typescripte пишут код, который проверяет типы, защищает от ошибок, но на самом деле он должен потом скомпилироваться в javascript. Браузер с чистым typescript не работает. Проверка типов позволяет избежать ошибок на ранней стадии. На базе typescript написаны VSCode, Node.js, Angular.</p> <h3>JS Фреймворки</h3> <p>- Angular <br>- React <br>- Vue <br>- React Native <br>- Electron </p> <h3>AJAX</h3> <p>Для чего нужна AJAX. В традиционном веб приложении мы отсылаем на сервер запрос. Сервер нам присылает в ответ html страничку, например. С это страницы мы еще запрашиваем CSS, JS какие то картинки и т.д. После этого браузер уже отображает эту страничку сформированную целиком. Плюсы - это быстро и даже самый тупой браузер с этим справляется. Минусы - никакой интерактивности. Поэтому решили сделать технологию AJAX. Как это работает. Первый раз браузер посылает на сервер запрос и получает страничку с джаваскриптом, который уже сам может делать AJAX запросы без перезагрузки страницы целиком. Например, при нажатии на кнопку javascript посылает AJAX запрос серверу и в ответ сервер отдает данные на основании которых кнопка потом станет синей. И это называется AJAX когда один раз загрузили страницу и потом гоняем данные к серверу и обратно без перезагрузки.</p> <h3>CORS</h3> <p>Main request: defines origin. Same-origin requests (always allowed). Cross-origin requests (controlled by CORS). Нужен для защиты пользователя от сторонних сайтов.</p> <h3>JQuery</h3> <p>Селекторы <br>Управление DOM <br>Динамика <br>Плагины </p> <p>JQuery это популярная библиотека, которая позволяет сделать интерактивность на сайте. Взяли на себя удобную работу с DOM. На ней написано немерянное количество плагинов.</p> <h3>SPA приложения</h3> <p>SPA приложение можно делать на чистом js, react (от программистов фейсбука), angular (от программистов гугла), vue. Каждое приложение разбивается на кусочки - на компоненты. Например, компонент меню, хедер, статья. И мы их собираем вместе.</p> <h3>Blazor</h3> <p>Микрософт тоже захотел сделать свой фреймфорк для SPA приложений. Первая попытка была SilverLite но комьюнити его не приняла.Тогда микрософт переманила часть .net разработчиков на разработку веба и сделала Blazor. Blazor есть двух видов. Первый на базе Web Assembly делает классические SPA приложения. В этом случае отличие Blazor от Vue только в способе работы с DOM и разметкой. На браузере запускаем WebAssembly. На WebAssembly запускается .NET платформа. Таким образом мы запускаем .net внутри браузера и с ним живем. Но все общение с сервером делается посредством request-response через rest, через websockets и т.д. Вторая схема Blazor которую предлагает микрософт - это где клиентского приложения как бы не существует. Это Server Render приложение. Мы запускаем в браузере приложение. Приложение по вебсокету через библиотеку SignalR соединяется с сервером и получает по запросу маленькие кусочки которые автоматически вклиниваются в нужное место на странице. И вы уже разрабатываете десктопное приложение. Это выход для тех кто не хочет работать с классическими приложениями. Сейчас на Blazor уже можно делать даже мобильные приложения. </p> <h3>Web server</h3> <p>У нас есть приложение и база данных. Мы купили домен, разместили их на хостинге на сервере. Все хорошо работает до тех пор пока к нам не стало приходить много людей и поступать много запросов в базу данных.</p> <h3>+ Хранилище</h3> <p>Начинает уже все подтормаживать. И теперь база данных становится узким местом. Что делать? Мы делам несколько баз данных. Создаем для них кластер. Делаем одну базу данных для записи. И много баз данных для чтения. Настраиваем PostGress чтобы все что мы записали в одну базу данных быстренько копировалось в остальные. Таким образом мы развязались с базами данных. Но у нас есть еще файлы, картинки. И мы хотим чтобы эти файлы тоже не хранились на нашем сервере. Давайте вынесем их на какой то сервис, амазон с-3 - это система для хранения файлов. Все картинки теперь храним там, все документы в защищенном месте. Приложение опять стало маленьким</p> <h3>+ Кэширование</h3> <p>Потом мы начинаем понимать, что одно и то же делается - дай мне какую-нибудь страничку. И все подряд запросы запрашивают эту страничку. А мы каждый раз делаем запросы в базу данных, собираем все в кучу. Долго. Решаем добавить кэш. На базе Redis например. И часть информации, которая не меняется скидываем в кэш. Просят страничку, смотрю в кэш, если она там есть - отдаю ее. База данных не нагружается, скорость увеличилась.</p> <h3>+ Балансировщик</h3> <p>Через какое-то время понимаем что все хорошо, но само приложение начинает теперь не справляться. Ограничивается мощностью компьютера, размером памяти. И мы начинаем наше приложение разделять. Это на одном компьютере, а это на втором и т.д. Мы сделали несколько инстансов нашего приложения на разных компьютерах сервера. И для того чтобы это все работало повесили балансировщик. Клиент приходит на балансировщик, а он уже сам распределяет какое приложение ему показать. У балансировщика будет IP всей системы, а у приложений будет у каждого собственное IP. Теперь мы должны соблюдать некоторые правила. Каждый инстанс приложения должен быть stateless. Внутри ничего не должно храниться. Получил запрос, отработал, вернул результат и забыл об этом. Тогда клиент делая разные запросы может попадать на разные интсансы приложений и ему нет никакой разницы. Когда в рамках одного или нескольких серверов есть несколько инстансов это называется горизонтальное масштабирование. Мы просто начинаем увеличивать количество наших сервисов (хотя сервер может быть и один). Они начинают работать каждый со своей базой данных, они читают один кэш.</p> <h3>+ Микросервис</h3> <p>Мы понимаем что у нас куча однотипных действий. Делается одно и то же. Тогда мы из нашего сервиса достаем эти однотипные действия и кладем в микросервисы. Например, один микросервис будет делать картинки, второй отпраляет емейлы, третий отправляет смс сообщения. В итоге наши начальные сервисы еще разгружаются.</p> <h3>+ Шина данных</h3> <p>Добавляем шину данных. Которая ставится между микросервисами и нашей системой и отвязывает их. Получается очень гибкая система.</p> <h3>+ Потоковая обработка</h3> <h3>+ Архив данных</h3> <h3>API architecture styles</h3> <p>SOAP XML-based for enterprise applications <br>RESTful Resource-based for web servers <br>GraphQL Query language reduce network load <br>gRPC High performance for microservices <br>WebSocket Bi-directional for low-latency data exchange <br>Webhook - Asynchronous for event-driven application </p> </article> <article class="article"> <p>Поговорим про то как общается клиент с нашим веб приложением. Это все способы общения клиента с сервером, либо сервера с сервером.</p> <p>SOAP это специальный протокол, разработанный микрософт и предназначен для обращений сервис + сервис. Здесь можно организовать транзакции. Если какой-то протокол не пришел то все отменится. Здесь можно организовать защиту, шифрацию. Сейчас при помощи SOAP в России активно идет взаимодействие с госуслугами. Система межведомственных взаимодействий работает на базе SOAP. Построена на базе http. Например, формирует письмо и по http его отправляет. Плюсы - защищенность, шифрование, можно отследить что куда и как. Это нужно для того чтобы обеспечить надежность. Минусы - большие объемы, не все типы и библиотеки поддерживаются. Например, на мобильные приложения не поддерживаются.</p> <p>REST это мягкие правила. На них сейчас все и пишется. <br>client-server <br>stateless <br>cashable <br>uniform interface <br>layered system <br>code on demand <br>starting with the null style </p> <p>Построен на базе http. Отправляем запрос по http и приходит ответ или json по http. REST это правила. RESTful это приложения которые полностью поддерживают все эти правила.</p> <h3>HTTP методы</h3> <p>GET <br>POST <br>PUT <br>DELETE <br>TRACE <br>OPTIONS <br>CONNECT <br>PATCH </p> <h3>GraphQL</h3> <p>Мы вместе с request отправляем json строчку - json блок, в котором говорим что мы хотим получить. Посылаем наш запрос на сервер. Там уже есть GraphQL библиотека, которая знает где что взять. Она ищет ответ в базе данных или других сервисах и возвращает нам ответ именно о том что мы попросили. В итоге вы можете сами регулировать тот объем информации, который будет по сети гоняться. Можно послать запрос на получение и на изменение информации. Еще в GraphQL можно сделать подписку на события. Если что-то поменялось - вам придет ответ.</p> <h3>gRPC</h3> <p>Local Call vs Remote Procedure Call. Открытый протокол для обмена бинарными данными.</p> <h3>WebHook</h3> <p>WebHook vs Polling. При polling мы постоянно делаем запрос пока не получим нужный нам ответ. WebHook дает информацию и говорит - как будет результат пришли его мне.</p> </article> <article class="article"> <h2>8. Уязвимости</h2> <p>- Инъекция <br>- Сломанная аутентификация <br>- Раскрытие конфиденциальных данных <br>- Внешние атаки XML (XXE) <br>- Нарушенный контроль доступа <br>- Неверная конфигурация безопасности <br>- Межсайтовый скриптинг (XSS) <br>- Небезопасная десериализация <br>- Использование компонентов с известными уязвимостями <br>- Недостаточное ведение журнала и мониторинг </p> <h3>Рекомендации по защите</h3> <p>- Установите и включите файрволл <br>- Регулярно проводите оценку уязвимости <br>- Не используйте старые версии серверов, фреймворков, библиотек, сервисов <br>- Записывайте и анализируйте сбои в работе системы <br>- Используйте анализаторы исходного кода и средства поиска уязвимостей <br>- Учитесь сами и обучайте свою команду правилам защиты <br>- Обращайтесь в специализированные компании для аудита и защиты информационных систем </p> </article> ','<article class="article"> <div id="link-to-dsr2023net" class="btn-back">назад</div> <h1>2023-10-30 DSR .NET School 2023 Lecture #5 Infrastructure</h1> </article> <article class="article"> <h2>Лекция 5. Инфраструктура</h2> <p>Добрый день. Меня видно? Слышно? Всем добрый вечер. Рад вас снова видеть. Давайте начнем сегоднюшнюю лекцию. Сегодня будет достаточно простая лекция. Скорее для отдыха небольшого. Поговорим об инфраструктуре. На прошлой лекции мы поговорили про веб приложения в целом. Из чего оно состоит. И разобрали игровую архитектуру. До того момента как мы перейдем непосредственно к программированию, давайте немножко поговорим о том, что нам пригодится для работы. Что пригодится для разработки систем. Про такую инфраструктуру сегодня поговорим. О чем сегодня пойдет речь.</p> <h3>О чем будет эта лекция</h3> <p>Visual Studio <br>Git / GitFlow / GitHub <br>Docker <br>RabbitMQ <br>Redis <br>OpenAPI / Swagger <br>Fiddler <br>Postman <br>DocFX <br>DBeaver <br>Installers </p> </article> <article class="article"> <p>Сегодня мы поговорим немножко про Visual Studio. Поговорим в целом про IDE. А Visual Studio это одна из IDE. Скрины у меня сделаны про Visual Studio, будем говорить на базе нее. У кого есть Rider, умеете ей пользоваться, кто привык - никакой разницы, можете искать аналогию и искать похожее у себя. Там 100% это есть. Поговорим про Git, что такое GitFlow. Чем отличается от гита, от гитхаба. Docker, RabbitMQ немножко поподробней. Redis и тулзы, которые нам пригодятся для работы. В частности OpenAPI и инструмент Swager, который позволяет этот API создавать.</p> <p>В целом, вкратце мы про это поговорим. И я приготовил вам небольшой кусочек по RabbitMQ и по Redis, чтобы можно было посмотреть вживую. В конце лекции посмотрим на кусок кода и посмотрим как эта штука работает. Потом я исходный код выложу в репозиторий. Ссылку выложу в наш телеграм. Можно будет скачать и смотреть. В будущем в этот же репозиторий гитхаба буду выкладывать новые лекции и потом там будем делать практику.</p> <p>Давайте приступим. Я сегодя постараюсь вас долго не задерживать. Потому что тема, я считаю, достаточно легкая, обзорная. Надо просто на нее посмотреть. И дальше уже чисто попробовать руками.</p> <h2>VS - Установка</h2> <p>Итак. Visual Studio. Я думал что бы вам рассказать про Visual Studio. И первое дело, что я рекомендую сделать, это установка. Сначала скачайте инсталятор. Сейчас все делается через инсталятор. Обязательно отметьте ASPNET and web development с ним мы будем работать. А для удовольствия, для себя можете отметить и поставить .NET desktop development, Mobile development with .NET и Universal Windows Platform development</p> <p>После того как выберете пакет ASPNET and web development, зайдите в Individual components и поставьте себе нужные пакеты. И обязательно зайдите на Language packs и поставьте English. Я ничего не имею против переведенных средств, но в этом случае вы будете работать именно с переводом. Переведено достаточно неплохо, но вам в голове придется постоянно делать обратный переворот. Искать слово build вместо сборка или сборка вместо build. Ну и надо с командой говорить на одном языке. Сразу выберете универсальный, который для программирования main, и его используйте.</p> <p>После откройте Installation locations куда поставить. Нажимаете установку и ждете долго. Visual Studio может долго скачиваться. Долго устанавливаться. На слабых компьютерах по полдня.</p> <p>Для райдера установите все по умолчанию .Он все нормально сделает. И поставьте английский язык. Интерфейс с английским языком внутри.</p> <h2>VS - Проекты, решения</h2> <p>Что у нас есть в Visual Studio. С чего начинается наш веб проект. Вообще есть проект и решение. В чем отличие. Когда мы создаем новый проект Create a new project, мы можем выбрать много темплейтов, который нам нужен. Что из себя будет представлять проект. Справа у нас есть Solution Explorer. И есть несколько проектов. Solution означает сборка. То есть несколько проектов, объединенных в кучу. Внутри Solution проекты. Проект это непосредственно си шарп фолдер и он что-то делает.</p> <p>Как он будет в папке лежать? В то место куда мы это положили. У меня будет папка моего solution и внутри несколько вложенных папок. Каждая папка это проект, а файл .sln это solution, в котором будут ссылки на них. Можете посмотреть, там обычный xml с кучей информации, как microsoft любит. В нем можно разобраться и даже руками его делать.</p> <p>Внутри проекта будет следующая структура. Папки bin и obj для сборок. Сюда будут украдываться сборки. Объектный файл для сборки и для них исполняемый. Для каждой платформы будут создаваться свои папки со своим пакетом сборки. По сути там будет лежать ваше приложение. Файлы с расширением .cs это код на языке си шарп. Бегать по тому из чего состоитVisual Studio. Смотреть окошки, как я делал в прошлом году, смысла нет.</p> <h2>Что однозначно пригодится</h2> <p>Solution and code navigation</p> <p>Output and error logs</p> <p>Breakpoints</p> <p>Watches</p> <p>NuGet</p> <p>Terminal</p> <p>Package Manager</p> <p>Test Explorer</p> <p>Auto documentation markup</p> <p>Refactoring tools</p> <p>Publication tools</p> <p>Давайте поговорим на что обратить внимание и что искать в любой IDE. Во-первых изучите как отображается приложение, проекты. Что такое solution как им управлять. Где кнопки build и compile. Clear и так далее. Научитесь навигировать по коду. Это не только выбор в дереве solution файла - два раза щелкнуть, открыть. Можно навигироваться по коду через гиперссылки, которые автоматически строятся внутри кода уже. Если нажать ctrl и навести на что-то - можно прыгнуть вглубь или наверх. Обязательно изучите потому что это сильно помогает.</p> <p>Вам обязательно понадобятся Output and error logs. Когда вы будете собирать и у вас неполучится, читайте сообщения об ошибках. Там будет информация которая позволит вам разобраться где ошибка и ее быстро исправить. output покажет как ваше приложение собралось и куда оно собралось.</p> <p>Breakpoints это такие точки. Вы можете в коде поставить напротив строки. Приложение запускаете, выполняете и когда программа долшла до этой строки - все останавливается. Вы можете посмотреть содержимое переменных, пройти по шагам, выполнить дебаг. Breakpoints бывают безусловные, остановка на нужной строке кода. Или условные , например, если переменная больше 10.</p> <p>Watches это набор утилит, которые позволяют посмотреть и отслеживать переменные. Сделать так чтобы вот эта переменная отслеживалась. И дальше идете по шагам и смотрите как она увеличивается или уменьшается. Они бывают постоянные, закрепляемые - просто гвоздиком прижали. Они где-то на коде будут висеть. Или остановились и сделали калькуляцию.</p> <p>NuGet для си шарпа это тоже самое, что npm для мира javascript. Это технология подгрузки готовых билиотек и подключение их к вашему проекту. Самостоятельно вы будете делать какую-то чать, а львиную часть настроек будет делать за вас NuGet пакеты. Даже просто когда вы создаете проект в студии, у вас там куча NuGet пакетов от microsoft уже подключено. Например, нужно подключить slager и у вас появилась целая функциональность. Настроили - все работает. Можете писать самостоятельно NuGet пакеты. Позже у нас будет целый слайдик. Мы про это специально поговорим. Они бывают бесплатные и платные. Вы можете купить набор компонент. Подключить их через NuGet. Прописать в код лицензию. И получить хорошую функциональность, которую самостоятельно вы бы очень долго писали.</p> <p>Termanal. Сейчас через Terminal работают много.Через него работают с гитом, те которые профессионалы. Поэтому найдите где у вас находится терминал.</p> <p>Package Manager. Это встроенный внутрь Visual Studio powershell. Он позиционируется на определенную папку. И позволяет выполнять команды в указанном месте. С помощью Package Manager мы будем создавать миграции. Как в райдере не скажу, возможно придется пользоваться обычными командами из терминала.</p> <p>Если будете писать тесты, найдите где находится Tests Explorer. Изучите как он запускается. Что это такое. Сегодня для Visual Studio я вам покажу.</p> <p>Auto documentation markup. Полезная вещь. Надо изучить. Ничего сложного нет. Я сейчас на коде покажу что это такое и зачем.</p> <p>Рекомендую изучить refactoring. Если кто-то давно работает с Visual Studio он наверняка себе ставил решарпер - самый популярный extension для того чтобы выполнять рефакторинг. Тот кто работает с Rider у них решарпер уже внутри. В Visual Studio даже у community version достаточно неплохой набор рефакторинг утилит. Можно пользоваться. Я часто пользуюсь самой популярной какая есть это rename. Очень активно использую.</p> <p>Publication tool. После того как приложение написали, его необходимо опубликовать. На самом деле, можно все это публиковать через терминал. В обычных командах dotnet publish и дальше параметры. Но зачастую, можно настроить несколько вариантов публикации. Например публикация в папку или сервер. Для этого есть определенные тулы, которые при помощи конфигурационных файлов за вас эту работу будут делать. Найдите, посмотрите как пользоваться.</p> <p>90% того что вам потребуется от IDE здесь написано.</p> </article> <article class="article"> <h2>Автодокументирование</h2> <pre>\n  /// &lt;summary&gt;\n  /// Constructor for matrix\n  /// &lt;/summary&gt;\n  /// &lt;param name="rowCount"&gt;Count of rows&lt;/param&gt;\n  /// &lt;param name="colCount"&gt;Count of columns&lt;/param&gt;\n\n  public Matrix(int rowCount, int colCount)\n  {\n    this.rowCount = rowCount;\n    this.colCount = colCount;\n\n    if (rowCount &lt;= 0 || colCount &lt;= 0)\n      throw new ArgumentException("rowCount or colCount must be greater than zero");\n\n    data = new int[rowCount, colCount];\n  }\n\n  static void Main(string[] args)\n  {\n    var mtrx = new Matrix(5, 5);\n    mtrx.Fill(1);\n    mtrx.Print();\n  }\n  </pre> <p>Когда вы пишете любой класс. Вы можете поставить три слеша и у вас автоматически будет собран такой блок. То есть summary и для всех параметров добавится строчка param name. Если в класс добавить лишний параметр то уже Visual Studio будет ругаться и при помощи быстроко действия этот параметр можно добавить в автодокументацию. Для таких комментариев целая куча утилит работает, которые помогают вам писать хороший код. Во-первых это помогает непосредственно вам. Если у вас есть комментарий, то потом вы будете видеть подсказки при наведении на параметры класса. Если вы будете красиво и правильно описывать свои коды, ваш код будет самодокументируемым. И для того чтобы понять его не надо лезть внутрь, в документацию. Хорошие короткие комментарии вам помогут при использовании классов. На базе этих документируемых тегов, можно настроить работу слагера. И у вас будет автоматически генерироваться более хороша API документация. Можно настроить работу с автодокументированием кода и созданием документации по коду при помощи утилиты DocFX. Вы научитесь этим пользоваться. У вас будет привычка, через какое-то время вы без этого уже не сможете.</p> </article> <article class="article"> <h2>Рефакторинг</h2> <h3>Rename</h3> <p>- Установить курсор на переименовываемый элемент</p> <p>- Нажать Ctrl+R+R</p> <p>- Аккуратно ввести новое имя</p> <p>- Нажать Enter</p> <h3>Other</h3> <p>- Установить курсор в нужное место или выделить нужный текст</p> <p>- Выбрать "Quick Action and Refactorings"</p> <p>- Выбрать нужное действие</p> <p>Рефакторинг это быстрая правка. В коде что-то надо быстро поменять. Например, нашли ошибку. У вас есть переменная, которую вы уже в 50 местах используете. И вы замечаете в имени переменной грамматическую ошибку. Как поправить. Первое это взять поиском все найти и переправить. Глобальный поиск по файлу. Заменить одно слово на другое. Никогда так не делал. Кучу проблем огребете. Если слово короткое и неуникальное. Ладно еще если код поменяете, а если поменяются конфигурационные файлы, потом в жизни не найдете. Поэтому лучше так не делать. Или делать очень аккуратно. Можно найти и потом по каждой штучке руками и глазами пробежать - надо менять или не надо.</p> <p>А можно воспользоваться функцией рефакторинга. Рефакторинга достаточно много. В Visual Studio при наведении мышкой можно увидеть Quick Actions and Refactorings Ctrl+ю или Rename Ctrl+R+R или Remove and Sort Usings Ctrl+R+G. Ctrl+R+R нажали и появится окошко, которое позволит быстренько все поменять. Прямо в коде меняете название, исправляете ошибку, нажимаете OK. Studio пробегает по всему коду, находит именно эту переменную и ее поменяет. Ничего лишнего не зацепится.</p> <p>Есть еще какие вещи. У вас есть кусок кода, который вы хотели бы превратить в функцию. Можно сделать руками. Выделить и сказать хочу сделать extract метод. Выбираете какой. Нажимаете Enter и везде где у вас есть такой кусок кода будет подставлена функция. Локальные переменные, привести типы... На самом деле сейчас рефакторинг очень сильно помогает. Даже помогает код писать проще. Например, два вопросика поставить вместо if.</p> <p>В каждой IDE есть свои горячие клавиши. И их можно настроить. Почему с Visual Studio на Rider трудно перепрыгивать? Разный набор ключевых слов, горячих клавиш. Пока привыкнешь к этому. Потом нормально. Можно посмотреть "функция рефакторинга в Visual Studio" или "функция рефакторинга в Rider". Заведите себе маленький проект. Я использую Rename переменной, функции, неймспейса.</p> </article> <article class="article"> <h2>Отладка</h2> <p>Для отладки можно использовать</p> <p>- Терпение, представление "как оно должно быть вообще"</p> <p>- Точки останова: простые или с условиями</p> <p>Инструменты для вычисления значений переменных: <br>- Хинты <br>- Watches (autos, locals, quick watch, pinned values)</p> <p>- Логи</p> <p>Чтобы писать код без багов, вам придется пользоваться отладкой. Это проверка вашего алгоритма, идеи которую вы заложили в код на истинность. При этом никто не говорит что наш алгоритм верный и мы учли вообще все условия. Например, алгоритм может быть четким, а систему запускаете - может валиться. Почему? Потоки, например, не учли. Или несколько процессов лезут в одну точку. Те же потоки не синхронизированы. Надо решать как такие вещи преодолеть. Этот процесс называется отладка. Что для отладки использовать? Самое главное для отладки это не инструмент, а голова. Отладка это сравнение алгоритма который реализован в коде с алгоритмом который был в голове.</p> <p>Если вы пытаетесь изучить другой код. В этом случае отладка это способ изучения данног кода. Некоторые так пишут код, что без отладки не понимаешь вообще что он делает. Особенно если это legacy. Вы должны представлять что программа должна делать, где какие переменные. И должны сравнить - а то что выполняется физически оно должно так выполняться? И надо делать выводы.</p> <p>Терпение. Нельзя запустить отладку и сразу сказать - " а вот где ошибка". Простенькую можно быстро найти, а серьезную можно целый день искать. У меня был случай, очень долго искал ошибку. Часа 4 искал ошибку. Была ошибка в алгоритме. Я открыл рабочую директорию и копию файла из другой папки. Я изменения вносил в этот файл, который к проекту не прицеплен был. И чтобы я ни делал в этом файле. Что не вношу - ошибка не исчезает. Через 4 часа я догадался посмотреть а там ли я правлю. Оказалось что не там. Вернулся в нужный файл и поправил в течение 5 минут. Так что терпение и уверен что вы справитесь.</p> <p>Точки остановки breakpoints бывают просто безусловные. Поставил в коде. Программа дошла до этой строчки, сидите и изучайте. Или с условием, правой кнопкой на брейкпоинт и дальше настраиваете что хотите.</p> <p>Еще вам помогут инструменты для вычисления значений. При наведении мышкой можно сразу посмотреть какое значение у переменной, можно посмотреть хинты и wathes. Это инструментальные средства.</p> <p>Кроме инструментальных средств есть еще Логи. Простенькую программу, алгоритм вы можете проверить с помощью студии. А что-то серьезное, особенно если распределенное вы можете посмотреть единственным способом - это логи. Поэтому в серьезных системах не выкидывайте их сразу. Пытайтесь их правильно писать, подробно, в нужном виде. Если надо будет разобраться почему ваша программа по кусочкам работает а в целом нет, запустите систему логирования и все увидете. Это не только для отладки. Логи еще очен сильно помогают для аудита. В крупных системах систему логирования стараются сделать так чтобы ни байта не было потеряно. Много информации о безопасности, кто нас взламывает. По логам можно посмотреть метрику. Но смотрите чтобы в логи не попадали никакие пароли и закрытая информация. За это безопасники могут настучать по голове.</p> </article> <article class="article"> <h2>Тестирование</h2> <p>Что необходимо для написания автоматизированного теста:</p> <p>- Код, который можно протестировать</p> <p>- Четкое исходное задание и правильный ответ к нему</p> <p>- Набор тестовых данных</p> <p>- Программные заглушки или имитаторы</p> <p>Тест должен:</p> <p>- Иметь правильное название</p> <p>- Проверять только что-то одно</p> <p>- Быть максимально простым и линейным</p> <p>Мы все написали, отладили теперь надо тестировать. У нас будет одна практика про тестирование. Маленький тест напишем на практическом занятии. Там будет более подробно. Для тестов в коде пишут юнит и интеграционные тесты. Unit тесты тестируют кусочек. В интеграционных обычно используют Docker, который поднимает образ готовой системы. И тестируют всю систему. Тесты помогают не только убедиться что в будущем ваше приложение не сломается, они еще помогают протестировать нагрузку. Если у вас есть на это время, если клиент и руководство на это готовы, то старайтесь делать тесты. На практике, к сожалению, заказчики тесты выкидывают, по причине что они достаточно тяжело и дорого пишутся. Тесты простые, но их достаточно много и поэтому на них тратится много времени. Поэтому заказчик говорит "ну тесты нам сейчас не нужны, лучше на фичи добавьте, а там посмотрим". Но это смотря для кого. Для серьезных систем: банковских систем, медицинских систем, систем принятия решений, самолетные... Тесты здесь это must have. Их лучше не упускать. Поленитесь написать тест и самолет упадет. Цена ошибки очень высокая.</p> <p>В IDE или где-нибудь вам главное научиться их писать. Тест должен иметь правильное название. Делать их очень короткими. Не надо одним тестом все проверять. Как роль создается, изменяется, удаляется, назначается, есть ли у пользователя полномочия для этой роли. Это все должны быть разные тесты. Я не тестировщик, название всех тестов не знаю. Я пишу unit тесты, интеграционные тесты и нагрузочные иногда. Это для программиста нормально.</p> <p>Архитектурный тест не знаю что это такое. Если вы написали правильную архитектуру. То по какой причине она может стать не правильной?</p> </article> <article class="article"> <h2>Публикация</h2> <p>- Выбрать Publish в контекстном меню для проекта</p> <p>- Создать профиль публикации</p> <p>- Ввести требуемые параметры</p> <p>- Указать место хранения сборки</p> <p>- Выполнить сборку и публикацию проекта</p> <p>- Проверить результат в месте назначения (например, в директории)</p> <p>Публикацию также можно выполнить при помощи CLI команд dotnet, например <code>dotnet publish -p:PublishProfile=FolderProfile</code> </p> <p>Публикация это важный процесс. Это превращение вашего проекта в исполняемый модуль. Для x64 это будет одна сборка. Для x86 другая сборка. Процесс превращения исходных кодов во что-то другое называется публикацией. В студии если вы используете профиль, то можете сделать несколько вариантов - для windows и для linux. Потом можно создать сборку из студии или вызвав команду, где указать нужный profile.</p> </article> <article class="article"> <h2>NuGet</h2> <p>Если в студии открыть NuGet, то мы увидем такую формочку. Что у нас здесь есть? У нас есть репозиторий. NuGet можно поднять локально, он может быть приватный. Вы можете на сервере или локально на компьютере создать папочку и туда все пакеты складывать. NuGet это собраный кусочек вашего пакета, с определенной версией, с определенными правилами. Который можно просто подключить и пользоваться. Например, можете себе сделать библиотечку математических утилит. И вы их между своими проектами не копируете а просто подключаете из локального Nuget репозитория.</p> <p>Создать Nuget пакет просто. Вы можете любое приложение в Nuget превратить с помощью dotnet команд. nuget.org это репозиторий, место в интернете куда эти нугеты складываются. Вы можете там зарегистрировать свой аккаунт, он бесплатный, и туда публиковать. Ничего в этом сложного нет.</p> <p>Что из себя nuget представляет? У вас есть три кнопки Browse, Installed и Updates. Поле поиска, в которое можно ввести название пакета и найти его. Выбираем нужный пакет из найденных. Щелкаем на него и говорим установить. Пакет будет установлен в ваше приложение или в список solution. Альтернативный способ - открыть файл c.proj и руками вписать то что надо. Это строчки xml внутри c.proj.</p> <p>Вкладка Installed покажет то что у вас есть и вы сможете это обновить, отключить, удалить. Вкладка Update нужна если поменяется версия, то вам предложат их обновить. Ничего сложного нет.</p> </article> <article class="article"> <h2>Extensions</h2> <p>Откроем окошко Manage Extensions. Самый популярный extension это ReSharper. Обратите внимание что у него стоит значек Trial это означает что он должен быть куплен. Тут большое количество бесплатных extensions, но есть и платные. Чтобы купить платные extensions надо открыть вкладку Online и выбрать Visual Studio Marketplace. На практике я никакими extensions не пользуюсь.</p> <p>Про IDE больше разговаривать нечего. Надо просто взять и попробовать. Ничего сложного нет. Предлагаю идти дальше.</p> </article> <article class="article"> <h2>GIT - шпаргалка</h2> <p>https://git-scm.com/</p> <pre>\n  Create a Repository\n  git init [project_name] - create a new lokal repository\n  git clone my_url - download from an existing repository\n  </pre> <p>Вторая важная вещь, которая вам потребуется, это GIT. Сейчас GIT это must have. Его все используют. Рекомендую с ним разобраться, почитать. Найдите обучающий курс по гиту и пройдите его, желательно с практикой.</p> <p>Что такое git? Это программа, написанная на плюсах, которая позволяет работать с кодом. У него есть внутренний репозиторий. Он туда все складывает - исходные коды. И сохраняет все что вы делаете. В любой момент вы можете сделать слепок своего кода. И потом в любой момент к нему вернуться. Даже одному человеку с ним работать удобно. Можно исправлять ошибки, делать эксперименты в соседней ветке. Поддержка кода без гита сложно делается. Заказчику что-то отдали. Пока вы новую фичу делаете, он со старым кодом работает.</p> <p>Working directory -> add -> Staging (index) -> commit -> Local repository -> push -> Remote repository</p> <p>Как работает git. У нас есть удаленный репозиторий и есть рабочая папка с проектом. Когда мы что-то написали в рабочем проекте, подключаем эту папку к гиту. И гит начинает следить за файлами в этой папке. Git это консольная программа и управляется при помощи консольных команд. И если есть удобные средства , то это все костыли для того чтобы удобно работать с командой.</p> </article> <article class="article"> <h2>GIT FLOW</h2> <p>Когда несколько программистов работают а одном проекте, то появляется хаос небольшой. Чтобы этот хаос уменьшить придумали git flow это такой поток. Это просто программисты договорились как они будут работать с гитом. Качаем себе репозиторий. Теперь у нас есть ветка Master (или Main), в которой есть коммиты. Мы создаем ветку develop от последнего комита и будем в этой ветке всю программу выращивать. Это основной ствол нашего приложения. Несколько программистов могут делать ветки от ветки develop и делать в них свои фичи и никому не мешать. Все работают параллельно. Кто закончил свою работу, он ее сливает с веткой develop.</p> <p>Пока мы в ветке разработки develop что то делали, позвонил клиент и сказал что нашел ошибку в основном приложении на ветке master. Мы от ветки master делаем hotfix ветку, устраняем ошибку, и сливаем ее опять на master.</p> <p>Если работать в команде, строго рекомендую договориться о git flow и не нарушать.</p> <h2>GIT - инструментарий</h2> <p>- Консоль</p> <p>- Встроенный клиент IDE (VisualStudio, Rider, VSCode, Idea, WebStorm)</p> <p>- Специализированные клиенты (TortoiseGit, Fork, SourseTree, GitHub Desktop</p> <p>Cool программисты используют console.</p> </article> <article class="article"> <h2>GitHub/BitBucket/GitLab</h2> <p>GitHub pricing</p> <p>- Free: unlimited public and private repositories, unlimited number of collaborators, 500MB of storage;</p> <p>- Team($4/month): 2GB of repositories and all features of the free plan</p> <p>- Enterprise ($12/month): 50GB of storage, advanced auditing, and SAML, all features of the Team plan.</p> <p>- GitHub One (the custom pricing): the ultimate plan giving access to 24/7 official support, enchanced security, and continuous learning bonuses.</p> <p>GitHub/BitBucket/GitLab у них есть версии бесплатные. Есть вся инфраструктура чтобы работать с кодом. Помимо гита там есть CI/CD. В gitlab это называется merge reauest, в github это pull request. Когда вы сделали пачку изменений, то вы делаете запрос на слияние изменений с основной веткой. И на основной ветке появляется промежуточное состояние - такой-то программист хочет в такую-то ветку иделать изменения. Человек, у которого есть соответствующие права, просмотрит эти изменения и применит. Синьер перед тем как это применить просматривает код, смотрит что изменилось, если надо то задает вопросы. Код ревью может делать и группа программистов. Он выполняет merge и все изменения появляются в основной ветке.</p> </article> <article class="article"> <h2>Docker</h2> <p>https://www.docker.com/</p> <p>Docker host</p> <p>Docker daemon</p> <p>Docker client</p> <p>Docker image</p> <p>Docker container</p> <p>Docker registry</p> <p>Dockerfile</p> <p>Docker сейчас очень популярный инструмент. Это одно из средств виртуализации, которое серьезно повысило удобство разработки сложных систем. В частности, в использовании всяких элементов. Сегодня покажу как это делается. Что такое docker? Это система виртуализации, которая ставится на вашу машину и позволяет запустить сервис внутри вашей машины. Например, если вам нужен SQL сервер, вы можете при помощи docker поставить себе SQL сервер. Мы этим докером будем пользоваться для того чтобы делать микросервисы.</p> <p>Что из себя представляет docker архитектурно. У нас есть host, который ставится внутрь системы. Которая работает с контейнерами, которые построены на базе имеджей.</p> <h2>Docker image</h2> <p>Это закрытый шаблон и в него влезть никак нельзя. Только при помощи специального докер файла, который делает докер образ. Мы можем собирать наше приложение как бы из слоев. Например возьмем за основу сервер Debian, на него положим Python. И сверху положим наше приложение.</p> <h2>Docker container</h2> <p>Если к докер образу сверху добавить слой для записи, то получится докер контейнер.</p> <h2>Docker commands</h2> <p>Как работает docker? Как и git. Он тоже управляется консолью. Есть приложение docker desktop для учебных целей. В open source проектах он бесплатный, для комерческих - вы денежку платите. Лучше поставить docker и работать через CLI.</p> <h2>Dockerfile</h2> <p>Это файл, на основании которого, все делается.</p> <h2>Docker compose</h2> <p>Файл docker-compose.yml делается на синтаксисе yaml. Здесь делаются глобальные настройки.</p> <p>docker-compose.override.yml. Здесь делается тонкая настройка.</p> <p>Docker стал таким полезным потому что позволяет запустить несколько контейнеров и связать их между собой. С докером мы будем работать. Докер - часть практики. С докером надо будет работать на курсовой. Поэтому мы на этом остановимся. Он не слишком сложный в теории. Кому интересней поглубже посмотреть найдите какой-нибудь курс или почитайте документацию. Просто документации обычно много.</p> </article> <article class="article"> <h2>MessageQueue</h2> <p>RabbitMQ</p> <p>ZeroMQ</p> <p>Azure Service Bus</p> <p>Amazon Simple Queue Service</p> <p>Yandex Message Queue</p> <p>и т.д.</p> <p>MessageQueue это та часть которая позволяла бы работать с посылками. Мы несколько микросервисов подключаем в единой шине. И взаимодействие наших микросервисов происходит не напрямую друг с другом а через эту шину.</p> <h2>MessageQueue - RabbitMQ</h2> <p>https://www.rabbitmq.com/</p> <h3>Установка Docker.RabbitMQ</h3> <p>docker pull rabbitmq:3-management</p> <p>docker run --restart=always -d --name some-rabbit -p 5672:5672 -p 5673:5673 -p 15672:15672 rabbitmq:3-management</p> <h2>Кэширование - Концепция</h2> <p>Если у нас есть набор тяжелых запросов к базе данных, который редко меняется. Его разумно не каждый раз вычислять. А вычислить один раз и положить результат в определенное место. Когда он снова понадобиться, то не вычислять его заново а сразу вернуть готовый результат. Если не понадобится, то потом можно его удалить. Кэшировать надо не все что попало. Чаще всего кэш идет на read. Если вы будете делать кэш на быстро изменяемые данные, то смысла в нем нет, он наоборот понесет только зло. Вы помимо того что будете возвращать данные, будете еще забивать информацию для кэша</p> <p>Концепция кэширования следующая. Мы из приложения сперва лезем в кэш. Если в кэше есть то что нам надо то мы это берем и возвращаем. Если в кэше этого нет то наше приложение лезет в базу данных збирает это, кэширует и возвращает. Первый запрос будет выполнятся долго. А второй запрос уже быстрее.</p> </article> <article class="article"> <h2>Кэширование - Средства</h2> <p>Memcached (http://memcaced.org/)</p> <p>Redis (http:/redis.io/)</p> <p>MemoryCache</p> <p>В кэше должна храниться информация которую не критично удалить. Нельзя хранить информацию, которая не попала в базу данных. Например, информацию о платеже положить в кэш, а потом из кэша записать в базу данных это очень плохая идея. Надо сначала записать в базу данных. Убедиться что все записано. Достать и положить в кэш. И уже кэшом пользоваться это хорошая идея. Кэш это такая система которая не гарантирует сохранность данных совсем.</p> </article> <article class="article"> <h2>Кэширование - Redis</h2> <p>htto://redis.io/</p> <p>Установка Docker.Redis</p> <p>docker pull redis</p> <p>docker run --restart=always -d -p 6379:6379 redis</p> <p>На этом сайте можете про него почитать. Делаем docker pull redis. Последняя версия. Делаем docker run redis на таком-то порту. При помощи docker у нас redis установлен и можно с ним работать. В чем у docker большой плюс. И rabbit и redis ысе установили. Если в данный момент rabbit не нужен, я его просто остановил и у меня ресурсы освободились.</p> </article> <article class="article"> <h2>OpenAPI / Swagger</h2> <p>OpenAPI Specification</p> <p>http://swagger.io/resources/open-api/</p> <p>OpenApi Editor</p> <p>http://editor.swagger.io/?_ga=2.8124978.1295150636.1636210095-812025047.1633122614</p> <p>Swagger сейчас must have для API. Сейчас он называется OpenAPI. Если вы по спецификации опишите API, то даже не имея API, мобильный разработчик сможет с ним работать. OpenAPI это стандарт по которому надо определить какие у нас есть эндпоинты, какие есть модели, с чем они связаны, что может возвратить, какие ошибки и т.д. Все что надо знать чтобы с нашим API работать описывает API спецификация. Есть редактор Editor swagger. Вы можете им воспользоваться и с нуля написать. Можете через docker этот редактор себе стянуть. И он будет у вас локально работать, не в интернете.</p> <p>Swager (раньше назывался swagger, а сейчас - OpenAPI) это инструмент для автоматического формирования спецификации. Мы будем работать со swagger для того чтобы создать спецификацию внутри нашего приложения. Практического, которое будем делать на практике, и курсового проекта. Кроме того, он еще используется для тестирования и для отладки. Сильно повышает возможность тестирования и возможность разработки.</p> <p>http://app.swaggerhub.com/</p> <p>Как это выглядит. У нас есть файлик. Он должен быть описан в yaml или json. В нем есть методы post, get и т.д. Это tool, для того чтобы изучить API и с ним работать. В студии мы будем все делать посредством пакета Swashbuckle.AspNetCore. Swagger мы будем настраивать. Почитайте про него. Полезная вещь.</p> </article> <article class="article"> <h2>DocFX</h2> <p>http://dotnet.github.io/docfx/</p> <p>DocFX это утилита microsoft. Сейчас она встроена в дотнет. Ее можно будет скачать при помощи дотнета. Это система для получения документации по коду, модулю. Может быть кому-то для учебы понадобится. Разберитесь как эта система делается. Он пробегает по вашему коду, собирает всю информацию. И это делается автоматом. На выходе будет сайт с документацией, либо можно pdf сделать и преподавателю показать.</p> </article> <article class="article"> <h2>Postman</h2> <p>http://www.postman.com/</p> <p>Postman наверно вы все и так знаете. Это инструмент, который позволяет отправлять запросы на API. И это основной инструмент для тестирования API. Он может послать любой запрос. Крайне полезная вещь. Можно ввести заголовки, боди, отправить запрос, получить результат. Может вести историю.</p> </article> <article class="article"> <h2>Fiddler</h2> <p>https://www.telerik.com/fiddler</p> <p>Fiddler редко сейчас я его вижу уже. Он позволял перехватить траффик между браузером и локальным webapi приложением. Позволял получать все запросы, которые шли через наш компьютер, через браузер. Когда-то мне очень сильно помогал. Можно было запустить сайт, щелкнуть какую-нибудь команду и посмотреть какие запросы и ответы пришли с сервера. Только надо их отсортировать. Для этого есть тулзы, фильтры.</p> </article> <article class="article"> <h2>DBeaver</h2> <p>https://dbeaver.io/</p> <li>DBeaver это пока самый удобный и самый легкий инструмент для работы с базой данных. Это opensource. Есть платная и бесплатная версия. Платная версия будет работать с NoSQL. Мы можем делать SQLLite, Postgress всевозможные базы данных. Это единый инструмент для того, чтобы работать с базами данных. В Visual Studio такого инструмента нет. В Rider есть свой.</li> </article> <article class="article"> <h2>Инсталляторы для Windows</h2> <p>WiX</p> <p>Advanced Installer</p> <p>InnoSetup</p> <p>InstallShield</p> <p>и т.д.</p> <p>WiX бесплатный от microsoft. Платные Advanced Installer, InnoSetup, InstallShield. Сейчас инсталляторы редко используют. Сейчас используют action при помощи CI/CD на gitlab или github git репозитории. Но иногда клиенты требуют инсталляторы. Это уже на самостоятельное изучение. Мы с этим работать не будем.</p> </article> <article class="article"> <h2>Вопросы?</h2> <p>Я вам покажу кусочек кода. Хотел вам показать Cash, Test и Rabbit. Если вопросов нет, тогда я предлагаю переключиться на студию. Я подготовил небольшой проект, чтобы посмотреть можно было.</p> <pre>\n  &lt;Project Sdk="Microsofr.NET.Sdk"&gt;\n\n    &lt;PropertyGroup&gt;\n      &lt;OutputType&gt;Exe&lt;/OutputType&gt;\n      &lt;TargetFramework&gt;net5.0&lt;/TargetFramework&gt;\n    &lt;/PropertyGroup&gt;\n\n    &lt;ItemGroup&gt;\n      &lt;PackageReference Include="StackExchange.Redis" Version="2.2.79" /&gt;\n    &lt;/ItemGroup&gt;\n\n  &lt;/Project&gt;\n  </pre> <p>Вот наш solution, в котором есть несколько папок RabbitMQ, Redis. В Rabbit я сделал сервисный проект Rabbit. Это библиотечка которая будет работать с Rabbit. Вкратце покажу как работает. Базовые основы. Что у нас есть? Это сервис, который цепляется к Rabbit и позволяет получать данные.</p> <p>Тест выполняется впараллель. Имейте ввиду, что если приложение пишет кучу логов и вы выполняете кучу тестов, на которые эти логи нельзя отключить. То эти логи ваши тесты переполнят. Таким образом работает тестирование. Ну и здесь вы можете написать их сколько угодно. У нас будет практика, гже мы будем писать тесты к нашему приложению. Так что потом поиграемся. Это все что я хотел сегодня рассказать. По тулзам мы поговорили. Есть вопросы?</p> <p>Практика будет в формате live coding. Я открою studio. Открою новый пустой solution. И буду писать с вами приложение. А вы будете смотреть и желательно повторять. После того как все закончится, ваша задача будет это самостоятельно повторить руками чтобы у вас к следующей лекции было все в том же виде. Если вы это дело действительно руками создадите до конца, то к окончанию практики сможете писать приложения. По крайней мере простые, по какому-то формату, но уже самостоятельно. По крайней мере руками потрогаете. Практика покажет, тот кто самостоятельно, то что мы сделаем, онлайн повторит, он уже будет достаточно крут.</p> <p>Следующий понедельник выходной. Следующая лекция будет 9 ноября. Мы будем говорить про .net CLR.</p> </article>','<article class="article"> <div id="link-to-dsr2023net" class="btn-back">назад</div> <h1>2023-11-09 DSR .NET School 2023 Lecture #6 DBMS</h1> </article> <article class="article"> <h2>Лекция 6. Базы данных</h2> <p>Всем добрый вечер. Меня видно? Слышно? Сегодня у нас лекция смещена на четверг относительно понедельника. Был праздник. Все одохнули. Продолжим. Я вас на прошлой лекции немножко ввел в заблуждение. Обещал по NET рассказать, но NET будет следующая лекция. Сегодня мы поговорим еще немного о том что надо сейчас веб разработчикам, то что важно. И после этого мы пойдем целенаправленно в сторону NET в сторону практики.</p> <p>Наша сегодняшняя лекция будет посвещена базам данных. Мы про них поговорим. Почему это важно? Современный веб разработчик это не только тот кто пишет сайт, а тот кто пишет серьезный и бэкэнд. Если вы идете в ту среду, вам надо знать базы данных, выбирать их под разные задачи. У нас системы уже начинают собираться на серверах. Они становятся мощными, тяжелые, много клиентов. Соответственно нужен и соответствующий инструментарий. Вот сегодня про этот инструментарий мы и поговорим. Лекция будет легкая. Многие из вас что-то из этого знали. Если будут вопросы - пишите, будем сразу разбирать.</p> </article> <article class="article"> <h2>О чем будет эта лекция</h2> <p>- Зачем нужны базы данных</p> <p>- Виды баз данных</p> <p>- Области применения</p> <p>- Реляционные БД, нормализация</p> <p>- SQL, DDL, execution plan, оптимизация</p> <p>- Не реляционные БД (NoSQL), виды</p> <p>- Эксплуатация на практике (партиционирование, репликация, шардинг, failover)</p> <p>- ORM</p> <p>Базы данных. Что может быть проще? Давайте посмотрим. О чем поговорим? Что такое базы данных, зачем они нужны, какие бывают. Расскажу некоторые вещи по реляционным базам данных, которые классические. Поговорим про NoSQL базы данных. И я в конце дам некоторые архитектурные знания, если вы будете строить нечто большое. Представление как с помощью баз данных можно обрабатывать очень большие базы данных. Это будет обзорно. Если вы будете в ту сторону свою карьеру развивать, надо будет детальнее изучить, но по крайней мере основы будете знать</p> </article> <article class="article"> <h2>Данные / БД / СУБД</h2> <p>Данные - какая-либо информация, представляющая ценность</p> <p>База данных - набор данных, организованных по каким-либо правилам</p> <p>Система управления базой данных - средство для хранения, представления и манипулирования данными в базе данных.</p> <p>Давайте для начала разберем что такое базы данных. Просто введем некоторую классификацию. Чтобы мы друг друга понимали, нам надо определить только три термина - данные, база данных, система управления базой данных. В обычном разговоре программисты эти вещи путают и не совсем понимают. Данные это информация. Это то что мы храним. То, ради чего нам все остальное и надо. База данных это набор информации, после того как она организована, склассифицирована. Это может быть набор книг, журналов, бухгалтерской отчетности. Даже ваш дневник, который вы в тетрадке ведете это база данных, определенным образом организована и хранащая информацию. Система управления базой данных уже имеет отношение к IT это те самые MSSQL, PostGrass, MongoDB и т.д. Также в общих чертах и библиотека это система управления базой данных. Медленная, управляется вручную. Мы будем под СУБД понимать техническое средство для управления базой данных.</p> <h2>Основные задачи СУБД</h2> <p>- Хранение данных</p> <p>- Изменение данных по запросу</p> <p>- Поиск и предоставление данных по запросу</p> <p>- Разделение доступа к информации и средствам манипулирования ею</p> <p>- Поддержка порядка и целостности данных при манипуляции с ними</p> <p>- Масштабирование</p> <p>- Обеспечение сохранности данных (резервные копии)</p> <p>База данных нужна, во-первых, для хранения. Для поиска, изменения данных. Сейчас скорость предоставления данных очень важная вещь. Клиенты стали избалованные. По себе посмотрите. Если вы заходите на сайт а он ничего не стал вам выдавать. Вы плюнете и пойдете на другой. Если интернет магазин при попытке показать вам товар будет долго думать, то это уже не допустимо.</p> </article> <article class="article"> <h2>Области применения СУБД</h2> <p>Где могут применяться СУБД? Везде!</p> <h2>Виды СУБД</h2> <p>- Файлы</p> <p>- Иерархические базы данных</p> <p>- Сетевые базы данных</p> <p>- Реляционные базы данных</p> <p>- Ключ-значение</p> <p>- Документные базы данных</p> <p>- Графовые базы данных</p> <p>- Колончатые базы данных</p> <p>- Базы данных временных рядов</p> <p>- NewSQL базы данных</p> <p>- Многомодельные базы данных</p> <h2>Файлы</h2> <p>Особенности:</p> <p>- ограничен тип и уровень сложности хранимой информации</p> <p>- трудно установить связи между компонентами данных</p> <p>- отсутствие функций параллелизма</p> <p>- практичны только для систем с небольшими требованиями к чтению и записи</p> <p>- используются для хранения конфигурационных данных</p> <p>- нет необходимости в стороннем программном обеспечении</p> <p>- вся логика реализуется самостоятельно</p> <p>Примеры:</p> <p>- csv, xml</p> <p>Самы первые СУБД хранились просто в файле.</p> <p>Например, в файле есть какие-то слова, разделенные запятой, двоеточием или точкой с запятой. И таким образом структурирована некоторая информация. Если запятой и точкой с запятой, то это формат csv. Наверняка вы его видели. Какие у него плюсы? Ничего лишнего не требуется. Просто берете файл и в него что хотите пишете. csv это самый простой формат. Если что-то посерьезней, то это xml, json. В своих форматах никто не запрещает делать. Это один из форматов базы данных</p> <h2>Иерархические базы данных</h2> <p>Особенности:</p> <p>- ограничен тип и уровень сложности хранимой информации</p> <p>- информация организована в виде древовидной структуры с отношениями "предок-потомок"</p> <p>- каждая запись может иметь не более одного родителя</p> <p>- связи между записями выполнены в виде физических указателей</p> <p>- невозможно реализовать отношения "многих-ко-многим"</p> <p>Примеры:</p> <p>- Файловые системы, DNS, LDAP</p> <p>Здесь каждый узел имеет набор подчиненных узлов, которые тоже имеют подчиненные узлы и т.д. Удобно перемещать узлы между собой, удобно представлять данные.</p> <h2>Сетевые базы данных</h2> <p>Особенности:</p> <p>- сетевые базы данных представляются не деревом, а общим графом</p> <p>- ограничены теми же шаблонами доступа, что иерархические БД</p> <p>Примеры:</p> <p>- IDMS</p> <p>Отличие от иерархической базы данных, где все связи идут от одного ко многим, в том что здесь добавили возможность устанавливать связи между связями. Это первое развитие иерархической базы данных. Это система где узлы между собой определенными связями связаны.</p> </article> <article class="article"> <h2>Реляционные базы данных</h2> <p>Особенности:</p> <p>- поле в таблице, называемое внешним ключом, может содержать ссылки на столбцы в других таблицах, что позволяет их соединять</p> <p>- высокоорганизованная структура и гибкость делает реляционные БД мощными и адаптируемыми к различным типам данных</p> <p>- для доступа к данным используется язык структурированных запросов (SQL)</p> <p>- надежный выбор для многих приложений</p> <p>Примеры:</p> <p>- MS SQL Server, Oracle, PostgreSQL, MySQL, MariaDB, SQLite</p> <p>Реляционные чаще всего сейчас используются. Это мейнстрим. Это не только разработки, которые относятся к сайтам, но и промышленные разработки, банковские разработки. Всю нашу инфомацию мы должны описать при помощи объектов, которые представляют собой таблицу с атрибутами и полями. И есть целая куча правил, которые позволяют нашу информацию правильно организовать, получать. Это популярный и мощный подход.</p> <h2>Ключ-Значение</h2> <p>Особенности:</p> <p>- хранилища обеспечивают быстрый и малозатратный доступ</p> <p>- часто хранят данные конфикураций и информацию о состоянии данных, представленных словарями или хэшем</p> <p>- нет жесткой схемы отношения между данными, поэтому в таких БД часто хранят одновременно различные типы данных</p> <p>- разработчик отвечает за определение схемы именования ключей и за то, чтобы значение имело соответствующий тип/формат</p> <p>Примеры:</p> <p>- Redis, Memcached, ETCD</p> <p>Ключ - Значение это база данных которая основана на быстрой математике на основе хэшей. У нас есть ключ и к нему мы цепляем определенный набор информации. Если мы знаем ключ, то можем очень быстро получить информацию по этому ключу. Поиск по ключу делается при помощи быстрых алгоритмов: обход бинарного дерева, хэш таблицы и т.д. Эта база данных - анлалог dictionary в си шарп. Плюсы - очень быстрый доступ. Минусы - мы не можем установить другие связи и для получения нужной информации приходится делать несколько запросов в базу данных. Чаще всего используется для хэша.</p> <h2>Документо-ориентированные БД</h2> <p>Особенности:</p> <p>- база данных не предписывает определенный формат или схему</p> <p>- каждый документ может иметь свою внутреннюю структуру</p> <p>- документные БД являются хорошим выбором для быстрой разработки</p> <p>- В любой момент можно менять свойства данных, не изменяя структуру или сами данные</p> <p>Примеры:</p> <p>- MongoDB, RethinkDB</p> <p>Документно-ориентированные БД так же как и ключ-значение имеют какой-то ключ. А в качестве данных мы храним json объект, в котором есть документ. Плюсы - имея ключ к записи мы моментально получаем всю информацию. Гибкость в данных. Нам не надо самому базу данных разрабатывать.</p> <h2>Графовые БД</h2> <p>Особенности:</p> <p>- выглядят аналогично сетевым</p> <p>- фокусируются на связях между элементами</p> <p>- явно отображает связи между типами данных</p> <p>- не требуют пошагового обхода для перемещения между элементами</p> <p>- нет ограничений в типах представляемых связей</p> <p>Примеры:</p> <p>Neo4j, JanusGraph, Dgraph</p> <p>Графы поинтереснее чем иерархическая и сетевая модель. Определенные таблицы - узлы связаны с другими узлами при помощи ребер. И мы можем знать не только информацию об узле, но и каком образом они друг с другом взаимодействуют. Каждая база данных имеет математический аппарат для своей работы. Мы можем делать взаимосвязи, строить сетевые графы. Можем определять степени родства. Можно использовать в соцсетях. А связи будут показывать кто друг, кто заблокирован и т.д.</p> <h2>Колончатые БД</h2> <p>Особенности:</p> <p>- БД удобны при работе с приложениями, требующими высокой производительности</p> <p>- данные и метаданные записи доступны по одному идентификатору</p> <p>- гарантировано размещение всех данных из строки в одном кластере, что упрощает сегментацию и масштабирование данных</p> <p>Примеры:</p> <p>- Cassandra, HBase</p> <p>Колончатые БД это интересный подход. Нужны чтобы очень быстро получать информацию к объекты. Есть набор ключей и набор колонок. Для каждого ключа есть колонка значений. Это подход для систем с большим количеством данных.</p> <h2>БД временных рядов</h2> <p>Особенности:</p> <p>- ориентированы на запись</p> <p>- предназначены для обработки постоянного потока входных данных</p> <p>- производительность зависит от количества отслеживаемых элементов, интервала опроса между записью новых значений и фактической полезной нагрузки данных</p> <p>Примеры:</p> <p>- Prometheus, OpenTSDB, InfluxDB, TimescaleDB</p> <p>Это база данных, у которой очень быстрая скорость записи. Есть задачи, где надо не потерять ничего, это должно быть очень быстро и очень надежно. Чтобы такие задачи реального времени реализовать есть базы данных временных рядов. В чем у них плюс. Они в поток вбивают свои данные без ограничений и другие сервисы могут эту информацию считывать чтобы, например, ее анализировать. Чаще всего они используются для потоковых данных. У Postgres есть расширение которое включает в Postgres временные ряды.</p> <h2>NewSQL БД</h2> <p>NewSQL БД наследуют реляционную структуру и семантику, но построены с использованием более современных, масштабируемых конструкций. Цель - обеспечить большую масштабируемость, нежели реляционные БД, и более высокие гарантии согласованности, чем в NoSQL.</p> <p>Особенности:</p> <p>- возможность горизонтального масштабирования</p> <p>- высокая доступность</p> <p>- большая производительность и репликация</p> <p>- небольшой функционал и гибкость</p> <p>- немалое потребление ресурсов и необходимость специализированных знаний для работы с базой данных</p> <p>Примеры:</p> <p>- MemSQL, VoltDB, spanner, Calvin, CockroachDB, FaunaDB, YugabyteDB</p> <h2>Многомодельные БД</h2> <p>Многомодельные базы данных - базы, объединяющие функциональные возможности нескольких видов БД. Преимущества такого подхода очевидны - одна и та же система может использовать различные представления для разных типов данных.</p> <p>Особенности:</p> <p>- помогают уменьшить нагрузку на СУБД</p> <p>- позволяют расширяться до новых моделей по мере изменения потребностей без внесения изменений в базовую инфраструктуру</p> <p>- обеспечивают непрерывный доступ и простое распределение данных</p> <p>- имеют линейную масштабируемость и просты для разработки</p> <p>Примеры:</p> <p>- ArangoDB, OrientDB, Couchbase</p> <p>Это не отдельный класс задач, а системы собранные из своих концепций и имеют свой инструментарий.</p> <h2>Реляционные СУБД (РСУБД)</h2> <p>MS SQL Server</p> <p>Oracle</p> <p>PostgreSQL</p> <p>SQLite</p> <p>MySQL</p> <p>MariaDB</p> <p>Microsoft Access</p> <p>и т.д.</p> <p>Что такое реляционные БД? Таблицы, колонки, строки, отношения. У нас есть база данных, в которой данные мы организуем в виде таблиц. В таблице есть набор колонок column, которая является характеристикой объекта и есть строка row это уже непосредственно объект. Такая таблица описывает нашу предметную область. Если надо что-то поменять, то мы добавляем таблички но при этом модернизируем сам софт. Это минус, это достаточно дорого.</p> <h2>ER-диаграммы. Нотация</h2> <p>Это отношения между блоками. Entity, Relationships, Many-to-One, Many-to-Many. Это ядро нашей базы данных. Структурированная система. Зная эту диаграмму можно уже работать с данными.</p> <h2>Ключи</h2> <p>Таблицы связываются при помощи ключей. Ключ это одно или несколько полей, которое определяет уникальность, по которому можно определить что за объект хранится в данной строке. PK - Primary Key бывает простой и составной и идентифицирует записи. FK - Foreign Key по которому ссылаемся на другую запись.</p> <p>Поскольку у нас большое количество ключей, то на больших объемах они начинают подтормаживать. Многие компании сознательно отказываются от установки жестких Foreign Key для того, чтобы обеспечить более быструю скорость работы с данными. В этом случае у нас нет защиты и мы можем что-то удалить. Удалить справочник клиентов, например, и у нас все накладные поломаются. Разработчики идут на риск, чтобы в отсутствии внешнего ключа можно было больше клиентов обработать. Обычно все отлаживают, долго тестируют и если никаких проблем нет, аккуратно ключи удаляют. И потом трясутся чтобы ничего не сломалось.</p> <h2>Ограничения</h2> <p>Not Null - запрет на пустые значения</p> <p>UNIQUE - значение в таблице в колонке должно быть уникально</p> <p>PRIMARY KEY - первичный ключ должен быть уникальным и не пустым</p> <p>FOREIGN KEY - можно хранить только значения, которые есть в связанной таблице в ее первичном ключе</p> <p>CHECK - значение должно удовлетворять заданному условию</p> <p>DEFAULT - значение по умолчанию, записываемое при вставке записи</p> <p>На каждые ключи, на базу, на таблицу мы можем навесить ряд ограничений. У разных СУБД набор ограничений разный.</p> <h2>Индексы</h2> <p>- Кластеризованые</p> <p>- Нк кластеризованые</p> <p>Если база данных маленькая, то мы всю ее можем обратобать в памяти, а если большая то мы уже начинаем просаживаться по скорости. Простым перебором мы уже не сможем сделать. И чтобы сократить время поиска информации были придуманы индексы. Индексы это служебные таблички в которых лежат указатели с адресами таблиц где какая информация лежит. Это используется не только для того чтобы можно было сделать селект данных. По индексам можно делать и всевозможные проверки уникальности. На одну таблицу может быть несколько индексов на одно или несколько полей. Не кластеризованный индекс на одну таблицу может быть только один. Кому интересно почитайте как работают индексы.</p> <p>Мне пришлось писать базу данных. Это была простая проверка телефонных логов. И мне по ним нужно было быстро искать. Простой перебор был написан достаточно быстро, но работал по паре часов. Пришлось это все ускорять. И я сделал примитивную систему индексов. Получилось ускорение раз в 100. И я понял что правильный индекс это для базы данных очень хорошо.</p> <h2>Какие бывают индексы:</h2> <p>- простые</p> <p>- уникальные</p> <p>- составные</p> <p>- частичные</p> <p>- полнотекстовые</p> <p>- пространственные</p> <p>и т.д.</p> <h2>Триггеры</h2> <p>Триггер - это SQL процедура, которая срабатывает при каком-нибудь событии (INSERT, DELETE или UPDATE).</p> <p>Триггер может вызываться до или после выполнения изменения (BEFORE, AFTER)</p> <p>Триггеры хранятся и управляются СУБД</p> <p>Триггер не может быть вызван или выполнен вручную, СУБД автоматически вызывает его после модификации данных в соответствующей таблице</p> <p>Триггер имеет возможность сравнивать существующие и новые данные в измерняемых строках</p> <p>Триггеры действуют в рамках родительской транзакции</p> <h2>Процедуры/Функции</h2> <p>MySQL</p> <p>PostgreSQL</p> <p>Процедуры и функции имеют разный синтаксис и в разных СУБД будут действовать по разному. Смысл в том что мы какую-то логику можем перенести в СУБД и потом использовать.</p> <h2>Виды, материализованные виды (SQL Views)</h2> <p>Например, у нас есть много таблиц данных и нам надо из них сделать отчет и получить на выходе одну таблицу данных.</p> <h2>Транзакции</h2> <p>Транзакция - неделимая с точки зрения воздействия на базу данных цепочки операций, выполнямых по принципу "или ВСЕ, или НИЧЕГО"</p> <h3>ACID свойства:</h3> <p>Atomacity (атомарность) - гарантия того, что выполнятся все операции транзакции либо не выполнится ни одна.</p> <p>Consistency (непротиворечивость) - состояние базы данных находится в непротиворечивом состоянии до и после выполнения транзакции.</p> <p>Isolation (изоляция) - во время выполнения транзакции другие процессы не должны видеть данные в промежуточном состоянии.</p> <p>Durability (долговечность) - гарантия того, что если получено уведомление об успешном выполнении транзакции, можно быть уверенным, что изменения не будут отменены из-за какого-либо сбоя.</p> <h2>Уровни изоляции транзакций</h2> <p>0. Неподтвержденное чтение (Read Uncommitted, Dirty Read, грязное чтение). Чтение незафиксированных изменений своей транзакции и конкурирующих транзакций, возможны нечистые, неповторяемые чтения и фантомы.</p> <p>1. Подтвержденное чтение (Read Commited). Чтение всех изменений своей транзакции и зафиксированных изменений конкурирующих транзакций, нечистые чтения невозможны, возможны неповторяемые чтения и фантомы.</p> <p>2. Повторяемое чтение (Repeatable Read, Snapshot). Чтение всех изменений своей транзакции, любые изменения, внесенные конкурирующими транзакциями после начала своей, недоступны, нечистые и неповторяемые чтения невозможны, возможны фантомы.</p> <p>3. Упорядоченный (Serializable, сериализуемый). Чтение транзакции выполняются в строгой последовательности, результаты действий которых не зависят от порядка выполнения шагов транзакции (запрещено чтение всех данных измененных с начала транзакции, в том числе и своей транзакцией), фантомы невозможны. Чем выше уровень изоляции, тем больше требуется ресурсов, чтобы их поддерживать.</p> <h2>Блокировки</h2> <p>По области действия</p> <p>- на поле</p> <p>- на запись (на набор записей)</p> <p>- на таблицу (на набор таблиц)</p> <p>- на БД</p> <p>По строгости</p> <p>- Совместная</p> <p>- Исключительная</p> <p>По логике реализации</p> <p>- оптимистическая</p> <p>- пессимистическая</p> <h2>Нормализация (1,2,3 формы)</h2> <p>Нормализация это процесс разбития на небольшие кусочки. Из одно таблицы с базой данных получается несколько таблиц. Чем больше мы разбиваем тем сложнее становится. И это не всегда эффективно. Надо искать компромисс. Нормализовывать надо до того уровня когда это приносит пользу.</p> <h2>Плюсы реляционных БД</h2> <p>Хорошо подходит для того чтобы хранить и обрабатывать редко изменяемые структурированные данные.</p> <h2>Минусы реляционных БД</h2> <p>Изменения. Если надо часто менять базу данных то это будет выходить дороже.</p> <h2>DDL - Data Definition Language</h2> <p>Это специальный язык, который позволяет создать и описать нашу базу данных. Чаще всего стараются писать базу данных при помощи средств разработки. Получается красивая база данных, но при попытке перенести - единственный способ это backup. Альтернативный способ, очень правильный и я рекомендую им пользоваться, это создавать базу данных при помощи команд (create database, create table, alter table, truncate table). Можете написать скрипт, который при помощи команд базу данных с нуля создаст и заполнит данными. У вас будет просто текстовый файлик, который вы можете положить на гит и с ним прекрасно работать. Это неплохой способ.</p> </article> <article class="article"> <h2>SQL</h2> <p>SQL - это язык структурированных запросов, предназначенный для манипулирования данными в реляционной базе данных.</p> <p>SQL - стандартный язык для системы реляционных баз данных. Все системы управления реляционными базами данных (RDMS), такие как MySQL, MS ACCESS, Oracle, Sybase, Informix, Postgres и SQL Server, используют SQL в качестве стандартного языка баз данных.</p> <p>Различные СУБД могут использовать собственные диалекты, такие как:</p> <p>- MS SQL Server с использованием Transact-SQL</p> <p>- Oracle с использованием PL/SQL</p> <p>- PostgreSQL - PL/PgSQL</p> <p>SQL это язык для манипулирования данными. Есть базовый язык и есть нотации для каждого языка, которые уже разработчики делают. Например для MS SQL есть Transact SQL, для Oracle это PL/SQL. Это язык который позволяет вставить данные, получить данные.</p> <h2>SQL (structure query language) - Insert</h2> <p>Как можно при помощи SQL вставить запись. Insert внутрь таблицы. Указываем какие нужны колонки и какие в эти колонки вставить values. Если надо вставить много. Сделаем insert в таблицы, указываем колонки и сделаем подзапрос заполнить таблицу из другой таблицы.</p> <pre>\n    INSERT INFO table_name (column1, column2, column3, ...)\n    VALUES (value1, value2, value3, ...)\n  </pre> <pre>\n    INSERT INFO table2 (column1, column2, column3, ...)\n    SELECT column1, column2, column3, ...\n    FROM table1\n    WHERE condition;\n  </pre> <h2>SQL - Update</h2> <p>Обновить таблицу. В какие колонки что надо поставить, где какое-то условие. Где id=10 например.</p> <pre>\n    UPDATE table_name\n    SET column1 = value1, column2 = value2, ...\n    WHERE contidion;\n  </pre> <h2>SQL - Delete</h2> <p>Delete здесь все просто. Удалить из таблицы, где условие. Мы можем удалить одну или несколько записей, где выполняется условие. Truncate table мы можем удалить всю таблицу, все данные. Например, какие-то логи нам уже не нужны и delete from table пересчитывать будет долго. Он тоже все удалит, но на больших данных truncate это сделает мгновенно.</p> <pre>\n    DELETE FROM table_name WHERE condition;\n  </pre> <pre>\n    TRUNCATE TABLE table_name;\n  </pre> <h2>SQL - Select</h2> <p>Select это получение доступа. Мы можем стделать select каких-то колонок из какой-то таблицы по условию. Мы должны сформировать запрос, объединить данные, чтобы получить то что нам надо. И СУБД на основании языка эти данные предоставит.</p> <h3>AND Syntax</h3> <pre>\n    SELECT column1, column2, ...\n    FROM table_nameWHERE condition1 AND condition2 AND condition3 ...;\n  </pre> <h3>OR Syntax</h3> <pre>\n    SELECT column1, column2, ...\n    FROM table_name\n    WHERE condition1 OR condition2 OR conditio3 ...;\n  </pre> <h3>NOT Syntax</h3> <pre>\n    SELECT column1, column2, ...\n    FROM table_name\n    WHERE NOT condition;\n  </pre> <h2>SQL - Агрегирующие функции / Группировка</h2> <p>Есть простой WHERE, а есть агрегирующие функции с группировкой GROUP BY, ORDER BY. Получаем колонку из таблицы по условию и делаем группировку и сортировку.</p> <pre>\n    SELECT column_name(s)\n    FROM table_name\n    WHERE condition\n    GROUP BY column_name(s)\n    ORDER BY column_name(s);\n  </pre> <h3>The SQL COUNT(), AVG() and SUM() Functions</h3> <p>Если нужно отфильтровать поля, то в select мы можем их заагрегировать. По группировке таблица будет схлопнута, по AVG будет сумма подсчитана. Если нужно поле отсортировать то используем оператор having. Например, покажи все позиции , где сумма больше 10.</p> <pre>\n    SELECT column_name(s)\n    FROM table_name\n    WHERE condition\n    GROUP BY column_name(s)\n    HAVING condition\n    ORDER BY column_name(s);\n  </pre> <h2>SQL - Joins</h2> <p>Типы объединений:</p> <p>(INNER) JOIN Возвращает записи, значения которых совпадают в обеих таблицах</p> <p>LEFT (OUTER) JOIN Возвращает все записи из левой таблицы и соответствующие записи из правой таблицы</p> <p>RIGHT (OUTER) JOIN Возвращает все записи из правой таблицы и соответствующие записи из левой таблицы</p> <p>FULL (OUTER) JOIN Возвращает все записи, если есть совпадения в левой и правой таблице</p> <p>Специально внес потому что многие путают. Смотрите как это работает. У нас есть всего два вида объединения inner join и outer join. Для inner join можно опустить слово inner, получается select join table1 и table2. В обычном join мы по ключу пересекаем поля которые есть и в первой таблице и во второй. inner внутренний, outer внешний. Разница в чем? Когда мы делаем внешнее соединение. Я на собеседованиях спрашиваю: что делает операция lleft inner join? Из десяти девять точно начинают мне объяснять что она делает. На самом деле inner только для простого join. Left это для outer. Вот такая ловушка. Что делает left join? У нас есть левая табличка которая объединяется с правой по какому-то условию. left join возвращает все поля из левой таблицы, абсолютно все и добавляет к ним те записи включая пустые значения которые есть в правой. Если есть соответствие левой и правой таблицы, то там будут заполнены поля, если нет соответствия, то правая таблица будет нулями заполнена.full join мы возвращаем все записи левой и правой таблицы. Есть еще cross join это через запятую. Каждая таблица будет перечисление всех полей. До того как join ввели в обиход, все таблицы связывались через запятые.</p> <h2>SQL - Inner join</h2> <pre>\n    SELECT column_name(s)\n    FROM table1\n    INNER JOIN table2\n    ON table1.column_name = table2.column_name;\n  </pre> <h2>SQL - Left join</h2> <pre>\n    SELECT column_name(s)\n    FROM table1\n    LEFT JOIN table2\n    ON table1.column_name = table2.column_name;\n  </pre> <h2>SQL - Right join</h2> <pre>\n    SELECT column_name(s)\n    FROM table1\n    RIGHT JOIN table2\n    ON table1.column_name = table2.column_name;\n  </pre> <h2>SQL - Full join</h2> <pre>\n    SELECT column_name(s)\n    FROM table1\n    FULL OUTER JOIN table2\n    ON table1.column_name = table2.column_name\n    WHERE condition;\n  </pre> <h2>SQL - Вложенные запросы</h2> <p>Можно использовать LEFT JOIN, можно использовать вложенные запросы</p> <h2>Оптимизация, execution plan</h2> <p>В СУБД есть такая вещь как execution plan. Его можно достать или при помощи команд или визуально посмотреть. Он показывает как СУБД разобрал ваш запрос. Вы можете посмотреть где у вас узкое место и вы можете переписать запрос. Если вы напишете запрос правильно, он будет работать быстрее чем неправильный запрос. Чем меньшим количеством данных вы будете оперировать, то есть как можно раньше отсечете все ненужное, тем эффективнее будет работать запрос. Он достаточно умный, умеет кешировать, умеет разбирать. Вплоть до того если вы будете один запрос несколько раз запрашивать, он его даже стирать не будет. "Вы тоже самое просите? - На те вам теже самые данные". Он сам себе что-то закэшировал.</p> <p>По реляционке наверно уже хватит. Дальше дело практики. Многие с ней работали. Дальше поговорим о нереляционной базе данных. Нереляционки. Зачем они были придуманы? Как я уже говорил, реляционки они достаточно тяжелые в поддержке, их надо придумать. Качественно придумать структуру баз данных это наука. "Навскидку, я сейчас все сделаю, все получится" - нет , ничего не получится, там надо серьезно разбираться. Надо уже мыслить концепциями таблиц, колонок. Еще есть минусы, что она плохо работает с неструктурированными данными, требует дополнительных расходов. Народ начал придумывать альтернативные вещи. Все нереляционки называются NoSQL.</p> </article> <article class="article"> <h2>NoSQL</h2> <p>Key-Value Store. Например, redis, riak</p> <p>Wide Column Store. Например, HBase, cassandra</p> <p>Document Store. Например, mongoDB, CouchDB</p> <p>Graph Store. Например, Neo4j, InfiniteGraph</p> <h2>Отличие NoSQL от РБД</h2> <p>В структурированной Relational data model все четко. Таблицы, связи, перечисления. А в document data model есть документик, в котором что-то хранится в каком-то виде. Это может быть json, xml, бинарный формат. Внутри каждого элемента хранятся все данные о нем. И получив такой документ мы получаем всю информацию. Плюсы: можно делать связи, можно эффективно использовать место. Не надо думать о том ЧТО мы там храним, а надо правильно обрабатывать то что туда записали. Следить только за версионностью документа. Сами СУБД структурно проще и быстрее работают. Но не всегда. На самом деле это не так.</p> <h2>Документ в NoSQL</h2> <p>Может быть любой уровень вложенности. Плюсы - достали все за раз. Минусы - чтобы изменить элемент нужно пробежаться по всем элементам и поменять его везде.</p> <h2>Плюсы и минусы NoSQL БД</h2> <p>Плюсы. Гибкость данных. Более простые СУБД. Лучше масштабируются. Нет необходимости высокой квалификации программиста, поддержка проще.</p> <p>Минусы. Надо четко следить за БД. Сложнее обслуживать.</p> <p>Про сами СУБД поговорили. Любую СУБД надо будет изучать когда вы будете с ней работать. Там есть и плюсы и минусы. Как к ней подключаться. Это уже дело практики.</p> </article> <article class="article"> <h2>Промышленное использование СУБД</h2> <p>Особенности промышленного использования СУБД</p> <p>- Отказоустойчивость</p> <p>- Скорость записи и чтения</p> <p>- Надежность</p> <p>- Масштабирование</p> <p>- Непрерывность работы</p> <h2>Репликация</h2> <p>Представьте что есть одна СУБД, которая очень сильно нагружена. Нагружена на чтение. Много клиентов ее смотрят. Если будет одна база данных то начнутся проблемы. Будут тормоза. Разбить на несколько баз данных не очень хорошо. Как потом собрать эти данные в кучу? В одной копии измените запись и в другой копии измените эту запись на другое значение. СУБД между собой не взаимодействуют. Клиенты пишут в базу данных а у вас потом проблемы. В таком случае применяют репликацию. Выделяется одна база данных DB Primary куда все можно записать. Она все передает на другие базы данных - реплики DB Replica. Получается мы записали в одну базу данных и эта информация появилась во всех. Если клиенту надо записать в базу данных то через балансировщик Load Balancer он подключается к первой базе данных, а если надо прочитать, то он подключается к любой свободной. В итоге базы данных на чтение можно масштабировать. В итоге мы уменьшаем очередь появления информации на стороне клиента. Можно делать копии через backup.</p> <h2>Партиционирование</h2> <p>Представьте что у вас база данных с немеренным количеством данных. Например, соцсеть.</p> <h2>Шардирование</h2> <h2>Файловеры</h2> <p>Если сгорит база данных то исчеснет вся база. Применяется файловер. Это копия базы данных. Если с оригиналом чтото случается, то запасная базаданных становится главной. Какое то время эта база данных работает. За это время мы чиним второй файловер, его восстанавливаем и делаем его stand by.</p> <h2>Резервные копии</h2> <p>Виды резервного копирования баз данных</p> <p>- Полное резервное копирование</p> <p>- Дифференциальное резервное копирование</p> <p>- Инкрементное резервное копирование</p> <p>- Обратное инкрементное резервное копирование</p> <p>Это очень важно. Никогда не игнорируйте резервное копирование базы данных. Резервная копия зачастую может спасти кучу нервов. У меня был опыт. Все было хорошо. Не сделал бэкап, потому что 200 раз его делал и ничего не случилось. В этот раз не стал делать. Просто накатил скрипт на рабочую базу данных, который делал мелкую правку. Даже не тестировал. Когда скрипт выполнился. Это заняло пару секунд. Я вспомнил что забыл написать WRF в запросе. В итоге все данные были приведены к одному значению. Я name пытался у кого-то поменять и все клиенты стали однофамильцами. Ошибся в запросе. Бэкапа у меня не было. Через 15 минут я получил звонок с отдела продаж - "что за ерунда?". Меня спасло то что у меня был бекап системный, который делался раз в день. И я его откатил на несколько часов назад. Потом ходил помогал восстанавливал руками данные которые за этот день накопились. Лучше пусть вам не пригодится чем у вас этого не будет. Как и копирование не только базы данных но и своих исходных кодов. Если вы что-то сделали - сохраните это куда нибудь, в гитхаб выложите.</p> <h2>Full Backaup</h2> <p>Это самое популярное резервное копирование. Делаете один раз в неделю.</p> <h2>Differential Backup</h2> <p>Раз в день копируйте те изменения которые происходят. Когда надо будет восстановить, мы позьмем полный бэкап и будем накатывать на него изменения.</p> <p>Так как мы будем писать на си шарп код, какие у нас есть варианты работы с базой данных? Каждая СУБД предоставляет свой драйвер, определенный провайдер. Есть провайдеры неродные. Можете свой провайдер написать если ваб будет удобнее и быстрее. Есть платные провайдеры. Можете их в NuGet найти.</p> <h2>Провайдеры</h2> <p>MS SQL Server System.Data.SqlClient</p> <p>Oracle ODP.NET</p> <p>PostgreSQL Npgsql</p> <p>MySQL MySQL.Data.MySqlClient</p> <p>MongoDB MongoDB.Driver</p> <p>Redis StackExchange.Redis</p> <p>Memcached EnyimMemcachedCore</p> <p>Cassandra CassandraCSharpDriver</p> <p>Neo4j Neo4j.Driver.Simple</p> </article> <article class="article"> <h2>ORM - Object-relational mapping</h2> <p>Это вводная часть. К нас потом будет большая лекция. ORM это подход, когда мы должны отвязять нашу базу данных от кода. Если раньше мы писали SQL запросы join, seect, четко вламывались в нашу базу данных, с ней интегрировались на 100%, выжимали из нее все соки. В итоге очень эффективно меж собой работали. Плюсы - мы эффективно отработали. Минусы - мы завязаны на одну базу данных, надо имать достаточную квалификацию, могут быть SQL инъекции. ORM это альтернативный подход, когда пытаемся программиста оградить от базы данных, потому что ему трудно понять базу даных. На самом деле не рекомендую такой подход. Разберитесь с базами. Хуже не будет. Но отказ от прямой работы с базой данных это не хорошо. Что предлагает ORM? У нас есть база данных. Мы ее описываем в виде метаданных. И при помощи тулзов работаем с базой данных. В итоге есть набор слоев между базой данных и между нами. Смысл ORM это данные, которые приходят от СУБД трансформируются в объекты и отдаются нам. Мы при помощи СУБД и провайдера превращаем наш запрос в SQL запрос и отправляем на SQL. Таким образом мы можем менять СУБД. Путем отключения базы данных и подключения провайдера. И мы защищены от прямых инъекция в базы данных. Минусы - целая куча кода посередине. Если ORM некачественно сделали то мы теряем производительность. Сдесь нужно соблюдать балланс. ORM сейчас на достаточно высоком уровне. И они уже очен хорошо работают. </p> <h2>ORM - Entity Framework</h2> <p>Database First Approach</p> <p>Code First Approach</p> <p>Какие у нас есть ORM? Один из ORM это Entity Framework. У нас есть подходы к ORM. Это есть в лекциях отдельно. Мы можем взять базу данных, превратить в код и у нас будет entity понимать что мы хотим с этой базой данных оперировать. Можно на базу данных наплевать. Мы создаем код, который по правилам описан, работаем с кодом, а база данных гдето там лежит</p> <h1>ORM - NHibernate</h1> <p>Есть ORM NHibernate. Мы описываем мапинг при промощи xml. И после этого мы можем общаться напрямую. NHiberNate будет брать на себя работу всю.</p> <h2>ORM - Dapper</h2> <p>Есть еще вариант Dapper но это еще не совсем URM. Это по сути мапер. Что он делает? Низкоуровневая система. Мы включаем SQL запрос. Выполняем запрос на какой-то конекшион к любой базе данных. Тогда SQL запрос нужно написать к этой базе данных, с той нотацией которую он поддерживает. И после этого мы просто получаем результат и мапим его на определенных класс. Он автоматически превращаем наши запросы в объкт. И дальше мы с ним работаем как с объектом. Но при этом мы не можем модифицировать базу данных. Мы будем на практике работать с Entity. В принципе про базу данных все что я хотел рассказать я рассказал.</p> </article> <article class="article"> <h2>Вопросы?</h2> </article>','<article class="article"> <div id="link-to-dsr2023net" class="btn-back">назад</div> <h1>2023-11-13 DSR .NET School 2023 Lecture #7 .Net platform</h1> </article> <article class="article"> <h2>Лекция 7. Платформа .Net</h2> <p>Здравствуйте. Сегодня мы очередную лекцию начинаем. Мы приближаемся непосредственно к практическим задачам. И сегодня у нас лекция будет посвящена платформе .net. Она не такая длинная. Я думаю мы ее пораньше немножко сегодня закончим. И со следующей лекции у нас будут практические части, где мы будем обсуждать про web API и конкретно изучать, какие там элементы, из чего она состоит, на что стоит на старте внимание обратить. И если все хорошо будет, то на следующей неделе у нас начнется практика.</p> <h2>О чем будет эта лекция</h2> <p>1. Что такое фреймворк</p> <p>2. Платформа .Net</p> <p>3. Как работает платформа .Net и из чего состоит</p> <p>4. Вехи развития фреймворка</p> <p>5. Основные понятия фреймворка</p> <p>6. Что такое сборщик мусора</p> <p>7. Область применения</p> <p>Мы сегодня поговорим о платформе .net и фреймворках на ее базе. Поговорим о сборщике мусора, о памяти. И где она применяется. Пол лекции будет просто так ознакомительные, легкая. Но половину лекции стоит посмотреть, потому что часто задают это на собеседованиях. Обзорно мы сегодня это обсудим. Если будут вопросы - задавайте. Если будет желание изучить поглубже, то это на самостоятельное обучение. Информации у нас достаточно. Любая серьезная книжка расскажет побольше. Давайте начнем</p> </article> <article class="article"> <h2>1. Что такое фреймворк?</h2> <p>Сначала программисты писали все "с нуля" (работу с файлами, текстом, математические функции и т.д.). Потом еще раз тоже самое, потом еще раз.</p> <p>В итоге он выделил все в отдельный набор функций, который стал БИБЛИОТЕКОЙ</p> <p>Со временем программист начал понимать, что все приложения, которые он пишет, примерно похожи друг на друга (состоит из одних частей, имеет сходную структуру и т.д.)</p> <p>Была выделена система, которая делала что-то абстрактное, общее, в которую внедряется уникальный код, который делал специфику. Получился ФРЕЙМВОРК.</p> <p>Подумали еще и объединили фреймворки и получили СТЭК ФРЕЙМВОРКОВ</p> <p>Кто знает чем отличается фреймворк от библиотеки? Напишите в чате фреймворк и библиотека это одно и то же? "Фреймворк это целая система включающая несколько библиотек". Ну и библиотека может включать несколько библиотек. Например, библиотеки с сетью, с видео, со звуком. И будет такая большущая библиотека, но фреймворком она считаться не может.</p> <p>Смотрите. Изначально, когда программисты только начинали свою работу. Когда программы только появлялись, они были у каждого свои. Сети не было, обмен информации на перфокартах, потом на дискетках. На старте ничего не было. Когда программист писал свой софт, он понимал что некоторые вещи он делает одно и то же. И выносил это в функции, наприме, работа с математикой. И формировались кусочки повторяемого кода, которые он начинал таскать от приложения к приложению. Я думаю у каждого есть такая библиотечка, которая уже требует большого рефакторинга. Зато удобно, привыкли и т.д. У меня их тоже было немеряно и сейчас есть. Вот такой набор функций, потом кто-то сел привел все это в порядок, выкинул лишнее и это стало называться библиотекой. Библиотека это набор функций, метод, правил, которые определяют какое-то действие. И вы когда подключаете библиотеку - просто пользуетесь функционалом.</p> <p>Проходит время. Программисты пишут. И понимают что уникальных задач не так уж и много. Если он в какой-то нише работает, например, разрабатывает сайты. У сайтов одно ядро - работа с http, работа с request/response, обработка логов, работа с юзерами, аутентификация, авторизация. Они очень сильно похожи. И когда программист начинает писать новый сайт, он берет свой старый продукт, чистит его до какого-то общего состояния и начинает в него писать что-то еще. Со временем эта тенденция была выявлена. И получилось так, что можно написать какой-то кусок кода, в который внести изменения и этот код будет по одним правилам выполнять разные задачи. И этот подход, при котором у нас есть уже написанный скелет и в него мы вносим уже какую-то логику, и называется Фреймворк. В этом отличие. Библиотеку подключаем и используем ее готовые функции. А в фреймворке мы пишем по определенным правилам. Библиотека подключается снаружи. Фреймворк модифицируется внутри. Эта абстрактная система которую выделили в отдельный кусок кода и написали правила, где сделали входы, конфигурируемые кусочки, которые позволяют превратить все это в рабочий софт - это считается фреймворком. Потом объединили эти фреймворки в кучу и получили стек фреймворков.</p> <p>Например, есть библиотека Math. Это библиотека оформленная в виде статического класса, в котором есть куча чего-то. Есть фреймворк asp.net для создания MVC приложений. У вас уже из коробки есть куча кода. И вы внутри пишете контроллер. Вас не волнует каким образом делать роутинг. Вы пишите только внутренность сайта. А все что снаружи за вас написал уже фреймворк. Если вы работаете на .net то это уже целый стэк фреймворков. Есть фреймворк и для web api и для мобильного приложения. Основное отличие библиотеки от фремворка: библиотека это кирпич, мы строим дом, у вас есть кирпичи, краска - это библиотечки. Мы из них строим дом. А если у вас есть уже готовая коробка дома, а вы внутри уже можете сделать любые квартиры, но внешне все стены будут одинаковые - это фреймворк. Если у вас будут спрашивать: библиотека или фреймворк? Не путайтесь. Немножко разные подходы.</p> </article> <article class="article"> <h2>2. Платформа .Net</h2> <p>Среда выполнения (Execution Runtime Environment)</p> <p>Программное обеспечение (Software)</p> <p>Давайте немного поговорим про платформу .net. Еще до появления всяких платформ, а .net не первая появилась, до не еще было. У нас была среда выполнения (Execution Runtime Environment), например, компьютер и программное обеспечение (Software), которое было заточено под нашу среду выполнения. Например мы запускали .exe файл и он работал на виндовсе. И windows уже сам работал с аппаратным обеспечением, подключался к винчестеру, к памяти. В чем здесь особенность? Под каждую среду выполнения (операционную систему) нам надо писать свою программу. Например, приложения которые хорошо работали на pentium, уже не могли работать на 486-ом. 32 битные приложения и 64 битные приложения. Приложения из одной системы линукс не могли запускаться на другой системе линукс. Все операционные системы были вразноброд, они и сейчас-то вразноброд. У каждого свои подходы, свои api. Поэтому нельзя было сделать приложение которое могло работать во всех системах.</p> <p>Как работает .net? У нас есть программа. Программа бывает интерпретируемая или компилируемая. Интерпретируемая программа выполняет те команды, которые в ней записаны как текст. И если есть интерпретатор под разные операционные системы, то программа может заработать на разных операционных системах. Например код php будет работать и в интерпретаторе под линукс и под виндовс</p> <p>Программа - Интерпретируемая. Здесь можно сделать кросспратформенность, но при этом мы теряем в скорости. Потому что каждый раз мы должны работать с кодом как с текстом. К интерпретируемым относятся php, python и javascript.</p> <p>Программа - Компилируемая - Промежуточный код - Библиотеки - Операционная система. Компилируемая программа компилируется в промежуточный код и работает через библиотеки с операционной системой. Компилируем под определенную операционную систему и у нас получается приложение которое сразу выполняется, оно в понятном для операционной системы выде. Но компилировать надо под разные системы. Нужно писать под каждую платформу. Чтобы быть универсальным надо много знать. Трудно поддерживать. Трудно людей найти. К компилируемым относятся java, pascal, c#, typescript, rust. </p> </article> <article class="article"> <h2>3. Как работает платформа .Net</h2> <p>Как было раньше:</p> <p>- или компилировалось в исполняемый файл</p> <p>- или представляло собой COM объект</p> <p>Чем .net лучше:</p> <p>- упрощена модель установки (Global Assembly Cache)</p> <p>- обратная совместимость</p> <p>- независимость от языка программирования</p> <p>- и, с недавнего времени, кроссплатформенность</p> <p>Как работало изначально? Пытались сделать в любой операционной системе какие-то универсальные вещи чтобы что-то облегчить. Для виндовс мы могли скомпилировать файл и положить внутрь операционной системы и запускать. Либо мы могли собрать .com объект, зарегистрировать и положить его в систему. И наше приложение представляло собой не .exe файл, а набор dll, которые внедрялись внутрь windows и их можно было по специальному идентификатору достать и что-то сделать. Например, при помощи .com объекта можно было сделать драйвер работы с принтером. Драйвер работы с внешним сканером штрих-кода. Таким образом пытались универсальности добиться. Если драйверы были написаны под разные системы, например х64 и х86, вашему приложению проще работать с оборудованием.</p> <p>Чем .net лучше? Когда придумывали технологию java, еще раньше чем .net. Использовали такой подход. Для каждой машины создавалась виртуальная машина (java virtual machine). И виртуальная машина брала на себя всю работу с операционной системой. Программист писал код на java и мог запустить его на любой операционной системе если там есть виртуальная машина. Есть обратная совместимость. Если запускается в одном месте, то запускается везде. Код на java мог быть запущен даже на процессорах, если для них был JVM.</p> <p>В windows делался либо .exe файл, либо .com объект, который регистрировался. В .net сделали немножно по-другому. В системе есть Global Assambly Cache куда собираются и кэшируются все кусочки кода и в итоге работают. У .Net есть обратная совместимость и независимость от языка программирования. С какого-то времени развился до кроссплатформенности.</p> <p>Было много языков. И паскаль, и с++, и visual basic microsoft очень долго делал и развивал. Не взлетел visual basic, никому он толком не нужен кроме тех которые макросы в офисе писали, ну и какую-то еще ерунду для себя. У с++ были реальные плюсы, которые microsoft поддерживал. Но у него был один реальный минус здоровый. Во-первых, чтобы на нем писать, надо было изучить эти плюсы.Их много всяких диалектов. Для каждого могли быть свои различия. Чтобы писать не просто вычислительные функции надо было знать не только сам язык, но и правила работы с платформой. Например писать на плюсах для windows и для linux - какая-то разница есть. Это было сложно.</p> <p>Для того чтобы упростить программирование придумали язык Pascal в компании Borland. Turbo Pascal и так далее. Чем хорошо? Паскаль был очень простой язык. Легко было учить. Но были и минусы. Он был не си подобный. Кучу народа пришлось переобучать. Немножко переключилось внимание комьюнити. Он изучался как учебный. Его никто всерьез толком не воспринимал. Хотя потом он вырос в серьезные языки. На его базе был сделан язык Delfi. На нем большое количество людей писали хорошие вещи. Это компилируемый язык. Он и сейчас есть. На нем еще пишут. Но это был не microsoft. Microsoft на это смотрел со стороны.</p> <p>Потом придумали Java. Он все плюсы и Garbage Collector взял и стал мейнстримом. Захватил разработку всевозможных банковских приложений, тяжелых корпоративных приложений. Он не очень хорош для написания визуальных приложений. Даже на delfi писать красивые приложения гораздно проще чем на Java. А вот серверную часть на java писать очень хорошо. И бизнес серьезно начал перетекать на java. Microsoft видел что деньги утекают, решил сюда вклиниться и урвать какую-нибудь часть. Они взяли разработчика delphi и он взял все плюсы какие были и сделал первую версию языка c#. Потом он же написал и typescript. Была выпущена платформа .net которая немного отличалась от java. Первые версии были простенькие, глючные. Но идея была интересная и он постепенно развился.</p> </article> <article class="article"> <h2>Из чего состоит платформа</h2> <p>Общая исполняемая среда (CLR или Core CLR)</p> <p>Общая система типов (CTS)</p> <p>Общая спецификация языка (CLS)</p> <p>Базовая система классов (BCL)</p> <p>Фреймворки (Frameworks)</p> <table border="1"> <tr> <td>C#</td><td>F#</td><td>VB.NET</td><td>C++</td><td>IronPython</td><td>IronRuby</td><td>...</td> </tr> <tr> <td colspan="7">Common Language Specification</td> </tr> <tr> <td>WCF</td><td>ASP.NET (WebForms, MVC)</td><td>SignalR</td><td>Windows Foundation</td> <td rowspan="2">WPF</td><td rowspan="2">WinForms</td><td rowspan="2">Silverlight</td> </tr> <tr> <td colspan="4">ADO.NET & Entity Framework</td> </tr> <tr> <td colspan="7">Base Class Library (BCL)</td> </tr> <tr> <td colspan="7">Common Language Runtime (CLR)</td> </tr> <tr> <td colspan="7">Operating System</td> </tr> </table> <p>Как работает .net и из чего состоит. Давайте посмотрим. Типовая система .net это слоистая технология. У нас есть операционная система. Ниже аппаратное железо. Над операционной системой мы ставим всю платформу фреймворк .net. Это даже не фреймворк а полноценная разработка. В отличие от java, она ставится на машину целиком. На операционную систему накладывается слой CLR. Она выполняет наш код на конкретно этой операционной системе. Для каждой операционной системы windows, linux, macOs установится своя .net платформа. Следующий слой BCL. Следующий слой набор фреймворков. Следующий это общая спецификация языков. И , наконец, последний это язык программирования.</p> <p>Любой человек может взять подходящий ему язык программирования, например, c#. Написать на c# код и потом скомпилировать и он будет выполняться на операционной системе. Причем код будет унифицирован для всех операционок. По сути, операционки для кода уже нет. Не все фреймворки подойдут. Для линукса нет фреймворка WPF, но для него можно использовать сторонний фреймворк Avalonia.</p> </article> <article class="article"> <h2>Common Language Runtime (CLR)</h2> <p>Основа - IL (Intermediate Language) или MSIL (Microsoft Intermediate Language) или CIL (Common Intermediate Language)</p> <p>****.dll или ****.exe Сборка (Assembly)</p> <p>Основа для CLR это IL код. Программист пишет исходный код на языке C#. Во время компиляции исходный код компилируется в bytecode, который содержит IL код и метаданные. И этот код записывается в выходной файл в виде исполняемого кода программы. Когда мы запускаем этот файл, то весь код еще раз компилируется в JIT (Just in time) компиляторе для выполнения. То есть во время выполнения байткода CLR переводит этот код в машинный код и исполняет его на операционной системе. Скомпилированные кусочки байткода попадают в кеш. При первом запуске программа работает медленнее. А при повторных быстрее как раз за счет этого кэша.</p> <p>Получается два уровня абстракции. Уровень языка, который компилируется в промежуточный код. Промежуточный код, который при помощи JIT компилируется в нативный код. У нас есть managed code (который управляется платформой), который мы на си шарп написали. Он проходит через Compiler (Компилятор). Компилятор генерирует MSIL код. MSIL код проходит через CLR (JIT Compiler) и получается native code, который уже выполняется в операционной системе. Иногда мы хотим внутри managed кода сделать unmanaged код. Пометить какой-то блок unsaved, например, вставка на ассемблере. Мы делаем кусок кода, который исключается из работы нашей .net. Он компилируется, мы можем к нему обращаться, но он уже работает минуя всю нашу систему, просто как внешний плагин. В managed code случае .net будет нам помогать, включать garbage collector. А в unmanaged случае все будет под нашу ответственность. Не рекомендуется использовать unmanaged code, но такая возможность есть.</p> <p>Кодга мы собираем приложение, мы в итоге можем получить либо dll, либо exe. Все dll которые входят в сборку будут составлять наше приложение. Это по поводу общей схемы работы. Как она работает. Теперь - почему она работает.</p> </article> <article class="article"> <h2>Common Type System (CTS)</h2> <p>Основой у нас есть Common Type System. В разных языках есть разные типы. В Visual Basic есть тип Integer, в C# есть тип int. На самом деле это одно и тоже. Преобразуются в IL в тип Int32. Система типов CTS стандартизирует работу с типами. Она приводит к одному виду разные типы из разных языков. Какие у нас есть типы? Все типы делятся на две категории Value Types и Reference Types.</p> <p>Value Types это обычные типы для простых данных которые хранятся в стеке. К ним относятся Built-In Value Types, User-Defined Value Types, Enumerations.</p> <p>Reference Types это типы для сложных данных (массивы, коллекции), которые хранятся в куче. К ним относятся Self Describing Types, Pointer Types, Interface Types. К ним применяются функции boxing, unboxing.</p> </article> <article class="article"> <h2>Common Language Specification (CLS)</h2> <p>Это еще один уровень абстракции. На платформе CLR есть типы CTS. Язык C# имеет свои команды, Visual Basic - свои, Fortran - свои. Все эти множества команд где-то пересекаются и дают CLS. Что делает .Net? Он определяет стандартную спецификации языка. Определяет набор функций, которые необходимо реализовать и которые должны выполняться в IL коде. И CLR должна все конструкции языков программирования преобразовать в конструкции, которые описаны в спецификации CLS. В итоге, у нас есть общая спецификация методов, общее описание типов и наша среда CLR, которая выполняется на операционной системе. Разработчик компилятора должен взять язык, трансформировать все типы данных к списку CTS, а все команды к списку CLS. У нас получается ядро, которое позволяет код на любом языке запускать на любой платформе.</p> </article> <article class="article"> <h2>Base Class Library (BCL)</h2> <p>System.Web</p> <p>System.Data</p> <p>System.Windows.Forms</p> <p>System.Drawing</p> <p>System.Xml</p> <p>System</p> <p>Чтобы жизнь казалась полегче, разработали BCL. Это набор библиотек, которые собраны внутри неймспейсов, в которых реализованы базовые вещи. Например, работа с коллекциями, со списком, с файлами, с текстом, с потоками. На уровень выше работа с базами данных, с SQL клиентами. Эти классы это база. Они должны быть у всех. Они разработаны в рамках CLR.</p> </article> <article class="article"> <h2>Фреймворки</h2> <pre>\n  Sites, Services\n  |\n  Web Forms, Web Pages, SPA (MVC, Web Api), SignalR\n  |\n  ASP.NET\n  </pre> <p>Мы, как программисты, работаем в этой области. У нас есть фреймворки, с которыми мы на .net работаем. Например, ASP.NET фреймворк - для работы с вебом. У нас есть набор готовых систем, с которыми мы должны работать. И нам абсолютно все равно какая у нас платформа. Если мы хотим писать в .net не на си шарпах а на паскале - пожалуйста. Ищите компилятор для паскаля (он, кстати, есть) и будете писать на паскале. Те же Делфи имеют компилятор с языка Делфи в IL код.</p> </article> <article class="article"> <h2>История развития .net</h2> <p>Period of .NET Framework</p> <p>2002 .NET Framework 1.0</p> <p>2003 .NET Framework 1.1</p> <p>2005 .NET Framework 2.0</p> <p>2006 .NET Framework 3.0</p> <p>2007 .NET Framework 3.5</p> <p>2010 .NET Framework 4.0</p> <p>2012 .NET Framework 4.5</p> <p>2013 .NET Framework 4.5.1</p> <p>2014 .NET Framework 4.5.2</p> <p>2015 .NET Framework 4.6</p> <p>2016 .NET Framework 4.6.1</p> <p>2017 .NET Framework 4.7</p> <p>2019 .NET Framework 4.8</p> <p>Period of .NET Core</p> <p>2016 .NET Core 1.0</p> <p>2017 .NET Core 2.0</p> <p>2019 .NET Core 3.0</p> <p>Period of .NET</p> <p>2020 .NET 5.0</p> <p>2021 .NET 6.0</p> <p>2022 .NET 7.0</p> <p>2023 .NET 8.0</p> <p>Как .NET развивался? В 2001 году все началось. В 2002 появился первый фреймворк. Какое то время он развивался до версии .NET Framework 4.8.2 в 2019 году. Это была эпоха Net фреймворка. .NET Framework работал только под Windows. И этим проигрывал яве, которая была кроссплатформенной. В 2016 году появились навыки и знания и команды и опыт. Микрософт решил выйти на уровень кроссплатформенности и выпустил .NET Core. Это переработанный .NET Framework. В .NET Core многие вещи были переписаны в лучшую сторону. В 2016 году вышел .NET Core 1.0, он уже кроссплатформенный. Он развивался до версии .NET Core 3.1 в 2019 году. После него уже уже вышла .Net 5.0 в 2020 году. С 2021 года .NET Framework и .NET Core ушли и стал просто .NET.</p> </article> <article class="article"> <h2>Планы развития .Net</h2> <p>2019 november .NET 3.1 LTS</p> <p>2020 november .NET 5.0 current</p> <p>2021 november .NET 6.0 LTS</p> <p>2022 november .NET 7.0 current</p> <p>2023 november .NET 8.0 LTS</p> <p>LTS (long Time Support) длится 2 года. Current - промежуточная версия, там добивают свои ошибки. Надо работать на самой свежей версии LTS. Это не мешает пользоваться более ранними версиями, потом сделать апгрейд и все протестировать еще раз. Переход между версиями сейчас безболезненный. Хотя переход с .NET Framework на .NET Core был сложный, проще было некоторые вещи переписать. Сейчас уже хорошая поддержка. Ничего особенно нового не добавляется. Все хорошее уже придумали. Добавляется синтаксический сахар.</p> <p>Это по поводу .NET Core. У Микрософт есть еще такое понятие как .Net Standard.</p> </article> <article class="article"> <h2>.Net Standard</h2> <p>APP MODELS</p> <ul> <li>.NET FRAMEWORK - WPF, Windows Forms, ASP.NET</li> <li>.NET CORE - UWP, ASP.NET Core</li> <li>XAMARIN - iOS, OS X, Android</li> </ul> <p>.NET STANDARD LIBRARY One library to rule them all</p> <p>COMMON INFRASTRUCTURE</p> <ul> <li>Compilers</li> <li>Languages</li> <li>Runtime components</li> </ul> <p>.Net Standard это выделенные еще кусочки правил и описание. Это минимально возможная спецификация, которая для всех общая. Ее выделили из того что есть - .NET FRAMEWORK, .NET CORE, XAMARIN из готовых финальных частей и сделали общую часть. Ее описали и сказали что это .Net Standard. .Net Standard нужен, чтобы разработчики, которые пишут библиотеки, и под каждый новый фреймворк, что-то подписывают. Это было придумано для библиотек. Чтобы им было попроще. Net Standard развивается от версии 1.0 уже до версии 2.1. И есть соответсвия между версиями фреймворка и версией .net standard. Например, net core 3.0 поддерживавет стандарт net standard 2.0. Если нужно написать компонент для всех платформ, можно воспользоваться стандартом, который поддерживается этими платформами.</p> </article> <article class="article"> <h2>Организация памяти</h2> <p>Call Stack</p> <p>Stack Memory</p> <p>Heap Space</p> <p>Давайте посмотрим как в Нете организована память. Есть два вида памяти - стек и куча. Если открыть стек вызовов (Call Stack), исполнение программы начинается с функции Main(). Например фуркция main() вызывает Person(String) и есть метод setPersonName(String). И Person и setPersonName размещаются в стеке. При вызове функции, все аттрибуты сваливаются в стек. Выполняются какие-то действия. Когда функция завершилась - стек чистится. Есть алгоритмы, они несложные, можете их поискать, но сейчас это неважно.</p> <p>В стеке хранятся ссылки на объекты и ссылки на строки. Строки неизменяемы и зачем их все хранить в стеке, если можно сделать ссылку, а строки хранить в куче. Поэтому менять строку просто так нельзя. Если вы это делаете, то у других которые ссылаются на эту же строку, все поменяется. Поэтому если вы что-то меняете в строке, то создается новая строка, а все остальные которые ссылались на старую так и ссылаются. Когда никто ссылваться не будет - garbage collector очистит. Таким образом работает строка.</p> <p>В стеке хранятся переменные (value) и ссылки (reference). В куче хранятся созданные экземпляры объектов. Стек чистится автоматически. Куча чистится не автоматически. Куча чистится либо при помощи garbage collector либо руками. Если вы пишете на языке C++ или Pascal, то за памятью следите самостоятельно. Если выделяете память, то потом ее нужно удалить. Если не удалите, то скоро память переполнится. И случаются утечки памяти - когда память никто не использует, а она вся занята.</p> <p>В языках java, javascript, c# есть сборщик мусора и за памятью следить не надо. Вы можете создать объект, попользоваться им, и забыть. Не надо ничего помнить. Код гораздо упрощается. Количество ошибок уменьшается. Приложения становятся надежнее и проще. Но имеет и накладные расходы, но мощности компьютеров сейчас такие, что этим можно пренебречь.</p> </article> <article class="article"> <h2>Garbage collector - Как работает</h2> <p>Для того чтобы чистилась память (heap) есть сборщик мусора. Это отдельный процесс, который живет в приложении. Он берет приложение на контроль и за ним следит. Например, у нас есть приложение и у него есть куча созданных объектов, на которые оно ссылается. Сборщик мусора находит все объекты, которые ничьи, на которые нет ссылок и их вырезает. В итоге остаются только те объекты , которые нужны, на которые есть ссылки и памяти становится больше.</p> </article> <article class="article"> <h2>Garbage collector - Этапы</h2> <ul> <li>Marking - Маркирует живые объекты</li> <li>Relocating - Обновляет ссылки на объекты, которые будут упакованы</li> <li>Compacting - Упаковывает живые объекты</li> </ul> <p>Garbage collector работает в три этапа. Сначала маркирует живые объекты. Подсчитывает какие объекты нужны, а какие нет. Делает релокацию, обновляет ссылки на объекты которые будут упакованы. Живые объекты мы распологаем в памяти так, чтобы не было пропусков, сжимаем память. Вот так в три этапа он и работает.</p> <p>При этом меняются указатели на эти объекты. И они могут меняться произвольное количество раз за врмя жизни приложения. Поэтому здесь нет смысла хранить указатели. Потому что указатель может поменяться каждый раз когда работает сборщик мусора.</p> <p>Но есть и минус в работе сборщика мусора. Наше приложение работает в несколько потоков. В отдельном потоке запускается сборщик мусора и пока он работает, все остальные потоки ждут (останавливаются, suspended). Каждый раз когда запускается сборщик мусора, наше приложение подвисает. Поэтому сборщик мусора это вещь хорошая, но тоже имеет свои накладные расходы. Чтобы оптимизировать работу сборщика мусора, надо понять что он работает не в туже секунду, когда объект не нужен. Он может запуститься когда в системе становится мало памяти.</p> </article> <article class="article"> <h2>Garbage collector - Когда?</h2> <p>Когда происходит сборка мусора</p> <ul> <li>В системе мало свободной физической памяти</li> <li>Объем используемой приложением памяти превышает постоянно настраиваемый порог</li> <li>Вызван метод GC.Collect</li> </ul> <p>Garbage collector может запуститься когда захочет, когда ему надо. Если в системе много оперативной памяти, то не факт что сборщик мусора вообще запустится. Есть занятая память, которая никому не нужна, но я ее освобождать не буду, потомучто места и так всем хватает.</p> <p>У сборщика мусора есть оптимизационный алгоритм. Для оптимизации он разделяет объекты на три генерации: Generation 0 (short-lived objects), Generation 1, Generation 2 (long-lived objects). Новые созданные объекты сначала попадают в Generation 0. Сборщик мусора часто заглядывает в generation 0 чтобы проверить переменные. Если переменная никому не нужна, то он ее удалит. Если кому-то нужна, то он переместит ее в Generation 1. Сборщик мусора редко заглядывает в generation 1. Но когда заглядывает то смотрит, если переменная никому не нужна, то удаляет ее, а если нужна то перемещает в generation 2. И туда заглядывает еще реже. Сюда могут попадать объекты объемом больше 80 кбайт. Для них нужно выделять много памяти, дефрагментацию делать, поэтому их сразу кладут в generation 2. Эти объекты называются large object heap. Которые не пытаются засунуть в короткоживущие объекты.</p> <p>Сборщик мусора запускается когда ему надо и сразу разделяет объекты по поколениям. Таким образом он оптимизируется, работает достаточно быстро. И для программиста незаметно. Где сборщик мусора будет мешать? Если вы в цикле будете создавать новые строчки. То все эти данные попадут в heap и сборщику мусора будет тяжеловато. Это важно если вы будете писать высоконагруженное оптимизированное приложение. Для большинства api это не критично.</p> <p>Сборщик мусора не работает синхронно. Он останавливает все. Когда он начинает работать - все остальные стоят на паузе. Он должен во первых все посчитать, во вторых поменять ссылки, упаковать память. Там работы немеряно. Он ничего в процессах не портит, не влазиет ни в какой проект, он просто говорит "всем стоять", делает свое дело и потом говорит "работайте дальше".</p> </article> <article class="article"> <h2>Области применения .net</h2> <p>Web, Mobile, Desktop, Microservices, Gaming, Machine Learning, Cloud, Internet of Things</p> <p>Где у нас .net может применяться. .net очень хорошо развивается, сейчас это уже приятая технология. Вместе с языками он приволок кучу стандартов. Большой спрос на .net разработчиков и в России и в мире. Особенно в тех местах где требуется бекенд писать. Там где раньше применялась только java. java тяжелый язык. А си шарп легкий язык. Технология .net стала везде расползаться. На нем можно писать и веб приложения и мобильные приложения. Раньше был сторонний проект Xamarin для написания мобильных приложений. Microsoft его выкупил, модернизировал и выпустил maui приложения. И мобильные приложения на maui технологии можно писать. Maui + Blazor можно веб приложения писать. Для тех команд, которые не хотят развивать фронтенд отдел и у них есть сильный бекенд отдел, то для них Blazor позволяет писать веб приложения. Десктоп можно писать, например, на WPF. Микросервисы - можно внедрять докер и писать гейминг, машинное обучение, облака с AWS azure, интернет вещей и т.д. Областей применения достаточно много.</p> <p>Пример применения Desktop - WinForms. Классическое windows приложение. Компоненты раскидываем с окне при помощи мышки. Щелкаем - получаем какое-то действие. Устанавливаем флажки на действия, например, enable, disable. И получаем такое приложение. Примерно такой подход был реализован в Delphi. Delphi подход мне например больше нравится, у них покрасивее сделано. Мне привычнее. Здесь тоже ничего но не так. Не так удобно, может дело вкуса. На WinForms я немного писал, на Delphi писал достаточно много. Поэтому могу сравнить.</p> <p>Пример применения Desktop - WPF. Можно делать приложения не только при помощи форм и окошек, но и при помощи специальных средств. Программируем на C#, а верстка делается на xml подобной верстке xaml. В отличие от раскидывания кнопок в WinForms, в WPF отрисовка декларативная - мы пишем код. В итоге можем красивае приложение получить. Microsoft Visual Studio написана как раз на WPF.</p> <p>WEB - ASP.NET WebForms. Это старая технология на aspx. Предполагает писать для веба так же как обычные приложения.</p> <p>WEB - ASP.Net MVC. Здесь новые технологии, легковесный фреймворк для того чтобы писать MVC (Model View Controller) приложения. Можно написать контроллер, привязать к нему модель. На базе шаблона и определенных правил будет сформирована реальная картинка в html. Без участия программиста, он будет работать непосредственно в браузере.</p> <p>WEB - ASP.Net Razor Pages. Развитием от MVC стал Razor Pages. Это альтернативный способ. Если в MVC мы идем от контроллера к view. То в Razor Pages все инкапсулировано внутрь страницы. У нас есть страница и есть обработчик. Как бы вернулись к WebForms. На самом деле инструмент интересен. Позволяет рисовать красивые простенькие технологии. И достаточно компактный. Мне нравится.</p> <p>WEB - ASP.Net WebAPI. В отличие от Razor Pages где с помощью html пользователю дается какая-то красота, в WebAPI пользователю никакая красота не дается, а дается набор методов. При помощи которых мы данные передаем, что-то делаем и данные возвращаем. Чаще всего сейчас это используется для того чтобы писать SPA приложения. Когда фронтенд написан на базе SPA фреймворка - vue, react, angular или blazor. И сервер является бекендом. Плюс на базе WebAPI можно сделать микросервис. Здесь специально фреймворк ASP.Net настроен таким образом, что он возвращает не странички а JSON. И кучу работы с программиста снимает.</p> <p>UWP (Universal Windows Program). Он не сильно стал популярным, поэтому не сильно интересен. Это разработка приложений под Windows 10 и выше. Это попытка сделать нативный язык, как на планшетах, но только для Windows.</p> <p>XAMARIN / MAUI. Сейчас вышел релиз MAUI, который делает на базе C# кода, компилирует его в нативный код, который запускается на айфоне, андроиде и виндовсфоне. Это кроссплатформенное приложение у которого есть одна кодовая база и два автоматически генерируемых направления. Для написания корпоративных систем, например, сбор отчетов, корпоративный чат, где не требуется оптимизация или внедрение в систему. Это вполне хороший бизнес продукт. Сейчас для мобилки есть куча других фреймворков. И react native например. XAMARIN берет c# код, трансформирует его в нативный iOS или android код и получается дистрибутив этого приложения в разных системах. Выкладывайте его с store и раздавайте.</p> <p>UNITY. Это написание игрушек. Здесь на C# обрабатывается вся логика. Получив из unity набор инструментов для работы со спрайтами, с моделями, с пересечением моделей, со звуком, с физикой, можете на C# писать логику игры, формочки рисовать и т.д.</p> </article> <article class="article"> <h2>Что осталось за кадром</h2> <p>ML.Net (Machine learning)</p> <p>IoT (Intenet of Things)</p> <p>Cloud (Azure)</p> <p>Microservices</p> <p>и так далее</p> <p>Сейчас много где .net применяется. Работа с фреймворком .net и с C# достаточно прогрессивна и востребована. Если вы их выучите, проблем не будет с трудоустройством. Сейчас во многих компаниях базовый стек веб приложений сделан на .net. Это Касперский, Контур, Озон. Очень много серьезных крупных игроков и куча помельче они используют .net для того чтобы делать свой бизнес, что-то автоматизировать для себя. Не обязательно это софтверные конторы, которые делают что-то для кого-то. Может быть производственная компания, например, завод, которая автоматизирует у себя при помощи этих технологий. Вещь хорошая, рекомендую. Не пожалеете. Писать для .net на C# достаточно интересно и мне нравится.</p> </article> <article class="article"> <h2>Вопросы?</h2> <p>Лекция сегодня закончилась. Есть ли какие-то вопросы? Пожелания? Что-то еще стоит поподробней рассказать? Вопросов нет. Тогда предлагаю перейти с вопросами в телеграм. Задавайте, будем разбирваться, что-то расскажу, объясню. Всем большое спасибо. Жду вас в следующий понедельник. Начнется версия по web api. Мы будем рассматривать более подробно этот фреймфорк. Из чего он состоит, как настраивается. И потом будет уже практика. Будет livecoding, готовьте свои ноутбуки. Будем пытаться вместе писать.</p> </article>','<article class="article"> <div id="link-to-dsr2023net" class="btn-back">назад</div> <h1>2023-11-20 DSR .NET School 2023 Lecture #8 Asp Net Core</h1> </article> <article class="article"> <h2>Лекция 8. ASP Net Core - Web API</h2> <p>Всем добрый вечер. Мы приближаемся к практической части. Теорию в большей части мы закончили. Сегодня лекция про Asp Web API. Из каких кусков она состоит, на что надо обратить внимание. И нам это пригодится уже в этот четверг. Потому что в этот четверг, напоминаю, начинается практика. Не опаздывайте, пожалуйста. Будет более интересно с практической точки зрения. У нас будет 6 практических занятий. На одно больше чем в прошлом году. Решили сделать одно дополнительное по тестированию. Будет 4 занятия по созданию API. 1 занятие по Blazor. Мы будем создавать Blazor приложение. И 6-ое последнее занятие будет по тестам. После этого, одновременно с практикой, закончатся и лекции.</p> <p>У нас небольшие изменения в лектории. Практические занятия будут записаны и у вас будет доступ в гитхаб. Там будут предоставлены исходники, можете скачать и посмотреть. Видео как помощник, чтобы посмотреть что к чему. А так, будете самостоятельно разбирать код. Вместо лекции по бизнес логике у нас на следующей неделе начнется лекция по persistance слоям. По базам данных мы решили сделать две лекции по AST. А бизнес логику я расскажу сегодня. Она достаточно проста, так что вы ничего не потеряете. Итак, сегодня у нас Web API основа + бизнес логика. Следующие два занятия это подключение БД и работа с entity фреймворк. И две лекции по Blazor. И у нас остаются чисто практические занятия. Давайте начнем.</p> </article> <article class="article"> <h2>О чем будет эта лекция</h2> <p>1. Что такое WebApi в ASP.Net</p> <p>2. Архитектура проекта, разделение ответственности</p> <p>Middleware</p> <p>Инъекции зависимостей (DI)</p> <p>Документирование (Open API)</p> <p>Версионирование, логирование, health check</p> <p>DTO-модели, AutoMapper</p> <p>Валидация данных, FluentValidator</p> <p>Идентификация/Аутентификация/Авторизация</p> <p>JWT/Identity servers</p> <p>Коды возврата или исключения? Что выбрать?</p> <p>О чем мы сегодня поговорим. Поговорим что такое WebApi. Относительно прошлого года поубирал отсюда всю воду. Не буду вам показывать формочки где это все делается. Мы все это будем проходить на практике. Если кто-то имел доступ к лекциям или видел как это было в прошлом году, не пугайтесь ничего не потеряете. Просто перераспределили и лишнюю работу с теоретической частью поубирали и оставили то что действительно важно и что стоит обсудить. Но все по формочкам, по docker и остальному у нас будет на практике, поэтому практику я не рекомендую пропускать. Желательно чтобы вы ее очень хорошо прошли.</p> <p>Итак, сегодня мы поговорим про WebApi, что это такое и зачем он нужен. По архитектуре. Немножко по DI, по важным библиотекам, которые стоит подключить. Которые вам помогут сделать красивый WebApi. И в конце мы поговорим про идентификацию, что это такое и как с ней быть. Потому что WebApi так же как и обычный сайт требует авторизации и идентификации и это важно, особенно в современном мире.</p> </article> <article class="article"> <h2>1. Что такое WebApi в ASP.Net</h2> <p>.NET SCL</p> <ul> <li>Desktop</li> <li>Cloud</li> <li>Mobile</li> <li>Games</li> <li>AI</li> <li> <p>ASP.NET Core</p> <ul> <li>Blazor</li> <li>SignalR</li> <li> <p>MVC</p> <ul> <li>Razor Pages</li> <li>Web API</li> </ul> </li> </ul> </li> </ul> <p>Итак, что же такое WebApi. Эту картинку вы наверняка уже видели. Это микрософтовская картинка, просто перерисованная. У нас есть стек фреймворка .Net, на нем есть стек ASP.Net Core. На нем есть фреймворки MVC, Blazor, SignalR. Blazor, SignalR нам сейчас не сильно интересны. На базе MVC сделаны еще два фреймворка Razor Pages и Web API. Нас интересуют сейчас эти две вещи. Razor Pages вкратце коснусь когда до этого дойду. Web API это как раз наш целевой продукт ради которого этот курс и разработан. Вы должны хорошо научиться писать Web API.</p> <p>Web API это в принципе очень простая вещь. Это какой-то сервер, который принимает на вход машиночитабельную информацию. Делает с ней полезное действие. И в ответ возвращает другую машинночитабельную информацию. Отличие от простого сайта в то что сайт шлет запросы на получение страницы, а в ответ возвращает html страницу или кусочек кода, который нужен пользователю. Web API пользователю ничего не должен. Он работает для других систем и сервисов. Например, у вас есть класс у которого большой набор интерфейсов, функций. Web API можно рассматривать примерно точно также. У вас есть сервер, на котором развернута работающая система, у которой есть какой-то интерфейс. Что можно делать, какие данные посылать, куда посылать и какие ответы вам вернутся. Это классический web.api на основе restfull.</p> <p>Web API может работать не только с RestFul, он может работать и с websocket на базе SignalR - один раз послали и меняемся данными. Он может работать по jrpc. В этом случае request и responce будут бинарные посылки определенным образом запакованные. Он може работать через GraphQL и т.д. Но суть остается той же. Есть у нас какие-то endpoints на входе которых мы принимаем сигнал снаружи. Потом что-то делаем и в ответ что-то возвращаем. Давайте про всевозможные GraphQL и JRPC вы разберетесь самостоятельно. А мы будем рассматривать вариант самый классический, самый распростаненный.</p> <p>Итак, API. У нас есть какой-то сервер и какой-то публичный клиент (software). Каждый клиент шлет какие-то request. И сервер в ответ шлет response. Web API с точки зрения ASP.Net это черный ящик, который имеет кучу входов, которые называют endpoints. Их иногда называют "ручки" - за что можно подергать. Как Web API представлен в проекте. Если вы откроете студию и выберете создать Web API. У вас будет примерно что-то такое подставлено. Здесь я вам показываю Web Api нестандартный. То есть то что мы будем делать на практике. Здесь важно вам что знать. Есть контроллер C# BooksController.cs. В API контролеры могут делаться сейчас в коротком виде для микросервисов, например, когда нету ничего. И вся логика будет забита в классе Program. Либо можно сделать классический, т.е. это вынесенный отдельно контроллер. В данном случае нас интересует BooksController. Если мы откроем его, у нас будет наш BooksController. Здесь у нас есть соглашение по именам. ASP.Net найдет все букс контроллеры, которые унаследолваны от класса нетс. Отсечет отсюда слово контроллер и сделает Books. Этот Books и будет ендпоинтом. В каждом контроллере есть набор методов, публичных, например GetBooks это экшн. То что в MVC называлось экшн. Контроллер и экшн. Только в MVC экшн возвращаль вьюху, рендереную html страницу, а WebAPI может вернуть JSON. Или вернуть какой-то статус, например OK. Он здесь легковесный. Не надо никаким образом с html работать.</p> <p>Теперь вопрос. У нас может быть много контроллеров, экшенов. Как это все разводится? Для того чтобы можно было это все развести, в системе предусмотрен мехнизм Routing. Routing на самом деле есть не только здесь, а везде. В SPA приложениях, Angular, React, Razor pages. Просто здесь он до какой-то точки уже устоялся. В старых MVC этот роутинг настраивался в специальных местах. Не очень удобно. Большей частью генерировался автоматически, отсекая слово Controller. Не всегда это удобно. Потому что не всегда удобно имена ендпоинтов сопоставлять с именами классов. Ендпоинты стараются сделать в виде camalCase. А в C# код пишется в PascalCase. Есть какие-то именованные правила, которые гармонично смотрятся внутри определенного кода. Если все это дело совмещать, то код будет не очень радовать глаз. Поэтому каки-то образом развили систему и пришли к такому виду роутинга.</p> </article> <article class="article"> <h2>WebApi endpoints - Routing</h2> <p>На весь контроллер</p> <pre>\n    [ApiVersion("1.0")]\n    [Route("v{version:apiVersion}/[controller]")]\n    public class BooksController : ControllerBase {}\n  </pre> <p>На действие</p> <pre>\n    [HttpGet]\n    [Route("")]\n    public List<Models.BookModel> GetBooks() {}\n  </Models.BookModel></pre> <p>Как сейчас можно назначить ендпоинту имя. Что такое request/response. Это просто на сервер посылается текст и сервер этот текст обрабатывает. Как из этого текста найти вход в функцию? Которая будет какое-то действие делать. Передать можно при помощи роутинга и мапинга. Мапинг приводит наши параметры, которые мы передали из JSON, в объект, который этот контроллер принимает. В данном случае здесь никаких параметров нет. Если мы сделаем int у нас будет какая-то строка, будет пытаться преобразоваться и если найдется, то это действие выполнится.</p> <p>Как можно роутинг настроить? При помощи аттрибута route мы можем настроить роутинг на весь контроллер. У нас есть переменная часть версии, у нас будет кусочек про версионирование так что имейте ввиду, и в квадратных скобках это контроллер. Контроллер здесь будет браться имя контроллера, отсекая Controller. В данном случае будет браться Books. Зачем это делать. Можно просто написать Books, а можете Controller и он будет просто браться отсюда. Иногда, чтобы не писать на base контроллер, например, свой вешать такой путь ну и соответственно дальше работать. Какой-то способ оптимизации кода. Я предпочитаю здесь указывать конкретно что. Соответственно так будет более понятно. Можно написать контроллер, можно написать на действие. В данном случае route без ничего означает по умолчанию. Если вам придет на контроллер get запрос без ничего, мы оттуда будем брать. Должно быть уникально, то есть HttpGet без роута должно быть только на одном экшене.</p> <h2>WebApi endpoints - Routing</h2> <p>Аттрибуты для определения методов</p> <ul> <li>[HttpGet], [HttpPost] и т.д.</li> <li>[HttpGet(route)], [HttpPost(route)]</li> </ul> <p>Аттрибуты для определения маршрута</p> <ul> <li>[Route]</li> </ul> <p>Аттрибуты для определения маршрута в RazorPages</p> <ul> <li>@page "route"</li> </ul> <p>Какие у нас могут быть еще назначения. Мы можем детализировать наш request по-методу - HttpGet, HttpPost. Можем описаь HttpGet внутри роутера. Можете определить атрибут route. Если вы используете RazorPages вы можете использовать route непосредствено на странице при помощи @page. RazorPages мы применять не будем, на практике с ним поиграемся. Все похоже стало, вопрос только в оформлении.</p> <h2>WebApi endpoints - Routing</h2> <pre>[Route("{id:int}/details")]\n[ResponseType(typeof(BookDetailDto))]\npubic async Task&lt;IHttpActionResult&gt; GetBookDetail(int id)\n{</pre> <pre>[Route("{genre}")]\npublic IQueryable&lt;BookDto&gt; GetBooksByGenre(string genre)\n{</pre> <pre>[Route("~/api/authors/{authorId:int}/books")]\npublic IQueryable&lt;BookDto&gt; GetBooksByAuthor(int authorId)\n{</pre> <pre>[Route("date/{pubdate:datetime}")]\npublic IQueryable&lt;BookDto&gt; GetBooks(DateTime pubdate)\n{</pre> <pre>[Route("date/{pubdate:datetime:regex(\\\\d{4}-\\\\d{2}-\\\\d{2})}")]\npublic IQueryable&lt;BookDto&gt; GetBooks(DateTime pubdate)\n{</pre> <p>Примеры. Какие у нас есть примеры. На первом примере у нас есть endpoint GetBookDetail в который приходит id. Внутри роута мы можем использовать переменные, они описаны в первой строчке и кусок текста. Единственно, надо убедиться что {id:int} будет уникальной. Если использовать id:string и потом еще где-нибудь то система выдаст ошибку. В данном случае, смотрим, у нас должен быть localhost какой-то от контроллера. И блок 10/details. Это значит что мы для книжки номер 10 покажем детали.</p> <p>Во втором примере можем использовать строковую переменную без указания деталей {genre}.</p> <p>В третьем примере можно использовать сложную вещь "~/api/authors/{authorId:int}/books".</p> <p>В четвертом примере "date/{pubdate:datetime}". Через двоеточие мы можем указать любой тип. И система попытается параметр pubdate привести к типу datetime. Если сможет, тогда пойдет дальше. Если не сможет, то у нас bad request.</p> <p>В пятом примере так как это у нас строка, то можем использовать регулярное выражение regexp. Например приходит datetime в такой строке - год - месяц - день. Это уже смотрите кто вам что присылает и в каком виде вы должны работать.</p> <p>Все что я вам показал, оно придет в роуте, часть в url. Не всегда так надо. Поэтому часто мы можем уточнить, где нам надо получить эти данные.</p> <h2>WebApi endpoints - Routing - Sources</h2> <p>[FromQuery] - Gets values from the query string</p> <p>[FromRoute] - Gets values from route data</p> <p>[FromForm] - Gets values from posted form fields</p> <p>[FromBody] - Gets values from the request body</p> <p>[FromHeader] - Gets values from HTTP headers</p> <p>Какие у нас есть sources. Например, у нас есть источники. Они прописываются в примере таким образом.</p> <code> http://RouteParameters?QueryParameters </code> <p>Мы можем сделать свой класс. В который будет автоматически сделан маппинг из наших входных параметров.</p> <code> public ActionResult<Pet> Create([FromBody] Pet pet) </Pet></code> <p>И можем сказать что мы ожидаем этот класс, что все данные будут лежать в body запросе. До вопроса это route параметр, а после вопроса это query параметры. FromQuery будет присылаться в QueryParameters. FromRoute будет присылаться в RouteParameters. FromForm будет присылаться в виде формы. Вы ее отправляете в html. FromBody весь запрос придет в body.</p> <p>Здесь надо помнить что у get запроса body нет, поэтому вы запросить можете но это будет неправильно. FromHeader это в заголовке. Request это строка, поэтому все что мы делаем это способы каким образом где что дать. Класс Create из тела запроса возьмет класс Pet, а это у нас Name и Breed. Мы можем как здесь целиком искать, мы можем при помощи параметров в самой моделе раскрасить. Это мы возьмем в Route, это мы возьмем в Query и т.д. Ну тут уж смотрите самостоятельно. Чем проще тем лучше, тем понятнее. Но в ряде случаев иногда бывает надо похимичить.</p> <pre>\n    public class pet\n    {\n      public string Name {get; set; } = null;\n      [FromQuery] // Attribute is ignored.\n      public stringBreed {get; set; } = null\n    }\n  </pre> <p>По роутингу надеюсь тут вопросов нет. Плюс мы еще поиграемся на практике. Здесь просто имейте ввиду, тут надо просто набить руку. Ничего тут сложного нет. Опять же есть документация.</p> </article> <article class="article"> <h2>Middleware - Зачем</h2> <p>Выполнить какое-либо действие перед тем (или после того), как выполнится основное действие.</p> <p>Обработать ошибки</p> <p>Собственное протоколирование</p> <p>Проверка лицени</p> <p>Авторизация</p> <p>и т.д.</p> <p>Когда мы разговаривали с вами что WebApi это по сути набор endpoints. То есть у нас пошел request и возвращается response. Каким образом выполняется весь процесс. Он построен на основании промежуточных действий. У нас приходит request. Спервы выполняется одно действие, потом другое, потом еще. И эта куча промежуточных действий, они общие. Наш кусок кода, на основе какого-то скелета, а все наружи от нас скрыто. Выполняется шагами. Если какое-то действие проходит, то идет дальше.</p> <p>Эти кусочки, которые выполняются по мере прохождения реквеста и потом по мере возвращения респонса называется Middleware. По сути - промежуточные слоки. Вся система asp.net построена на том что вы собираете матрешку из этих кусочков. Вы собираете какие куски должны что делать. Это делается при помощи middleware. Все что мы сейчас будем настраивать, по сути все middleware. Зачем они нужны? Выполнять действие до или после реквеста. Первым делом вы делаете какой-то реквест, например, проверяете есть ли у пользователя доступ. Правильны ли у него какие-то данные, правильна ли валидация. Обработать ошибки. Вы можете глобально сказать в try catch обернуть и сказать все. Если здесь ошибка прошла - сделай что-то. Не стандартную обработку, а какую- то свою. Влепить протоколирование, добавить проверку лицензии. Авторизация тоже делается. Даже раскраска того же JSON. Например у вас какойто class вернул JSON. И вы его хотите каким-то образом отдать на клиент. Например, убрать из него все пробелы. Зашифровать. Это тоже может делать middleware.</p> <p>Как она работает. У нас есть Middleware. По сути это определенный класс. Определенным интерфейсом, на который приходит request. К нам приходит request, мы что-то с ним делаем и говорим next(). Как только мы вызвали next, у нас есть цепочка этих middleware, вызывается следующий middleware. Что-то делается с запросом и потом next(). И так далее. В конце, когда все middleware наши прошли - пришли до нашего кода Application code. Здесь в контроллере Controllers/Action мы что-то сделали и отдаем ответ. И middleware уже в обратном порядке возвращают response. В итоге клиент получает что-то. В принципе все просто.</p> <h2>Middleware - Order</h2> <p>При указании middleware иногда важно указывать их в нужном виде. Если у нас есть use autorization, use authentification. Попытайся авторизовать до аутентификации и у вас будет ошибка. Всегда нужно выставлять middleware в нужном порядке. Если порядок не важен, то можно и по другому. Старайтесь порядок выдерживать правильно.</p> <p>Request -> app.UseExceptionHandler() -> app.UseHsts() -> app.UseHttpRedirection -> app. UseStaticFiles() -> app.UseCookiePolicy() -> app.UseRouting() -> app.UseCors() -> app.UseAuthentification() -> app.UseAuthorization() -> app.UseSession() -> app.UseMiddleware&lt;CustomMiddleware&gt;() -> app.UseEndpoints() Потом в обратном порядке -> Response</p> <p>Посмотрим как работает этот порядок. У нас есть request и первым делом стандартно система делает UseExceptionHandler() обрабатывает ошибки. Потом подключает UseHsts. Потом UseRedirection. Если мы пытаемся сделать реквест на http, он нас автоматически редиректнет на https. UseStaticFiles и так далее. И так пройдет вся цепочка. Поэтому вы можете request, response на каждой цепочке что-то делать самостоятельно. </p> <h2>Middleware - Custom</h2> <pre>\npublic class LogURLMiddleware\n{\n  private readonly RequestDelegate _next;\n  private readonly ILogger&lt;LogURLMiddleware&gt; _logger;\n  public LogURLMiddleware(RequestDelegate next, ILoggerFactory loggerFactory)\n  {\n    _next = next;\n    _logger = loggerFactory?.CreateLogger&lt;LogURLMiddleware&gt;() ??\n    throw new ArgumentNullException(nameof(loggerFactory));\n  }\n  public async Task InvokeAsync(HttpContext context)\n  {\n    _logger.LogInformation($"Request URL: {Microsoft.AspNetCore.Http.Extensions.UriHelp}")\n    await this._nest(context);\n  }\n}\n</pre> <p>Как это можно сделать. Вы можете написать свой Middleware. Это обычный класс, у которого есть функция InvokeAsync. Если у вас есть функция InvokeAsync, то у вас уже есть Middleware. Мы здесь делаем логгер LogURLMiddleware. И в InvokeAsync мы логгируем наш request, все что нам пришло. И говорим - выполняйся дальше.</p> <pre>\npublic static class LogURLMiddlewareExtensions\n{\n  public static IApplicationBuilder UseLogUrl(this IApplicationBuilder app)\n  {\n    return app.UseMiddleware&lt;LogURLMiddleware&gt;();\n  }\n}\n\napp.UseLogUrl();\n</pre> <p>Мы подключим наш Middleware в нашу систему. И как только дойдет до Middleware. В нашу запись будет записано что такой реквест прошел. Таким образом можно сделать свое логирование. И если этот метод мы сделаем статичным классом, то можно его вызывать через app.UseUrl(). Таким образом мы можем сделать и систему проверки лицензий. Вы на входе проверяете request, в реквесте есть данные лицензии, вы оттуда информацию достаете, проверяете лицензия ли это, актуальная ли она еще. И если что-то не актуальное просто сразу говорите - извините, у вас нет лицензии.</p> <p>Что это означает. Что до баз данных неавторизованный код без лицензии вообще не пройдет.</p> <h2>Middleware - Example</h2> <p>Пример Middleware здесь про Exception. Если вам надо Exception преобразовать и вернуть на клиент в виде определенной структуры. Для того чтобы клиент, получив ошибку не сильно думал что это. Он просто обработал. Как это делается. Мы создаем класс ExceptionMiddleware. Получили делегат на next. И сделали функцию InvokeAsync. В которой обернем try catch, обернем Invoke. И если мы поймали BatchException то делаем одно. Если ProcessException то другое. Если RepositoryException то третье. И в конце если какая-то ошибка есть , мы ее формируем в JSON. Если нет значит не сработает наш Middleware и в данном случае он не нужен. Таким образом, любые ошибки придут в нужной форме на SPA приложение. Для того чтобы подключить app.UseMiddleware&lt;ExceptionsMiddleware&gt;() ставим в нужном месте и все, забываем про случайные ошибки.</p> <p>По Middleware вопросы есть? Все понятно здесь? Не так все сложно, поэтому пойдем дальше.</p> </article> <article class="article"> <h2>2. Архитектура проекта - Слои</h2> <p>User -> Presentation Layer -> Business Logic Layer -> Data Access Layer -> DataBase</p> <p>Поговорим немножко про архитектуру. Архитектур много. Все приводить смысла нет. Остановимся на той которая пригодится для работы. У нас есть пользователь. Какие этапы он должен пройти? Первым делом он должен наткнуться на Presentation layer.</p> <p>User - Presentation Layer - Business Logic Layer - Data Access Layer - Database</p> <p>Это уровень презентации приложения. Здесь описан контроллер, api, роутинг. Это то что взаимодействует с внешним клиентом. Презентация что-то делает и посылает команду в слой бизнес логики. Слой Business Logic Layer это основной рабочий слой. Он должен сделать простые вещи. Он должен проверить авторизацию. Проверить правильно ли пришел реквест. Сделать форматные проверки. Если он ожидает данные это должны быть данные. Если он ожидает строчку это должна быть строчка. Если он ожидает число, то придти должно число. Но уровень презентации не должен лезть в базу данных, не должен делать какие-то действияю. Каждый слой, каждый кусочек приложения, должен заниматься чем-то своим. Презентационный слой, его задача общаться с клиентом. Получить запрос, проверить. Вернуть клиенту ответ системы в том виде в котором от него ожидают.</p> <p>Бизнес логика это ядро. Один или несколько сервисов, состоящих из кучи классов. Которые всю эту логику и выполняют. И уже в бизнес логике хороошо проверить что эти данные консистентны. Например, проверка на уникальность. Уровню презентации на самом деле все равно. сказали создай юзера Иванов - создали. Бизнес логика уже должна проверять. Здесь же выполняются права, здесь же надо делать и логгирование. Здесь делать всякие проверки и так далее. Бизнес логика это из класса который сама себя вызывает. Класс для работы с юзером вызывает класс для посылки письма. Класс для посылки письма вызывает сообщение о посылке RabbitMQ. Внутри можете навертеть все что угодно.</p> <p>Вы команду послали, вы сразу проверили и сказали либо я не могу создать тебе юзера либо что-то сделали. Вот тебе его данные. Persistance слой получил эти данные. Мне сказали юзера, обернука я его в xml, потому что клиент так просит и отдам на клиент. Бизнес логика чаще всего тестируется. Если у вас классы все четкие, вы можете подключить сюда unit тесты. И проверить как все это дело работает. Если у вас оно инкапсулировано в одном месте, то проверите. Если оно у вас разбросано по 10 местам, я думаю что вы тест напишите с большим трудом, а если напишите то весьма плохой.</p> <p>Бизнес логика какие-то действия сделала. Бизнес слой может работать не только с базой данных, он может послать запрос на другой микросервис, может выполнить несколько действий: создать юзера, создать права юзеру, отослать письмо администратору. Это одна инкапсулированная логика. В этом смысл бизнес логики. Если у нас есть Data access layer, то он работает с обычными командами - создай юзера, удали юзера. Его задача проверить полученную информацию, трансформировать ее в подходящий вариант для использования подключенной базы данных, либо для внешнего сервиса, необязательно базы данных. Data access layer может легко работать с репозиторием в интернете и какие-то действия выполнить.</p> <p>Так и получается. У нас реквест обработался, проверился поверхностно и отдался бизнес логике. Например, это запрос, бизнес логика сделала с ним что-то серьезное. Например, сохранила в базу данных, проверила какие-то действия. В ответ каждый раз вернула - ОК. Общие константы и методы для всех уровней выносятся в отдельные куски кода и находятся в Core Infrastructure Layer. Вот такая слоистая архитектура достаточно удобная и простая для того чтобы делать веб апликейшн, она подходит для микросервисов. Кому мало можете посмотреть луковую архитектуру, clean code. Все архитектуры об одном и том же говорят и пытаются показать куда какие куски надо класть.</p> <p>Вы можете делать что угодно. На уровне контроллера напрямую писать в базу данных. Никто вам запретить не может. Или можете сделать два контроллера. Один будет для SPA приложения, другой для мобильного. И там и там у вас будет функция создания юзера полноценная. С проверками, с отправкой почты и т.д. Но проблема в том что такой код будет плох (дублирование, неразделение ответственности) и через какое-то время вы его, как минимум, поддерживать не сможете. Либо будет очень много ошибок. Все архитектуры нужны для того чтобы программисты придерживались одного подхода. И если выбранная архитектура хорошая, удобная, все ее поддерживают, то проект управляем. Если четких правил нет, то один программист пишет одно, другой другое. Это кошмар для тимлида и кошмар для проекта. Про архитектуру поговорили.</p> <p>Смотрите, какие у нас теперь варианты есть. Если мы эти слои как-то определим, у нас между ними надо какие-то данные передавать. Если у нас придет какой-то уровень, я сразу брал entity модель и она тут везде скользила. На самом деле так лучше не делать. Даже если они у нас одинаковые абсолютно. По причине того, что если вы захотите эту модель между уровнями разделить, вы это уже сделать не сможете. Нужно будет делать большой рефакторинг.</p> </article> <article class="article"> <h2>Взаимодействие между слоями</h2> <p>Вариант 1. Не изолировать слой от соседей. (Потребитель создает и использует классы бизнес-логики напрямую или через DI. Имеет полный доступ к их реализации)</p> <p>Что мы можем делать чтобы взаимодействовать между слоями? Во-первых, не изолировать. Вы можете все в кучу свести. Модуль написать в одном месте и на любом месте использовать все что угодно. Таким образом. Плохой вариант, на самом деле. Можно так делать либо для очень простых, либо для одноразовых проектов. Если вы делаете какое-то приложение, например, для демонстрации. Демо приложение, которое вы один раз показали клиенту. В этом случае, наверное, смысл имеется. В этом случае вообще нет смысла заморачиваться на какую-то архитектуру. Надо сосредоточиться на функционале. На цели презентации. А там пусть хоть вообще будет мусор. Потом перепишете, если будет нужно, если не нужно, то и зачем зря стараться.</p> <p>Вариант 2. Частично изолировать слой от соседей (потребитель использует только интерфейсы и общие модели для доступа к классам бизнес-логики)</p> <p>В этом случае вы не можете просто так вызвать любой метод из другого класса. Если у вас репрезентация, то вы не можете дернуть из репозитория, вы можете работать только через интерфейс. Интерфейс какую-то информацию предоставляет и вот так вы можете работать. Если этото интерфейс использует какие-то данные, то они общие. Эта полумера подходит для не очень больших проектов. Чем он хорош? В этом случае какой-то контроль делаете. При этом у вас все равно связанность между модулями есть. Просто так модели вы не поюзаете.</p> <p>Вариант 3. Полностью изолировать слой от соседей (потребитель создает и отправляет команды к бизнес логике, подписывается на ответы. Классы бизнес-логики ведут себя также)</p> <p>В 3 варианте полностью изолируете означает что у вас и интерфейс и модели и все остальное они как бы живут вот здесь. То есть мы сюда какой-то реквест послали для того чтобы сюда послать я создаю модель которая использует бизнес логику. Именно свою модель. Дергаю интерфейс бизнес логики и все. Я работаю по интерфейсу предоставляемому бизнес логикой. То же самое здесь. Бизнес логика для того чтобы послать реквест, она не посылает ему что что послало ему реквест, она трансформирует этот запрос в модель data access layer, вызывая соответствующий интерфейс.</p> </article>','<article class="article"> <div id="link-to-dsr2023net" class="btn-back">назад</div> <h1>2023-11-27 DSR .NET School 2023 Lecture #9 Persistence layer</h1> </article> <h2>Лекция 9. Persistence layer</h2> ','<article class="article"> <div id="link-to-dsr2023net" class="btn-back">назад</div> <h1>2023-12-04 DSR .NET School 2023 Lecture #10 Persistence layer P2</h1> </article> <h2>Лекция 10. Persistence layer P2</h2> ','<article class="article"> <div id="link-to-dsr2023net" class="btn-back">назад</div> <h1>2023-12-11 DSR .NET School 2023 Lecture #11 Presentation layer P1</h1> </article> <h2>Лекция 11. Presentation layer P1</h2> ','<article class="article"> <div id="link-to-dsr2023net" class="btn-back">назад</div> <h1>2023-12-18 DSR .NET School 2023 Lecture #11 Presentation layer P2</h1> </article> <h2>Лекция 12. Presentation layer P2</h2> '],yt=['<article class="article"> <div id="link-to-dsr2023net" class="btn-back">назад</div> <h1>2023-11-23 Workshop #1</h1> </article> <ul> <li> <p>Практику ведет Андрей Кононов (автор курса)</p> </li> <li> <p>Всем здравствуйте! Скажите, слышно меня? Так, сегодня будем без камеры, потому что практика, чтобы не загораживать экран. Я буду не с большого экрана, а с ноутбука показывать. Чтобы код был немножко покрупнее. Прошу прощения за небольшую задержку. Ну во первых сегодня день релиза. Только что релизились, теперь будем практику читать. Это первое. Второе, с утра возникло желание дань вам чего-то более новенького. Поэтому потребовалось немножко времени для того чтобы вам материалы подготовить. Ну я думаю будет интересно. Отлично! Так, вы готовы? Начинаем.</p> <p>В принципе, как мы сегодня можем поступить. Вы можете, если у вас есть возможность, повторять за мной. Если не чувствуете в себе уверенности что будете быстро писать и держать внимание на том что я рассказываю и показываю. То лучше потом повторить после записи, аккуратненько, самостоятельно. Тем более, исходные коды я вам дам. Они будут выложены в гитхаб ко всем нашим практическим занятиям. Можете просто смотреть. Но я крайне рекомендую их не просто скачивать и просто по диагонали посмотреть, там что-то позапускать и успокоиться. А цель практики чтобы вы самостоятельно с пустого листа, с пустой папки смогли создать себе то что требуется. Это все запустить и пройти. Для того чтобы все было хорошо, чтобы вы через себя пропустили, самостоятельно все это дело повторять. Какие-то куски кода, я допускаю, что можно скопировать, какие-то базовые библиотеки. Они не суть. А вот саму основу лучше все-таки пропустить через себя с нуля. Ну, смотрите, как вам будет удобнее.</p> <p>Еще раз всем здравствуйте. Нас здесь уже 11 человек. Отлично. Первое. Слышно меня хорошо? С микрофоном проблем нет? Не надо громче, тише сделать? Тогда я сейчас шарю экран. И начинаем. Буду постепенно вам все рассказывать. А там что получится. Почему challange я в чате написал? Потомучто сейчас с вами буду собирать, с вами запускать. У меня еще ни одной не было лекции, где что-то даже 100 раз проверенной не сломалось по ходу дел. Но заодно увидите, как что-то можно отлаживать и править.</p> </li> <li> <code> DSR_NetSchool>2023>Program>00_GitHub>Lecture5.Examples </code> <p>Сегодня будем целиком рабочий стол смотреть. Смотрите. Это наш репозиторий. Гитхаб репозиторий, который есть уже с лекции 5, например. Все примеры посмотрел, которые у нас были. Это то что мы обсуждали Redis, микросервисы там мелкие задачки. У вас уже наверняка репозиторий есть.</p> <p>Поэтому первым делом что мы здесь сделаем. Мы просто возьмем и создадим здесь папку в которой будем собирать наш проект по частям. И за 6 занятий мы его соберем. Давайте сделаем новую папку, назовем ее NetSchoolWorkshop. Давайте просто ее Workshop назовем, чтобы было короче. Зачем такая длинная?</p> <code> DSR_NetSchool > 2023 > Program > 00_GitHub > Workshop </code> </li> <li> <p>Все. Внутри. Что мы начинаем делать? Ну, первым делом у нас папка пустая. Я рекомендую проект собирать по кусочкам. И мы сейчас будем собирать в том виде, в котором мне нравится. Который мне кажется удобен. Первым делом запускаем студию. Я буду все показывать в Visual Studio 2022. А вы смотрите как вам больше нравится и где. Создаем solution. Для этого на первом окошке выберем Create a new project.</p> <code>Create a new project</code> <p>Откроется окошко для выбора проекта, который мы будем создавать. Слева будут Recent project templates с последними проектами с которыми вы работали. Справа будет список шаблонов для создания нового проекта. Здесь мы выберем C#, All platforms, All project types. В окне поиска напишем solution</p> <code>solution</code> <p>В списке останется два шаблона Blank Solution и SQL Server Database Project. Вот Blank Solution мы его в принципе и создадим. Так будет проще. Откроется окно Configure your new project - Blank Solution. Напишем Solution name - NetSchool. Выберем Locatioon. Мы его положим в папку с нашим репозиторием. И здесь мы будем его хранить.</p> <code> DSR_NetSchool > 2023 > Program > 00_GitHub>Workshop </code> </li> <li> <p>И все отлично. Создали наш репозиторий. Нажимаем Next. Откроется главное окно программы Visual Studio. В нем будет окно Solution Explorer. В нем появится наш Solution \'NetSchool\'.</p> <code>Solution \'NetSchool\' (0 projects)</code> <p>Нажимаем на него и видим, что появилась папка NetSvhool и в ней наш солюшен NetSchool.sln</p> <code>00_GitHub > Workshop > NetSchool > NetSchool.sln</code> <p>В принципе, можно было его переместить папкой выше, но я этого делать не буду. Пусть все будет так. Нет. Некрасиво. Все таки мне так не нравится. Так как это просто файл, давайте я его положу на уровень выше, а папку NetSchool удалю. Студия делает так как ей нравится, а я - так как мне. В Workshop у нас будет лежать NetSchool.sln.</p> <code>00_GitHub > Workshop > NetSchool.sln</code> </li> <li> <p>Открываем его. Он у нас пустой. И нам здесь необходимо будет проект собирать. Что мы будем делать вообще в проекте. Что у нас за проект будет. Мы будем делать WebApi. И будем делать, скажем так, маленький микросервис, который будет выполнять простенькие задачи. Нам надо просто продемонстрировать каким образом мы будем собирать микросервисную структуру. Она практически ничего делать не будет. Но для понимания этого вполне достаточно. И у нас будет Blazor клиент, который будет использовать это Api для того чтобы какую-то работу выполнять.</p> <p>Итак. Начнем. Первым делом я рекомендую собраться и определиться со структурой. Давайте начнем со структуры папок. Как я обычно делаю. Смотрю сколько у меня будет систем. Например, у меня будет Api, будет Worker, будет Client. Будет несколько исполнительных систем, которые будут собраны, где-то хостятся. Поэтому я первым делам делаю себе папку Systems. Всегда. Открываю проводник и в папке Workshop создаю новую пустую папку Systems.</p> <code>00_GitHub > Workshop > Systems</code> </li> <li> <p>В ней я делаю примерный проект, что я хочу делать. Здесь уже начинается система. Если у меня систем достаточно много, я могу их тоже группировать по подпапкам. Но в данном случае у нас их будет немного. Поэтому мы сделаем следующим образом. У нас будет система Api. У нас будет папка Worker. Здесь у нас будет лежать проект, который отвечает за worker. И у нас будет папка Web, пока она будет пустая. У нас есть три папки. Мы будем делать, соответственно, три системы.</p> <code>00_GitHub > Workshop > Systems > Api</code> <code>00_GitHub > Workshop > Systems > Web</code> <code>00_GitHub > Workshop > Systems > Worker</code> </li> <li> <p>Теперь системы у нас есть. Пока в них ничего нет. Почему я рекомендую начать с продумывания папок. Во первых, когда вы будете потом делать взаимосвязи, все эти имена папок будут участвовать в dependency. Если вы их криво назовете или ошибетесь, потом будет достаточно сложно это все вернуть. Проще будет все поотключать и создать все заново. Ну или действительно надо будет лазить внутри этих файлов solution и в них что-то править. Но это вопрос уже другой. Поэтому я рекомендую немножко времени уделить и все сразу спроектировать. И при создании папок не ошибаться.</p> <p>Хорошо. У нас есть три системы, которые мы будем создавать. Давайте вспоминать наши слои, которые у нас есть. У нас будет сервисный слой, который будет бизнес логику делать - Services. Здесь будет лежать само ядро, сама суть этой системы. У нас будет слой данных - Data. И у нас будет утилиционная папка, в которой будет лежать что-то общее - Shared. Это будет набор утилит, классов общего назначения, хелперов, extention и т.д. которые будут помогать везде. То есть они, по большому счету, просто как помошнички. Все. У нас получилась такая система.</p> <code>00_GitHub > Workshop > Data</code> <code>00_GitHub > Workshop > Services</code> <code>00_GitHub > Workshop > Shared</code> <code>00_GitHub > Workshop > Systems</code> <code>00_GitHub > Workshop > Test</code> <code>00_GitHub > Workshop > NetSchool.sln</code> </li> <li> <p>Отлично. Давайте посмотрим что у нас есть дальше. В Api будет наш проект, мы его здесь создадим. В Shared мы тоже создадим один проект, можно один можно несколько можно сколько угодно. Главное чтобы там было общее. У нас на практике будет один, который будет называться Common общий. И внутри будут всевозможные файлики. В Services будет один или несколько проектов, если они более менее очерчены, есть законченный объем. Никто не запрещает вам делать под каждый Class свой проект. Но потом будет проблематично во всем разбираться. Можете и в один проект все свои классы сделать. Но потом это будет трудно поддерживать. Каким образом обычно разделяют классы. Обычно разделяют по доменам.</p> <p>Ну, образно, у вас есть блок для работы с юзером. Значит в Services будет UserService. Блок работы с заказами - ZakazServise. Блок работы с кэшем - CacheService. Можно делать сервисы и без бизнес логики, например, технические сервисы. Это сервис для отправки почты, сервис для записи в кеш, сервис для обработки картинок. Если сервисов получилось очень много, то их лучше сгруппировать. Иначе будет сложно разбираться. На маленьких проектах это не сильно критично. А если у вас сервисов будет штук 100. На каком-нибудь большом длительном проекте. И у вас вперемешку будет и кэш сервис и сервис для работы с юзером и сервис для работы с тикетами. Причем рано или поздно у вас имена начнут пересекаться. И будут у вас определенные проблемы. Это можно сразу придумать и разбить на папки.</p> <p>В данных у нас сейчас ничего не будет. Сейчас ничего нет. В данных у нас будет храниться вся инфраструктура, которая касается Entity Framework. Что в нее входит. Модели Entitys. Туда входят настройки контекста, проект инициации базы данных. И немаловажный блок, который нам потребуется, это миграции. На следующей практике будем настраивать Entity Framework поэтому пока ничего здесь делать не будем. Миграции мы будем в этом проекте делать в усложненном виде. На практике чаще всего используют одну базу данных. Выбирают Postgress например и на него настраивают. Миграции чаще всего лежат рядом с контекстом. Мы будем делать немножко посложнее. Мы будем делать мульти БД систему. У нас будет три базы данных - MySQL, PostGres, MSSQL и мы будем делать миграции для каждого из этих блоков. Немножко вам, может быть, поинтереснее будет. Может кому-то пригодится. Если вам это не надо, можете делать в одну БД. Тогда будет все попроще. Но даже если вы будете делать одну базу данных, никто вам не запрещает использовать такую же архитектуру которую предлагаю.</p> <p>Итак. Вот мы примерно поговорили о том, что у нас будет в папке. Я еще одну папочку забыл, она нам пригодится. Это папка Test. Где у нас будет лежать все unit и интеграционное тестирование. Который этот блок наш в системе будет тестировать.</p> </li> <li> <p>Вопросы? Зачем три БД? Ну как зачем. Если вы пишете софт и вы не знаете какой клиент захочет использовать. Может у одного MySQL, у другого Postgress. В принцие, если вы не хотите, давайте упрощу и оставлю одну базу данных. Это не проблема. Голосуем. Сделать вам возможность показ как работать с тремя БД или все таки оставить одну попроще и постандартней. Три. Ну вот, отлично. На самом деле достаточно интересное решение. Вам может быть когда-то понадобится. В любом случае, если вы будете разбираться с тремя, никто не запрещает использовать одну. А вот когда вы будете использовать одну у вас могут быть некоторые проблемы. Хороших и четких решений как это сделать даже в интернете я не нашел. Так что считайте это ноу-хау тех кто пришел.</p> <p>Итак. У нас есть структура. Почему я еще так делаю. Я вообще очень сильно люблю структурировать информацию. Пока структурируешь, ты во первых думаешь про это дело. Во-вторых соображаешь и какие-то архитектурные идеи приходят, например, куда положить. И таким образом просто пришел к такой системе. Чем хорошо. Если вы придерживаетесь единых правил, то уже не будете куда попало класть проект, не будете куда попало класть файл с константами. У вас будут такие правила, которые не дадут вам сделать грязь в коде. Это решается тем, что вы перед тем как что-то делать подумаете как это назвать, кужа положить, зачем это надо, какая цель. Может окажется пока вы думаете вообще это делать не надо, а надо делать немножко другое.</p> <p>У нас есть система на диске. Даже если у нас нет студии, мы уже видим вещи какие-то. Я обычно ее повторяю здесь в виде solution папок. В окне Solution Explorer правый клик мышью на Solution "NetSchool" и выбрать пункт</p> <code>Add > New Solution Folder</code> <p>И повторить всю структуру папок в Solution Explorer. Почему? Во первых, они будут точно также сворачиваться. И я могу ими как-то управлять и сфокусировать свое внимание на чем-то еще. Множество проектов видел, где просто тут все проекты идут вперемешку. И контекст, рядом лежит тест, рядом утилита, рядом лежит интеграционный тест. На самом деле, на это смотреть-то страшно. А работать с этим вообще кошмар. Повторяем структуру. Что такое solution folder. Это не просто папки, это по сути виртуальные папки внутри вашего проекта. То есть куда вы здесь положите. Если не ошибаюсь, в Raider они тоже есть, но с Raider я работаю крайне мало. Поэтому не могу ничего сказать. Внутри Systems мы делаем тоже папочки. Зачем мы это делаем. В работе я стороник того чтобы в проекте держать поближе под рукой те данные которые между собой связаны. Если у нас есть папка Api и у нас есть непосредственно сам наш Api и например, настройки, котрые нужны Api. И которые вы хотели бы вынести в отдельный проект. Как раз они здесь будут лежать. Если к Api есть какой-то подпроект, который ему нужен, и только ему нужен, то разумно его в эту папочку и положить.</p> <p>Я сейчас делаю сложную структуру. Для нашего примера это не имеет смысла. Но в любом случае, почему нет. Это лишняя папочка, лишняя структура. А порядок он и в африке порядок. Все. То есть мы создали структуру. У нас есть какие то папки. Дату мы заполним потом. Сервисы начнем заполнять сегодня. Shared сегодня. Тесты в самом конце. Сейчас нам надо создать application.</p> </li> <li> <p>Как дальше делают? Я обычно делаю просто папки. Я здесь создаю проект конкретный и здесь уже выбираю чот я хочу.</p> <code>Systems > App > Add a new project</code> <p>Мы здесь хотим сделать <code>ASP.NET Core Web API</code></p> <p>Это что такое. Это linux based web api и шаблон какой-то. Нажимаем кнопку Next в правом нижнем углу.</p> <p>Откроется новое окно Configure youe new project. ASP.NET Core Web App. Все, мы создаем. Он у нас ляжет сейчас непонятно куда.</p> </li> </ul>','<article class="article"> <div id="link-to-dsr2023net" class="btn-back">назад</div> <h1>2023-11-30 Workshop #2</h1> </article> <ul> <li> <p>Практику ведет Андрей Кононов (автор курса)</p> </li> <li> <p>Всем здравствуйте! Скажите, слышно меня? Так, сегодня будем без камеры, потому что практика, чтобы не загораживать экран. Я буду не с большого экрана, а с ноутбука показывать. Чтобы код был немножко покрупнее. Прошу прощения за небольшую задержку. Ну во первых сегодня день релиза. Только что релизились, теперь будем практику читать. Это первое. Второе, с утра возникло желание дань вам чего-то более новенького. Поэтому потребовалось немножко времени для того чтобы вам материалы подготовить. Ну я думаю будет интересно. Отлично! Так, вы готовы? Начинаем.</p> <p>В принципе, как мы сегодня можем поступить. Вы можете, если у вас есть возможность, повторять за мной. Если не чувствуете в себе уверенности что будете быстро писать и держать внимание на том что я рассказываю и показываю. То лучше потом повторить после записи, аккуратненько, самостоятельно. Тем более, исходные коды я вам дам. Они будут выложены в гитхаб ко всем нашим практическим занятиям. Можете просто смотреть. Но я крайне рекомендую их не просто скачивать и просто по диагонали посмотреть, там что-то позапускать и успокоиться. А цель практики чтобы вы самостоятельно с пустого листа, с пустой папки смогли создать себе то что требуется. Это все запустить и пройти. Для того чтобы все было хорошо, чтобы вы через себя пропустили, самостоятельно все это дело повторять. Какие-то куски кода, я допускаю, что можно скопировать, какие-то базовые библиотеки. Они не суть. А вот саму основу лучше все-таки пропустить через себя с нуля. Ну, смотрите, как вам будет удобнее.</p> <p>Еще раз всем здравствуйте. Нас здесь уже 11 человек. Отлично. Первое. Слышно меня хорошо? С микрофоном проблем нет? Не надо громче, тише сделать? Тогда я сейчас шарю экран. И начинаем. Буду постепенно вам все рассказывать. А там что получится. Почему challange я в чате написал? Потомучто сейчас с вами буду собирать, с вами запускать. У меня еще ни одной не было лекции, где что-то даже 100 раз проверенной не сломалось по ходу дел. Но заодно увидите, как что-то можно отлаживать и править.</p> </li> <li> <code> DSR_NetSchool>2023>Program>00_GitHub>Lecture5.Examples </code> <p>Сегодня будем целиком рабочий стол смотреть. Смотрите. Это наш репозиторий. Гитхаб репозиторий, который есть уже с лекции 5, например. Все примеры посмотрел, которые у нас были. Это то что мы обсуждали Redis, микросервисы там мелкие задачки. У вас уже наверняка репозиторий есть.</p> <p>Поэтому первым делом что мы здесь сделаем. Мы просто возьмем и создадим здесь папку в которой будем собирать наш проект по частям. И за 6 занятий мы его соберем. Давайте сделаем новую папку, назовем ее NetSchoolWorkshop. Давайте просто ее Workshop назовем, чтобы было короче. Зачем такая длинная?</p> <code> DSR_NetSchool > 2023 > Program > 00_GitHub > Workshop </code> </li> <li> <p>Все. Внутри. Что мы начинаем делать? Ну, первым делом у нас папка пустая. Я рекомендую проект собирать по кусочкам. И мы сейчас будем собирать в том виде, в котором мне нравится. Который мне кажется удобен. Первым делом запускаем студию. Я буду все показывать в Visual Studio 2022. А вы смотрите как вам больше нравится и где. Создаем solution. Для этого на первом окошке выберем Create a new project.</p> <code>Create a new project</code> <p>Откроется окошко для выбора проекта, который мы будем создавать. Слева будут Recent project templates с последними проектами с которыми вы работали. Справа будет список шаблонов для создания нового проекта. Здесь мы выберем C#, All platforms, All project types. В окне поиска напишем solution</p> <code>solution</code> <p>В списке останется два шаблона Blank Solution и SQL Server Database Project. Вот Blank Solution мы его в принципе и создадим. Так будет проще. Откроется окно Configure your new project - Blank Solution. Напишем Solution name - NetSchool. Выберем Locatioon. Мы его положим в папку с нашим репозиторием. И здесь мы будем его хранить.</p> <code> DSR_NetSchool > 2023 > Program > 00_GitHub>Workshop </code> </li> <li> <p>И все отлично. Создали наш репозиторий. Нажимаем Next. Откроется главное окно программы Visual Studio. В нем будет окно Solution Explorer. В нем появится наш Solution \'NetSchool\'.</p> <code>Solution \'NetSchool\' (0 projects)</code> <p>Нажимаем на него и видим, что появилась папка NetSvhool и в ней наш солюшен NetSchool.sln</p> <code>00_GitHub > Workshop > NetSchool > NetSchool.sln</code> <p>В принципе, можно было его переместить папкой выше, но я этого делать не буду. Пусть все будет так. Нет. Некрасиво. Все таки мне так не нравится. Так как это просто файл, давайте я его положу на уровень выше, а папку NetSchool удалю. Студия делает так как ей нравится, а я - так как мне. В Workshop у нас будет лежать NetSchool.sln.</p> <code>00_GitHub > Workshop > NetSchool.sln</code> </li> <li> <p>Открываем его. Он у нас пустой. И нам здесь необходимо будет проект собирать. Что мы будем делать вообще в проекте. Что у нас за проект будет. Мы будем делать WebApi. И будем делать, скажем так, маленький микросервис, который будет выполнять простенькие задачи. Нам надо просто продемонстрировать каким образом мы будем собирать микросервисную структуру. Она практически ничего делать не будет. Но для понимания этого вполне достаточно. И у нас будет Blazor клиент, который будет использовать это Api для того чтобы какую-то работу выполнять.</p> <p>Итак. Начнем. Первым делом я рекомендую собраться и определиться со структурой. Давайте начнем со структуры папок. Как я обычно делаю. Смотрю сколько у меня будет систем. Например, у меня будет Api, будет Worker, будет Client. Будет несколько исполнительных систем, которые будут собраны, где-то хостятся. Поэтому я первым делам делаю себе папку Systems. Всегда. Открываю проводник и в папке Workshop создаю новую пустую папку Systems.</p> <code>00_GitHub > Workshop > Systems</code> </li> <li> <p>В ней я делаю примерный проект, что я хочу делать. Здесь уже начинается система. Если у меня систем достаточно много, я могу их тоже группировать по подпапкам. Но в данном случае у нас их будет немного. Поэтому мы сделаем следующим образом. У нас будет система Api. У нас будет папка Worker. Здесь у нас будет лежать проект, который отвечает за worker. И у нас будет папка Web, пока она будет пустая. У нас есть три папки. Мы будем делать, соответственно, три системы.</p> <code>00_GitHub > Workshop > Systems > Api</code> <code>00_GitHub > Workshop > Systems > Web</code> <code>00_GitHub > Workshop > Systems > Worker</code> </li> <li> <p>Теперь системы у нас есть. Пока в них ничего нет. Почему я рекомендую начать с продумывания папок. Во первых, когда вы будете потом делать взаимосвязи, все эти имена папок будут участвовать в dependency. Если вы их криво назовете или ошибетесь, потом будет достаточно сложно это все вернуть. Проще будет все поотключать и создать все заново. Ну или действительно надо будет лазить внутри этих файлов solution и в них что-то править. Но это вопрос уже другой. Поэтому я рекомендую немножко времени уделить и все сразу спроектировать. И при создании папок не ошибаться.</p> <p>Хорошо. У нас есть три системы, которые мы будем создавать. Давайте вспоминать наши слои, которые у нас есть. У нас будет сервисный слой, который будет бизнес логику делать - Services. Здесь будет лежать само ядро, сама суть этой системы. У нас будет слой данных - Data. И у нас будет утилиционная папка, в которой будет лежать что-то общее - Shared. Это будет набор утилит, классов общего назначения, хелперов, extention и т.д. которые будут помогать везде. То есть они, по большому счету, просто как помошнички. Все. У нас получилась такая система.</p> <code>00_GitHub > Workshop > Data</code> <code>00_GitHub > Workshop > Services</code> <code>00_GitHub > Workshop > Shared</code> <code>00_GitHub > Workshop > Systems</code> <code>00_GitHub > Workshop > Test</code> <code>00_GitHub > Workshop > NetSchool.sln</code> </li> <li> <p>Отлично. Давайте посмотрим что у нас есть дальше. В Api будет наш проект, мы его здесь создадим. В Shared мы тоже создадим один проект, можно один можно несколько можно сколько угодно. Главное чтобы там было общее. У нас на практике будет один, который будет называться Common общий. И внутри будут всевозможные файлики. В Services будет один или несколько проектов, если они более менее очерчены, есть законченный объем. Никто не запрещает вам делать под каждый Class свой проект. Но потом будет проблематично во всем разбираться. Можете и в один проект все свои классы сделать. Но потом это будет трудно поддерживать. Каким образом обычно разделяют классы. Обычно разделяют по доменам.</p> <p>Ну, образно, у вас есть блок для работы с юзером. Значит в Services будет UserService. Блок работы с заказами - ZakazServise. Блок работы с кэшем - CacheService. Можно делать сервисы и без бизнес логики, например, технические сервисы. Это сервис для отправки почты, сервис для записи в кеш, сервис для обработки картинок. Если сервисов получилось очень много, то их лучше сгруппировать. Иначе будет сложно разбираться. На маленьких проектах это не сильно критично. А если у вас сервисов будет штук 100. На каком-нибудь большом длительном проекте. И у вас вперемешку будет и кэш сервис и сервис для работы с юзером и сервис для работы с тикетами. Причем рано или поздно у вас имена начнут пересекаться. И будут у вас определенные проблемы. Это можно сразу придумать и разбить на папки.</p> <p>В данных у нас сейчас ничего не будет. Сейчас ничего нет. В данных у нас будет храниться вся инфраструктура, которая касается Entity Framework. Что в нее входит. Модели Entitys. Туда входят настройки контекста, проект инициации базы данных. И немаловажный блок, который нам потребуется, это миграции. На следующей практике будем настраивать Entity Framework поэтому пока ничего здесь делать не будем. Миграции мы будем в этом проекте делать в усложненном виде. На практике чаще всего используют одну базу данных. Выбирают Postgress например и на него настраивают. Миграции чаще всего лежат рядом с контекстом. Мы будем делать немножко посложнее. Мы будем делать мульти БД систему. У нас будет три базы данных - MySQL, PostGres, MSSQL и мы будем делать миграции для каждого из этих блоков. Немножко вам, может быть, поинтереснее будет. Может кому-то пригодится. Если вам это не надо, можете делать в одну БД. Тогда будет все попроще. Но даже если вы будете делать одну базу данных, никто вам не запрещает использовать такую же архитектуру которую предлагаю.</p> <p>Итак. Вот мы примерно поговорили о том, что у нас будет в папке. Я еще одну папочку забыл, она нам пригодится. Это папка Test. Где у нас будет лежать все unit и интеграционное тестирование. Который этот блок наш в системе будет тестировать.</p> </li> <li> <p>Вопросы? Зачем три БД? Ну как зачем. Если вы пишете софт и вы не знаете какой клиент захочет использовать. Может у одного MySQL, у другого Postgress. В принцие, если вы не хотите, давайте упрощу и оставлю одну базу данных. Это не проблема. Голосуем. Сделать вам возможность показ как работать с тремя БД или все таки оставить одну попроще и постандартней. Три. Ну вот, отлично. На самом деле достаточно интересное решение. Вам может быть когда-то понадобится. В любом случае, если вы будете разбираться с тремя, никто не запрещает использовать одну. А вот когда вы будете использовать одну у вас могут быть некоторые проблемы. Хороших и четких решений как это сделать даже в интернете я не нашел. Так что считайте это ноу-хау тех кто пришел.</p> <p>Итак. У нас есть структура. Почему я еще так делаю. Я вообще очень сильно люблю структурировать информацию. Пока структурируешь, ты во первых думаешь про это дело. Во-вторых соображаешь и какие-то архитектурные идеи приходят, например, куда положить. И таким образом просто пришел к такой системе. Чем хорошо. Если вы придерживаетесь единых правил, то уже не будете куда попало класть проект, не будете куда попало класть файл с константами. У вас будут такие правила, которые не дадут вам сделать грязь в коде. Это решается тем, что вы перед тем как что-то делать подумаете как это назвать, кужа положить, зачем это надо, какая цель. Может окажется пока вы думаете вообще это делать не надо, а надо делать немножко другое.</p> <p>У нас есть система на диске. Даже если у нас нет студии, мы уже видим вещи какие-то. Я обычно ее повторяю здесь в виде solution папок. В окне Solution Explorer правый клик мышью на Solution "NetSchool" и выбрать пункт</p> <code>Add > New Solution Folder</code> <p>И повторить всю структуру папок в Solution Explorer. Почему? Во первых, они будут точно также сворачиваться. И я могу ими как-то управлять и сфокусировать свое внимание на чем-то еще. Множество проектов видел, где просто тут все проекты идут вперемешку. И контекст, рядом лежит тест, рядом утилита, рядом лежит интеграционный тест. На самом деле, на это смотреть-то страшно. А работать с этим вообще кошмар. Повторяем структуру. Что такое solution folder. Это не просто папки, это по сути виртуальные папки внутри вашего проекта. То есть куда вы здесь положите. Если не ошибаюсь, в Raider они тоже есть, но с Raider я работаю крайне мало. Поэтому не могу ничего сказать. Внутри Systems мы делаем тоже папочки. Зачем мы это делаем. В работе я стороник того чтобы в проекте держать поближе под рукой те данные которые между собой связаны. Если у нас есть папка Api и у нас есть непосредственно сам наш Api и например, настройки, котрые нужны Api. И которые вы хотели бы вынести в отдельный проект. Как раз они здесь будут лежать. Если к Api есть какой-то подпроект, который ему нужен, и только ему нужен, то разумно его в эту папочку и положить.</p> <p>Я сейчас делаю сложную структуру. Для нашего примера это не имеет смысла. Но в любом случае, почему нет. Это лишняя папочка, лишняя структура. А порядок он и в африке порядок. Все. То есть мы создали структуру. У нас есть какие то папки. Дату мы заполним потом. Сервисы начнем заполнять сегодня. Shared сегодня. Тесты в самом конце. Сейчас нам надо создать application.</p> </li> <li> <p>Как дальше делают? Я обычно делаю просто папки. Я здесь создаю проект конкретный и здесь уже выбираю чот я хочу.</p> <code>Systems > App > Add a new project</code> <p>Мы здесь хотим сделать <code>ASP.NET Core Web API</code></p> <p>Это что такое. Это linux based web api и шаблон какой-то. Нажимаем кнопку Next в правом нижнем углу.</p> <p>Откроется новое окно Configure youe new project. ASP.NET Core Web App. Все, мы создаем. Он у нас ляжет сейчас непонятно куда.</p> </li> </ul>','<article class="article"> <div id="link-to-dsr2023net" class="btn-back">назад</div> <h1>2023-12-07 Workshop #3</h1> </article> ','<article class="article"> <div id="link-to-dsr2023net" class="btn-back">назад</div> <h1>2023-12-14 Workshop #4</h1> </article> ','<article class="article"> <div id="link-to-dsr2023net" class="btn-back">назад</div> <h1>2023-12-21 Workshop #5</h1> </article> ','<article class="article"> <div id="link-to-dsr2023net" class="btn-back">назад</div> <h1>2023-12-28 Workshop #6</h1> </article> '],vt=['<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>DSR NetSchool 2023/24 Exam</h1> <strong>100 вопросов. Выполнил на 55 баллов из 100</strong> </article> <article class="article"> <h3>1. Отметьте интерпретируемые языки программирования (checkbox)</h3> <ul> <li><strong>PHP</strong></li> <li>Java</li> <li>JavaScript</li> <li>TypeScript</li> <li><strong>Python</strong></li> <li>C#</li> <li>Go</li> </ul> </article> <article class="article"> <h3>2. Какой код ответа сигнализирует об успешно выполненном HTTP-запросе?</h3> <ul> <li>Семейство 300 ответов</li> <li>Семейство 500 ответов</li> <li><strong>Семейство 200 ответов</strong></li> <li>Семейство 400 ответов</li> </ul> </article> <article class="article"> <h3>3. Может ли Blazor приложение взаимодействовать с JavaScript?</h3> <ul> <li><strong>Да</strong></li> <li>Нет</li> <li>Да, но только запускать Blazor методы из JS функций</li> <li>Да, но только запускать JS функции из Blazor методов</li> </ul> </article> <article class="article"> <h3>4. Какой класс надо использовать для написания класса-расширения?</h3> <ul> <li><strong>Динамический</strong></li> <li>Статический</li> <li>Обычный</li> </ul> </article> <article class="article"> <h3>5. С помощью какой команды в git можно создавать новую ветку и переключаться на нее?</h3> <ul> <li>git branch \'brunch-name\'</li> <li><strong>git checkout -b \'brunch-name\'</strong></li> <li>git checkout \'brunch-name\'</li> <li>git fetch -b \'branch-name\'</li> </ul> </article> <article class="article"> <h3>6. Какой принцип нарушают, так называемые, God-классы?</h3> <ul> <li>Open/closed</li> <li>Liskov substitution</li> <li><strong>Single responsibilities</strong></li> </ul> </article> <article class="article"> <h3>7. Прогоаммист делает новые методы путем копирования староко и небольшим исправлением кода. Какой принцип он нарушает?</h3> <ul> <li>KISS</li> <li>Никакой</li> <li><strong>DRY</strong></li> <li>OOP</li> <li>YAGNI</li> <li>SOLID</li> </ul> </article> <article class="article"> <h3>8. В каком случае будет выполнен запрос к БД и возвращен набор данных?</h3> <ul> <li><strong>var result = DB.Where(x => x.id > 0).ToList();</strong></li> <li>var result = DB.Where(x => x.id > 0).OrderBy(x => x.id);</li> <li>var result = DB.Where(x => x.id > 0);</li> </ul> </article> <article class="article"> <h3>9. В каком случае можно читать данные незафиксированных транзакций в реляционной БД?</h3> <ul> <li>Если установлен уровень изоляции транзакции Repeatable Read</li> <li>Никак. Это запрещено концепцией РСУБД</li> <li><strong>Если установлен уровень изоляции транзакции Dirty Read</strong></li> <li>Если установлен уровень изоляции транзакции Serializable</li> </ul> </article> <article class="article"> <h3>10. Создать суперкласс, который умеет делать все это хорошая идея?</h3> <ul> <li>Нет, это нарушает ПДД</li> <li>Нет, это нарушает DRY</li> <li>Я бы не стал так делать</li> <li>Да</li> <li><strong>Нет, это нарушает YAGNI</strong></li> </ul> </article> <article class="article"> <h3>11. В какой программной конструкции разработка ведется "внутри" данной конструкции?</h3> <ul> <li>Application stack</li> <li>Library</li> <li><strong>Framework</strong></li> </ul> </article> <article class="article"> <h3>12. Где хранится строка в памяти?</h3> <ul> <li>Можно настроить</li> <li><strong>В куче</strong></li> <li>На стеке</li> </ul> </article> <article class="article"> <h3>13. Программисту поставили задачу получить статический отчет по данным из XML файла. В ходе реализации он разработал программу, которая сначала читает данные из XML, потом проверяет корректность данных. Если данные отсутствуют или не корректные, то запускается визуальный интерфейс, в котором можно руками ввести или исправить данные. В финале осуществляется сбор требуемого статистического отчета. Ну и для удобства он также реализовал возможность чтения данных из Jaon и CSV форматов. Какой принцип он нарушил?</h3> <ul> <li><strong>SOLID</strong></li> <li>Никакой. Он молодец</li> <li>Здравого смысла</li> <li>OOP</li> <li>DRY</li> <li>KISS</li> <li>YAGNI</li> </ul> </article> <article class="article"> <h3>14. Какой оператор создает экземпляр статического класса?</h3> <ul> <li>static new</li> <li><strong>никакой</strong></li> <li>new</li> </ul> </article> <article class="article"> <h3>15. Как описывается generic тип?</h3> <ul> <li>Выделяется фигурными скобками</li> <li><strong>Выделяется угловыми скобками</strong></li> <li>Выделяется квадратными скобками</li> <li>Выделяется символом $</li> </ul> </article> <article class="article"> <h3>16. Что такое CI/CD?</h3> <ul> <li><strong>Процесс автоматического развертывания системы из исходных кодов на серверах</strong></li> <li>Процесс записи дистрибутивов приложения на CD для передачи заказчику</li> <li>Процесс подготовки необходимой документации и передачи готового приложения заказчику</li> </ul> </article> <article class="article"> <h3>17. Какое объединение таблиц вернет пересечение двух множеств? (checkbox)</h3> <ul> <li>"запятая"</li> <li><strong>left join</strong></li> <li><strong>inner join</strong></li> <li><strong>right join</strong></li> </ul> </article> <article class="article"> <h3>18. Что такое Ajax?</h3> <ul> <li>JS фреймворк</li> <li>Технология динамической загрузки JS функций по необходимости</li> <li><strong>Подход отправки запросов на сервер без перезагрузки всей страницы</strong></li> </ul> </article> <article class="article"> <h3>19. Где хранятся экземпляры типа struct?</h3> <ul> <li><strong>В куче</strong></li> <li>В C# нет такого типа</li> <li>На стеке</li> </ul> </article> <article class="article"> <h3>20. При каком подходе в коде необходимо создавать миграции БД?</h3> <ul> <li>Code first</li> <li><strong>BD first</strong></li> <li>Model first</li> </ul> </article> <article class="article"> <h3>21. Какая система позволяет не потерять ранее сделанные изменения в коде? (checkbox)</h3> <ul> <li><strong>SVN</strong></li> <li>Ticket system</li> <li><strong>GIT</strong></li> <li>MS Word</li> <li>Wiki</li> </ul> </article> <article class="article"> <h3>22. Какие уровни изоляции CSS можно определить для Blazor компонента? (checkbox)</h3> <ul> <li><strong>Встроенный</strong></li> <li><strong>Внешний</strong></li> <li><strong>Изолированный</strong></li> <li><strong>Общий/глобальный</strong></li> </ul> </article> <article class="article"> <h3>23. Укажите места, где можно настроить роутинг в Asp.Net приложении? (checkbox)</h3> <ul> <li>В razor-странице</li> <li><strong>В контроллере</strong></li> <li><strong>В blazor-компоненте</strong></li> </ul> </article> <article class="article"> <h3>24. Приложения на каких фреймворках могут запускаться на IOS? (checkbox)</h3> <ul> <li><strong>Net 7</strong></li> <li>Net Framewotk 4.6</li> <li>Net Framework 4.8</li> <li><strong>Net Core 3.1</strong></li> </ul> </article> <article class="article"> <h3>25. Что такое REST?</h3> <ul> <li>Проприетарная технология для организации связи между сервисами</li> <li>Термин не относится к программированию</li> <li><strong>Стандарт построения API приложения</strong></li> </ul> </article> <article class="article"> <h3>26. Можно ли в WebApi реализовать стартовую страницу на основе Razor-page?</h3> <ul> <li><strong>Да</strong></li> <li>Нет. Можно использовать только Asp.Net MVC</li> <li>Нет. WebApi не предназначен для возврата html-страниц</li> </ul> </article> <article class="article"> <h3>27. Где хранится конфигурация по умолчанию для Asp.Net WebApi?</h3> <ul> <li>такого места нет, разработчик подключает к себе удобное ему место</li> <li>в БД</li> <li>в appsettings.json</li> <li>в реестре</li> <li><strong>В переменных окружения</strong></li> </ul> </article> <article class="article"> <h3>28. Зачем нужен Refresh Token?</h3> <ul> <li><strong>Для получения нового AccessToken без необходимости повторной передачи логина и пароля</strong></li> <li>Для получения нового AccessToken с повторной передачей логина и пароля</li> <li>Это просто квитанция о выписке AccessToken. В процессе аутентификации не участвует</li> <li>Для подтверждения влядения вызывающей стороной AccessToken</li> </ul> </article> <article class="article"> <h3>29. Scoped сервис ASP.NET Web API приложения существует</h3> <ul> <li>Таких сервисов не бывает</li> <li><strong>Пока запущено приложение</strong></li> <li>Пока включен компьютер</li> <li>Пока пользователь не выйдет из своего аккаунта</li> <li>В рамках одного веб-запроса</li> </ul> </article> <article class="article"> <h3>30. Как можно определить методы для типа enum?</h3> <ul> <li>С помощью механизма методов расширений</li> <li>Определить необходимые методы внутри enum типа с ключевым словом static</li> <li><strong>Никак. Методы можно определить только для классов и структур</strong></li> </ul> </article> <article class="article"> <h3>31. Какими способами следует конфигурировать БД в EF при Code-first подходе? (checkbox)</h3> <ul> <li>При помощи fluent методов в DbContext</li> <li>При помощи атрибутов persistense моделей</li> <li><strong>При помощи SQL запросов</strong></li> <li><strong>Вручную в файлах миграции</strong></li> </ul> </article> <article class="article"> <h3>32. Как называется процесс преобразования стрктурированной строки, например в Json в объект?</h3> <ul> <li>Кастинг</li> <li>Парсинг</li> <li>Сериализация</li> <li><strong>Десериализация</strong></li> </ul> </article> <article class="article"> <h3>33. Что правильно использовать для задержки на 1 сегунду внутри асинхронного метода?</h3> <ul> <li>Это действительно крайне нежелательно</li> <li>await Task.Delay(1)</li> <li>Thread.Sleep(1)</li> <li><strong>await Task.delay(1000)</strong></li> <li>Thread.Sleep(1000)</li> <li>await Task.Delay()</li> </ul> </article> <article class="article"> <h3>35. Как проявляется проблемма 100 кирпича в разработке ПО? (checkbox)</h3> <ul> <li><strong>С накоплением техническго долга из-за постоянного изменения требований</strong></li> <li><strong>С усталостью команды и текучкой кадров</strong></li> <li><strong>В повышении сложности решения со временем</strong></li> <li>В снижении сложности решения со временем</li> </ul> </article> <article class="article"> <h3>36. Что такое IL?</h3> <ul> <li>Высокоуровневый язык прошраммирования .NET</li> <li><strong>Результат компиляции языка высокого уровня .NET</strong></li> <li>Неуправляемый код C#</li> </ul> </article> <article class="article"> <h3>37. Какой инструмент позволяет работать с данными БД как с объектами?</h3> <ul> <li>ORM</li> <li>AutoMapper</li> <li>Middleware</li> <li><strong>Abstract DB</strong></li> </ul> </article> <article class="article"> <h3>38. AJAX это</h3> <ul> <li>нотация JavaScript языка</li> <li>нотация Python язка</li> <li><strong>Нет правильного ответа</strong></li> <li>Нотация Blazor языка</li> </ul> </article> <article class="article"> <h3>39. Процесс проверки прав пользователя на совершение какой-либ операции называется</h3> <ul> <li>Иммунизация</li> <li>Идентификация</li> <li>Авторизация</li> <li><strong>Аутентификация</strong></li> </ul> </article> <article class="article"> <h3>40. Обязателен ли к использованию AutoMapper в Asp.Net Web api приложениях</h3> <ul> <li><strong>Нет</strong></li> <li>Да</li> </ul> </article> <article class="article"> <h3>41. Вопрос я пропустил</h3> </article> <article class="article"> <h3>42. Экземпляр сервиса создается</h3> <ul> <li><strong>При первом обращении к сервису средствами DI</strong></li> <li>При запуске приложения</li> <li>При запуске операционной системы</li> <li>При каждом отвращении с сервису средствами DI</li> </ul> </article> <article class="article"> <h3>43. Есть две таблицы, содержащие поля ID. В этом поле у таблиц есть 50% одинаковых значений. Какой запрос вернет большее количество строк при выполнении? (checkbox)</h3> <ul> <li>select * from tab1 t1 full join tab2 t2 on t1.id = t2.id</li> <li><strong>select * from tab1 t1 cross join tab2 t2</strong></li> <li>select * from tab1 t1 left join tab2 t2 on t1.id = t2.id</li> <li><strong>select * from tab1 t1, tab2 t2</strong></li> <li>select * from tab1 t1 right join tab2 t2 on t1.id = t2.id</li> </ul> </article> <article class="article"> <h3>44. Вопрос я пропустил</h3> </article> <article class="article"> <h3>45. Какой JS фреймворк стоит взять для разработки мобильного приложения?</h3> <ul> <li><strong>ReactNative</strong></li> <li>ReactJS</li> <li>Никакой. JS фреймворки предназначены только для SPA приложений</li> <li>Angular</li> <li>VueJS</li> </ul> </article> <article class="article"> <h3>46. Какая технология позволяет организовать отправку команд с сервера на клиент? (checkbox)</h3> <ul> <li>WebApi</li> <li><strong>WebSockets</strong></li> <li>LongPooling</li> <li>AWS SQS</li> <li>Никакая, это же веб</li> </ul> </article> <article class="article"> <h3>47. Какие типы можно использовать в предложении foreach?</h3> <ul> <li>Любые ссылочные типы</li> <li>Любые типы реализующие интерфейс ICollection</li> <li><strong>Любые типы реализующие интерфейс IEnumerable</strong></li> <li>Любые типы внутри которых объявлено свойство типа Array</li> </ul> </article> <article class="article"> <h3>48. В чем разница между throw и throe ex?</h3> <ul> <li>Throw сохраняет трассировку стека, throw ex ее сбрасывает</li> <li>Throw ex сохраняет трассировку стека, throw ее сбрасывает</li> <li>Не существует способа выбросить исключение без переменной указывающей на экземпляр, поэтому throw ex единственный возможный способ</li> <li><strong>Разницы нет. throw ex используется для доступа к экземпляру исключения</strong></li> </ul> </article> <article class="article"> <h3>49. Зачем используется ключевое слово delegate?</h3> <ul> <li>Это оператор из Java</li> <li>Для описания ссылки на метод</li> <li><strong>Для описания переопределяемого поля класса</strong></li> </ul> </article> <article class="article"> <h3>50. Какой способ аутентификации чаще всего используется для межсервисного взаимодействия?</h3> <ul> <li><strong>JWT</strong></li> <li>SOAP</li> <li>Cookie</li> <li>Json</li> </ul> </article> <article class="article"> <h3>51. Какой метод используется для навигации на другую страницу в Blazor приложении?</h3> <ul> <li>NavigationManager.Go</li> <li><strong>NavigationManager.Redirect</strong></li> <li>NavigationManager.NavigateTo</li> <li>NavigationManager.Open</li> </ul> </article> <article class="article"> <h3>52. Что такое Dockerfile?</h3> <ul> <li><strong>Файл, содержащий инструкции для сборки образов</strong></li> <li>Файл, содержащий тома сервера docker</li> <li>Образ виртуальной машины</li> <li>Файл, содержащий логи полученные из docker контейнера</li> </ul> </article> <article class="article"> <h3>53. Программисту поставили задачу сделать простую программу для обработки XLS файла. Предполагается что она нужна будет на один-два использования. Программист реализовал серверное приложение в микросервисной архитектуре с кешированием, CI/CD и системой анализа логов через браузер. Какой принцип он нарушил?</h3> <ul> <li>Никакой. Он молодец!</li> <li>SOLID</li> <li>OOP</li> <li>YAGNI</li> <li><strong>Здравого смысла</strong></li> <li>KISS</li> <li>DRY</li> </ul> </article> <article class="article"> <h3>54. Какой язык понимает JitCompiler?</h3> <ul> <li>Java</li> <li>C#</li> <li>Assembler</li> <li><strong>MSIL</strong></li> </ul> </article> <article class="article"> <h3>55. Какие методы используются для проектирования качественной реляционной БД? (checkbox)</h3> <ul> <li><strong>Экспертный</strong></li> <li><strong>Последовательное приближение</strong></li> <li>Agile проектирование</li> <li>Нормализация</li> </ul> </article> <article class="article"> <h3>56. Что в настоящий момент используется для описания и тестирования WebAPI?</h3> <ul> <li><strong>Swagger</strong></li> <li>DocFX</li> <li>Текстовый документ</li> <li>Postman</li> </ul> </article> <article class="article"> <h3>57. Какой DI провайдер включен в состав Net7?</h3> <ul> <li>Unity</li> <li><strong>Никакой. Его необходимо устанавливать отдельно</strong></li> <li>Autofac</li> <li>Ninject</li> <li>ServiceProvider</li> </ul> </article> <article class="article"> <h3>58. Многопоточность и асинхронность это одно и то же?</h3> <ul> <li>Да</li> <li>Да, асинхронность - это синтаксический сахар к многопоточности</li> <li><strong>Нет</strong></li> </ul> </article> <article class="article"> <h3>59. Принцип DRY говорит, что можно скопировать кусок кода и использовать его в другом месте проекта</h3> <ul> <li>Да</li> <li><strong>Нет</strong></li> </ul> </article> <article class="article"> <h3>60. Почему частый запуск GC может привести к замедлению выполнения программы?</h3> <ul> <li><strong>На период работы GC все процессы останавливаются</strong></li> <li>Нет способов часто запускать GC, поэтому вопрос смысла не имеет</li> <li>Это не приводит к замедлению выполнения программы</li> </ul> </article> <article class="article"> <h3>61. Как можно получить экземпляр DbContext для работы? (checkbox)</h3> <ul> <li>Получить scoped-экземпляр через DI</li> <li><strong>Он всегда доступен через глобальную переменную</strong></li> <li>Создать при помощи фабрики</li> </ul> </article> <article class="article"> <h3>62. Может ли Blazor приложение продолжать полноценно функционировать при потере подключения к сети Интернет?</h3> <ul> <li>Да</li> <li>Да, только Blazor Server</li> <li>Да, только Blazor WebAssembly</li> <li><strong>Нет, Blazor работает через SignalR, т.е. ему необходимо постоянное подключение к сети Интернет</strong></li> </ul> </article> <article class="article"> <h3>63. Может ли Blazor приложение работать без серверного API?</h3> <ul> <li><strong>Да, если это Blazor WebAssembly</strong></li> <li>Да</li> <li>Нет</li> <li>Да, если это Blazor Server</li> </ul> </article> <article class="article"> <h3>64. Как обычно называют классы, предназначенные для передачи данных между слоями приложения?</h3> <ul> <li><strong>Никак. Классы, как классы</strong></li> <li>DTO модели</li> <li>Transport модели</li> </ul> </article> <article class="article"> <h3>65. Когда будет выполнен код в блоке finally в конструкции try-catch-finally?</h3> <ul> <li>Только если в блоке try возникнет исключение и оно НЕ БУДЕТ перехвачено блоком catch</li> <li>Только если блок try выполнится без исключений</li> <li>Только если в блоке try возникнет исключение и он БУДЕТ перехвачено блоком catch</li> <li>Всегда, если ранее не было возврата из метода (return)</li> <li><strong>Всегда</strong></li> </ul> </article> <article class="article"> <h3>66. Укажите, какие СУБД являются NoSql (checkbox)</h3> <ul> <li>Redis</li> <li>MySQL</li> <li><strong>Neo4j</strong></li> <li>MS SQL Server</li> <li><strong>Mongo</strong></li> <li><strong>Cassandra</strong></li> <li>Oracle</li> </ul> </article> <article class="article"> <h3>67. Нарушается ли принцип Open/closed принцип разработка Extension для класса</h3> <ul> <li><strong>Нет</strong></li> <li>Да</li> </ul> </article> <article class="article"> <h3>68. Как необходимо зарегистрировать класс в DI, чтобы при запуске он существовал в единственном экземпляре?</h3> <ul> <li>As OnlyOne</li> <li><strong>As Singleton</strong></li> <li>As Transient</li> <li>As Scope</li> </ul> </article> <article class="article"> <h3>69. Что используется для ускорения SQL запросов в реляционных СУБД?</h3> <ul> <li>ER диаграммы</li> <li>Материализованные представления</li> <li><strong>Индексы</strong></li> <li>Хранимые процедуры</li> </ul> </article> <article class="article"> <h3>70. Какой способ передачи параметров можно использовать для передачи параметров от родителя ко всем его потомкам напрямую? (checkbox)</h3> <ul> <li>Parameter</li> <li><strong>Transfer service</strong></li> <li><strong>Cascading parameters</strong></li> </ul> </article> <article class="article"> <h3>71. Какой тип СУБД лучше для разработки веб-приложений?</h3> <ul> <li>Объектные СУБД</li> <li>Для веб-приложений лучше не использовать СУБД. Рекомендуется компилировать приложения в виде набора HTML страниц при помощи специальных средств</li> <li>Нет правильного ответа</li> <li><strong>NoSQL СУБД</strong></li> <li>Быстрые СУБД на базе временных рядов</li> <li>Реляционные СУБД</li> <li>Графовые СУБД</li> </ul> </article> <article class="article"> <h3>72. Какая конструкция предназначена для перехвата исключений?</h3> <ul> <li>catch exception</li> <li>try except</li> <li><strong>try catch</strong></li> <li>try finally</li> </ul> </article> <article class="article"> <h3>73. SOLID - это принцип построения каких приложений?</h3> <ul> <li>Микросервисных</li> <li><strong>Любых</strong></li> <li>Монолитных</li> <li>Это вообще не принцип построения приложений</li> </ul> </article> <article class="article"> <h3>74. Какой процесс из перечисленных выполняется первым?</h3> <ul> <li><strong>Авторизация</strong></li> <li>Идентификация</li> <li>Аутентификация</li> </ul> </article> <article class="article"> <h3>75. В каком Blazor приложении можно напрямую обращаться к БД?</h3> <ul> <li>Этого сделать нельзя</li> <li>В Server исполнении</li> <li><strong>В WebAssembly исполнении</strong></li> </ul> </article> <article class="article"> <h3>76. Какая среда разработки является лучшей для разработки Net приложений?</h3> <ul> <li>Rider</li> <li>VSCode</li> <li>Попытка засчитана, но, пожалуй, не будем начинать очередной холивар</li> <li><strong>Visual Studio</strong></li> <li>Notepad</li> </ul> </article> <article class="article"> <h3>77. Что такое DNS?</h3> <ul> <li>Магазин по продаже коспетики и парфюмерии</li> <li><strong>Система для определения IP интернет ресурса по его имени</strong></li> <li>Net-библиотека для работы с URL</li> </ul> </article> <article class="article"> <h3>78. Что можно использовать для организации системы кеширования?</h3> <ul> <li>Docker</li> <li><strong>RabbitMQ</strong></li> <li>Kafka</li> <li>Redis</li> </ul> </article> <article class="article"> <h3>79. Какие ORM были рассмотрены на лекциях? (checkbox)</h3> <ul> <li><strong>Hibernate</strong></li> <li><strong>EntityFramework</strong></li> <li><strong>Linq2SQL</strong></li> <li>Dapper</li> </ul> </article> <article class="article"> <h3>80. Выберите верные утверждения о primary key в реляционной БД (checkbox)</h3> <ul> <li><strong>Primary key должен быть уникальным</strong></li> <li>Primary key и unique ограничения эквивалентны</li> <li>Primary key НЕ может быть составным</li> <li><strong>Primary key не позволяет значения NULL</strong></li> <li><strong>Primary key может быть составным</strong></li> </ul> </article> <article class="article"> <h3>81. CLR- что это?</h3> <ul> <li>Команда очистки консоли в Windows</li> <li>Стандарт описания языка C# для различных ОС</li> <li><strong>Общая языковая среда выполнения</strong></li> </ul> </article> <article class="article"> <h3>82. Какие способы валидации были рассмотрены в рамках данного курса? (checkbox)</h3> <ul> <li><strong>Управляемый, на основе методов</strong></li> <li><strong>Встроенный, на основе аттрибутов</strong></li> <li>Встроенный, на основе маппинга типов</li> <li><strong>На основе FluentValidator</strong></li> </ul> </article> <article class="article"> <h3>83. Выберите верное утверждение (checkbox)</h3> <ul> <li><strong>В C# существуют ссылочные и значимые типы</strong></li> <li>Чтобы создать значимый тип нужно объявить класс унаследованные от типа Value Type</li> <li><strong>Все типы в C# наследуются от типа object</strong></li> <li>В C# все типы являются ссылочными</li> </ul> </article> <article class="article"> <h3>84. Какой пакет может быть использован для организации встроенного в Asp.Net WebApi сервера аутентификации? (checkbox)</h3> <ul> <li>KeyCloak</li> <li>Duende IdentityServer</li> <li><strong>IdentityServer 4</strong></li> <li><strong>Okta</strong></li> </ul> </article> <article class="article"> <h3>85. Экземпляр Transient сервиса создается</h3> <ul> <li>При первом обращении к сервису средствами DI</li> <li><strong>При каждом обращении к сервису средствами DI</strong></li> <li>При запуске приложения</li> <li>При запуске операционной системы</li> </ul> </article> <article class="article"> <h3>86. Абстрактный класс и интерфейс эквивалентны друг другу?</h3> <ul> <li><strong>Нет</strong></li> <li>Да</li> </ul> </article> <article class="article"> <h3>87. async и await - это синтаксический сахар для более удобной работы с параллельными процессами?</h3> <ul> <li>Нет</li> <li><strong>Да</strong></li> </ul> </article> <article class="article"> <h3>88. Какую глубину вложения комонента в компонент позволяет делать Blazor приложение?</h3> <ul> <li>не более 10</li> <li>не более 1000</li> <li>не более 5</li> <li><strong>не ограничена</strong></li> <li>не более 100</li> </ul> </article> <article class="article"> <h3>89. Какой протокол используется для реалзации REST API?</h3> <ul> <li>JSON</li> <li><strong>HTTP</strong></li> <li>HTML</li> </ul> </article> <article class="article"> <h3>90. Какой подход к разработке является правильным?</h3> <ul> <li>На усмотрение PM-а</li> <li>Iterative</li> <li><strong>Waterfall</strong></li> <li>Agile</li> </ul> </article> <article class="article"> <h3>91. Какая библиотека для логирования использовалась в рамках текущего курса?</h3> <ul> <li><strong>SLogger</strong></li> <li>Встроенная в Asp.Net WebAPI</li> <li>Blog</li> <li>Serilog</li> </ul> </article> <article class="article"> <h3>92. Какой инструмент позволяет запустить и сязать между собой несколько docker-контейнеров?</h3> <ul> <li>docker-host</li> <li>docker-starter</li> <li>docker-compose</li> <li><strong>docker-hub</strong></li> <li>docker-repository</li> </ul> </article> <article class="article"> <h3>93. Разработчику нужно зарегистрировать сервис в DI контейнере ASP NET приложения, таким образом, чтобы экземпляр сервиса создавался один раз на запрос. Какой метод внедрения зависимостей ему использовать?</h3> <ul> <li><strong>AddSingleton</strong></li> <li>AddTransient</li> <li>AddScoped</li> <li>Под данные критерии подходят все варианты</li> </ul> </article> <article class="article"> <h3>94. Что можно использовать для организации обмена информации между микросервисами? (checkbox)</h3> <ul> <li><strong>HTTP-запросы к API микросервисов</strong></li> <li>Kafka</li> <li><strong>RabbitMQ</strong></li> <li>Docker</li> <li><strong>Redis</strong></li> </ul> </article> <article class="article"> <h3>95. Какой протокол более защищен от перехвата и взлома?</h3> <ul> <li>HTTP</li> <li>CryptoNet</li> <li><strong>HTTPS</strong></li> <li>TLS IP</li> </ul> </article> <article class="article"> <h3>96. Кого можно назвать дирижером процесса разработки системы в команде?</h3> <ul> <li>Business analyst</li> <li>Big Boss</li> <li>Account managar</li> <li>DevOps</li> <li>Developer</li> <li>System architect</li> <li><strong>Project manager</strong></li> <li>QA</li> <li>Team lead</li> </ul> </article> <article class="article"> <h3>97. Отметьте основные слои приложения (checkbox)</h3> <ul> <li><strong>Transform layer</strong></li> <li>Mobile layer</li> <li><strong>Data access layer</strong></li> <li>Security layer</li> <li>Log layer</li> <li><strong>Business layer</strong></li> <li><strong>Presentation layer</strong></li> </ul> </article> <article class="article"> <h3>98. Какие существуют варианты жизненного цикла сервисов в рамках стандартного механизма внедрения зависимостей ASP.NET? (checkbox)</h3> <ul> <li>Singleton</li> <li><strong>Scoped</strong></li> <li><strong>Instance</strong></li> <li><strong>Transient</strong></li> <li>Global</li> <li>LocalService</li> </ul> </article> <article class="article"> <h3>99. Можно ли сделать так, чтобы одно приложение могло работать с различными СУБД средствами EntityFramework без необходимости пересобирать приложение если использовать CodeFirst подход?</h3> <ul> <li>Нет, все СУБД уникальны и для них должны делаться уникальные миграции и использоваться подходящие драйверы доступа к СУБД. Поэтому приложение необходимо собирать для каждой СУБД отдельно.</li> <li>Нет</li> <li><strong>Да</strong></li> </ul> </article> <article class="article"> <h3>100. Где хранятся экземпляры ссылочных типов данных?</h3> <ul> <li>На стеке</li> <li>На южном мосту материнской платы</li> <li><strong>В куче</strong></li> </ul> </article> '],wt=['<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>RSS Test</h1> <strong>36 вопросов. Выполнил на 100 баллов из 100</strong> </article> <article class="article"> <h3>1. Are lectures/webinars/streams recorded?</h3> <ul> <li> <strong>All lectures, webinars, streams, if possible, are recorded and posted on our YouTube channel</strong> </li> <li> No </li> </ul> </article> <article class="article"> <h3>2. At what stage of education do students get a mentor?</h3> <ul> <li> stage#0 </li> <li> stage#1 </li> <li> <strong> stage#2 </strong> </li> <li> stage#3 </li> </ul> </article> <article class="article"> <h3>3. For what reasons may a student (who has completed the task) not receive points based on the cross-check results?</h3> <ul> <li> <strong>Didn\'t submit the work link before the assignment deadline</strong> </li> <li> <strong>Didn’t check all the work of other students submitted for review before the cross-check deadline</strong> </li> <li> If the points are too low </li> </ul> </article> <article class="article"> <h3>4. How does the ‘Leave course’ button work in a student’s profile in the rs app?</h3> <ul> <li>Each time you click on it, your points are doubled.</li> <li>Allows you to reset progress for all tests and tasks</li> <li><strong>Excludes the student from the course, but leaves the opportunity to independently recover</strong></li> </ul> </article> <article class="article"> <h3>5. How many hours per week will it take to successfully complete the course program?</h3> <ul> <li>10-20</li> <li><strong>20-40</strong></li> </ul> </article> <article class="article"> <h3>6. How many times can you retake algorithmic tasks?</h3> <ul> <li> The number of attempts is limited </li> <li> One task can only be completed once </li> <li> <strong>You can retake them as many times as you like, but before the deadline</strong> </li> </ul> </article> <article class="article"> <h3>7. How many times can you take the test?</h3> <ul> <li> <strong>The number of attempts is limited and indicated at the beginning of the test; after they are completed, the amount of points received will be halved</strong> </li> <li> One test can only be taken once </li> <li> There are no restrictions, you can go any number of times </li> </ul> </article> <article class="article"> <h3>8. I can’t find myself in the Total score and see how many points I have. How to do it?</h3> <ul> <li> <strong>Open the Score tab. In the table row after Github, click on the magnifying glass, enter your nickname on GitHub and press \'Enter\'</strong> </li> <li> Open the Score tab. Sort everyone by name and view all pages in a row </li> <li> Open the Score tab. Sort everyone by nickname in Github and view all pages in a row </li> <li> Write to the #question-to-admins channel. They\'ll find it there right away </li> </ul> </article> <article class="article"> <h3>9. I have already completed this course. Can I complete it again?</h3> <ul> <li> <strong>Yes, you can complete the course more than once</strong> </li> <li> No, you can complete the course only once </li> </ul> </article> <article class="article"> <h3>10. In which section of the rs app are there tasks that a student has to check during the cross-check?</h3> <ul> <li> Auto-Test </li> <li> Cross-Check: Submit </li> <li> <strong>Cross-Check: Review</strong> </li> <li> Dashboard </li> </ul> </article> <article class="article"> <h3>11. Is it possible to join a cross-check if a student forgot to submit a link to the task before the deadline?</h3> <ul> <li> Yes </li> <li> <strong>No</strong> </li> </ul> </article> <article class="article"> <h3>12. Is it possible to take solutions to the task (tasks) from the Internet?</h3> <ul> <li> Yes </li> <li> No </li> <li> <strong>It is acceptable to take an idea, but not a solution</strong> </li> </ul> </article> <article class="article"> <h3>13. May I answer students\' questions they ask in course channels?</h3> <ul> <li> <strong> Yes, helping others is great </strong> </li> <li> No, everyone must look for answers to their own questions. </li> </ul> </article> <article class="article"> <h3>14. Provide a link to the school documentation:</h3> <ul> <li> <strong>https://docs.rs.school</strong> </li> <li> https://app.rs.school </li> <li> https://github.com/rolling-scopes </li> </ul> </article> <article class="article"> <h3>15. Provide a link to the school\'s educational platform:</h3> <ul> <li> https://docs.rs.school </li> <li> <strong>https://app.rs.school</strong> </li> <li> https://github.com/rolling-scopes </li> </ul> </article> <article class="article"> <h3>16. The \'pay it forward\' principle means that we share our knowledge with students now for free, hoping that in the future they will:</h3> <ul> <li> Tell as many people as possible about the course </li> <li> <strong>Return to the course as mentors</strong> </li> <li> Get a job at EPAM </li> <li> Become developers and increase the number of IT specialists </li> </ul> </article> <article class="article"> <h3>17. To which section of the rs app you should submit tasks, which will be checked during cross-check?</h3> <ul> <li> Auto-Test </li> <li> <strong> Cross-Check: Submit </strong> </li> <li> Cross-Check: Review </li> <li> Tasks checked during cross-check do not need to be submitted </li> </ul> </article> <article class="article"> <h3>18. To which section of the rs app you should submit tests, algorithmic tasks, codewars tasks and other auto-checked tasks?</h3> <ul> <li> <strong>Auto-Test</strong> </li> <li> Cross-Check: Submit </li> <li> Cross-Check: Review </li> <li> There is no need to submit auto-checked tasks </li> </ul> </article> <article class="article"> <h3>19. What are the main responsibilities of RSS AI?</h3> <ul> <li> <strong>They check for cheating.</strong> </li> <li> <strong>They review cross-check complaints.</strong> </li> <li> <strong>They monitor compliance with the Code of Conduct.</strong> </li> <li> <strong>They issue warnings, expel and ban on the server.</strong> </li> </ul> </article> <article class="article"> <h3>20. What does "cheating" mean?</h3> <ul> <li> <strong> copying of other students\' code </strong> </li> <li> <strong> copying of code from online resources </strong> </li> <li> <strong> missing/deleted sources </strong> </li> <li> <strong> lack of development history </strong> </li> </ul> </article> <article class="article"> <h3>21. What is the minimum passing score to obtain a certificate?</h3> <ul> <li> 2000 points </li> <li> there are no limits </li> <li> <strong> 70% of the TOP1 student’s result on the course </strong> </li> </ul> </article> <article class="article"> <h3>22. What is the purpose of the cross-check?</h3> <ul> <li> <strong> Check other people\'s tasks honestly and objectively </strong> </li> <li> <strong> View the tasks of other students to better understand your level </strong> </li> <li> <strong> Get practical application testing skills </strong> </li> <li> Get the maximum number of points; as a rule, students rate work higher than mentors </li> </ul> </article> <article class="article"> <h3>23. What questions is the #questions-to-admins channel intended for?</h3> <ul> <li> For any questions related to the educational process </li> <li> For questions about tasks and tests </li> <li> <strong> For the most important questions that only administrators can answer </strong> </li> <li> Will there be a recording of the webinar </li> </ul> </article> <article class="article"> <h3>24. What result is taken into account in auto-checked tasks that are executed in the rs app?</h3> <ul> <li> best result </li> <li> <strong>last result</strong> </li> </ul> </article> <article class="article"> <h3>25. What should a nickname look like in a school\'s Discord chat?</h3> <ul> <li> <strong>In format: Discord-nickname (@GitHub-username)</strong> </li> <li> In format: GitHub-username </li> <li> In format: Discord-nickname (card number / cardholder name / expiration date / cvv) </li> <li> In format: Discord-nickname </li> </ul> </article> <article class="article"> <h3>26. What should a student do if they suspect that another student has cheated on a task?</h3> <ul> <li> report to the admin or RSS AI and do not check the task on the cross-check </li> <li> <strong>report to the admin or RSS AI and check the task on the cross-check</strong> </li> <li> do nothing </li> </ul> </article> <article class="article"> <h3>27. When are the Total score (table with the total number of points) and students\' positions in the score updated in the rs app?</h3> <ul> <li> Every day at 23:59 UTC </li> <li> Every day at 12 am Minsk time (GMT+3) </li> <li> <strong>Every day at 4 am Minsk time (GMT+3)</strong> </li> <li> Immediately after submitting the task </li> <li> Immediately after the task deadline </li> <li> Immediately after the cross-check deadline </li> </ul> </article> <article class="article"> <h3>28. When is the best time to submit a link to a task that is cross-checked?</h3> <ul> <li> 5 minutes before the deadline. I\'ll just finish everything </li> <li> Only when a task is fully completed </li> <li> <strong>As soon as such an opportunity appears in the rs app, and then calmly perform the task. Before the deadline, you can submit the task again</strong> </li> <li> On the day of the deadline </li> </ul> </article> <article class="article"> <h3>29. When is the lowest cross-validation score rejected?</h3> <ul> <li> <strong> If your work is checked by 4 students </strong> </li> <li> If your work was checked by less than 4 students </li> <li> If you have checked all the work sent for review </li> <li> If you have not checked all the work sent for review </li> </ul> </article> <article class="article"> <h3>30. Where is the most important and up-to-date course information located, where are all the news, announcements, links to new tests and assignments?</h3> <ul> <li> Regularly arrives at the email address, which has been specified during RS-school registration </li> <li> In the #questions-to-admins channel of the school Discord chat </li> <li> In school documentation </li> <li> <strong>In the #announcements channel of the school Discord chat</strong> </li> </ul> </article> <article class="article"> <h3>31. Where can I ask a question related to a specific task?</h3> <ul> <li>In the #questions-to-admins channel of the school\'s Discord chat </li> <li> <strong>In a separate chat dedicated to the discussion of this task (for example, #cv, #tests, #algorithms)</strong> </li> <li> In the #questions channel of the school\'s Discord chat </li> <li> In the #random Discord chat channel of the school </li> <li> write to the admins directly </li> </ul> </article> <article class="article"> <h3>32. Where can I see the course schedule, find out the assignment dates and deadlines?</h3> <ul> <li> In the Dashboard section </li> <li> In the Score section </li> <li> <strong>In the Schedule section</strong> </li> <li> In the Auto-Test section </li> </ul> </article> <article class="article"> <h3>33. Will the appeal be reviewed, in case student made commits after the deadline?</h3> <ul> <li> Yes </li> <li> <strong>No</strong> </li> </ul> </article> <article class="article"> <h3>34. Who are students with rs-activist status?</h3> <ul> <li>Students who write a lot of chat messages</li> <li>Students who repeat the course</li> <li><strong>Students who try to help other students answer their questions</strong></li> <li><strong>Students who try to help the course, compile study materials, translate documentation, organize videos</strong></li> </ul> </article> <article class="article"> <h3>35. Why might a student receive a warning (or expulsion) on a cross-check?</h3> <ul> <li> <strong>Deducting of points without explanatory comment</strong> </li> <li> <strong>Deducting of points with a comment that does not describe the specific reduction</strong> </li> <li> <strong>Deducting of points with comments for reasons that are not assessed in the assignment</strong> </li> <li> Deducting of points with a justified reason described in the assessment </li> <li> <strong>Inflated scores</strong> </li> </ul> </article> <article class="article"> <h3>36. Why might students be expelled from the course?</h3> <ul> <li> <strong>For cheating</strong> </li> <li> <strong>For violation of code-of-conduct</strong> </li> <li> For not completing one task or test </li> <li> <strong>Publication of materials (article, video, stream, etc.) showing the process of solving a task before its deadline</strong> </li> <li> <strong>Inactivity on the course</strong> </li> </ul> </article> ','<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>Git test</h1> <strong>33 вопроса. Выполнил 94 балл из 100. Это правлиьных 31 ответов</strong> </article> <article class="article"> <h3>1. How are the user name and email set for commit identification?</h3> <h3>Как задаются имя пользователя и адрес электронной почты для идентификации фиксации</h3> <ul> <li>With the git set user.name (user.email) command</li> <li><strong>With the git config user.name (user.email) command</strong></li> <li>The user name and email are taken from the GitHub account associated with the current SSH key</li> <li>The user name and email are contained in the current SSH key and are used for each subsequent commit</li> </ul> </article> <article class="article"> <h3>2. How to fix the error "fatal: The current branch my-branch has no upstream branch", which occurs when using git push and set up a local branch to track a remote branch so that the error does not occur in the future when using git push?</h3> <h3>Как исправить ошибку «фатальная: текущая ветка my-branch не имеет восходящей ветки», которая возникает при использовании git push и настроить локальную ветку для отслеживания удаленной ветки, чтобы ошибка не возникала в будущем при использовании git push</h3> <ul> <li>git push -n origin my-branch</li> <li><strong>git push -u origin my-branch</strong></li> <li>git push -f origin my-branch</li> <li>git push origin my-branch</li> </ul> </article> <article class="article"> <h3>3. What command creates a new commit that applies changes that are opposite to the commit specified as the argument?</h3> <h3>Какая команда создает новую commit, которая применяет изменения, противоположные фиксации, указанной в качестве аргумента</h3> <ul> <li>git reset --mixed</li> <li>git reset --soft</li> <li><strong>git revert</strong></li> <li>git commit --amend</li> </ul> </article> <article class="article"> <h3>4. What command creates a new branch with the name “feature/new-feature” and automatically switches to it?</h3> <h3>Какая команда создает новую ветку с названием «feature/new-feature» и автоматически переключается на нее</h3> <ul> <li>git branch feature/new-feature</li> <li>git branch -b feature/new-feature</li> <li><strong>git checkout -b feature/new-feature</strong></li> <li>git checkout feature/new-feature</li> </ul> </article> <article class="article"> <h3>5. What command displays the commit history of the current branch?</h3> <h3>Какая команда отображает историю коммитов текущей ветки</h3> <ul> <li><strong>git log</strong></li> <li>git show</li> <li>git status</li> <li>git diff</li> </ul> </article> <article class="article"> <h3>6. What command displays the URLs of the remote repositories, indicating the protocol used?</h3> <h3>Какая команда отображает URL-адреса удаленных репозиториев с указанием используемого протокола</h3> <ul> <li><strong>git remote -v</strong></li> <li>git remote -s</li> <li>git remote -p</li> <li>git remote -l</li> </ul> </article> <article class="article"> <h3>7. What command is used to create a copy of a remote repository?</h3> <h3>Какая команда используется для создания копии удаленного репозитория</h3> <ul> <li>git fetch</li> <li>git pull</li> <li><strong>git clone</strong></li> <li>git add</li> </ul> </article> <article class="article"> <h3>8. What command is used to create a new local repository?</h3> <h3>Какая команда используется для создания нового локального репозитория</h3> <ul> <li>git fetch</li> <li>git pull</li> <li>git clone</li> <li><strong>git init</strong></li> </ul> </article> <article class="article"> <h3>9. What command is used to send the state of the current local branch to the remote repository?</h3> <h3>Какая команда используется для отправки состояния текущей локальной ветки в удаленный репозиторий</h3> <ul> <li>git upload</li> <li>git pull</li> <li><strong>git push</strong></li> <li>git update</li> </ul> </article> <article class="article"> <h3>10. What command is used to switch between branches or move the pointer to another existing commit?</h3> <h3>Какая команда используется для переключения между ветками или перемещения указателя на другой существующий коммит</h3> <ul> <li>git branch</li> <li>git select</li> <li>git checkout -b</li> <li><strong>git checkout</strong></li> </ul> </article> <article class="article"> <h3>11. What command outputs the changes made by a specific commit?</h3> <h3>Какая команда выводит изменения, внесенные конкретным коммитом</h3> <ul> <li>git changes</li> <li><strong>git show</strong></li> <li>git status</li> <li>git diff</li> </ul> </article> <article class="article"> <h3>12. What commands can be used to make changes to the latest commit?</h3> <h3>Какие команды можно использовать для внесения изменений в последний коммит</h3> <ul> <li><strong>git commit --amend --no-edit</strong></li> <li><strong>git commit --amend</strong></li> <li>git commit -am</li> <li>git commit -m</li> </ul> </article> <article class="article"> <h3>13. What commands can move the current pointer to the specified commit without changing the files in the working directory?</h3> <h3>Какие команды могут переместить текущий указатель на указанный коммит без изменения файлов в рабочем каталоге</h3> <ul> <li>git checkout</li> <li>git reset --hard</li> <li><strong>git reset --soft</strong></li> <li><strong>git reset</strong></li> </ul> </article> <article class="article"> <h3 style="color:brown">14. What does git rebase -i allow?</h3> <h3>Что позволяет git rebase -i</h3> -------------- <ul> <li>Allows you to rewrite the history of the branch specified in the argument, starting from the commit where the current branch\'s branching occurred, as the -i key means inversed</li> <li><strong>Allows selective merging of the history of the current and specified branches</strong></li> <li><strong>Allows during a normal rebase to choose the commits that will remain in the branch after the command is executed</strong></li> <li><strong>Allows during a normal rebase to edit changes in one or more commits</strong></li> </ul> </article> <article class="article"> <h3>15. What does the git add command do?</h3> <h3>Что делает команда git add</h3> <ul> <li>Loads a local file into the remote repository so that other project participants can see it</li> <li>Creates a file with the specified name and immediately starts tracking it</li> <li>Saves the current prepared changes to the local repository</li> <li><strong>Allows Git to start tracking files and also adds current changes to the staging area</strong></li> </ul> </article> <article class="article"> <h3>16. What does the git branch command do?</h3> <h3>Что делает команда git Branch</h3> <ul> <li>Outputs the changes between the local and remote version of the current branch</li> <li>Switches to the branch whose name is specified as an argument</li> <li><strong>Outputs a list of branches in the current local repository</strong></li> <li><strong>Creates a new branch with the name specified as an argument</strong></li> </ul> </article> <article class="article"> <h3>17. What does the git cherry-pick command do?</h3> <h3>Что делает команда git Cherry-Pick</h3> <ul> <li><strong>The git cherry-pick command is used to copy a specific commit from one branch to another, applying the changes introduced in that commit</strong></li> <li>The git cherry-pick command is a secret code for initiating the self-destruct sequence</li> <li>The git cherry-pick command combines the changes from several commits into one before applying it to the current branch</li> <li>The git cherry-pick command deletes a specific commit from the history</li> </ul> </article> <article class="article"> <h3>18. What does the git commit command do by default?</h3> <h3>Что делает команда git commit по умолчанию</h3> <ul> <li>Saves all changes in the working directory to the local repository</li> <li><strong>Saves changes made to the staging area to the local repository</strong></li> <li>Sends the current local changes to the remote repository</li> <li>Creates a comment for the current changes</li> </ul> </article> <article class="article"> <h3>19. What does the git commit command with the -am flag do?</h3> <h3>Что делает команда git commit с флагом -am</h3> <ul> <li>Saves all changes in the working directory, including all untracked files, to the local repository</li> <li><strong>Saves all changes, both staged and unstaged, for all tracked files and also updates the commit message</strong></li> <li>Uploads the current local changes to the remote repository</li> <li>Creates a new branch and moves the current changes to that branch</li> </ul> </article> <article class="article"> <h3>20. What does the git rm command do?</h3> <h3>Что делает команда git rm</h3> <ul> <li>Deletes a branch</li> <li>Deletes a commit</li> <li>Removes changes from a given commit</li> <li><strong>Removes files with changes from the working directory and the index</strong></li> </ul> </article> <article class="article"> <h3>21. What happens when you run the git fetch command?</h3> <h3>Что происходит, когда вы запускаете команду git fetch</h3> <ul> <li>Data from the local repository will be uploaded to the remote repository</li> <li>A copy of the remote repository will be created</li> <li>Data from the remote repository will be copied to the local repository, updating the data of the current local branch</li> <li><strong>Data from the remote repository will be copied to the local repository without changing the current state of the local branch</strong></li> </ul> </article> <article class="article"> <h3>22. What is a Pull Request on GitHub?</h3> <ul> <li>A notification to project participants to download the updated branch version from the remote repository using the git pull command.</li> <li><strong>A request to merge your changes from your branch or repository into another branch or repository. Your changes will be reviewed and discussed before merging.</strong></li> <li>A request to project participants to have someone complete the functionality development / fix a bug in your branch.</li> <li>A section that allows to merge branches on GitHub without using the local repository and terminal.</li> </ul> </article> <article class="article"> <h3>23. What is Git?</h3> <h3>Что такое Git</h3> <ul> <li>Cloud data storage</li> <li>Console utility for working with files</li> <li>Console utility for creating a backup of files</li> <li><strong>Version control system</strong></li> </ul> </article> <article class="article"> <h3>24. What is GitHub?</h3> <h3>Что такое GitHub</h3> <ul> <li>Cloud data storage</li> <li>Program for working with Git</li> <li><strong>Web service for hosting projects and their collaborative development, based on Git</strong></li> <li>Storage of file backups</li> </ul> </article> <article class="article"> <h3>25. What is the difference between the master branch and origin/master?</h3> <h3>В чем разница между master веткой и origin/master</h3> <ul> <li><strong>Master belongs to the local repository, while origin/master belongs to the remote repository</strong></li> <li>These are two different branches of the same repository</li> <li>Master and origin/master are two names for the same branch</li> <li>The origin/master branch does not exist because the name contains an incorrect symbol</li> </ul> </article> <article class="article"> <h3>26. What is the name of the pointer to the current state in the branch?</h3> <h3>Как называется указатель на текущее состояние в ветке</h3> <ul> <li>CURRENT</li> <li>TOP</li> <li><strong>HEAD</strong></li> <li>SELECTED</li> </ul> </article> <article class="article"> <h3>27. What is the purpose of the .gitignore file?</h3> <h3>Какова цель файла .gitignore</h3> <ul> <li><strong>To exclude files and directories when working with Git</strong></li> <li>To make Git work correctly</li> <li>Because there is nothing useful in there</li> <li>To exclude branches and commits when working with Git</li> </ul> </article> <article class="article"> <h3>28. What will happen during a git rebase without conflicts?</h3> <h3>Что произойдет во время git rebase без конфликтов</h3> <ul> <li>The merging of commit history from the specified branch into the current branch based on the commit date</li> <li>The overlay of commit history from the specified branch onto the end of the current branch history</li> <li><strong>The overlay of commit history from the current branch onto the end of the specified branch history</strong></li> <li>The rewriting of the current branch history by recreating commits, which will begin from the end of the specified branch</li> </ul> </article> <article class="article"> <h3>29. What will happen when the git pull command is executed?</h3> <h3>Что произойдет, когда будет выполнена команда git pull</h3> <ul> <li>Data from the local repository will be uploaded to the remote repository</li> <li>A copy of the remote repository will be created</li> <li><strong>Data from the remote repository will be copied to the local repository, updating the data of the current local branch</strong></li> <li>Data from the remote repository will be copied to the local repository without changing the current state of the local branch</li> </ul> </article> <article class="article"> <h3 style="color:brown">30. What will happen when you run git merge without conflicts?</h3> <h3>Что произойдет, если вы запустите git merge без конфликтов</h3> -------------- <ul> <li>Был первый ответ A new commit will be created in the current branch with all the changes from the specified branch</li> <li><strong>The history of commits from the specified branch will be merged into the current branch by date with the addition of a merge commit</strong></li> <li>The changes from the specified branch will be applied to the current branch without creating a new commit</li> <li>A new branch with all the changes from the specified branch will be created</li> </ul> </article> <article class="article"> <h3>31. What\'s the difference between Git\'s local and global configurations?</h3> <h3>В чем разница между локальной и глобальной конфигурациями Git</h3> <ul> <li>Local is applied for the current OS user, global is for all users</li> <li><strong>Local is applied for the current local repository, global is for all repositories if there is no local config</strong></li> <li>Local is applied for the current branch, global is for all branches</li> <li>Local is applied for the current OS locale</li> </ul> </article> <article class="article"> <h3>32. Which command displays the status of files in the working directory and the staging area?</h3> <h3>Какая команда отображает состояние файлов в рабочем каталоге и промежуточной области</h3> <ul> <li>git log</li> <li>git show</li> <li><strong>git status</strong></li> <li>git diff</li> </ul> </article> <article class="article"> <h3 style="color:brown">33. Which command displays uncommitted changes compared to the last commit in the current branch?</h3> <h3>Какая команда отображает незафиксированные изменения по сравнению с последней фиксацией в текущей ветке</h3> -------------- <ul> <li>git changes</li> <li>git show</li> <li>первый ответ git status</li> <li><strong>git diff</strong></li> </ul> </article> ','<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>Fundamentals of the internet</h1> <strong>27 вопросов. Выполнил на 100 баллов из 100</strong> </article> <article class="article"> <h3>1. Can authorized members access intranets and extranets from different physical locations?</h3> <h3>Могут ли авторизованные участники получать доступ к интранетам и экстрасетям из разных физических мест</h3> <ul> <li>No, they have to be at the company\'s secret lair</li> <li>Yes, but only during business hours</li> <li><strong>Yes, they can be accessed from different locations</strong></li> <li>Only if they have the secret password</li> </ul> </article> <article class="article"> <h3>2. Despite the evolution of its technologies, what remained consistent about the Internet\'s working?</h3> <h3>Несмотря на эволюцию технологий, то, что оставалось неизменным в работе Интернета</h3> <ul> <li><strong>Its ability to connect computers and ensure continued connectivity</strong></li> <li>Its reliance on a single central server</li> <li>Its controlled access to selected organizations</li> <li>Its primary role as a data storage mechanism</li> </ul> </article> <article class="article"> <h3>3. How can two computers be connected?</h3> <h3>Как можно соединить два компьютера</h3> <ul> <li>Using a carrier pigeon</li> <li>Only with a USB cable</li> <li><strong>Either physically or wirelessly</strong></li> <li>Via satellite link only</li> </ul> </article> <article class="article"> <h3>4. How did the support for the evolution of the Internet into a public infrastructure come about in the 1980s?</h3> <h3>Как возникла поддержка превращения Интернета в общественную инфраструктуру в 1980-е годы</h3> <ul> <li>Solely through private companies</li> <li><strong>Through a mix of public universities and private companies</strong></li> <li>Only through governmental support</li> <li>Through international collaborations</li> </ul> </article> <article class="article"> <h3>5. How does an Extranet differ from an Intranet?</h3> <h3>Чем Экстранет отличается от Интранета</h3> <ul> <li>Extranet is an Intranet with extra cheese</li> <li><strong>Extranet opens part of a private network to allow collaboration with external organizations</strong></li> <li>Extranet doesn\'t use Internet protocols</li> <li>Extranet is a newer version of the Internet</li> </ul> </article> <article class="article"> <h3>6. How is the Web related to the Internet?</h3> <h3>Как Сеть связана с Интернетом</h3> <ul> <li>The Web is a larger version of the Internet</li> <li>The Web and the Internet are competitors</li> <li><strong>The Web is a service built on top of the Internet infrastructure</strong></li> <li>The Internet is an app on the Web</li> </ul> </article> <article class="article"> <h3>7. How many cables are required to connect ten computers directly?</h3> <h3>Сколько кабелей потребуется для соединения десяти компьютеров напрямую</h3> <ul> <li>10 cables</li> <li>20 cables</li> <li><strong>45 cables</strong></li> <li>9 cables</li> </ul> </article> <article class="article"> <h3>8. If you have ten computers and a router, how many cables are needed to connect them?</h3> <h3>Если у вас десять компьютеров и роутер, сколько кабелей нужно для их соединения</h3> <ul> <li>9 cables</li> <li>20 cables</li> <li><strong>10 cables</strong></li> <li>45 cables</li> </ul> </article> <article class="article"> <h3>9. In which decade did the Internet evolve into a public infrastructure?</h3> <h3>За какое десятилетие Интернет превратился в общественную инфраструктуру</h3> <ul> <li>1950s</li> <li>1960s</li> <li>1970s</li> <li><strong>1980s</strong></li> </ul> </article> <article class="article"> <h3>10. What allows us to scale a network infinitely?</h3> <h3>Что позволяет нам бесконечно масштабировать сеть</h3> <ul> <li>Connect computers to smartphones</li> <li><strong>Connecting computers to routers, then routers to routers</strong></li> <li>Using a single router for all computers</li> <li>Connect each computer to a satellite</li> </ul> </article> <article class="article"> <h3>11. What does an Internet Service Provider (ISP) manage?</h3> <h3>Чем управляет интернет-провайдер (ISP)</h3> <ul> <li><strong>Special routers linked together</strong></li> <li>The World Wide Web</li> <li>Cables in your house</li> <li>Internet speed boosting potions</li> </ul> </article> <article class="article"> <h3>12. What does an IP address identify?</h3> <h3>Что определяет IP-адрес</h3> <ul> <li>The brand of the computer</li> <li>The age of the computer</li> <li><strong>A computer linked to a network</strong></li> <li>The color of the computer</li> </ul> </article> <article class="article"> <h3>13. What does \'IP\' in \'IP address\' stand for?</h3> <h3>Что означает «IP» в «IP-адресе»</h3> <ul> <li>Intelligent Protocol</li> <li>Incredible Pizza</li> <li>Instant Pudding</li> <li><strong>Internet Protocol</strong></li> </ul> </article> <article class="article"> <h3>14. What does the whole infrastructure of interconnected networks represent?</h3> <h3>Что представляет собой вся инфраструктура взаимосвязанных сетей</h3> <ul> <li>A large city</li> <li><strong>The Internet</strong></li> <li>A single router</li> <li>The world\'s largest spaghetti plate</li> </ul> </article> <article class="article"> <h3>15. What equipment is needed to connect our network to the telephone infrastructure?</h3> <h3>Какое оборудование необходимо для подключения нашей сети к телефонной инфраструктуре</h3> <ul> <li>A blender</li> <li><strong>A modem</strong></li> <li>A toaster</li> <li>A router</li> </ul> </article> <article class="article"> <h3>16. What is the relationship between the Internet and the Web?</h3> <h3>Какова связь между Интернетом и Всемирной паутиной</h3> <ul> <li>The Web is an alternative to the Internet</li> <li>The Web is the technical infrastructure, while the Internet is a service based on the Web</li> <li><strong>The Internet acts as the technical backbone for the Web</strong></li> <li>The Internet and the Web are competing technologies</li> </ul> </article> <article class="article"> <h3>17. What is the role of a router in a network?</h3> <h3>Какова роль маршрутизатора в сети</h3> <ul> <li>Boosting internet speed</li> <li>Storing data from computers</li> <li><strong>Ensuring a message reaches the correct destination computer</strong></li> <li>Generating Wi-Fi signals only</li> </ul> </article> <article class="article"> <h3>18. What infrastructure connects your house with anyone in the world?</h3> <h3>Какая инфраструктура связывает ваш дом с любой точкой мира</h3> <ul> <li>The postal service</li> <li>Telegraph lines</li> <li><strong>Telephone infrastructure</strong></li> <li>Magic</li> </ul> </article> <article class="article"> <h3>19. What is the fundamental role of the Internet?</h3> <h3>Какова фундаментальная роль Интернета</h3> <ul> <li>A large storage system for data</li> <li>A service provided by specific companies to access websites</li> <li><strong>A large network of computers that communicate with each other</strong></li> <li>A physical infrastructure spanning across continents</li> </ul> </article> <article class="article"> <h3>20. What is the primary objective of the Internet?</h3> <h3>Какова основная цель Интернета</h3> <ul> <li>To store vast amounts of information</li> <li><strong>To connect computers and ensure they remain connected regardless of circumstances</strong></li> <li>To provide entertainment to users</li> <li>To secure data from external threats</li> </ul> </article> <article class="article"> <h3>21. What is the primary purpose of an Intranet?</h3> <h3>Какова основная цель интранета</h3> <ul> <li>A public website for promoting products</li> <li><strong>A private network restricted to members of an organization</strong></li> <li>A platform to decide where to have lunch</li> <li>A public network open to all users globally</li> </ul> </article> <article class="article"> <h3>22. When did the inception of the Internet occur?</h3> <h3>Когда произошло появление Интернета</h3> <ul> <li>1950s</li> <li><strong>1960s</strong></li> <li>1970s</li> <li>1980s</li> </ul> </article> <article class="article"> <h3>23. Which entity initially funded the research for the Internet?</h3> <h3>Какая организация первоначально финансировала исследование для Интернета</h3> <ul> <li>European Space Agency</li> <li><strong>US Army</strong></li> <li>British Intelligence</li> <li>United Nations</li> </ul> </article> <article class="article"> <h3>24. Which of the following is NOT a service built on top of the Internet?</h3> <h3>Что из перечисленного НЕ является услугой, созданной на основе Интернета</h3> <ul> <li>Online gaming</li> <li>IRC</li> <li>Email</li> <li><strong>Television</strong></li> </ul> </article> <article class="article"> <h3>25. Which of the following might you find on an organization\'s intranet?</h3> <h3>Что из следующего можно найти во внутренней сети организации</h3> <ul> <li>An archive of all office memes</li> <li>Discussion boards for global users</li> <li><strong>Web pages for sharing departmental information</strong></li> <li>Public user signup forms</li> </ul> </article> <article class="article"> <h3>26. Why do we use domain names?</h3> <h3>Почему мы используем доменные имена</h3> <ul> <li>Because they look fancy</li> <li><strong>To make it easier to remember than IP addresses</strong></li> <li>To increase the Internet speed</li> <li>To hide the actual IP address</li> </ul> </article> <article class="article"> <h3>27. Why might a business use an Extranet?</h3> <h3>Зачем бизнесу использовать Экстранет</h3> <ul> <li>To host virtual dance parties</li> <li><strong>To share information securely with external stakeholders</strong></li> <li>To provide global news updates</li> <li>To sell products to the general public</li> </ul> </article> ','<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>Test JS Basics</h1> <strong>40 вопросов. Выполнил на 100 баллов из 100</strong> </article> <article class="article"> <h3>1. Choose an expression that will return 14 as the result:</h3> <ul> <li><strong>7 * 3 + (4 / 2) - (8 + (2 - 1))</strong></li> <li>7 * 3 + (4 / 2) - 8 + 2 - 1</li> <li>7 * (3 + 4) / 2 - (8 + 2 - 1)</li> <li>7 * 3 + (4 / 2) - ((8 + 1) - 2)</li> </ul> </article> <article class="article"> <h3>2. Choose the correct statements:</h3> <ul> <li>In the expression 34 + 42 the operators are 34 and 42</li> <li><strong>In the expression 34 + 42 the operands are 34 and 42</strong></li> <li><strong>In the expression 34 + 42 the operator is +</strong></li> <li>In the expression 34 + 42 the operand is +</li> </ul> </article> <article class="article"> <h3>3. Determine the data type of the variable rs, if rs is defined like this: let rs = \'true\';</h3> <ul> <li><strong>string</strong></li> <li>number</li> <li>boolean</li> <li>object</li> </ul> </article> <article class="article"> <h3>4. How does JavaScript let you know the data type of variable a?</h3> <ul> <li>type a</li> <li>a.type</li> <li>type(a)</li> <li><strong>typeof a</strong></li> </ul> </article> <article class="article"> <h3>5. How to call the myFun function in JavaScript?</h3> <ul> <li>function myFun()</li> <li><strong>myFun()</strong></li> <li>myFun</li> <li>function()</li> </ul> </article> <article class="article"> <h3>6. How to create a string with a valid greeting based on the name contained in the name variable?</h3> <ul> <li>const greeting = \'Hello ${name}\'</li> <li>const greeting = \'Hello \', name</li> <li>const greeting = \'Hello name\'</li> <li>const greeting = \'Hello \' + name</li> <li>const greeting = `Hello ${name}`</li> </ul> </article> <article class="article"> <h3>7. How to display the \'Hello world!\' to the console?</h3> <ul> <li>alert(\'Hello world!\');</li> <li>prompt(\'Hello world!\');</li> <li>print(\'Hello world!\');</li> <li><strong>console.log(\'Hello world!\');</strong></li> </ul> </article> <article class="article"> <h3>8. How to get the last character in the string contained in the message variable?</h3> <ul> <li>message.getLastSymbol()</li> <li>message[message.lastIndex]</li> <li>message[message.length]</li> <li><strong>message[message.length - 1]</strong></li> </ul> </article> <article class="article"> <h3>9. If a = true, b = true, then these expressions will return true:</h3> <ul> <li><strong>a && b</strong></li> <li>!a && b</li> <li>a && !b</li> <li>!a && !b</li> <li>!(a && b)</li> <li><strong>!(!a && !b)</strong></li> </ul> </article> <article class="article"> <h3>10. One of the most common errors with the text \'undefined is not a function\' (type mismatch) has a name like this:</h3> <ul> <li>Uncaught ReferenceError</li> <li><strong>Uncaught TypeError</strong></li> <li>Uncaught SyntaxError</li> <li>Uncaught URIError</li> </ul> </article> <article class="article"> <h3>11. Select correctly written conditional constructions:</h3> <ul> <li>if {}</li> <li><strong>if (condition) {}</strong></li> <li><strong>if (condition) {} else {}</strong></li> <li>if (condition) {} else (condition) {}</li> <li><strong>if (condition) {} else if (condition) {}</strong></li> </ul> </article> <article class="article"> <h3>12. Select options with unary operators:</h3> <ul> <li><strong>-4</strong></li> <li>23 + 79</li> <li><strong>+79</strong></li> <li><strong>+\'4\' + +\'5\'</strong></li> </ul> </article> <article class="article"> <h3>13. The exponentiation operator in JavaScript is:</h3> <ul> <li>++</li> <li>/</li> <li><strong>**</strong></li> <li>%</li> </ul> </article> <article class="article"> <h3>14. The remainder operator in JavaScript is:</h3> <ul> <li>--</li> <li>/</li> <li>**</li> <li><strong>%</strong></li> </ul> </article> <article class="article"> <h3>15. What are the ways to leave comments in JavaScript?</h3> <ul> <li>&lt;!-- comment--&gt;</li> <li># comment</li> <li><strong>// comment</strong></li> <li><strong>/* comment */</strong></li> </ul> </article> <article class="article"> <h3>16. What character has the number 59 in the ASCII list? (Can be checked using the fromCharCode string method)</h3> <ul> <li>?</li> <li>!</li> <li>%</li> <li><strong>;</strong></li> <li>.</li> </ul> </article> <article class="article"> <h3>17. What character in JavaScript separates instructions following one another?</h3> <ul> <li><strong>;</strong></li> <li>,</li> <li>.</li> <li>:</li> </ul> </article> <article class="article"> <h3>18. What command can be used to interrupt the checking of other cases for a switch statement?</h3> <ul> <li>continue;</li> <li>pause;</li> <li>stop;</li> <li><strong>break;</strong></li> </ul> </article> <article class="article"> <h3>19. What data type is Infinity?</h3> <ul> <li>undefined</li> <li>boolean</li> <li>string</li> <li><strong>number</strong></li> <li>infinity</li> </ul> </article> <article class="article"> <h3>20. What does the \\n character stand for?</h3> <ul> <li>multiplication</li> <li>division</li> <li><strong>matches newline characters</strong></li> <li>single quote special character</li> <li>double quote special character</li> </ul> </article> <article class="article"> <h3>21. What is the determinism of a function?</h3> <ul> <li>A property of a function that allows you to pass an unlimited number of arguments</li> <li>A property of a function in which it returns the same result for any arguments</li> <li><strong>A property of a function whereby it returns the same result for the same arguments</strong></li> <li>A property of a function in which its signature determines a specific number of arguments that can be passed when called</li> </ul> </article> <article class="article"> <h3>22. What is the difference between const and let?</h3> <ul> <li>const is not a part of JavaScript</li> <li>Variables declared as const are in the global scope</li> <li><strong>the const declaration specifies a constant, that is, a value that cannot be changed</strong></li> </ul> </article> <article class="article"> <h3>23. What is the result of calling the function Math.pow(2,4)?</h3> <ul> <li>2</li> <li>4</li> <li>8</li> <li><strong>16</strong></li> <li>32</li> </ul> </article> <article class="article"> <h3>24. What is the result of running code 13%5?</h3> <ul> <li>~0.38</li> <li>2.6</li> <li>2</li> <li><strong>3</strong></li> </ul> </article> <article class="article"> <h3>25. What value does a function return without a return statement in its body?</h3> <ul> <li>null</li> <li><strong>undefined</strong></li> <li>NaN</li> <li>will be error</li> </ul> </article> <article class="article"> <h3>26. What value of the length property will the string have after executing the code let name = \'Vasia\'; name.length = 50;</h3> <ul> <li>50</li> <li><strong>5</strong></li> <li>undefined</li> <li>An error will occur when trying to execute the code</li> </ul> </article> <article class="article"> <h3>27. What values cannot be obtained as a result when checking the data type using typeof?</h3> <ul> <li><strong>null</strong></li> <li>number</li> <li>string</li> <li><strong>NaN</strong></li> <li>bigint</li> <li><strong>Infinity</strong></li> </ul> </article> <article class="article"> <h3>28. What values will be output to the console in the for loop (let i = 0; i &lt;= 4; i++) {console.log(++i);}? </h3> <ul> <li>0, 1, 2, 3, 4</li> <li>0, 1, 2, 3, 4, 5</li> <li>0, 2, 4</li> <li><strong>1, 3, 5</strong></li> </ul> </article> <article class="article"> <h3>29. What will be the result of calculating the composition of operations (8 / 2 + 5 - -3 / 2)?</h3> <ul> <li>5</li> <li>7.5</li> <li><strong>10.5</strong></li> <li>13</li> </ul> </article> <article class="article"> <h3>30. What will be the result of performing the operation 1 / 0?</h3> <ul> <li>NaN</li> <li><strong>Infinity</strong></li> <li>undefined</li> <li>returns error</li> </ul> </article> <article class="article"> <h3>31. What will be the result of the code execution console.log(\'Hey there!\' ?</h3> <ul> <li>Hey there!</li> <li><strong>SyntaxError: missing ) after argument list</strong></li> <li>SyntaxError: missing ; after statement</li> <li>Nothing will print</li> </ul> </article> <article class="article"> <h3>32. What will be the result of the code execution const name = \'Vasia\'; Math.abs(name.length - 15);?</h3> <ul> <li>NaN</li> <li>-15</li> <li>-10</li> <li><strong>10</strong></li> <li>15</li> </ul> </article> <article class="article"> <h3>33. What will be the result of the code execution let a += 10;</h3> <ul> <li><strong>Error Uncaught SyntaxError: Unexpected token \'+=\'</strong></li> <li>a will be assigned the value 0</li> <li>a will be assigned the value 10</li> <li>a will be assigned the value 20</li> </ul> </article> <article class="article"> <h3>34. What will be the result of the code execution let a; console.log(a)?</h3> <ul> <li><strong>undefined</strong></li> <li>null</li> <li>NaN</li> <li>Uncaught ReferenceError: a is not defined</li> </ul> </article> <article class="article"> <h3>35. What will be the result of the code execution let name = \'Vasia\'; name[3] = \'y\'; console.log(name);?</h3> <ul> <li>Vasa</li> <li>Vayia</li> <li>Vasya</li> <li>Vasia</li> </ul> </article> <article class="article"> <h3>36. What will be the result of the code execution \'Vasia\'.toUpperCase().length.toString()?</h3> <ul> <li><strong>string 5</strong></li> <li>number 5</li> <li>There will be an error because length is missing a call</li> <li>There will be an error because the toUpperCase method does not have a length property</li> </ul> </article> <article class="article"> <h3>37. Which of the following data types are primitives?</h3> <ul> <li>function</li> <li><strong>string</strong></li> <li><strong>number</strong></li> <li><strong>boolean</strong></li> <li>object</li> <li><strong>bigint</strong></li> </ul> </article> <article class="article"> <h3>38. Which of the following string methods returns a new string with all alphabetic characters converted to uppercase?</h3> <ul> <li><strong>toUpperCase()</strong></li> <li>toLowerCase()</li> <li>toString()</li> <li>caps()</li> </ul> </article> <article class="article"> <h3>39. Which of the following values are strings?</h3> <ul> <li><strong>\'Hey\'</strong></li> <li><strong>\'\'</strong></li> <li><strong>\'undefined\'</strong></li> <li><strong>"Hello"</strong></li> <li><strong>\' \'</strong></li> <li><strong>" "</strong></li> <li><strong>"null"</strong></li> </ul> </article> <article class="article"> <h3>40. Which of the following ways can you define a function to add two numbers in JavaScript?</h3> <ul> <li>const sum = {a, b} => ( return a + b )</li> <li><strong>const sum = (a, b) => { return a + b }</strong></li> <li>const sum = {a, b} => a + b</li> <li><strong>const sum = (a, b) => a + b</strong></li> <li>const sum = a, b => a + b</li> </ul> </article> ',"<article class=\"article\"> <div id=\"link-to-quiz\" class=\"btn-back\">назад</div> <h1>Test JS Types</h1> <strong>31 вопрос. Выполнил на 100 баллов из 100</strong> </article> <article class=\"article\"> <h3>1. Choose all falsy values:</h3> <ul> <li><strong>''</strong></li> <li><strong>0</strong></li> <li>{}</li> <li><strong>undefined</strong></li> <li><strong>null</strong></li> <li><strong>false</strong></li> <li><strong>NaN</strong></li> <li>[]</li> </ul> </article> <article class=\"article\"> <h3>2. let v = (!!'0'); console.log(v); What will be output to the console?</h3> <ul> <li>null</li> <li>undefined</li> <li><strong>true</strong></li> <li>false</li> </ul> </article> <article class=\"article\"> <h3>3. What is the result of: {}=={}?</h3> <ul> <li>null</li> <li>undefined</li> <li>true</li> <li><strong>false</strong></li> </ul> </article> <article class=\"article\"> <h3>4. What is the result of: 0 && '' || []?</h3> <ul> <li>0</li> <li>''</li> <li><strong>[]</strong></li> <li>false</li> <li>true</li> <li>'0'</li> </ul> </article> <article class=\"article\"> <h3>5. What is the result of: 0 && '' && []?</h3> <ul> <li>undefined</li> <li>[]</li> <li>''</li> <li><strong>0</strong></li> <li>false</li> <li>true</li> <li>'0'</li> </ul> </article> <article class=\"article\"> <h3>6. What is the result of: 0 || 1 && 2 || 3?</h3> <ul> <li>0</li> <li>1</li> <li><strong>2</strong></li> <li>3</li> <li>true</li> <li>false</li> </ul> </article> <article class=\"article\"> <h3>7. What is the result of: 12 && '12'?</h3> <ul> <li>12</li> <li>'1212'</li> <li>true</li> <li><strong>'12'</strong></li> <li>false</li> </ul> </article> <article class=\"article\"> <h3>8. What is the result of: '123' == 123?</h3> <ul> <li>null</li> <li>undefined</li> <li><strong>true</strong></li> <li>false</li> </ul> </article> <article class=\"article\"> <h3>9. What is the result of: 1.15 + 2.30?</h3> <ul> <li>345</li> <li>3.45</li> <li>3,45</li> <li>115230</li> <li>'115230'</li> <li>'345'</li> <li><strong>none of them</strong></li> </ul> </article> <article class=\"article\"> <h3>10. What is the result of: 2 + '2'?</h3> <ul> <li>4</li> <li>'4'</li> <li><strong>'22'</strong></li> <li>22</li> <li>NaN</li> </ul> </article> <article class=\"article\"> <h3>11. What is the result of: 22 - '1'?</h3> <ul> <li>221</li> <li><strong>21</strong></li> <li>'221'</li> <li>'21'</li> <li>NaN</li> </ul> </article> <article class=\"article\"> <h3>12. What is the result of: '6' * '3'?</h3> <ul> <li>NaN</li> <li>true</li> <li><strong>18</strong></li> <li>'18'</li> <li>63</li> <li>'63'</li> </ul> </article> <article class=\"article\"> <h3>13. What is the result of: '80' + 71.2?</h3> <ul> <li>151.2</li> <li>151</li> <li><strong>'8071.2'</strong></li> <li>8071.2</li> <li>null</li> <li>undefined</li> </ul> </article> <article class=\"article\"> <h3>14. What is the result of: Boolean('0')?</h3> <ul> <li>NaN</li> <li><strong>true</strong></li> <li>false</li> <li>undefined</li> <li>'object'</li> <li>null</li> <li>'string'</li> </ul> </article> <article class=\"article\"> <h3>15. What is the result of: Boolean('0')==Boolean(0)?</h3> <ul> <li>NaN</li> <li>true</li> <li><strong>false</strong></li> <li>undefined</li> <li>'object'</li> <li>null</li> <li>'string'</li> </ul> </article> <article class=\"article\"> <h3>16. What is the result of: isNaN('')?</h3> <ul> <li>NaN</li> <li>true</li> <li><strong>false</strong></li> <li>undefined</li> <li>'object'</li> <li>null</li> </ul> </article> <article class=\"article\"> <h3>17. What is the result of: null==undefined?</h3> <ul> <li>null</li> <li>undefined</li> <li><strong>true</strong></li> <li>false</li> </ul> </article> <article class=\"article\"> <h3>18. What is the result of: null===undefined?</h3> <ul> <li>null</li> <li>undefined</li> <li>true</li> <li><strong>false</strong></li> </ul> </article> <article class=\"article\"> <h3>19. What is the result of: true+'hello'?</h3> <ul> <li>NaN</li> <li>true</li> <li>false</li> <li>'1hello'</li> <li>'hello'</li> <li><strong>'truehello'</strong></li> </ul> </article> <article class=\"article\"> <h3>20. What is the result of: true-'hello'?</h3> <ul> <li><strong>NaN</strong></li> <li>true</li> <li>false</li> <li>'1hello'</li> <li>'hello'</li> <li>'truehello'</li> </ul> </article> <article class=\"article\"> <h3>21. What is the result of: typeof 1n?</h3> <ul> <li><strong>'bigInt'</strong></li> <li>'string'</li> <li>'number'</li> <li>'NaN'</li> <li>'symbol'</li> </ul> </article> <article class=\"article\"> <h3>22. What is the result of: typeof alert?</h3> <ul> <li><strong>'function'</strong></li> <li>'string'</li> <li>'number'</li> <li>'undefined'</li> <li>'object'</li> <li>[object Object]</li> <li>'null'</li> </ul> </article> <article class=\"article\"> <h3>23. What is the result of: typeof function(){}?</h3> <ul> <li>'callback'</li> <li>'undefined'</li> <li>'method'</li> <li><strong>'function'</strong></li> <li>'object'</li> <li>[object Object]</li> </ul> </article> <article class=\"article\"> <h3>24. What is the result of: typeof (function(){})()?</h3> <ul> <li>'callback'</li> <li><strong>'undefined'</strong></li> <li>'method'</li> <li>'function'</li> <li>'object'</li> <li>[object Object]</li> </ul> </article> <article class=\"article\"> <h3>25. What is the result of: typeof Infinity?</h3> <ul> <li>'string'</li> <li>'object'</li> <li>'NaN'</li> <li>'undefined'</li> <li><strong>'number'</strong></li> </ul> </article> <article class=\"article\"> <h3>26. What is the result of: typeof Math?</h3> <ul> <li>'string'</li> <li>'number'</li> <li>undefined</li> <li><strong>'object'</strong></li> <li>[object Object]</li> <li>'null'</li> </ul> </article> <article class=\"article\"> <h3>27. What is the result of: typeof null?</h3> <ul> <li>'string'</li> <li>'number'</li> <li>'undefined'</li> <li><strong>'object'</strong></li> <li>[object Object]</li> <li>'null'</li> </ul> </article> <article class=\"article\"> <h3>28. What is the result of: typeof(null + 40)?</h3> <ul> <li>NaN</li> <li>true</li> <li>false</li> <li>'undefined'</li> <li>'object'</li> <li>'null'</li> <li><strong>'number'</strong></li> <li>'string'</li> </ul> </article> <article class=\"article\"> <h3>29. What is the result of: typeof Symbol('JS')?</h3> <ul> <li>'function'</li> <li><strong>'symbol'</strong></li> <li>'string'</li> <li>'undefined'</li> <li>'null'</li> </ul> </article> <article class=\"article\"> <h3>30. What is the result of: typeof typeof (function(){})()?</h3> <ul> <li>NaN</li> <li>true</li> <li>false</li> <li>undefined</li> <li>object</li> <li>null</li> <li><strong>'string'</strong></li> </ul> </article> <article class=\"article\"> <h3>31. Which of the following is NOT a data type in JS?</h3> <ul> <li>number</li> <li><strong>NaN</strong></li> <li>string</li> <li>symbol</li> <li>bigInt</li> </ul> </article> ",'<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>Test JS Scope & Functions</h1> <strong>26 вопросов. Выполнил на 100 баллов из 100</strong> </article> <article class="article"> <h3>1. How are parameters passed to a function</h3> <ul> <li>All variables are passed by reference</li> <li>All variables are passed by value</li> <li><strong>Primitives are passed by value and objects are passed by reference</strong></li> </ul> </article> <article class="article"> <h3>2. Indicate what is subject to hoisting in JavaScript</h3> <ul> <li>Function expression</li> <li><strong>Function declaration</strong></li> <li>Arrow function</li> <li><strong>Variable declaration</strong></li> <li>Assigning a value to a variable</li> </ul> </article> <article class="article"> <h3>3. Specify the correct way to access all function arguments:</h3> <ul> <li>(1) <pre>\r\n  function foo() {\r\n    console.log(Function.getArguments(this));\r\n  }\r\n  </pre> </li> <li><strong>(2)</strong> <pre>\r\n  function foo() {\r\n    console.log(arguments);\r\n  }\r\n  </pre> </li> <li>(3) <pre>\r\n  function foo() {\r\n    console.log(foo.getArguments());\r\n  }\r\n  </pre> </li> <li>(4) <pre>\r\n  function foo() {\r\n    console.log(this.arguments);\r\n  }\r\n  </pre> </li> </ul> </article> <article class="article"> <h3>4. What is closure</h3> <ul> <li>Function internal scope</li> <li>The ability of a function to access the outer scope</li> <li>JS language\'s ability to create block scope</li> <li><strong>The ability of a function to remember variables from the outer scope at the time of its creation</strong></li> </ul> </article> <article class="article"> <h3>5. What will be the result of the code execution</h3> <pre>\r\n  const foo = bar();\r\n  const number = 2;\r\n\r\n  function bar() { return number; }\r\n  </pre> <ul> <li>2</li> <li>undefined</li> <li><strong>ReferenceError: number is not defined</strong></li> <li>ReferenceError: bar is not defined</li> </ul> </article> <article class="article"> <h3>6. What will be the result of the code execution</h3> <pre>\r\n  (function(a) {\r\n    arguments[0] = 10;\r\n    return a;\r\n  }\r\n  )(5);\r\n  </pre> <ul> <li>5</li> <li><strong>10</strong></li> <li>undefined</li> </ul> </article> <article class="article"> <h3>7. What will be the result of the code execution</h3> <pre>\r\n  function foo(a,b) {\r\n    return a * b;\r\n  }\r\n\r\n  const bar = foo.bind(null, 2);\r\n  bar(2);\r\n  </pre> <ul> <li>2</li> <li><strong>4</strong></li> <li>NaN</li> <li>Will be an error</li> </ul> </article> <article class="article"> <h3>8. What will the code below output to the console</h3> <pre>\r\n  console.log(message);\r\n  var message = \'Hello\';\r\n  </pre> <ul> <li>\'Hello\'</li> <li><strong>undefined</strong></li> <li>Will be an error</li> </ul> </article> <article class="article"> <h3>9. What will the code below output to the console</h3> <pre>\r\n  console.log(message);\r\n  let message = \'Hello\';\r\n  </pre> <ul> <li>\'Hello\'</li> <li>undefined</li> <li><strong>Will be an error</strong></li> </ul> </article> <article class="article"> <h3>10. What will the code below output to the console</h3> <pre>\r\n  const details = {\r\n    name: \'John!\',\r\n  }\r\n  function getMessage(message) {\r\n    return `${message} ${this.name}`;\r\n  }\r\n\r\n  console.log(getMessage.apply(details, [\'Hello\']));\r\n  </pre> <ul> <li>An error will occur</li> <li>[object Object]</li> <li><strong>\'Hello John!\'</strong></li> <li>false</li> <li>true</li> </ul> </article> <article class="article"> <h3>11. What will the code below output to the console</h3> <pre>\r\n  for(let i = 0; i &lt; 3; i++) {\r\n    setTimeout(function() {\r\n      console.log(i)\r\n    }, 1000)\r\n  }\r\n  </pre> <ul> <li><strong>0 1 2</strong></li> <li>3 3 3</li> <li>undefined undefined undefined</li> <li>Will be an error</li> </ul> </article> <article class="article"> <h3>12. What will the code below output to the console</h3> <pre>\r\n  for(var i = 0; i &lt; 3; i++) {\r\n    setTimeout(function() {\r\n      console.log(i)\r\n    }, 1000)\r\n  }\r\n  </pre> <ul> <li>0 1 2</li> <li><strong>3 3 3</strong></li> <li>undefined undefined undefined</li> <li>Will be an error</li> </ul> </article> <article class="article"> <h3>13. What will the code below output to the console</h3> <pre>\r\n  for(var i = 0; i &lt; 10; i++) {\r\n\r\n  }\r\n  console.log(i);\r\n  </pre> <ul> <li>undefined</li> <li>9</li> <li><strong>10</strong></li> <li>Will be an error</li> </ul> </article> <article class="article"> <h3>14. What will the code below output to the console</h3> <pre>\r\n  function foo() {\r\n    return { bar: 1 };\r\n  }\r\n  console.log(typeof foo().bar);\r\n  </pre> <ul> <li>object</li> <li>string</li> <li><strong>number</strong></li> <li>undefined</li> </ul> </article> <article class="article"> <h3>15. What will the code below output to the console</h3> <pre>\r\n  function foo() { console.log(this);}\r\n  foo.call(null);\r\n  </pre> <ul> <li><strong>[object Window]</strong></li> <li>null</li> <li>[object Document]</li> </ul> </article> <article class="article"> <h3>16. What will the code below output to the console</h3> <pre>\r\n  function getThis() {\r\n    return this;\r\n  }\r\n\r\n  console.log(getThis());\r\n  </pre> <ul> <li><strong>[object Window]</strong></li> <li>[object Object]</li> <li>[object Document]</li> <li>[Function]</li> <li>undefined</li> </ul> </article> <article class="article"> <h3>17. What will the code below output to the console</h3> <pre>\r\n  let f = function g() { return 23; };\r\n\r\n  console.log(typeof g());\r\n  </pre> <ul> <li>number</li> <li>undefined</li> <li>function</li> <li><strong>Will be an error</strong></li> </ul> </article> <article class="article"> <h3>18. What will the code below output to the console</h3> <pre>\r\n  let name = \'John\';\r\n\r\n  function printName() {\r\n    let name = \'Peter\';\r\n    console.log(name);\r\n  }\r\n\r\n  printName();\r\n  </pre> <ul> <li>\'John\'</li> <li><strong>\'Peter\'</strong></li> <li>Will be an error</li> <li>undefined</li> </ul> </article> <article class="article"> <h3>19. What will the code below output to the console</h3> <pre>\r\n  let name = \'John\';\r\n  function printName() {\r\n    console.log(name)\r\n  }\r\n\r\n  setTimeout(() => {\r\n    let name = \'Peter\';\r\n    printName();\r\n  }, 1000);\r\n  </pre> <ul> <li><strong>\'John\'</strong></li> <li>\'Peter\'</li> <li>undefined</li> <li>Will be an error</li> </ul> </article> <article class="article"> <h3>20. What will the code below output to the console</h3> <pre>\r\n  printMessage();\r\n\r\n  function printMessage() {\r\n    console.log(\'Hello!\');\r\n  }\r\n  </pre> <ul> <li><strong>\'Hello!\'</strong></li> <li>Will be an error</li> <li>undefined</li> </ul> </article> <article class="article"> <h3>21. What will the code below output to the console</h3> <pre>\r\n  "use strict";\r\n\r\n  const details = {\r\n    message: \'Hello!\',\r\n  }\r\n  function getMessage() {\r\n    return this.message;\r\n  }\r\n\r\n  console.log(getMessage.call(details));\r\n  </pre> <ul> <li>An error will occur</li> <li>[object Object]</li> <li>true</li> <li>false</li> <li><strong>\'Hello!\'</strong></li> </ul> </article> <article class="article"> <h3>22. What will the code below output to the console</h3> <pre>\r\n  "use strict";\r\n\r\n  function getThis() {\r\n    return this;\r\n  }\r\n\r\n  console.log(getThis());\r\n  </pre> <ul> <li>[object Window]</li> <li>[object Object]</li> <li>[object Document]</li> <li>[Function]</li> <li><strong>undefined</strong></li> </ul> </article> <article class="article"> <h3>23. What will the code below output to the console</h3> <pre>\r\n  var a = 1, b = function a(x) { x && a(--x); };\r\n  console.log(a);\r\n  </pre> <ul> <li>2</li> <li>3</li> <li><strong>1</strong></li> <li>0</li> </ul> </article> <article class="article"> <h3>24. What will the code below output to the console</h3> <pre>\r\n  var name = \'John\';\r\n\r\n  function printName() {\r\n    console.log(name)\r\n    var name = \'Peter\';\r\n    console.log(name);\r\n  }\r\n\r\n  printName();\r\n  </pre> <ul> <li>\'John\' \'Peter\'</li> <li>\'Peter\' \'Peter\'</li> <li><strong>undefined \'Peter\'</strong></li> <li>Will be an error</li> </ul> </article> <article class="article"> <h3>25. What will the code below output to the console</h3> <pre>\r\n  var name = \'John\';\r\n\r\n  var user = {\r\n    name: \'Peter\',\r\n    printMessage() {\r\n      console.log(`Hello, ${this.name}!`);\r\n    }\r\n  };\r\n\r\n  var printMessage = user.printMessage;\r\n  printMessage();\r\n  </pre> <ul> <li>\'Hello, Peter!\'</li> <li><strong>\'Hello, John!\'</strong></li> <li>\'Hello, undefined!\'</li> <li>Will be an error</li> </ul> </article> <article class="article"> <h3>26. Which options correctly declare a function f that returns the sum of two arguments</h3> <ul> <li><strong>let f = function(a,b) { return a+b }</strong></li> <li><strong>let f = new Function("a,b", "return a+b")</strong></li> <li><strong>let f = new Function("a", "b", "return a+b")</strong></li> <li><strong>let f = (a, b) => a + b</strong></li> <li>let f = (a, b) => { a + b }</li> </ul> </article> ','<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>Test JS Evolution</h1> <strong>30 вопросов. Выполнил на 93 баллов из 100</strong> </article> <article class="article"> <h3>1. How can the package be added to the project?</h3> <ul> <li>npm add package_name</li> <li><strong>npm install package_name</strong></li> <li>npm package_name</li> <li>npm download package_name</li> </ul> </article> <article class="article"> <h3>2. How can the package.json be created?</h3> <ul> <li><strong>By running a command \'npm init\' within project\'s root directory</strong></li> <li>By running a command \'npm create\'</li> <li>By running a command \'npm install\' within project\'s root directory</li> <li>None of the above</li> </ul> </article> <article class="article"> <h3>3. How to create package-lock.json?</h3> <ul> <li>By running a command \'npm init\' within project\'s root directory</li> <li>By running a command \'npm create\'</li> <li><strong>It is created automatically when modifying node_modules or package.json</strong></li> <li>None of the above</li> </ul> </article> <article class="article"> <h3>4. How to get a plain object from Map?</h3> <ul> <li><strong>Object.fromEntries</strong></li> <li>Object.assign</li> <li>Map.fromEntries</li> <li>Map.toObject</li> </ul> </article> <article class="article"> <h3>5. How to get Map from a plain object?</h3> <ul> <li>new Map(obj)</li> <li>Object.toMap(obj)</li> <li><strong>new Map(Object.entries(obj))</strong></li> <li>new Map(Object.keys(obj))</li> </ul> </article> <article class="article"> <h3>6. How to iterate over Map?</h3> <ul> <li><strong>Use forEach built-in method or for..of loop with outputs of keys, values, entries methods</strong></li> <li>Use map built-in method or for..of loop with Map value or outputs of keys, entries methods</li> <li>Use forEach built-in method or for..in loop with Map value</li> <li>Use map built-in method or for..in loop with outputs of keys, values, entries methods</li> </ul> </article> <article class="article"> <h3>7. How to iterate over Set?</h3> <ul> <li><strong>Use forEach built-in method or for..of loop with outputs of keys, values, entries methods</strong></li> <li>Use map built-in method or for..of loop with Set value or outputs of keys, entries methods</li> <li>Use forEach built-in method or for..in loop with Set value</li> <li>Use map built-in method or for..in loop with outputs of keys, values, entries methods</li> </ul> </article> <article class="article"> <h3>8. How to remove package?</h3> <ul> <li>npm remove package_name</li> <li>npm clear package_name</li> <li><strong>npm uninstall package_name</strong></li> <li>npm delete package_name</li> </ul> </article> <article class="article"> <h3>9. How to run script?</h3> <ul> <li>npm run-script script_name</li> <li>npm execute-script script_name</li> <li><strong>npm run script_name</strong></li> <li>npm run package_name</li> </ul> </article> <article class="article"> <h3>10. Operator `...` can be used to...</h3> <ul> <li><strong>Gather all function\'s arguments into array</strong></li> <li><strong>Copy object or array</strong></li> <li><strong>Expand an array into a list</strong></li> <li>Copy function</li> </ul> </article> <article class="article"> <h3>11. What does destructuring assignment do?</h3> <ul> <li><strong>“Unpacks” arrays or objects into a bunch of variables</strong></li> <li>Destroys an object provided as argument</li> <li>Shows structure object passed as argument</li> <li>Creates variables in a row using one keyword</li> </ul> </article> <article class="article"> <h3>12. What does npm consist of?</h3> <ul> <li><strong>website</strong></li> <li><strong>Command Line Interface (CLI)</strong></li> <li><strong>registry</strong></li> <li>ES2015</li> </ul> </article> <article class="article"> <h3>13. What is Map?</h3> <ul> <li>A special type collection – “set of values” (without keys), where each value may occur only once</li> <li>A special place for storing all details of web application</li> <li>An ordered collection of values</li> <li><strong>A collection of keyed data items, just like an Object, but the keys of any type are allowed</strong></li> </ul> </article> <article class="article"> <h3>14. What is Minor release for npm packages?</h3> <ul> <li>Backward compatible bug fixes following by incrementing of the third version digit</li> <li><strong>Backward compatible new features following by incrementing of the middle version digit and resetting last digit to zero</strong></li> <li>Changes that break backward compatibility following by incrementing the first version digit and reset middle and last digits to zero</li> <li>First release which indicated as 1.0.0 in package version</li> </ul> </article> <article class="article"> <h3>15. What is npm?</h3> <ul> <li>A convention for code style unifying</li> <li>A tool for building web applications</li> <li><strong>The world\'s largest software registry</strong></li> <li>None of the above</li> </ul> </article> <article class="article"> <h3>16. What is npm used for?</h3> <ul> <li><strong>Share code with any npm user, anywhere</strong></li> <li><strong>Manage multiple versions of code and code dependencies</strong></li> <li><strong>Discover multiple ways to solve the same puzzle</strong></li> <li><strong>Download standalone tools you can use right away</strong></li> </ul> </article> <article class="article"> <h3>17. What is Patch release for npm packages?</h3> <ul> <li>First release which indicated as 1.0.0 in package version</li> <li>Backward compatible new features following by incrementing of the middle version digit and resetting last digit to zero</li> <li>Changes that break backward compatibility following by incrementing the first version digit and reset middle and last digits to zero</li> <li><strong>Backward compatible bug fixes following by incrementing of the third version digit</strong></li> </ul> </article> <article class="article"> <h3>18. What is \'scripts\' in the package.json?</h3> <ul> <li>Another name for package.json is \'scripts\'</li> <li><strong>It\'s a property of package.json which contains predefined commands that can be executed via command line using npm</strong></li> <li>It\'s a property of package.json which contains specific information about steps of app running</li> <li>Scenarios of developers communication according to different work cases</li> </ul> </article> <article class="article"> <h3>19. What is Set?</h3> <ul> <li>A collection of keyed data items, just like an Object, but the keys of any type are allowed</li> <li>Any function used for setting data</li> <li><strong>A special type collection – “set of values” (without keys), where each value may occur only once</strong></li> <li>A data type for storing floating-point numbers</li> </ul> </article> <article class="article"> <h3>20. What is Symbol?</h3> <ul> <li>A type of global object that is used to store data</li> <li><strong>A primitive data type and it represents a unique identifier</strong></li> <li>A primitive data type the same as String or Number</li> <li>A special character for specific purposes (emails, passwords, etc.)</li> </ul> </article> <article class="article"> <h3>21. What is the output of running \'npm list -g --depth 0\'?</h3> <ul> <li>The list of packages installed in you project</li> <li><strong>The list of packages installed globally on the computer excluding every package\'s the dependencies</strong></li> <li>The list of packages installed globally on the computer including every package\'s the dependencies</li> <li>Error message</li> </ul> </article> <article class="article"> <h3>22. What is the reason to have a package.json file in the project?</h3> <ul> <li>To write here all notes related to the project as README but detailed</li> <li><strong>To predefine closed list of packages to be used within the project</strong></li> <li>For developers communication</li> <li>To store human-readable as well as functional metadata for the project</li> </ul> </article> <article class="article"> <h3>23. What line should be used in the package.json to accept minor and patch updates?</h3> <ul> <li><strong>"dependency_name": "^1.2.3"</strong></li> <li>"dependency_name": "+1.2.3"</li> <li>"dependency_name": "~1.2.3"</li> <li>"dependency_name": "1.2.3"</li> </ul> </article> <article class="article"> <h3>24. What line should be used in the package.json to prevent minor updates but to accept patch updates?</h3> <ul> <li>"dependency_name": "1.2.3"</li> <li>"dependency_name": "^1.2.3"</li> <li>"dependency_name": "+1.2.3"</li> <li><strong>"dependency_name": "~1.2.3"</strong></li> </ul> </article> <article class="article"> <h3>25. What methods and properties does Map have?</h3> <ul> <li>at, match, replace, search</li> <li><strong>size, get, has, delete</strong></li> <li>values, delete, hasOwn, keys</li> <li>add, delete, entries, forEach</li> </ul> </article> <article class="article"> <h3>26. What methods and properties does Set have?</h3> <ul> <li>length, slice, trim, split</li> <li>is, delete, assign, entries</li> <li><strong>add, delete, entries, forEach</strong></li> <li>map, filter, forEach, splice</li> </ul> </article> <article class="article"> <h3>27. What statements about packages updates are correct?</h3> <ul> <li><strong>Run \'npm update\' in the project\'s root directory to update project\'s packages</strong></li> <li><strong>Run \'npm update package_name to update certain package</strong></li> <li>\'npm update\' is not real npm command</li> <li>Run \'npm outdated [package-spec...]\' to install all available updates</li> </ul> </article> <article class="article"> <h3>28. What statements describe Array.includes() correctly?</h3> <ul> <li><strong>Returns true or false</strong></li> <li>Returns amount of matches</li> <li><strong>Determines whether an array includes a certain value among its entries</strong></li> <li>Sets to array values passed as arguments</li> </ul> </article> <article class="article"> <h3>29. What syntax is correct for object destructuring?</h3> <ul> <li><strong>const { age, name, occupation } = person</strong></li> <li>const age, name, occupation = person</li> <li>const { age, name, occupation } = {...person}</li> <li>const age, name, occupation = {...person}</li> </ul> </article> <article class="article"> <h3>30. What is Major release for npm packages?</h3> <ul> <li><strong>Changes that break backward compatibility following by incrementing the first version digit and reset middle and last digits to zero</strong></li> <li>Backward compatible new features following by incrementing of the middle version digit and resetting last digit to zero</li> <li>First release which indicated as 1.0.0 in package version</li> <li>Backward compatible bug fixes following by incrementing of the third version digit</li> </ul> </article> ','<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>Test HTML Basics</h1> <strong>33 вопроса. Выполнил на 100 баллов из 100</strong> </article> <article class="article"> <h3>1. A numbered list is specified by the element:</h3> <ul> <li>ul</li> <li><strong>ol</strong></li> <li>dl</li> </ul> </article> <article class="article"> <h3>2. According to the W3C validator, what attributes must an img element have in order to avoid an error?</h3> <ul> <li>width</li> <li><strong>alt</strong></li> <li>height</li> <li><strong>src</strong></li> <li>align</li> </ul> </article> <article class="article"> <h3>3. By default, which margins are applied to the p (paragraph) element by the browser?</h3> <ul> <li><strong>top</strong></li> <li>right</li> <li><strong>bottom</strong></li> <li>left</li> </ul> </article> <article class="article"> <h3>4. Correct nesting in the following case:</h3> <ul> <li>ul > a > li</li> <li>li > ul > a</li> <li><strong>ul > li > a</strong></li> <li>a > li > ul</li> </ul> </article> <article class="article"> <h3>5. How to set the height to 10 lines in a textarea element?</h3> <ul> <li><strong>rows=10</strong></li> <li>height=10rows</li> <li>cols=10</li> <li>height=10</li> </ul> </article> <article class="article"> <h3>6. How to specify the anchor link in the href attribute?</h3> <ul> <li><strong>#anchor</strong></li> <li>.anchor</li> <li>name:anchor</li> <li>:anchor</li> </ul> </article> <article class="article"> <h3>7. If you place several &lt;li&gt; list elements on the page without an external container (without ul, ol or dl), they will be displayed as:</h3> <ul> <li>numbered list items</li> <li><strong>bulleted list items</strong></li> <li>definition list elements</li> <li>will not differ in any way from the base text</li> </ul> </article> <article class="article"> <h3>8. In a bulleted ul list, without additional styling, a dot next to the list item appears by using:</h3> <ul> <li><strong>li</strong></li> <li>ul</li> <li>any first level element inside ul</li> </ul> </article> <article class="article"> <h3>9. In the img element, the width value is width=32, which corresponds to:</h3> <ul> <li>32% of parent\'s width</li> <li>32% of screen width</li> <li>32pt</li> <li><strong>32px</strong></li> </ul> </article> <article class="article"> <h3>10. In which direction does the colspan attribute span the specified number of cells in a table?</h3> <ul> <li>top</li> <li><strong>right</strong></li> <li>bottom</li> <li>left</li> </ul> </article> <article class="article"> <h3>11. Inside the audio tag, you need to place this element (or several) to indicate the path to the audio file:</h3> <ul> <li><strong>source</strong></li> <li>src</li> <li>path</li> <li>route</li> </ul> </article> <article class="article"> <h3>12. Paragraphs are indicated using the element...</h3> <ul> <li><strong>p</strong></li> <li>paragraph</li> <li>para</li> <li>text</li> <li>a</li> </ul> </article> <article class="article"> <h3>13. Semantic tags include:</h3> <ul> <li><strong>article</strong></li> <li><strong>nav</strong></li> <li>div</li> <li><strong>footer</strong></li> <li>span</li> <li><strong>main</strong></li> </ul> </article> <article class="article"> <h3>14. Specify the correct nesting with the nav element:</h3> <ul> <li>nav > li > a</li> <li>ul > nav > a</li> <li><strong>nav > ul > li > a</strong></li> <li>ul > nav > li > a</li> </ul> </article> <article class="article"> <h3>15. The correct form for creating a nested list would be:</h3> <ul> <li>ul > li > li > ol</li> <li>ul > ol > li > li</li> <li><strong>ul > li > ol > li</strong></li> <li>li > ul > ol > li</li> </ul> </article> <article class="article"> <h3>16. The lang=ru attribute is located in the element:</h3> <ul> <li>doctype</li> <li>body</li> <li><strong>html</strong></li> <li>head</li> </ul> </article> <article class="article"> <h3>17. The text in the img element, which will be displayed instead of the image if it is not available, is specified in the attribute:</h3> <ul> <li>src</li> <li>title</li> <li><strong>alt</strong></li> <li>alternative</li> </ul> </article> <article class="article"> <h3>18. The tooltip is specified by the attribute:</h3> <ul> <li>hovered</li> <li>name</li> <li>tooltip</li> <li><strong>title</strong></li> <li>tooltip</li> </ul> </article> <article class="article"> <h3>19. There is a special semantic element for the sidebar. Which one?</h3> <ul> <li>section</li> <li>sidebar</li> <li>main</li> <li><strong>aside</strong></li> </ul> </article> <article class="article"> <h3>20. These elements are included in the table:</h3> <ul> <li><strong>table</strong></li> <li><strong>thead</strong></li> <li><strong>tbody</strong></li> <li><strong>tr</strong></li> <li><strong>th</strong></li> <li><strong>td</strong></li> </ul> </article> <article class="article"> <h3>21. These headers do not exist:</h3> <ul> <li><strong>h0</strong></li> <li>h1</li> <li>h2</li> <li>h4</li> <li><strong>h8</strong></li> </ul> </article> <article class="article"> <h3>22. These input element types do not exist:</h3> <ul> <li>text</li> <li>button</li> <li>submit</li> <li><strong>radiobutton</strong></li> <li><strong>check</strong></li> </ul> </article> <article class="article"> <h3>23. These tags will change the text style (make it bold or italic) without additional CSS styling:</h3> <ul> <li><strong>i</strong></li> <li>t</li> <li>h</li> <li><strong>b</strong></li> <li>p</li> </ul> </article> <article class="article"> <h3>24. This attribute must be set to the video element for the video player control panel to appear:</h3> <ul> <li>control</li> <li><strong>controls</strong></li> <li>panel</li> <li>buttons</li> </ul> </article> <article class="article"> <h3>25. This meta tag is used to describe the page (name field of the meta element):</h3> <ul> <li>content</li> <li>about</li> <li>author</li> <li><strong>description</strong></li> </ul> </article> <article class="article"> <h3>26. To connect label and input use attributes:</h3> <ul> <li>for + name</li> <li>id + id</li> <li>name + id</li> <li><strong>for + id</strong></li> </ul> </article> <article class="article"> <h3>27. To make multiple selections in a select + option structure, you need to set an attribute to the select element:</h3> <ul> <li>multi</li> <li><strong>multiple</strong></li> <li>many</li> <li>some</li> </ul> </article> <article class="article"> <h3>28. What attribute is used to indicate the type of included file in the link tag?</h3> <ul> <li><strong>rel</strong></li> <li>href</li> <li>src</li> <li>source</li> </ul> </article> <article class="article"> <h3>29. What is the correct way to write a non-breaking space using a special character?</h3> <ul> <li>& amp;</li> <li>& sp;</li> <li>& space;</li> <li><strong>& nbsp;</strong></li> </ul> </article> <article class="article"> <h3>30. Which attribute specifies the path to the file or page where the form data handler is located?</h3> <ul> <li>src</li> <li>href</li> <li><strong>action</strong></li> <li>route</li> </ul> </article> <article class="article"> <h3>31. Which elements are block-level elements?</h3> <ul> <li>a</li> <li><strong>div</strong></li> <li>img</li> <li>span</li> <li><strong>p</strong></li> <li><strong>h1</strong></li> </ul> </article> <article class="article"> <h3>32. Which meta tag can be used to prevent the user from zooming the page (name field of the meta element):</h3> <ul> <li>description</li> <li><strong>viewport</strong></li> <li>keywords</li> <li>robots</li> </ul> </article> <article class="article"> <h3>33. Within this element whitespace is preserved and displayed as written:</h3> <ul> <li>p</li> <li><strong>pre</strong></li> <li>code</li> <li>span</li> </ul> </article> ','<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>Test CSS Basics</h1> <strong>33 вопроса. Выполнил на 100 баллов из 100</strong> </article> <article class="article"> <h3>1. According to the documentation (to MDN), where should the style tag be placed? (The W3C validator will not throw an error)</h3> <ul> <li>outside the html tag</li> <li>in the html tag but not in the head or body</li> <li><strong>in the head tag</strong></li> <li>in the body tag</li> </ul> </article> <article class="article"> <h3>2. At what value of the text-align property will the text be aligned to the right?</h3> <ul> <li><strong>right</strong></li> <li>center</li> <li>left</li> <li>justify</li> </ul> </article> <article class="article"> <h3>3. By default, an element with {position: absolute} (without any other positioning properties) will be aligned to which edge of its nearest positioned ancestor?</h3> <ul> <li>top right</li> <li>bottom right</li> <li>bottom left</li> <li><strong>top left</strong></li> </ul> </article> <article class="article"> <h3>4. Does Cascading allow you to combine styles from different sources?</h3> <ul> <li><strong>yes</strong></li> <li>no</li> </ul> </article> <article class="article"> <h3>5. For the Mozilla Firefox browser, the vendor prefix for styles looks like this:</h3> <ul> <li>-ms-</li> <li>-webkit-</li> <li><strong>-moz-</strong></li> <li>-ff-</li> </ul> </article> <article class="article"> <h3>6. How do you make an element\'s content and its children unselectable using CSS?</h3> <ul> <li>content: none;</li> <li>pointer-events: none;</li> <li><strong>user-select: none;</strong></li> <li>child-select: none;</li> </ul> </article> <article class="article"> <h3>7. If the parent element is given a font size of 24px, then this size will be inherited:</h3> <ul> <li>nested elements of the first level only</li> <li><strong>all nested elements</strong></li> <li>no nested element will inherit size</li> </ul> </article> <article class="article"> <h3>8. If the variable is written as :root {--main-color: #000;}, then you can apply it like this:</h3> <ul> <li>color: parse(--main-color);</li> <li><strong>color: var(--main-color);</strong></li> <li>color: root(--main-color);</li> <li>color: --main-color;</li> </ul> </article> <article class="article"> <h3>9. In a multiline text element, line spacing can be changed using the property:</h3> <ul> <li><strong>line-height</strong></li> <li>height</li> <li>padding</li> <li>padding-bottom</li> </ul> </article> <article class="article"> <h3>10. In order to set the style directly in the element (write the style inline), use the attribute:</h3> <ul> <li><strong>style</strong></li> <li>css</li> <li>stylesheet</li> <li>text</li> </ul> </article> <article class="article"> <h3>10. In the entry {font: bold italic, 24 px Arial;}, Arial is:</h3> <ul> <li>font size</li> <li>font style</li> <li><strong>font family</strong></li> <li>font weight</li> </ul> </article> <article class="article"> <h3>11. In the entry {padding: 10px 15px 20px 25px;} the top padding will be equal to:</h3> <ul> <li><strong>10px</strong></li> <li>15px</li> <li>20px</li> <li>25px</li> </ul> </article> <article class="article"> <h3>12. In the Google Chrome browser, the default h1 tag size is:</h3> <ul> <li><strong>32px (2em)</strong></li> <li>24px (1.5em)</li> <li>16px (1em)</li> <li>8px (0.5em)</li> </ul> </article> <article class="article"> <h3>13. In what format are styles written in the style tag?</h3> <ul> <li>in HTML format</li> <li>in JS format</li> <li>in JSON format</li> <li><strong>in CSS format</strong></li> </ul> </article> <article class="article"> <h3>14. Select a value for the color property, written in HEX format, representing a deep blue color:</h3> <ul> <li>#000000</li> <li>#FF0000</li> <li>#00FF00</li> <li><strong>#0000FF</strong></li> <li>#FFFFFF</li> </ul> </article> <article class="article"> <h3>15. Select the correct class-name class selector in the CSS:</h3> <ul> <li>#class-name</li> <li><strong>.class-name</strong></li> <li>.class.name</li> <li>class-name</li> </ul> </article> <article class="article"> <h3>16. Select the correct id-name selector in the CSS:</h3> <ul> <li>.id-name</li> <li>#id.name</li> <li><strong>#id-name</strong></li> <li>id-name</li> </ul> </article> <article class="article"> <h3>17. Select the correct values for the color property to indicate a deep red color:</h3> <ul> <li><strong>#FF0000</strong></li> <li>#0000FF</li> <li>rgb(0, 255, 0)</li> <li><strong>rgb(255, 0, 0)</strong></li> <li><strong>hsl(0, 100%, 50%)</strong></li> </ul> </article> <article class="article"> <h3>18. Strikethrough text can be done using this text-decoration property value:</h3> <ul> <li>none</li> <li>underline</li> <li>overline</li> <li><strong>line-through</strong></li> </ul> </article> <article class="article"> <h3>19. The animation is set using @keyframes. We need to set the animation duration to half a second. Which options will work?</h3> <ul> <li>(1/2)s</li> <li>calc(1/2)s</li> <li><strong>0.5s</strong></li> <li><strong>500ms</strong></li> <li>0.0005ks</li> </ul> </article> <article class="article"> <h3>20. The degree of transparency in rgba recording varies within:</h3> <ul> <li><strong>from 0 to 1</strong></li> <li>from 0 to 10</li> <li>from 0 to F</li> <li>from 0 to 255</li> </ul> </article> <article class="article"> <h3>20. The element has a set of properties {padding: 10px 20px; margin: 30px; border: 5px solid #040;}. What will be the total indentation to the right of the content?</h3> <ul> <li>45</li> <li>50</li> <li><strong>55</strong></li> <li>85</li> <li>95</li> </ul> </article> <article class="article"> <h3>21. The element has properties {position: relative; top: 20px;}. Where will the element move relative to its current position by 20 pixels?</h3> <ul> <li>top</li> <li>right</li> <li><strong>bottom</strong></li> <li>left</li> </ul> </article> <article class="article"> <h3>22. The font, what does not have small strokes or extensions called "serifs" is</h3> <ul> <li>serif</li> <li><strong>sans-serif</strong></li> <li>cursive</li> <li>monospace</li> </ul> </article> <article class="article"> <h3>23. The height of a div without text is determined by the property:</h3> <ul> <li>width</li> <li>line-height</li> <li>high</li> <li><strong>height</strong></li> </ul> </article> <article class="article"> <h3>24. The parent element has the property {font-size: 2rem;}, and the child element has the property {font-size: 200%;}. What will be the font size of the child element in pixels?</h3> <ul> <li>16px</li> <li>24px</li> <li>48px</li> <li><strong>64px</strong></li> <li>72px</li> </ul> </article> <article class="article"> <h3>25. The parent element\'s font size is 12px, and the child element\'s is 4em. What font size in pixels will the child element have?</h3> <ul> <li>64px</li> <li><strong>48px</strong></li> <li>36px</li> <li>32px</li> <li>24px</li> </ul> </article> <article class="article"> <h3>26. The `z-index` property does not affect elements with position:</h3> <ul> <li>relative</li> <li>absolute</li> <li>fixed</li> <li><strong>static</strong></li> </ul> </article> <article class="article"> <h3>27. These font weight options are not provided in CSS:</h3> <ul> <li><strong>0</strong></li> <li>100</li> <li>500</li> <li>800</li> <li><strong>1200</strong></li> </ul> </article> <article class="article"> <h3>28. This value for the border-style property will set the element\'s border to be dotted:</h3> <ul> <li>solid</li> <li>double</li> <li>dashed</li> <li><strong>dotted</strong></li> </ul> </article> <article class="article"> <h3>29. What property creates extra space around an element?</h3> <ul> <li>border</li> <li><strong>margin</strong></li> <li>padding</li> <li>box-sizing</li> </ul> </article> <article class="article"> <h3>29. Which of the following methods of style assignment has the highest specificity?</h3> <ul> <li>selector by class</li> <li><strong>style attribute inside the tag</strong></li> <li>selector by id</li> <li>selector by tag</li> </ul> </article> <article class="article"> <h3>30. Which of the following properties can use the value #aaa to set the background to gray?</h3> <ul> <li>background-image</li> <li><strong>background-color</strong></li> <li>background-position</li> <li>background-repeat</li> <li><strong>background</strong></li> </ul> </article> <article class="article"> <h3>31. Which property adjusts the space between letters of text?</h3> <ul> <li>word-spacing</li> <li>line-height</li> <li>text-indent</li> <li><strong>letter-spacing</strong></li> </ul> </article> <article class="article"> <h3>32. You can make sure that all words in the text begin with a capital letter using this value of the text-transform property:</h3> <ul> <li>none</li> <li>uppercase</li> <li><strong>capitalize</strong></li> <li>lowercase</li> </ul> </article> <article class="article"> <h3>33. You can make the font italic (cursive or sloped) using these values ​​of the font-style property:</h3> <ul> <li>none</li> <li><strong>italic</strong></li> <li><strong>oblique</strong></li> <li>unset</li> <li>normal</li> </ul> </article> ','<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>[St1] CSS Positioning & Flexbox</h1> <strong>25 вопросов. Выполнил на 96 баллов из 100</strong> </article> <article class="article"> <h3>1. flex is a shorthand property where you can set 3 different properties: (checkbox)</h3> <ul> <li><strong>flex-grow</strong></li> <li><strong>flex-shrink</strong></li> <li>flex-direction</li> <li><strong>flex-basis</strong></li> <li>flex-order</li> </ul> </article> <article class="article"> <h3>2. How to correctly add the flexbox property to a selected set of elements on the page?</h3> <ul> <li><strong>Set "display: flex" to the parent element of the selected elements</strong></li> <li>Set "display: flex" to each element that we want to turn into a flex item</li> <li>Set "display: flex" for all elements on the page</li> <li>Set "display: flex" to the html tag</li> <li>Shout, \'Flex! I choose you!\' and hope for the best</li> </ul> </article> <article class="article"> <h3>3. How to horizontally center a block element?</h3> <ul> <li>Set the element\'s width larger than the parent container\'s width and set the margins on the right and left to \'auto\'</li> <li><strong>Set the element\'s width smaller than the parent container\'s width and set the margins on the right and left to \'auto\'</strong></li> <li>Set the element\'s width smaller than the parent container\'s width and set the margins on the top and bottom to \'auto\'</li> <li>Set the element\'s width larger than the parent container\'s width and set the margins on the top and bottom to \'auto\'</li> <li>Ask it nicely to sit in the middle</li> </ul> </article> <article class="article"> <h3>4. How to style &lt;div&gt; elements to be arranged side by side horizontally from left to right? (checkbox)</h3> <ul> <li><strong>display: flex for the parent element</strong></li> <li><strong>float: left</strong></li> <li><strong>display: inline-block</strong></li> </ul> </article> <article class="article"> <h3>5. Select the correct statements regarding position: absolute (checkbox)</h3> <ul> <li><strong>An element with this positioning is removed from the main flow of the document</strong></li> <li>An element with the value position: absolute is not a positioned element</li> <li><strong>The element is placed relative to its nearest relatively positioned ancestor (if any)</strong></li> <li>The element is positioned in the normal flow just like a static one, and then shifted using the properties left, right, top, bottom relative to the nearest scrolling parent</li> </ul> </article> <article class="article"> <h3>6. Select the correct statement regarding the align-content property:</h3> <ul> <li>With this property, you can change the order of display of flex items inside the flex container</li> <li><strong>The property distributes free space along the cross-axis between rows of flex items</strong></li> <li>This property specifies whether a flex item can grow when there is free space and by how much</li> <li>With this property, you can align one or several items differently than set on the parent element</li> </ul> </article> <article class="article"> <h3>7. The parent element, which is assigned the display: flex property, is called...</h3> <ul> <li>flex parent</li> <li><strong>flex container</strong></li> <li>flex item</li> <li>main axis</li> </ul> </article> <article class="article"> <h3>8. What flex-direction property value should be specified so that child elements are arranged horizontally from left to right?</h3> <ul> <li>column</li> <li>column-reverse</li> <li>row-reverse</li> <li><strong>row</strong></li> <li>moonwalk-mode (because Michael Jackson!)</li> </ul> </article> <article class="article"> <h3>9. What is the default value of the align-items property applied to the parent element for flex blocks?</h3> <ul> <li>flex-start</li> <li>flex-end</li> <li>center</li> <li><strong>stretch</strong></li> <li>space-between</li> <li>space-around</li> <li>baseline</li> <li>auto</li> <li>random-dance-move</li> </ul> </article> <article class="article"> <h3>10. What is the default value of the align-self property applied to the parent element for flex blocks?</h3> <ul> <li>flex-start</li> <li>flex-end</li> <li>center</li> <li>stretch</li> <li>space-between</li> <li>space-around</li> <li>baseline</li> <li><strong>auto</strong></li> </ul> </article> <article class="article"> <h3>11. What is the default value of the flex property?</h3> <ul> <li>1 0 auto</li> <li><strong>0 1 auto</strong></li> <li>0 1 0</li> <li>0 0 auto</li> <li>0 0 0</li> </ul> </article> <article class="article"> <h3>12. What is the default value of the justify-content property applied to the parent element for flex blocks?</h3> <ul> <li><strong>flex-start</strong></li> <li>flex-end</li> <li>center</li> <li>normal</li> <li>stretch</li> <li>space-between</li> <li>space-around</li> <li>baseline</li> <li>auto</li> </ul> </article> <article class="article"> <h3>13. What statements about the block elements are correct? (checkbox)</h3> <ul> <li><strong>A line break is added before and after the element</strong></li> <li><strong>You can set the width, height, padding, and margin for the element</strong></li> <li><strong>The elements take up the full width of their parent (container)</strong></li> <li>Block elements can contain inline elements, and cannot contain other block elements</li> <li>The width and height of the element depend only on its content; you cannot set sizes using CSS</li> </ul> </article> <article class="article"> <h3>14. What statements about the inline elements are correct? (checkbox)</h3> <ul> <li><strong>Line breaks are not added before and after the element</strong></li> <li>You can set the width, height, padding, and margin for the element</li> <li><strong>The width and height of the element depend only on its content; you cannot set sizes using CSS</strong></li> <li><strong>The &lt;textarea&gt; tag is among them</strong></li> <li>The elements take up the full width of their parent (container)</li> </ul> </article> <article class="article"> <h3>15. What type of positioning can an element have?</h3> <ul> <li>Static positioning</li> <li>Relative positioning</li> <li>Absolute positioning</li> <li>Fixed positioning</li> <li><strong>All of the above</strong></li> </ul> </article> <article class="article"> <h3>16. Which elements are block-level by default? (checkbox)</h3> <ul> <li><strong>&lt;div&gt;</strong></li> <li>&lt;i&gt;</li> <li>&lt;span&gt;</li> <li><strong>&lt;p&gt;</strong></li> <li>&lt;a&gt;</li> <li><strong>&lt;ul&gt;</strong></li> <li><strong>&lt;li&gt;</strong></li> <li>&lt;img&gt;</li> <li><strong>&lt;table&gt;</strong></li> </ul> </article> <article class="article"> <h3>17. Which elements are inline by default? (checkbox)</h3> <ul> <li>&lt;p&gt;</li> <li>&lt;table&gt;</li> <li><strong>&lt;img&gt;</strong></li> <li><strong>&lt;span&gt;</strong></li> <li>&lt;li&gt;</li> <li>&lt;ul&gt;</li> <li>&lt;div&gt;</li> <li><strong>&lt;i&gt;</strong></li> <li><strong>&lt;a&gt;</strong></li> </ul> </article> <article class="article"> <h3>18. Which of the listed properties allows flex items to wrap to a new line if they don\'t fit in the container?</h3> <ul> <li>flex-sorter</li> <li>flex-order</li> <li><strong>flex-wrap</strong></li> <li>flex-column</li> <li>flex-direction</li> <li>flex-tape</li> </ul> </article> <article class="article"> <h3>19. Which of the listed properties allows you to change the order of the flex items?</h3> <ul> <li>flex-wrap</li> <li>flex-sorter</li> <li>flex-order</li> <li>flex-column</li> <li><strong>order</strong></li> <li>sorter</li> <li>column</li> <li>wrap</li> </ul> </article> <article class="article"> <h3>20. Which properties does the shorthand property flex-flow contain?</h3> <ul> <li>Such property does not exist</li> <li>flex-wrap and flex-shrink</li> <li>flex-direction and flex-grow</li> <li><strong>flex-direction and flex-wrap</strong></li> </ul> </article> <article class="article"> <h3>21. Which property helps to hide an element from the page, as if it never existed?</h3> <ul> <li>display: block</li> <li>display: inline</li> <li>display: inline-block</li> <li>display: list-item</li> <li><strong>display: none</strong></li> <li>display: run-in</li> <li>display: table</li> <li>display: flex</li> <li>display: magic-disappearo-trick</li> </ul> </article> <article class="article"> <h3>22. Which property is responsible for aligning elements along the main axis?</h3> <ul> <li><strong>justify-content</strong></li> <li>align-content</li> <li>flex-direction</li> <li>align-items</li> <li>align-self</li> <li>flex: start</li> <li>flex: stretch</li> <li>compass</li> </ul> </article> <article class="article"> <h3>23. Which value(s) does the \'position\' property not have? (checkbox)</h3> <ul> <li>absolute</li> <li>static</li> <li>sticky</li> <li><strong>normal</strong></li> <li><strong>advanced</strong></li> <li>relative</li> <li>fixed</li> <li><strong>none</strong></li> </ul> </article> <article class="article"> <h3>24. Which value(s) for the \'position\' property can an absolutely positioned element have? (checkbox)</h3> <ul> <li><strong>absolute</strong></li> <li>static</li> <li>sticky</li> <li>normal</li> <li>advanced</li> <li>relative</li> <li><strong>fixed</strong></li> <li>none</li> <li>subaquatic</li> </ul> </article> <article class="article"> <h3>25. Will the z-index work on an element without position (flex or grid aren\'t used)?</h3> <ul> <li>Yes, it will</li> <li>Depends on the z-index value</li> <li><strong>No, it won\'t</strong></li> <li>Only if it\'s feeling on top of the world today</li> </ul> </article> ','<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>[St1] CSS Grid</h1> <strong>20 вопросов. Выполнил на 85 баллов из 100</strong> </article> <article class="article"> <h3>1. By default, a grid container behaves like a...?</h3> <ul> <li><strong>block element</strong></li> <li>inline element</li> <li>inline-block element</li> </ul> </article> <article class="article"> <h3>2. Can grid items occupy the same cell in CSS grids?</h3> <ul> <li>No, grid items are always in separate cells</li> <li>Yes, grid items can occupy the same cell</li> <li><strong>Only if the parent grid has a specific setting</strong></li> <li>Only if the grid items have the same class</li> </ul> </article> <article class="article"> <h3>3. How to assign a name to a grid area?</h3> <ul> <li><strong>grid-area: hd;</strong></li> <li>grid-template-areas: "hd hd hd";</li> <li>grid-area: hd 2 / 4 / 3 / 8;</li> <li>none of the above</li> </ul> </article> <article class="article"> <h3>4. How to leave a grid cell empty?</h3> <ul> <li>grid-template-areas: "header - header header";</li> <li>grid-template-areas: "header 0 header header";</li> <li><strong>grid-template-areas: "header . header header";</strong></li> <li>grid-template-areas: "header _ header header";</li> </ul> </article> <article class="article"> <h3>5. In CSS grids, what does the value -1 typically represent when it comes to grid assignments?</h3> <ul> <li><strong>-1 is not a valid value in CSS grids</strong></li> <li>-1 represents the first column or row in the grid</li> <li>-1 is an alternate value for the very last column or row</li> <li>-1 indicates a placeholder for empty grid cells</li> </ul> </article> <article class="article"> <h3>6. Is it possible to make an element a grid container using "display: inline-grid"?</h3> <ul> <li><strong>Yes</strong></li> <li>No</li> </ul> </article> <article class="article"> <h3>7. The "grid-template" property is a shorthand for properties:</h3> <ul> <li><strong>grid-template-rows</strong></li> <li>grid-template-flow</li> <li>grid-auto-flow</li> <li><strong>grid-template-columns</strong></li> <li><strong>grid-template-areas</strong></li> </ul> </article> <article class="article"> <h3>8. The space between two adjacent grid lines (row or column) is called...</h3> <ul> <li>Grid container</li> <li>Grid line</li> <li>Grid item</li> <li>Grid area</li> <li>Grid cell</li> <li><strong>Grid track</strong></li> </ul> </article> <article class="article"> <h3>9. What is the default behavior of an item in CSS Grid?</h3> <ul> <li>The item will automatically span the entire grid</li> <li>The item will not be displayed in the grid</li> <li><strong>The item will span 1 track by default</strong></li> <li>The item will span as many columns or rows as there are in the grid</li> </ul> </article> <article class="article"> <h3>10. What is the effect of setting the grid-template-columns to "subgrid" in a nested grid?</h3> <ul> <li>It creates a new set of columns for the nested grid</li> <li><strong>The nested grid inherits the track definition from the parent grid</strong></li> <li>It removes all columns from the nested grid</li> <li>It applies a predefined layout to the nested grid</li> </ul> </article> <article class="article"> <h3>11. What is the space enclosed by four grid lines called?</h3> <ul> <li><strong>Grid area</strong></li> <li>Grid track</li> <li>Grid cell</li> <li>Grid line</li> <li>Grid item</li> <li>Grid container</li> </ul> </article> <article class="article"> <h3>12. What shorthand sets values for both "align-items" and "justify-items"?</h3> <ul> <li>align-justify</li> <li><strong>place-items</strong></li> <li>grid-items</li> <li>row-items</li> </ul> </article> <article class="article"> <h3>13. What values can be assigned to the grid-area property?</h3> <ul> <li>Any number of grid lines defining the location of the grid area</li> <li><strong>Two grid lines to define the location of the grid area</strong></li> <li><strong>Four grid lines to define the location of the grid area</strong></li> <li>Six grid lines to define the location of the grid area</li> <li>A color code for the background color of the grid area</li> </ul> </article> <article class="article"> <h3>14. Which element becomes the parent when the "display: grid" property is applied?</h3> <ul> <li>Grid line</li> <li><strong>Grid container</strong></li> <li>Grid cell</li> <li>Grid area</li> <li>Grid track</li> <li>Grid item</li> </ul> </article> <article class="article"> <h3>15. Which of the following statements about "fr" are correct?</h3> <ul> <li><strong>fr is a shorthand for fraction</strong></li> <li><strong>fr is a unit of measurement</strong></li> <li><strong>fr represents the free space within a grid container</strong></li> <li>The code "grid-template-columns: repeat(3, 1fr);" creates one column that will take up 3 widths of the parent</li> <li><strong>"grid-template-columns: repeat(3, 1fr);" and "grid-template-columns: 1fr 1fr 1fr;" are equivalent records</strong></li> </ul> </article> <article class="article"> <h3>16. Which option is the shorthand for the statement: grid-template-columns: 150px 150px 150px;?</h3> <ul> <li><strong>grid-template-columns: repeat(3, 150px);</strong></li> <li>grid-template-columns: rep(150px, 3);</li> <li>grid-columns: 150px * 3;</li> <li>grid-template-columns: 1fr 1fr 1fr, 150px;</li> </ul> </article> <article class="article"> <h3>17. Which property vertically aligns elements inside a grid container?</h3> <ul> <li>justify-items</li> <li>justify-content</li> <li><strong>align-items</strong></li> <li>place-items</li> </ul> </article> <article class="article"> <h3>18. Which syntax is used to name grid lines in CSS grid?</h3> <ul> <li><strong>grid-template-columns: [start] 1fr [middle] 2fr [end];</strong></li> <li>grid-template-columns: start:: 1fr, middle:: 2fr, end:: 1fr;</li> <li>grid-template-columns: \'start\' 1fr \'middle\' 2fr \'end\';</li> <li>grid-template-columns: &lt;start&gt; 1fr &lt;middle&gt; 2fr &lt;end&gt;;</li> </ul> </article> <article class="article"> <h3>19. Which statement is incorrect regarding the "place-self" property?</h3> <ul> <li><strong>The default value is center</strong></li> <li>The value "auto" can be used to reset previously set values</li> <li>If one value is specified, it is set for both properties</li> <li>A shorthand property for "justify-self" and "align-self"</li> </ul> </article> <article class="article"> <h3>20. Which track sizes can you use to create a grid?</h3> <ul> <li>Fixed track sizes</li> <li>Flexible track sizes</li> <li><strong>Both of them</strong></li> <li>None of them</li> </ul> </article> ','<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>[St1] Preprocessors. SASS</h1> <strong>28 вопросов. Выполнил на 86 баллов из 100</strong> </article> <article class="article"> <h3>1. Can colors be mixed in Sass using the mix function like `color: mix(red, blue)`?</h3> <ul> <li><strong></strong>Yes</li> <li>No</li> </ul> </article> <article class="article"> <h3>2. Can string values in Sass be used without quotes?</h3> <ul> <li><strong>Yes</strong></li> <li>No</li> </ul> </article> <article class="article"> <h3>3. Choose the correct spellings for the nested rules:</h3> <ul> <li><strong>.article{ .title{ color: red; }}</strong></li> <li><strong>.article{ &.title{ color: red; }}</strong></li> <li>.article{ &&.title{ color: red; }}</li> </ul> </article> <article class="article"> <h3>4. Choose the correct statement:</h3> <ul> <li><strong>The CSS file can be renamed to SCSS and it will still be valid</strong></li> <li>The CSS file can be renamed to SASS and it will still be valid</li> <li>All statements are incorrect</li> </ul> </article> <article class="article"> <h3>5. How are placeholder selectors called correctly?</h3> <ul> <li>@include title;</li> <li>@import title;</li> <li>@extend title;</li> <li><strong>@extend %title;</strong></li> <li>@import %title;</li> <li>@include %title;</li> </ul> </article> <article class="article"> <h3>6. How do you declare a local variable as global within its scope?</h3> <ul> <li>$width: 5em global;</li> <li><strong>$width: 5em !global;</strong></li> <li>$width: 5em !glob;</li> </ul> </article> <article class="article"> <h3>7. How is a variable declared correctly in SASS?</h3> <ul> <li><strong>$width: 5em;</strong></li> <li>width: 5em;</li> <li>$width = 5em;</li> </ul> </article> <article class="article"> <h3>8. How is a variable declared with a default value in SASS?</h3> <ul> <li>$width: 5em default;</li> <li>$width: 5em;</li> <li><strong>$width: 5em !default;</strong></li> <li>$width: 5em !=default;</li> </ul> </article> <article class="article"> <h3>9. Identify the valid Sass rules and directives from the list below:</h3> <ul> <li><strong>@import</strong></li> <li><strong>@media</strong></li> <li><strong>@extend</strong></li> <li><strong>@at-root</strong></li> <li><strong>@debug</strong></li> <li>@try</li> <li>@catch</li> <li>@warning</li> <li><strong>@warn</strong></li> <li><strong>@error</strong></li> </ul> </article> <article class="article"> <h3>10. In Sass, the `&`operator is used to...</h3> <ul> <li><strong>link to parent</strong></li> <li>logical AND</li> <li>reference to the value of a variable in memory</li> <li>There is no correct answer</li> </ul> </article> <article class="article"> <h3>11. Is it possible to use parentheses in expressions?</h3> <ul> <li>You cannot use parentheses in expressions</li> <li>Parentheses do not affect the order of operations in expressions</li> <li><strong>Parentheses can be used to determine the order of actions in expressions</strong></li> </ul> </article> <article class="article"> <h3>12. Is it possible to use variable interpolations in comments?</h3> <ul> <li><strong>Yes</strong></li> <li>No</li> </ul> </article> <article class="article"> <h3>13. Is the following code valid: `.funky { font: 20px/24px fantasy {weight: bold;}}`?</h3> <ul> <li>No</li> <li><strong>Yes</strong></li> </ul> </article> <article class="article"> <h3>14. Lists do not support any special operations. There are list functions to work with them. Is the statement true?</h3> <ul> <li><strong>Yes</strong></li> <li>No</li> </ul> </article> <article class="article"> <h3>15. Select SASS benefits:</h3> <ul> <li><strong>Fully CSS compatible</strong></li> <li><strong>Rich functionality</strong></li> <li>Industry support</li> <li><strong>Great community</strong></li> <li>BEM</li> </ul> </article> <article class="article"> <h3>16. Select supported data types in SassScript:</h3> <ul> <li><strong>numbers</strong></li> <li><strong>text strings</strong></li> <li><strong>colors</strong></li> <li><strong>null</strong></li> <li><strong>lists of values</strong></li> <li><strong>arrays (Maps)</strong></li> <li>Heaps</li> <li>undefined</li> </ul> </article> <article class="article"> <h3>17. Select the correct statements regarding maps in Sass:</h3> <ul> <li><strong>Unlike lists, maps must always be enclosed in parentheses and must always be separated by commas</strong></li> <li>Maps are the same as lists</li> <li><strong>Keys and values in maps can be any SassScript objects</strong></li> <li>Keys and values in maps can only be strings</li> </ul> </article> <article class="article"> <h3>18. Select the correct statements regarding operations in SassScript:</h3> <ul> <li><strong>All data types support equality operators ( == and != )</strong></li> <li><strong>SassScript allows you to perform mathematical operations with different types (1px + 2rem + 3em + 4vh)</strong></li> <li><strong>Comparison operators ( &lt;, &gt;, &lt;=, &gt;=, ==, != ) are also supported for numbers</strong></li> <li><strong>SassScript supports standard arithmetic operations on numbers (+, -, *, /, %).</strong></li> <li><strong>10px * 3px is a valid operation</strong></li> </ul> </article> <article class="article"> <h3>19. Select the correct statement regarding Sass\'s compressed output mode:</h3> <ul> <li>In compression mode, Sass will output what is written in sass as it is</li> <li><strong>In compressed mode, Sass will output style written in a single line without extra characters and with the smallest CSS representation of the color</strong></li> <li>There is no right answer</li> </ul> </article> <article class="article"> <h3>20. Select the valid control directives and loop expressions used in Sass:</h3> <ul> <li><strong>@if</strong></li> <li><strong>@for</strong></li> <li><strong>@each</strong></li> <li><strong>@while</strong></li> <li>@goto</li> </ul> </article> <article class="article"> <h3>21. What is the correct syntax for interpolation in SassScript?</h3> <ul> <li>`@{$var}`</li> <li><strong>`#{$var}`</strong></li> <li>`${$var}`</li> <li>There is no correct answer</li> </ul> </article> <article class="article"> <h3>22. What is the result of this `content: "Foo " + Bar;` operation?</h3> <ul> <li><strong>content: "Foo Bar";</strong></li> <li>content: Foo Bar;</li> <li>The</li> </ul> </article> <article class="article"> <h3>23. What is the syntax for AND, OR, and NOT logical operators in SassScript?</h3> <ul> <li><strong>and, or, not</strong></li> <li>&&, ||, !</li> <li>Such operators are not supported</li> <li>There is no correct answer</li> </ul> </article> <article class="article"> <h3>24. Which command enables interactive mode for SASS in the console?</h3> <ul> <li>npm run sass -i</li> <li><strong>sass -i</strong></li> <li>sass -interactive</li> </ul> re is no correct answer  </article> <article class="article"> <h3>25. Which comment will always remain in the compiled CSS even after compression?</h3> <ul> <li>// Something important</li> <li>//! Something important</li> <li><strong>/* Something important */</strong></li> <li>/*! Something important */</li> <li>&lt;-- Something important --&gt;</li> </ul> </article> <article class="article"> <h3>26. Which entry for placeholder selectors is correct?</h3> <ul> <li>.title{color:red}</li> <li>#title{color:red}</li> <li><strong>%title{color:red}</strong></li> <li>@title{color:red}</li> </ul> </article> <article class="article"> <h3>27. Which of the following are valid ways to call the hsl function in Sass?</h3> <ul> <li><strong>`hsl($hue: 0, $saturation: 100%, $lightness: 50%)`</strong></li> <li><strong>`hsl(0, 100%, 50%)`</strong></li> <li>`hsl( $lightness: 50%, $hue: 0, $saturation: 100%)`</li> <li>There is no correct answer</li> </ul> </article> <article class="article"> <h3>28. Which operators are available for working with lists in Sass?</h3> <ul> <li>map</li> <li><strong>nth</strong></li> <li><strong>append</strong></li> <li><strong>join</strong></li> <li>merge</li> <li>as</li> </ul> </article> ','<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>[St1] CSS Modules And Some CSS New Features</h1> <strong>27 вопросов. Выполнил на 81 баллов из 100</strong> </article> <article class="article"> <h3>1. Does CSS nesting represent pseudo-elements?</h3> <ul> <li>Not all of them, only :before and :after</li> <li>Not all of them, only ::before and ::after</li> <li><strong>No</strong></li> <li>Yes</li> </ul> </article> <article class="article"> <h3>2. How does Anchor positioning work?</h3> <ul> <li>It positions an element as fixed at certain place on the page</li> <li>It creates an anchor element in the corner of the page to be able to go to the top at any moment</li> <li>It positions popover trigger element on the page</li> <li><strong>It anchors an absolutely-positioned element to one or more other elements on the page</strong></li> </ul> </article> <article class="article"> <h3>3. How to compose styles in CSS modules?</h3> <ul> <li>Import one CSS file to another</li> <li><strong>Use \'composes\' property to apply existing styles to the indicated selector in a new styles block</strong></li> <li>Use compose() CSS function to apply existing styles to the indicated selector in a new styles block</li> <li>There is no styles composition in CSS modules</li> </ul> </article> <article class="article"> <h3>4. How to style the third child within a parent element that has the "container" class, without concern for the impact on other elements\' styles? (checkbox)</h3> <ul> <li><strong>.container:nth-child(3)</strong></li> <li>.container::nth-child(3)</li> <li><strong>.container:nth-child(2n+1)</strong></li> <li><strong>.container:nth-child(odd)</strong></li> </ul> </article> <article class="article"> <h3>5. How to switch to the global scope within a CSS Module?</h3> <ul> <li>::global</li> <li><strong>:global</strong></li> <li>--global</li> <li>:to-global</li> </ul> </article> <article class="article"> <h3>6. How trigonometric functions can be used in CSS?</h3> <ul> <li><strong>For animation, blueprints, etc.</strong></li> <li>To satisfy your maths teacher by using trigonometry in your everyday life</li> <li>For colors mixing</li> <li>There are no Trigonometric functions in CSS</li> </ul> </article> <article class="article"> <h3>7. Is it possible to mix colors using CSS?</h3> <ul> <li>Yes, by using pseudo-class :mix-colors()</li> <li>Yes, by using CSS function mix-color()</li> <li><strong>Yes, by using CSS function color-mix()</strong></li> <li>No</li> </ul> </article> <article class="article"> <h3>8. What are CSS Modules?</h3> <ul> <li>A JavaScript file in which there are scripts for styles management</li> <li><strong>A CSS file in which all class names and animation names are scoped locally by default</strong></li> <li>A CSS file in which all class names and animation names are scoped globally by default</li> <li>A block of styles in a CSS file</li> </ul> </article> <article class="article"> <h3>9. What are CSS viewport units?</h3> <ul> <li><strong>Units which help size elements against the viewport size</strong></li> <li>Units of viewport sizing used only in Media queries</li> <li>Units for images sizing</li> <li>Non of the above</li> </ul> </article> <article class="article"> <h3>10. What does the CSS pseudo-class :has() do?</h3> <ul> <li>A built-in method of Array object for checking if value is included in array</li> <li>A CSS pseudo-class which helps to check if selector has specific characters</li> <li><strong>A CSS pseudo-class which allows to refine the main selector with an additional one</strong></li> <li>A CSS pseudo-class which manages styles for elements when the user interacts with it by hovering it</li> </ul> </article> <article class="article"> <h3>11. What effects of interpolation exist for color-mix() in CSS?</h3> <ul> <li>rgb, hex, pms, cmyk</li> <li>completely, halfly, partly</li> <li>linear, radial, repeating, conic</li> <li><strong>lch, oklch, hsl, hwb, etc.</strong></li> </ul> </article> <article class="article"> <h3>12. What functions are used for Anchor positioning? (checkbox)</h3> <ul> <li><strong>anchor()</strong></li> <li>create-anchor()</li> <li>set-anchor-size()</li> <li><strong>anchor-size()</strong></li> </ul> </article> <article class="article"> <h3>13. What HTML element can be a trigger for popover appearance?</h3> <ul> <li>Any HTML element with \'popover\' attribute</li> <li><strong>&lt;button&gt; or &lt;input type="button"&gt; with \'popovertarget\' attribute</strong></li> <li>&lt;button&gt; or &lt;input type="button"&gt; with \'popover\' attribute</li> <li>Any HTML element with \'popovertarget\' attribute</li> </ul> </article> <article class="article"> <h3>14. What is a CSS nesting?</h3> <ul> <li>It\'s CSS function for styling nests</li> <li><strong>It\'s a CSS feature which helps to get access to child elements to style them within parental style</strong></li> <li>It\'s a CSS feature which gives an ability to nest one element into another</li> <li>None of the above</li> </ul> </article> <article class="article"> <h3>15. What is a Dynamic viewport unit?</h3> <ul> <li>Viewport unit which represents the viewport height when the address bar UI hasn\'t shrunk its size yet</li> <li>Viewport unit which represents the viewport height after the address bar UI shrunk its size</li> <li><strong>Viewport unit which uses any of the small, in-between, and large units based on whether the address bar UI is shrunk or not</strong></li> <li>Unit which is relative to the size of the initial containing block, which is the root element of a web page</li> </ul> </article> <article class="article"> <h3>16. What is a nesting selector?</h3> <ul> <li>::</li> <li>--</li> <li>&&</li> <li><strong>&</strong></li> </ul> </article> <article class="article"> <h3>17. What is lvh?</h3> <ul> <li><strong>Viewport unit which represents the viewport height when the address bar UI hasn\'t shrunk its size yet</strong></li> <li>Viewport unit which represents the viewport height after the address bar UI shrunk its size</li> <li>Viewport unit which is dynamic</li> <li>It\'s CSS function</li> </ul> </article> <article class="article"> <h3>18. What is Popover?</h3> <ul> <li><strong>A global attribute used to designate an element as a popover element</strong></li> <li>A HTML tag to create popover element</li> <li>A HTML element which triggers popover appearance</li> <li>A global attribute which converts any HTML element into popover trigger</li> </ul> </article> <article class="article"> <h3>19. What length units do Container Queries use?</h3> <ul> <li>vh,vw, vmin, vmax</li> <li>px, rem, em, %</li> <li><strong>cqw, cqh, cqi, cqb, cqmin, cqmax</strong></li> <li>All of the above</li> </ul> </article> <article class="article"> <h3>20. What statements about Anchor positioning are correct? (checkbox)</h3> <ul> <li>Anchor positioning helps to create tooltip or popover by anchoring it to target element using only HTML and CSS</li> <li>It lets to create anchor-links to certain part of the page to use the, for example, in menu</li> <li><strong>Anchored element can be positioned relative to its target element using \'anchor()\' function in CSS file</strong></li> <li>None of the above</li> </ul> </article> <article class="article"> <h3>21. What statements about composition in CSS modules are correct? (checkbox)</h3> <ul> <li><strong>You can compose styles to new selector from existing one</strong></li> <li>You can\'t compose styles from different files</li> <li><strong>Composition is very important for the DRY principle</strong></li> <li><strong>You can use \'composes\' property with styles in a current file or from another by passing the path to it</strong></li> </ul> </article> <article class="article"> <h3>22. What statements about Container Queries are correct? (checkbox)</h3> <ul> <li><strong>Container Queries is the same as Media Queries with the same syntax</strong></li> <li><strong>@container rule lets style elements according to size of their parental container</strong></li> <li>@container rule sets a certain element as container to other elements on the page</li> <li><strong>Container Queries lets to create adaptive design without reference to viewport</strong></li> </ul> </article> <article class="article"> <h3>23. What statements about modern CSS are correct? (checkbox)</h3> <ul> <li><strong>Trigonometric functions are available for use in CSS</strong></li> <li><strong>You can mix any colors using mix color function</strong></li> <li>There are no new added features to CSS since releasing of Flexbox</li> <li>CSS is about to be replaced with SCSS</li> </ul> </article> <article class="article"> <h3>24. What statements about Style Queries are correct? (checkbox)</h3> <ul> <li>It\'s HTML tag for managing application\'s styles</li> <li><strong>The computed style of a parent element can be queried using style queries</strong></li> <li>It\'s syntax style(computed_value)</li> <li><strong>It works together with Container Queries</strong></li> </ul> </article> <article class="article"> <h3>25. What statements about \'svh\' are correct? (checkbox)</h3> <ul> <li><strong>It\'s a small viewport unit</strong></li> <li>svh represents the viewport height when the address bar UI hasn\'t shrunk its size yet</li> <li><strong>svh represents the viewport height after the address bar UI shrunk its size</strong></li> <li>It\'s dynamic viewport</li> </ul> </article> <article class="article"> <h3>26. What Trigonometric functions are available in CSS?</h3> <ul> <li>calc, min, max, translate, rotate</li> <li>pow, sqrt, hypot, log, exp</li> <li><strong>sin, cos, tan, asin, acos, atan, atan2</strong></li> <li>There are no Trigonometric functions in CSS</li> </ul> </article> <article class="article"> <h3>27. What viewport units exist?</h3> <ul> <li>cqw, cqh, cqi, cqb, cqmin, cqmax</li> <li>px, rem, em, %</li> <li><strong>vh,vw, vmin, vmax, svh, lvh, dvh</strong></li> <li>All of the above</li> </ul> </article> ','<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>[St1] Media Queries & Responsive</h1> <strong>30 вопросов. Выполнил на 93 баллов из 100</strong> </article> <article class="article"> <h3>1. 1rem is equal to the font-size value defined in HTML.</h3> <ul> <li><strong>true</strong></li> <li>false</li> </ul> </article> <article class="article"> <h3>2. Are media queries case-sensitive?</h3> <ul> <li>yes</li> <li><strong>no</strong></li> </ul> </article> <article class="article"> <h3>3. Can you write a single media query for multiple types of devices simultaneously?</h3> <ul> <li><strong>yes</strong></li> <li>no</li> </ul> </article> <article class="article"> <h3>4. In what ways can media queries be added within a CSS file? (checkbox)</h3> <ul> <li><strong>inside a CSS file using the @media rule</strong></li> <li><strong>Inside a CSS file using the @import rule</strong></li> <li>Inside a CSS file using the @query rule</li> </ul> </article> <article class="article"> <h3>5. In what ways can media queries be added within an HTML file? (checkbox)</h3> <ul> <li><strong>using the &lt;link&gt; tag</strong></li> <li>using the &lt;style&gt; tag with the @import rule</li> <li><strong>using the &lt;style&gt; tag with the @media rule</strong></li> <li>using the &lt;style&gt; tag with the @query rule</li> </ul> </article> <article class="article"> <h3>6. In which element is the "media" attribute incorrectly specified?</h3> <ul> <li><strong>&lt;img src="flowers.jpg" alt="flowers" media="max: 500, min: 350"&gt;</strong></li> <li>&lt;link href="mobile.css" rel="stylesheet" media="screen and (max-width: 750px)"&gt;</li> <li>&lt;source srcset="flowers.jpg" media="(max-width: 1400px)"&gt;</li> <li>&lt;a href="att_a_media.asp?output=print" media="print and (resolution:300dpi)"&gt;...&lt;/a&gt;</li> </ul> </article> <article class="article"> <h3>7. In which types of files can media queries be used? (checkbox)</h3> <ul> <li><strong>html</strong></li> <li><strong>css</strong></li> <li><strong>js</strong></li> </ul> </article> <article class="article"> <h3>8. Is there a difference between the concepts of adaptive design and responsive design?</h3> <ul> <li>there is no difference</li> <li>adaptive design is used for mobile layouts, while responsive design is for desktop browsers</li> <li><strong>responsive design is a fluid layout where content smoothly compresses when the width is reduced, while adaptive design renders differently based on the device used</strong></li> <li>adaptive design is a fluid layout where content smoothly compresses when the width is reduced, while responsive design renders differently based on the device used</li> </ul> </article> <article class="article"> <h3>9. Parentheses in media queries are used for changing the order of operations.</h3> <ul> <li>true</li> <li>used, but not for changing the order of operations</li> <li><strong>used for changing the order of operations as well as specifying target device types</strong></li> </ul> </article> <article class="article"> <h3>10. Select relative units of measurement in CSS: (checkbox)</h3> <ul> <li><strong>%</strong></li> <li>pt</li> <li><strong>rem</strong></li> <li>cm</li> <li><strong>em</strong></li> <li>pc</li> <li><strong>vh</strong></li> </ul> </article> <article class="article"> <h3>11. Select the attributes related to the viewport: (checkbox)</h3> <ul> <li><strong>user-scalable</strong></li> <li>initial-width</li> <li><strong>height</strong></li> <li><strong>maximum-scale</strong></li> </ul> </article> <article class="article"> <h3>12. Select the correct options for the "orientation" parameter values in a media query: (checkbox)</h3> <ul> <li><strong>portrait</strong></li> <li>vertical</li> <li>horizontal</li> <li><strong>landscape</strong></li> </ul> </article> <article class="article"> <h3>13. Select the correct statement:</h3> <ul> <li>for adaptive design (according to the CSS specification), it is necessary to create a minimum of 3 layouts (for mobile devices, tablets, and computers)</li> <li>for responsive design (according to the CSS specification), it is necessary to create a minimum of 3 layouts (for mobile devices, tablets, and computers)</li> <li>both statements are correct</li> <li><strong>both statements are incorrect</strong></li> </ul> </article> <article class="article"> <h3>14. Select the correct statement:</h3> <ul> <li>mobile-first is an approach used exclusively for mobile device layouts</li> <li><strong>there is a Desktop-first approach where layout is primarily designed for computers.</strong></li> <li>both answers are correct</li> </ul> </article> <article class="article"> <h3>15. Select the correct statement:</h3> <ul> <li>@media queries in .sass cannot be nested within each other</li> <li><strong>@media queries in .sass can contain variables</strong></li> <li>both statements are incorrect</li> </ul> </article> <article class="article"> <h3>16. Select the correct statement:</h3> <ul> <li>for responsive design, it is better to use the width property for elements rather than max-width and min-width</li> <li>the following media query inclusion in .css will be correct: &lt;link rel="stylesheet" media="screen and (max-width: 543px)" href="styles-xs.css"&gt;</li> <li><strong>the @media directive in .sass works the same way as in .css, with some additional features</strong></li> <li>there is no correct answer</li> </ul> </article> <article class="article"> <h3>17. Select the types of media queries: (checkbox)</h3> <ul> <li><strong>all</strong></li> <li><strong>screen</strong></li> <li>mobile</li> <li><strong>speech</strong></li> <li><strong>print</strong></li> </ul> </article> <article class="article"> <h3>18. The font size of the &lt;ul&gt; element is 40px, and the font size of the nested &lt;li&gt; element is 0.8em. What is the font size in pixels for &lt;li&gt;?</h3> <ul> <li>24px</li> <li><strong>32px</strong></li> <li>40px</li> <li>50px</li> <li>48px</li> </ul> </article> <article class="article"> <h3>19. The &lt;html&gt; tag does not have a font size set. The &lt;body&gt; font size is 1rem, the &lt;div&gt; nested within it has a font size of 0.8rem, and the &lt;p&gt; nested within it has a font size of 0.5rem. Select the true statements: (checkbox)</h3> <ul> <li><strong>the font size of &lt;body&gt; will be 16px</strong></li> <li>the font size of &lt;div&gt; will be 16px</li> <li>the font size of &lt;div&gt; will be 8px</li> <li>the font size of &lt;p&gt; will be 6.4px</li> <li><strong>the font size of &lt;p&gt; will be 8px</strong></li> </ul> </article> <article class="article"> <h3>20. True or false: Flow is a behavior where the content of a page takes up more height, and elements start moving downwards (when the screen size decreases).</h3> <ul> <li>true</li> <li><strong>false</strong></li> </ul> </article> <article class="article"> <h3>21. True or false: In the CSS specification, there are documented breakpoints for designing adaptive and responsive layouts, which should be used to separate layouts for mobile, tablet, and desktop.</h3> <ul> <li>true</li> <li><strong>false</strong></li> </ul> </article> <article class="article"> <h3>22. True or false: The comma operator (,) is used to combine multiple conditions in a media query. In this case, the result will be true if each condition is true.</h3> <ul> <li>true</li> <li><strong>false</strong></li> </ul> </article> <article class="article"> <h3>23. What can be used in creating adaptive web design? (checkbox)</h3> <ul> <li><strong>media queries</strong></li> <li><strong>flexbox</strong></li> <li><strong>css grid</strong></li> <li><strong>flexible images (using min-width, max-width)</strong></li> </ul> </article> <article class="article"> <h3>24. What characteristics can be used in creating media queries? (checkbox)</h3> <ul> <li><strong>min-height, max-height</strong></li> <li><strong>min-width, max-width</strong></li> <li><strong>orientation</strong></li> <li><strong>resolution</strong></li> </ul> </article> <article class="article"> <h3>25. What is the purpose of the viewport meta tag?</h3> <ul> <li>to include a media query in JavaScript</li> <li>to determine a media query for a table</li> <li><strong>to control the viewport size and scaling</strong></li> <li>to ensure a media query works correctly in IE7</li> </ul> </article> <article class="article"> <h3>26. What is Viewport?</h3> <ul> <li>a meta tag applied to pages for browsers that do not support media queries</li> <li>a logical operator for media queries</li> <li><strong>the visible area of a web page without scrolling</strong></li> <li>the area of a web page, including page scrolling</li> </ul> </article> <article class="article"> <h3>27. What units of measurement are better to use for responsive design?</h3> <ul> <li><strong>relative</strong></li> <li>absolute</li> </ul> </article> <article class="article"> <h3>28. Which logical operators work in a media query string? (checkbox)</h3> <ul> <li><strong>and</strong></li> <li>as</li> <li>&&</li> <li><strong>only</strong></li> <li><strong>not</strong></li> </ul> </article> <article class="article"> <h3>29. Which of the following template categories, as defined by Luke Wroblewski, are commonly used in creating responsive web designs?</h3> <ul> <li>Mostly Fluid</li> <li>Column Drop</li> <li>Layout Shifter</li> <li>Tiny Tweaks</li> <li>Off Canvas</li> <li>combinations of templates (e.g., Column Drop and Off Canvas)</li> <li>none of the above</li> <li><strong>all of them</strong></li> </ul> </article> <article class="article"> <h3>30. Within which media queries will properties be supported at a screen width of 768px? (checkbox)</h3> <ul> <li><strong>@media (min-width: 640px) {...}</strong></li> <li><strong>@media (max-width: 980px) {...}</strong></li> <li>@media (max-width: 640px) {...}</li> <li>@media (min-width: 980px) {...}</li> </ul> </article> ',"<article class=\"article\"> <div id=\"link-to-quiz\" class=\"btn-back\">назад</div> <h1>[St1] HTML Form</h1> <strong>27 вопросов. Выполнил на 74 баллов из 100</strong> </article> <article class=\"article\"> <h3>1. Can the details of an HTTP request sent from a form be viewed in a browser?</h3> <ul> <li>HTTP-requests don't display at all, no one can view it</li> <li>Yes, using any IDE (ex. Vs Code, WebStorm...)</li> <li><strong>Yes, using any developer tools (ex. Chrome Dev Tools)</strong></li> <li>Only GET-requests are available for viewing at browsers' developer tools (ex. Chrome Dev Tools)</li> </ul> </article> <article class=\"article\"> <h3>2. Choose the relevant attributes of the &lt;form&gt; tag: (checkbox)</h3> <ul> <li><strong>enctype</strong></li> <li><strong>method</strong></li> <li>for</li> <li><strong>target</strong></li> <li>type</li> <li><strong>action</strong></li> <li><strong>name</strong></li> <li>stylesForm</li> </ul> </article> <article class=\"article\"> <h3>3. Is it required to notice what type of data transfer protocol the website uses if you fill a form with personal data and passwords?</h3> <ul> <li>No, it doesn't matter</li> <li>Yes, it should be HTTP</li> <li><strong>Yes, it should be HTTPS</strong></li> </ul> </article> <article class=\"article\"> <h3>4. Select the relevant attributes for the &lt;input&gt; tag: (checkbox)</h3> <ul> <li><strong>type</strong></li> <li><strong>checked</strong></li> <li><strong>disabled</strong></li> <li>for</li> <li>target</li> </ul> </article> <article class=\"article\"> <h3>5. What additional attribute is required for an &lt;input&gt; field with type='email' to validate the email format?</h3> <ul> <li>pattern</li> <li>multiple</li> <li>required</li> <li><strong>Additional attribute is not required</strong></li> </ul> </article> <article class=\"article\"> <h3>6. What attribute defines a path to file or page where form data handler is located?</h3> <ul> <li>src</li> <li>href</li> <li><strong>action</strong></li> <li>route</li> </ul> </article> <article class=\"article\"> <h3>7. What attributes from the list below relate to built-in HTML5 form validation? (checkbox)</h3> <ul> <li><strong>'required' in tag &lt;input&gt;</strong></li> <li><strong>'pattern' used with regular expressions</strong></li> <li><strong>'minlength' and 'maxlength' in tag &lt;textarea&gt;&lt;/textarea&gt;</strong></li> <li><strong>'type' defined a data type for the field</strong></li> </ul> </article> <article class=\"article\"> <h3>8. What data transfer protocols are used in HTML-forms? (checkbox)</h3> <ul> <li><strong>TCP/IP</strong></li> <li>UDP</li> <li>FTP</li> <li>DNS</li> <li><strong>HTTP</strong></li> <li><strong>HTTPS</strong></li> <li>NTP</li> <li>SSH</li> </ul> </article> <article class=\"article\"> <h3>9. What happens in a browser if a website using HTTPS includes an HTML form with an action URL set to HTTP protocol?</h3> <ul> <li>Page will not run as it's invalid page</li> <li><strong>Page will run but a security problems notification will be thrown when sending the form</strong></li> <li>Page will run as usual</li> </ul> </article> <article class=\"article\"> <h3>10. What is attribute 'enctype' in &lt;form&gt; used for?</h3> <ul> <li><strong>It defines a type of sent data for a server</strong></li> <li>It defines for a server that there is no validation for the form</li> <li>This attribute doesn't exist</li> </ul> </article> <article class=\"article\"> <h3>11. What statement is correct?</h3> <ul> <li>Client side form validation is safety enough</li> <li>Validation executed in a browser is called 'server side validation'</li> <li><strong>Client side validation can be divided into two types: form validation by HTML5 and JavaScript validation</strong></li> <li>JavaScript validation isn't client side validation</li> </ul> </article> <article class=\"article\"> <h3>12. What statement is correct?</h3> <ul> <li><strong>Tag &lt;button&gt; accepts 'type' attribute with values 'submit', 'reset' or 'button'</strong></li> <li>Tag &lt;form&gt; has nested tag &lt;button&gt; with type='button' attribute. When clicking this button form data will be sent to a page defined in 'action' attribute of &lt;form&gt; element</li> <li>&lt;form&gt; can't be styled using tag &lt;style&gt;&lt;/style&gt;</li> <li>&lt;form&gt; defines path and way of sending data by 'enctype' and 'target' attributes</li> </ul> </article> <article class=\"article\"> <h3>13. What statement is correct?</h3> <ul> <li>There is not possible to limit maximum number of characters for text field &lt;input&gt;</li> <li>&lt;textarea&gt; field is invalid if number of input's characters is greater than 'minlength' value and the less than 'maxlength' value</li> <li><strong>&lt;textarea&gt; doesn't accept attribute 'pattern'</strong></li> <li>Range of valid values can be limited only using JS for &lt;input&gt; with attribute type='number'</li> <li>None of the above</li> </ul> </article> <article class=\"article\"> <h3>14. What statement is correct about attribute 'customValidate' for the &lt;form&gt; tag?</h3> <ul> <li><strong>This attribute doesn't exist</strong></li> <li>It turns off automatic validation by browser and Constraint Validation API support</li> <li>It turns off automatic validation by browser and turns on Constraint Validation API support</li> <li>It turns off built-in error messages and lets to add custom messages instead using JS</li> </ul> </article> <article class=\"article\"> <h3>15. What statement is correct about attribute 'novalidate' for the &lt;form&gt; tag?</h3> <ul> <li>This attribute doesn't exist</li> <li><strong>It turns off automatic validation by browser and Constraint Validation API support</strong></li> <li>It turns off automatic validation by browser and turns on Constraint Validation API support</li> <li>It turns off built-in error messages and lets to add custom messages instead using JS</li> </ul> </article> <article class=\"article\"> <h3>16. What statement is correct regarding the CSS pseudo-class :valid?</h3> <ul> <li>It works with &lt;table&gt;</li> <li>It lets to display a message for user if the field is invalid</li> <li>Modern browsers don't support it</li> <li><strong>It's used with tags &lt;form&gt; and &lt;input&gt;</strong></li> </ul> </article> <article class=\"article\"> <h3>17. What statement is correct regarding the &lt;datalist&gt; tag?</h3> <ul> <li>This tag is outdated and not used nowadays</li> <li><strong>It can contain list of option (&lt;option&gt;)</strong></li> <li>It's a single tag</li> <li>It is linked with a text field by adding attribute 'value'</li> </ul> </article> <article class=\"article\"> <h3>18. What statements are correct? (checkbox)</h3> <ul> <li>Tag &lt;textarea&gt; doesn't accept attribute 'required'</li> <li><strong>Attribute 'required' is used for validation and says that this field is mandatory</strong></li> <li>There are only 2 pseudo-classes in CSS3 which let to style form relating to its configuration and state</li> <li><strong>If a browser doesn't support certain input type for &lt;input&gt; (ex., type='email'), this field acts as a common text input</strong></li> </ul> </article> <article class=\"article\"> <h3>19. What statements are correct about &lt;input&gt; with attribute type='date'? (checkbox)</h3> <ul> <li><strong>It creates an input field where a user can put a date</strong></li> <li><strong>It lets a user to use a special interface called a date picker</strong></li> <li>Returned value includes time, year, month and day</li> <li>Date is not supported by all browsers</li> <li><strong>This type of &lt;input&gt; has additional attribute 'step'</strong></li> </ul> </article> <article class=\"article\"> <h3>20. What statements are correct about &lt;input&gt; with attribute type='password'? (checkbox)</h3> <ul> <li><strong>It's a one line text field where every character is replaced with another character, in general it's an asterisk or a dot</strong></li> <li><strong>If this field has attribute 'pattern', its value is valid only in case of passing the check</strong></li> <li>You can't use &lt;label&gt; with this type of field</li> <li><strong>Attribute 'autocomplete' is required for a password manager to be able to add password automatically</strong></li> <li><strong>Attribute 'disabled' doesn't work for this type of &lt;input&gt;</strong></li> </ul> </article> <article class=\"article\"> <h3>21. What statements are correct about the &lt;fieldset&gt; tag? (checkbox)</h3> <ul> <li>It's a single tag</li> <li><strong>It can be used only within tag &lt;form&gt;&lt;/form&gt;</strong></li> <li><strong>It has property 'display: block' by default</strong></li> <li><strong>Tag &lt;legend&gt; can be used inside tag &lt;fieldset&gt;&lt;/fieldset&gt;</strong></li> </ul> </article> <article class=\"article\"> <h3>22. What statements are correct regarding the &lt;select&gt; tag? (checkbox)</h3> <ul> <li><strong>Closing tag is required</strong></li> <li>Tag &lt;form&gt; can't be a parent for tag &lt;select&gt;</li> <li><strong>Tag's attribute 'multiple' means that there is more than one option can be selected from list</strong></li> <li><strong>Only tags &lt;option&gt; are available to be nested into tag &lt;select&gt;</strong></li> <li><strong>Tag &lt;select&gt; can have 'size' attribute</strong></li> </ul> </article> <article class=\"article\"> <h3>23. What statements describe GET method of HTML-form incorrectly? (checkbox)</h3> <ul> <li><strong>Method GET sends request from server to browser</strong></li> <li><strong>Data is sent in a request body when using GET method</strong></li> <li><strong>Method GET sends request to server using GET-protocol for that</strong></li> <li>Method GET requests resource from server, form data to be added to the request's address</li> </ul> </article> <article class=\"article\"> <h3>24. What statements describe POST method of HTML-form correctly? (checkbox)</h3> <ul> <li><strong>Data is sent in a request body when using POST method</strong></li> <li><strong>Request includes additional headers as Content-Length and Content-Type when using POST method as opposed to GET method</strong></li> <li><strong>Request by POST method can not be viewed in a browser</strong></li> <li><strong>Request by POST method can only be viewed using additional software</strong></li> </ul> </article> <article class=\"article\"> <h3>25. Which values for the 'method' attribute of the &lt;form&gt; tag are valid? (checkbox)</h3> <ul> <li><strong>get</strong></li> <li><strong>post</strong></li> <li>put</li> <li>pull</li> <li>delete</li> </ul> </article> <article class=\"article\"> <h3>26. Which of the following is not a valid HTML table tag?</h3> <ul> <li>\"td\"</li> <li><strong>\"tf\"</strong></li> <li>\"th\"</li> <li>\"tr\"</li> </ul> </article> <article class=\"article\"> <h3>27. Which 'type' attribute value should be set for an &lt;input&gt; tag to create an interactive element that allows selecting only one option from a list?</h3> <ul> <li>checkbox</li> <li>file</li> <li>hidden</li> <li>image</li> <li>password</li> <li><strong>radio</strong></li> <li>reset</li> <li>text</li> </ul> </article> ","<article class=\"article\"> <div id=\"link-to-quiz\" class=\"btn-back\">назад</div> <h1>[St1] DOM Api</h1> <strong>34 вопроса. Выполнил на 82 баллов из 100</strong> </article> <article class=\"article\"> <h3>1. Are 'parentElement' and 'parentNode' properties always equal?</h3> <ul> <li>Yes, always, since they return the same value</li> <li>Never, as they return different values</li> <li><strong>Often, but not always, depending on the element they belong to</strong></li> <li>No, 'parentElement' property doesn't exist</li> <li>No, 'parentNode' property doesn't exist</li> </ul> </article> <article class=\"article\"> <h3>2. A tag &lt;input&gt; belongs to the 'HTMLInputElement' class. It inherits methods and properties from: (checkbox)</h3> <ul> <li><strong>HTMLInputElement</strong></li> <li><strong>HTMLElement</strong></li> <li><strong>Element</strong></li> <li>Window</li> <li><strong>EventTarget</strong></li> <li><strong>Node</strong></li> <li>Document</li> <li>Object</li> </ul> </article> <article class=\"article\"> <h3>3. Can the DOM properties be typed and accept any values except strings?</h3> <ul> <li>Yes, they accept values with the boolean type</li> <li>Yes, they accept values with types string and object</li> <li><strong>Yes, they accept values with the types boolean, string and object</strong></li> <li>No, they can't</li> </ul> </article> <article class=\"article\"> <h3>4. Does the specification allow to add HTML tags after the &lt;body&gt; closing tag?</h3> <ul> <li>Yes, but these tags will be rendered after &lt;body&gt; in the DOM tree</li> <li>Yes, but these tags will be rendered inside &lt;body&gt;</li> <li>Yes, but they will not render</li> <li>No, and such tags will not render</li> <li><strong>No, but they will render inside &lt;body&gt;</strong></li> <li>No, but they will render after &lt;body&gt; in the DOM tree</li> </ul> </article> <article class=\"article\"> <h3>5. Does the tag &lt;body&gt; accept the type attribute following the specification as in the example: &lt;body id=\"body\" type=\"JS\"&gt;?</h3> <ul> <li>Yes, and you can refer to it</li> <li>Yes, but only using the special method 'elem.setAttribute(name, value)'</li> <li>Yes, but only using the special method 'elem.getAttribute(name)'</li> <li><strong>Not at all</strong></li> </ul> </article> <article class=\"article\"> <h3>6. How do you obtain the value of an element's 'data-name' attribute?</h3> <ul> <li><strong>elem.dataset(name)</strong></li> <li>elem.getData(name)</li> <li>elem.getAttribute(name)</li> <li>elem.attributes(name)</li> </ul> </article> <article class=\"article\"> <h3>7. How many types of nodes exist according following the documentation?</h3> <ul> <li>3</li> <li>4</li> <li>7</li> <li>10</li> <li><strong>12</strong></li> </ul> </article> <article class=\"article\"> <h3>8. Is a comment considered a node in HTML?</h3> <ul> <li>Yes, it is a text node</li> <li>No, it's not a node</li> <li>Yes, comments are separate elements/tags</li> <li><strong>Yes, comments are nodes of type 'comment'</strong></li> </ul> </article> <article class=\"article\"> <h3>9. Is it mandatory under HTML standards to include a &lt;tbody&gt; within a &lt;table&gt;>?</h3> <ul> <li>Yes, because the table won't render correctly without it</li> <li><strong>Yes, it's required but the table can still be created without it</strong></li> <li>No, it should not be inside a table according to the standard</li> <li>No, it's required outside of a table according to the standard</li> </ul> </article> <article class=\"article\"> <h3>10. Is the condition 'elem.childNodes[elem.childNodes.length] === elem.lastChild' always truthy?</h3> <ul> <li>Yes, always</li> <li><strong>Never</strong></li> <li>Only when lastChild promises to be on its best behavior</li> <li>Yes, if the elem has child nodes</li> </ul> </article> <article class=\"article\"> <h3>11. Is the condition truthy: document.body.parentNode === document.documentElement?</h3> <ul> <li><strong>Yes</strong></li> <li>No</li> </ul> </article> <article class=\"article\"> <h3>12. Is the statement 'elem.childNodes[0] === elem.firstChild' always true?</h3> <ul> <li>Yes, always</li> <li>Never</li> <li><strong>It's true if the elem has child nodes</strong></li> </ul> </article> <article class=\"article\"> <h3>13. It's a root \"abstract\" class. Instances of this class can't be created. The class is a basis for all events. - What class is this statement about?</h3> <ul> <li>Node</li> <li><strong>EventTarget</strong></li> <li>Element</li> <li>HTMLElement</li> <li>None of the above</li> </ul> </article> <article class=\"article\"> <h3>14. Look at the code example. What of the following tags are descendants of &lt;body&gt; in a browser? (checkbox)</h3> <pre>\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n  &lt;div&gt;Start&lt;/div&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;\r\n      &lt;b&gt;Info 1&lt;/b&gt;\r\n    &lt;/li&gt;\r\n    &lt;li&gt;\r\n      &lt;b&gt;Info 2&lt;/b&gt;\r\n    &lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</pre> <ul> <li>&lt;html&gt;</li> <li>&lt;body&gt;</li> <li><strong>&lt;div&gt;</strong></li> <li><strong>&lt;ul&gt;</strong></li> <li><strong>&lt;li&gt;</strong></li> <li><strong>&lt;b&gt;</strong></li> <li>&lt;head&gt;</li> <li>&lt;script&gt;</li> </ul> </article> <article class=\"article\"> <h3>15. Look at the code. What of the following tags are child nodes of &lt;html&gt; in browser? (checkbox)</h3> <pre>\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n  &lt;div&gt;Start&lt;/div&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;\r\n      &lt;b&gt;Info 1&lt;/b&gt;\r\n    &lt;/li&gt;\r\n    &lt;li&gt;\r\n      &lt;b&gt;Info 2&lt;/b&gt;\r\n    &lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</pre> <ul> <li>&lt;html&gt;</li> <li><strong>&lt;body&gt;</strong></li> <li>&lt;div&gt;</li> <li>&lt;ul&gt;</li> <li>&lt;li&gt;</li> <li>&lt;b&gt;</li> <li><strong>&lt;head&gt;</strong></li> <li>&lt;script&gt;</li> </ul> </article> <article class=\"article\"> <h3>16. What does a property elem.childNodes store?</h3> <ul> <li>Element</li> <li>Function</li> <li>Object</li> <li>Array</li> <li><strong>Collection</strong></li> </ul> </article> <article class=\"article\"> <h3>17. What does describe the method 'document.write' correctly? (checkbox)</h3> <ul> <li><strong>It works only when the page is loading</strong></li> <li>The document's content will remain the same if the method has been called after the page is loaded</li> <li><strong>It will overwrite the document's content if the method has been called after the page is loaded</strong></li> <li>This method doesn't exist</li> </ul> </article> <article class=\"article\"> <h3>18. What is an HTML tag in the Document Object Model?</h3> <ul> <li><strong>Object</strong></li> <li>Variable</li> <li>Text</li> <li>Link</li> </ul> </article> <article class=\"article\"> <h3>19. What is stored in a document.head.nextElementSibling property?</h3> <ul> <li>html</li> <li>[object Object]</li> <li>Nothing, code will throw an error</li> <li>head</li> <li><strong>body</strong></li> </ul> </article> <article class=\"article\"> <h3>20. What method adds a new node following the existing node?</h3> <ul> <li>append</li> <li>prepend</li> <li>before</li> <li><strong>after</strong></li> <li>replaceWith</li> </ul> </article> <article class=\"article\"> <h3>21. What method adds a new node to the end of the existing element?</h3> <ul> <li><strong>append</strong></li> <li>prepend</li> <li>before</li> <li>after</li> <li>replaceWith</li> </ul> </article> <article class=\"article\"> <h3>22. What method returns the value of the specified element attribute?</h3> <ul> <li>hasAttribute()</li> <li><strong>getAttribute()</strong></li> <li>setAttribute()</li> <li>attributes()</li> </ul> </article> <article class=\"article\"> <h3>23. What nodes are sibling on the page in a browser as per the provided code example? (checkbox)</h3> <pre>\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n&lt;div&gt;Start&lt;/div&gt;\r\n&lt;ul&gt;\r\n  &lt;li&gt;\r\n    &lt;b&gt;Info 1&lt;/b&gt;\r\n  &lt;/li&gt;\r\n  &lt;li&gt;\r\n    &lt;b&gt;Info 2&lt;/b&gt;\r\n  &lt;/li&gt;\r\n&lt;/ul&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</pre> <ul> <li><strong>&lt;head&gt; and &lt;body&gt;</strong></li> <li>&lt;html&gt; and &lt;body&gt;</li> <li>&lt;div&gt; and &lt;body&gt;</li> <li><strong>&lt;div&gt; and &lt;ul&gt;</strong></li> <li><strong>&lt;li&gt; and &lt;li&gt;</strong></li> <li>&lt;li&gt; and &lt;b&gt;</li> <li>&lt;b&gt; and &lt;b&gt;</li> </ul> </article> <article class=\"article\"> <h3>24. What should be used as the first parameter for the method 'elem.insertAdjacentHTML(value1,value2)' to add a &lt;html&gt; tag following the 'elem'?</h3> <ul> <li>beforebegin</li> <li>afterbegin</li> <li>beforeend</li> <li>afterend</li> <li>\"beforebegin\"</li> <li>\"afterbegin\"</li> <li>\"beforeend\"</li> <li><strong>\"afterend\"</strong></li> <li>afterparty</li> </ul> </article> <article class=\"article\"> <h3>25. What the difference is between the methods 'Element.append' and 'Node.appendChild'? (checkbox)</h3> <ul> <li><strong>'append' returns nothing, and 'appendChild' return the added node object</strong></li> <li><strong>'append' can add several nodes and strings when 'appendChild' can add only one node</strong></li> <li>'appendChild' is deprecated as well as 'insertBefore', 'replaceChild', 'removeChild'. The 'append' method is recommended for using together with 'prepend', 'before', 'after', 'remove', 'replaceWith'</li> <li>'appendChild' accepts strings together with nodes, 'append' accepts only nodes</li> <li>There is no difference</li> </ul> </article> <article class=\"article\"> <h3>26. What will be the result of the following code execution: someDiv.innerHTML += 'hi'?</h3> <ul> <li>It will add 'hi' to the existing text content</li> <li>It replaces the content of 'someDiv' with 'hi'</li> <li><strong>It will overwrite the text content of 'someDiv' element together with its child elements and replace all with a concatenation of the old content and 'hi'</strong></li> <li>It will throw an error</li> <li>It says 'hi' back, because someDiv is friendly</li> <li>It will replace the someDiv element with 'hi'</li> </ul> </article> <article class=\"article\"> <h3>27. Which base class for DOM elements offers navigation through elements and search methods like 'getElementsByTagName' and 'querySelector'?</h3> <ul> <li>Node</li> <li>EventTarget</li> <li><strong>Element</strong></li> <li>HTMLElement</li> <li>None of the above</li> </ul> </article> <article class=\"article\"> <h3>28. Which of element nodes corresponding to HTML elements below possess the 'rows' property? (checkbox)</h3> <ul> <li><strong>table</strong></li> <li>tr</li> <li>th</li> <li>tfoot</li> <li>td</li> <li><strong>tbody</strong></li> <li>thead</li> </ul> </article> <article class=\"article\"> <h3>29. Which of the expressions are correct and really change a page's style? (checkbox)</h3> <ul> <li>document.body.style.margin = 10;</li> <li>document.body.style.margin = '10';</li> <li><strong>document.body.style.margin = '10px';</strong></li> <li>document.body.style.margin = 10px;</li> <li><strong>document.body.style.marginTop = '1rem';</strong></li> </ul> </article> <article class=\"article\"> <h3>30. Which of the following classes inherit from the 'Element' class? (checkbox)</h3> <ul> <li><strong>SVGElement</strong></li> <li><strong>HTMLInputElement</strong></li> <li><strong>XMLElement</strong></li> <li><strong>HTMLElement</strong></li> <li><strong>HTMLAnchorElement</strong></li> <li><strong>HTMLBodyElement</strong></li> </ul> </article> <article class=\"article\"> <h3>31. Which of the following methods exist for the Element.classList property? (checkbox)</h3> <ul> <li><strong>add</strong></li> <li><strong>remove</strong></li> <li><strong>toggle</strong></li> <li>replaceWith</li> <li><strong>contains</strong></li> </ul> </article> <article class=\"article\"> <h3>32. Which of the following options are nodes? (checkbox)</h3> <ul> <li><strong>comments</strong></li> <li><strong>text nodes</strong></li> <li><strong>HTML tags</strong></li> <li>JavaScript nodes</li> <li><strong>document</strong></li> </ul> </article> <article class=\"article\"> <h3>33. Which of the following options return an elements collection? (checkbox)</h3> <ul> <li>document.getElementById(id)</li> <li>elem.getElementById(id)</li> <li>document.querySelector('div')</li> <li>document.querySelectorAll('div')[0]</li> <li><strong>document.querySelectorAll('div')</strong></li> <li>elem.matches('elem')</li> <li><strong>document.getElementsByName(name)</strong></li> </ul> </article> <article class=\"article\"> <h3>34. Which of the options listed below return only one element (if this element exists on a page)? (checkbox)</h3> <ul> <li><strong>document.getElementById(id)</strong></li> <li>document.getElementsByName(name)</li> <li><strong>document.querySelector('div')</strong></li> <li><strong>document.querySelectorAll('div')[0]</strong></li> <li>document.querySelectorAll('div')</li> <li>elem.matches('elem')</li> <li>elem.getElementsByTagName('div')</li> </ul> </article> ",'<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>[St1] DOM Events</h1> <strong>31 вопросов. Выполнил на 84 баллов из 100</strong> </article> <article class="article"> <h3>1. Can you differentiate between a real DOM event and a synthetic event created programmatically?</h3> <ul> <li>Yes, by checking event.defaultEvent</li> <li>Yes, by calling DOM method isDefaultEvent()</li> <li><strong>Yes, by checking event.isTrusted</strong></li> <li>No</li> </ul> </article> <article class="article"> <h3>2. event.eventPhase property returns a number. What does it mean?</h3> <ul> <li>If this event can bubble</li> <li>How many phases this event has</li> <li><strong>Which phase of the event flow is currently being evaluated</strong></li> <li>Number of event handlers</li> </ul> </article> <article class="article"> <h3>3. How to remove an event handler which is added by an addEventListener()?</h3> <ul> <li>eventListener = null</li> <li>clearEventListener</li> <li><strong>removeEventListener</strong></li> <li>deleteEventListener</li> </ul> </article> <article class="article"> <h3>4. Identify the correct touch event types supported in JavaScript. (checkbox)</h3> <ul> <li>touchenter</li> <li><strong>touchstart</strong></li> <li><strong>touchmove</strong></li> <li>touchleave</li> <li><strong>touchend</strong></li> <li><strong>touchcancel</strong></li> </ul> </article> <article class="article"> <h3>5. Is it true that all events in JavaScript bubble by default?</h3> <ul> <li><strong>Yes</strong></li> <li>No</li> <li>Yes, they love to attend parties</li> </ul> </article> <article class="article"> <h3>6. TouchEvent interface is a UIEvent which is dispatched when the state of contacts with a touch-sensitive surface changes. Is this statement correct?</h3> <ul> <li><strong>Yes</strong></li> <li>No</li> <li>Partly correct, it\'s not UIEvent</li> <li>Partly correct, it follows not the state of contacts</li> </ul> </article> <article class="article"> <h3>7. What are the advantages of using the addEventListener() method? (checkbox)</h3> <ul> <li><strong>Handler can be removed at any time</strong></li> <li><strong>One method call can set unlimited number of handlers to one event</strong></li> <li><strong>Event handler\'s behavior can be configured (e.g. it can be called once)</strong></li> <li><strong>Adding an unlimited number of handlers to one event</strong></li> </ul> </article> <article class="article"> <h3>8. What are the different ways to add an event handler in JavaScript? (checkbox)</h3> <ul> <li><strong>HTML event handler attribute (inline)</strong></li> <li><strong>DOM property</strong></li> <li>DOM node</li> <li><strong>Special DOM method addEventListener()</strong></li> </ul> </article> <article class="article"> <h3>9. What can be set as an event handler?</h3> <ul> <li>Function</li> <li>Object</li> <li><strong>Function and object</strong></li> <li>None of the above</li> </ul> </article> <article class="article"> <h3>10. What does a constructor \'new Event\' do?</h3> <ul> <li><strong>Creates an event object</strong></li> <li>Creates an event handler</li> <li>Creates an element for the event passed as argument</li> </ul> </article> <article class="article"> <h3>11. What does preventDefault() method do?</h3> <ul> <li>Creates new event</li> <li>Stop element\'s bubbling / capturing</li> <li><strong>Prevent element\'s default behavior</strong></li> <li>Prevent element\'s bubbling</li> </ul> </article> <article class="article"> <h3>12. What does the expression \'elem.target !== elem.currentTarget\' typically evaluate to?</h3> <ul> <li>true</li> <li>false</li> <li><strong>It can be both - true or false</strong></li> <li>Always returns true because it\'s very confident</li> </ul> </article> <article class="article"> <h3>13. What does the \'target\' property of an event object signify?</h3> <ul> <li>It reference to the deepest element to which the event handler has been attached</li> <li><strong>It reference to the deepest element onto which the event was dispatched</strong></li> <li>It stores this event handler</li> <li>None of above</li> </ul> </article> <article class="article"> <h3>14. What Drag Event Types exist? (checkbox)</h3> <ul> <li><strong>drag</strong></li> <li><strong>dragend</strong></li> <li><strong>dragenter</strong></li> <li>dragcenter</li> <li><strong>dragover</strong></li> <li><strong>dragleave</strong></li> <li><strong>dragstart</strong></li> <li><strong>drop</strong></li> </ul> </article> <article class="article"> <h3>15. What events related to focus does FocusEvent interface represent? (checkbox)</h3> <ul> <li><strong>focus</strong></li> <li>reblur</li> <li><strong>focusin</strong></li> <li>unfocus</li> <li><strong>blur</strong></li> <li><strong>focusout</strong></li> </ul> </article> <article class="article"> <h3>16. What is an event bubbling?</h3> <ul> <li><strong>Propagation of the event from a child element to its parent elements</strong></li> <li>Propagation of the event from a trigger element to its sibling elements</li> <li>Propagation of the event from a parent element to its child element</li> <li>No propagation</li> <li>A party for events where they all get to bubble</li> </ul> </article> <article class="article"> <h3>17. What is an event capturing?</h3> <ul> <li>Propagation of the event from a child element to its parent elements</li> <li>Propagation of the event from a trigger element to its sibling elements</li> <li><strong>Propagation of the event from a parent element to its child element</strong></li> <li>No propagation</li> <li>When events go on a secret mission</li> </ul> </article> <article class="article"> <h3>18. What is an event delegation?</h3> <ul> <li>Consistent list of invoked events</li> <li><strong>When an event handler is put only on a parent element and this element\'s child elements use this handler when the event happens</strong></li> <li>When an event handler is put only on a child element and this element\'s parent elements use this handler when the event happens</li> <li>When an event handler is put only on one element and this element\'s sibling elements use this handler when the event happens</li> <li>A formal meeting where events decide their leader</li> </ul> </article> <article class="article"> <h3>19. What is an \'event\' object in an event handler?</h3> <ul> <li>Object where the event occurred</li> <li><strong>Operational System Events</strong></li> <li>Global scope object which is passed as an argument to the event handler</li> <li>There is no \'event\' object in the event handler</li> </ul> </article> <article class="article"> <h3>20. What is the maximum number of arguments that the addEventListener() method can accept when used on an EventTarget?</h3> <ul> <li>0</li> <li>1</li> <li>2</li> <li><strong>3</strong></li> <li>4</li> <li>5</li> </ul> </article> <article class="article"> <h3>21. What methods are available on a JavaScript event object? (checkbox)</h3> <ul> <li>preventPropagation</li> <li><strong>preventDefault</strong></li> <li><strong>stopPropagation</strong></li> <li>stopDefault</li> </ul> </article> <article class="article"> <h3>22. What methods can stop bubbling? (checkbox)</h3> <ul> <li>elem.removeEventListener()</li> <li><strong>event.stopPropagation()</strong></li> <li>elem.clearEventListener()</li> <li><strong>event.stopImmediatePropagation()</strong></li> <li>event.eventPhase()</li> </ul> </article> <article class="article"> <h3>23. What Mouse Event Types exist? (checkbox)</h3> <ul> <li><strong>click</strong></li> <li><strong>contextmenu</strong></li> <li><strong>dblclick</strong></li> <li>mouseenter</li> <li>rightClick</li> <li><strong>mouseup</strong></li> <li>mouseCenter</li> </ul> </article> <article class="article"> <h3>24. What properties are specific to a KeyboardEvent object? (checkbox)</h3> <ul> <li><strong>altKey</strong></li> <li><strong>shiftKey</strong></li> <li>keyLocale</li> <li><strong>key</strong></li> </ul> </article> <article class="article"> <h3>25. What properties does an event object have? (checkbox)</h3> <ul> <li><strong>target</strong></li> <li><strong>currentTarget</strong></li> <li>bubble</li> <li><strong>eventPhase</strong></li> <li><strong>type</strong></li> </ul> </article> <article class="article"> <h3>26. What properties does TouchEvent have? (checkbox)</h3> <ul> <li>touch</li> <li><strong>touches</strong></li> <li>touchcancel</li> <li><strong>targetTouches</strong></li> <li>touchleave</li> <li><strong>changedTouches</strong></li> </ul> </article> <article class="article"> <h3>27. Which method is most recommended for adding an event handler in JavaScript?</h3> <ul> <li>Use an HTML event handler attribute (inline)</li> <li>Use a DOM property</li> <li>Use a DOM node</li> <li><strong>Use a special DOM method addEventListener()</strong></li> </ul> </article> <article class="article"> <h3>28. Which of the following are valid focus event types in JavaScript? (checkbox)</h3> <ul> <li><strong>blur</strong></li> <li>reblur</li> <li>unfocus</li> <li><strong>focus</strong></li> </ul> </article> <article class="article"> <h3>29. Which of the following is a property of the DragEvent object?</h3> <ul> <li>drag</li> <li><strong>dataTransfer</strong></li> <li>dragend</li> <li>dragenter</li> </ul> </article> <article class="article"> <h3>30. Which properties are part of the MouseEvent object? (checkbox)</h3> <ul> <li><strong>altKey</strong></li> <li>enterKey</li> <li><strong>button</strong></li> <li><strong>clientX</strong></li> <li>clientZ</li> <li><strong>screenX</strong></li> <li><strong>screenY</strong></li> </ul> </article> <article class="article"> <h3>31. Which sets of arguments are valid for the addEventListener() method? (checkbox)</h3> <ul> <li><strong>type, listener, useCapture</strong></li> <li>only listener</li> <li><strong>type, listener</strong></li> <li>only options</li> <li>only type</li> <li><strong>type, listener, options</strong></li> </ul> </article> ','<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>[St1] Test Git & GitHub #2</h1> <strong>25 вопросов. Выполнил на 96 баллов из 100</strong> </article> <article class="article"> <h3>1. After modifying some existing files in a repository, you decide to discard the changes. What command can you use? (checkbox)</h3> <ul> <li><strong>git restore</strong></li> <li>git undo</li> <li>git clean</li> <li><strong>git checkout</strong></li> <li>None of these</li> </ul> </article> <article class="article"> <h3>After pushing commits to the remote repository for the first time using the command \'git push -u origin master\', what shorthand command can you use in future?</h3> <ul> <li>git push master</li> <li>git push origin</li> <li>Same as before, git push -u origin master</li> <li><strong>git push</strong></li> <li>None of these</li> </ul> </article> <article class="article"> <h3>After staging a series of changes to the index, which command could you use to review them prior to a commit?</h3> <ul> <li>git diff</li> <li><strong>git diff --cached</strong></li> <li>git diff --HEAD</li> <li>git status -v -v</li> <li>None of these</li> </ul> </article> <article class="article"> <h3>2. How can you check your current git version?</h3> <ul> <li>git --v</li> <li><strong>git --version</strong></li> <li>git --option</li> <li>git --current</li> <li>None of these</li> </ul> </article> <article class="article"> <h3>3. How can you display a list of files added or modified in a specific commit?</h3> <ul> <li>Find the commit in the remote repository, as that\'s the only place that kind of information is stored.</li> <li><strong>Use the diff-tree command with the commit hash.</strong></li> <li>Run git commit --info with the commit hash.</li> <li>None of these</li> </ul> </article> <article class="article"> <h3>4. How could you squash multiple commits together without using git merge --squash?</h3> <ul> <li>Caching</li> <li>You can\'t. git merge --squash is the only git command for that operation.</li> <li><strong>Rebasing</strong></li> <li>Reflogging</li> <li>None of these</li> </ul> </article> <article class="article"> <h3>5. How do you change the active branch to another?</h3> <ul> <li>git branch</li> <li><strong>git checkout</strong></li> <li>git change</li> <li>git go</li> </ul> </article> <article class="article"> <h3>How do you stage files for a commit?</h3> <ul> <li>git stage</li> <li><strong>git add</strong></li> <li>git track</li> <li>git commit</li> </ul> </article> <article class="article"> <h3>How do you supply a commit message to a commit?</h3> <ul> <li>git m \'Some changes\'</li> <li>git commit \'Some changes\'</li> <li>git m -commit \'Some changes\'</li> <li><strong>git commit -m \'Some changes\'</strong></li> </ul> </article> <article class="article"> <h3>How to check changes between commits?</h3> <ul> <li>git info --changes</li> <li>git show --changes</li> <li><strong>git diff</strong></li> <li>git changes</li> </ul> <article class="article"> <h3>6. If you cloned an existing git repository, what would happen?</h3> <ul> <li>A new copy would overwrite the central repository</li> <li><strong>A copy of the repository would be created on your local machine</strong></li> <li>Nothing, cloning is not a supported git function</li> <li>A copy of the repository would be created on the hosting platform</li> <li>None of these</li> </ul> </article> <article class="article"> <h3>7. In a situation where you have several commits for a single task, what is the most efficient way to restructure your commit history?</h3> <ul> <li>Cherry pick the related commits to another branch.</li> <li>Delete the task commits and recommit with a new message.</li> <li><strong>Squash the related commits together into a single coherent commit.</strong></li> <li>Stash the related commits under a new hash.</li> <li>None of these</li> </ul> </article> <article class="article"> <h3>8. Looking at the following commands, describe what is happening. <br>git checkout feature-user-location <br>git cherry-pick kj2342134sdf090093f0sdgasdf99sdfo992mmmf9921231</h3> <ul> <li>The commit is being tagged for release on the feature-user-location branch</li> <li>A commit is being copied from its original branch over to the feature-user-location branch</li> <li>The commit is being cherry picked as the new HEAD of the commit history</li> <li>A commit is being copied from the feature-user-location branch to the master branch</li> <li><strong>The branch is switched to the feature-user-location branch, and the specified commit is applied to the branch.</strong></li> <li>None of these</li> </ul> </article> <article class="article"> <h3>What are some advantages to using GIT?</h3> <ul> <li>It allows you to see what changes you made</li> <li>It allows you to easily roll back changes if needed</li> <li>Allows you to have a backup of your code and for others to have the ability to view, comment, and edit it</li> <li><strong>All of them</strong></li> </ul> </article> <article class="article"> <h3>9. What comes first, staging with git add . or committing with git commit?</h3> <ul> <li><strong>staging, then commiting</strong></li> <li>commiting, then staging</li> </ul> </article> <article class="article"> <h3>What command creates a new branch from the currently checked-out branch?</h3> <ul> <li>git -b checkout &lt;nameOfBranch&gt;</li> <li>git branch</li> <li>git checkout &lt;nameOfBranch&gt;</li> <li><strong>git checkout -b &lt;nameOfBranch&gt;</strong></li> <li>None of these</li> </ul> </article> <article class="article"> <h3>Which command should you use to initialize a new Git repository?</h3> <ul> <li>git start</li> <li>git new</li> <li><strong>git init</strong></li> <li>git install</li> </ul> </article> <article class="article"> <h3>10. What command would let you modify your previous commit?</h3> <ul> <li><strong>git commit --amend</strong></li> <li>git commit --modify</li> <li>git commit --quickfix</li> <li>git commit --fix</li> <li>None of these</li> </ul> </article> <article class="article"> <h3>What commands would you use to force an overwrite of your local files with the master branch?</h3> <ul> <li>git pull --all <br>git reset --hard origin/master</li> <li>git pull -u origin master <br>git reset --hard master</li> <li>git pull origin master <br>git reset --hard origin/myCurrentBranch</li> <li><strong>git fetch --all <br>git reset --hard origin/master</strong></li> <li>None of these</li> </ul> </article> <article class="article"> <h3>11. What does \'git reset --soft HEAD^\' do to the git repository?</h3> <ul> <li>It deletes all previous commits and reset the repository history back to its initial state.</li> <li>It resets the working branch to the first commit.</li> <li>It keeps the HEAD at the current commit, but clears all previous commits.</li> <li><strong>It sets HEAD to the previous commit and leaves changes from the undone commit in the stage/index.</strong></li> <li>None of these</li> </ul> </article> <article class="article"> <h3>12. What information do Git reflogs (reference logs) store?</h3> <ul> <li>shell script pointers and keychain credentials</li> <li><strong>updates to branch tips and other references in the local repository</strong></li> <li>release notes and hook script values</li> <li>tag and versioning information</li> <li>None of these</li> </ul> </article> <article class="article"> <h3>13. What is the difference between a soft reset (git reset --soft) and a hard reset (git reset --hard) ?</h3> <ul> <li><strong>A soft reset only changes the commit that HEAD points to, while a hard reset resets the index and working tree to match the specified commit, discarding any changes.</strong></li> <li>A soft reset caches the old HEAD pointer, while a hard reset deletes it entirely.</li> <li>A hard reset changes only where the HEAD is pointing, while a soft reset changes the HEAD and index.</li> <li>A hard reset caches the old HEAD pointer, while a soft reset deletes it entirely.</li> <li>None of these</li> </ul> </article> <article class="article"> <h3>What is the difference between git fetch AND git pull</h3> <ul> <li>git fetch creates a new branch off the master branch, while git pull creates a new branch off the local repository\'s master branch.</li> <li>git pull downloads new data from a remote repository without integrating it into local files, while git fetch updates the current HEAD branch with the latest changes from the remote server.</li> <li>git fetch updates remote tracking branches with changes from a remote repository, while git pull updates remote tracking branches with changes from a remote repository and merges them into their corresponding local branches.</li> <li>git fetch downloads and merges data from the local repository, while git pull informs your colleagues you are about to make changes to the master branch.</li> <li><strong>None of these</strong></li> </ul> </article> <article class="article"> <h3>14. What Language is used in GIT?</h3> <ul> <li><strong>C</strong></li> <li>C++</li> <li>C#</li> <li>Java</li> <li>None of these</li> </ul> </article> <article class="article"> <h3>15. What option can you use to apply git configurations across your entire git environment?</h3> <ul> <li>--all</li> <li>--master</li> <li><strong>--global</strong></li> <li>--update</li> <li>None of these</li> </ul> </article> <article class="article"> <h3>16. What\'s a shortcut to staging all the changes you have in the current directory and all sub directories?</h3> <ul> <li>git stage --all</li> <li>git stage .</li> <li>git add --all</li> <li><strong>git add .</strong></li> </ul> </article> <article class="article"> <h3>17. What\'s the git command that downloads your repo from GitHub to your computer?</h3> <ul> <li>git fork</li> <li><strong>git clone</strong></li> <li>git copy</li> <li>git pull-request</li> <li>None of these</li> </ul> </article> <article class="article"> <h3>18. Which command will create a new branch called \'newbranch\'?</h3> <ul> <li>git create --branch=newbranch</li> <li>git make --branch=newbranch</li> <li>git checkout newbranch</li> <li><strong>git branch newbranch</strong></li> </ul> </article> <article class="article"> <h3>19. Which command uploads your code onto a remote repo?</h3> <ul> <li>git upload</li> <li><strong>git push</strong></li> <li>git send</li> <li>git pull-request</li> <li>None of these</li> </ul> </article> <article class="article"> <h3>20. Which Git command begins tracking of a new file?</h3> <ul> <li><strong>add</strong></li> <li>addfile</li> <li>begin</li> <li>track</li> <li>None of these</li> </ul> </article> <article class="article"> <h3>21. Which statement is true when you use the git add -A command?</h3> <ul> <li>Only new files in the working directory are staged to the index.</li> <li><strong>All new and updated files from the working directory are staged to the index.</strong></li> <li>All files in the working directory are staged to the index in alphabetical order.</li> <li>Only updated files in the working directory are staged to the index.</li> <li>None of these</li> </ul> </article> <article class="article"> <h3>Which ways are present in Git to integrate changes from one branch into another?</h3> <ul> <li>git integrate</li> <li><strong>git rebase</strong></li> <li>git switch</li> <li>git branch</li> <li><strong>git merge</strong></li> </ul> <article class="article"> <h3>Who is attributed with inventing Git?</h3> <ul> <li>Bill Gates</li> <li>Steve Jobs</li> <li>Kohsuke Kawaguchi</li> <li><strong>Linus Torvalds</strong></li> </ul> </article> <article class="article"> <h3>22. Why would the \'git rebase -i HEAD~10\' command be used?</h3> <ul> <li>To run a comparative search of the last 10 commits for differences</li> <li><strong>To list the last 10 commits and modify them with either the squash or fixup command</strong></li> <li>To delete the last 10 commits and reset the HEAD</li> <li>In order to locally cache the last 10 commits</li> <li>None of these</li> </ul> </article> <article class="article"> <h3>23. You find a bug in your project, but can\'t locate where it was introduced in the commit history. How would you diagnose this problem?</h3> <ul> <li>Manually backtrack through your commit history.</li> <li>Use git search -diff to compare all commits in your repository history.</li> <li>Run a git rebase to find the buggy commit.</li> <li><strong>Use git bisect to compare the buggy commit to an early commit that works as expected.</strong></li> <li>None of these</li> </ul> </article> <article class="article"> <h3>24. You have just completed rebasing your master branch and need to manually update the remote master, even though there is a merge conflict. How can you accomplish this?</h3> <ul> <li>git push --overwrite</li> <li>git push --update</li> <li>git push --assert</li> <li><strong>git push --force-with-lease</strong></li> <li>None of these</li> </ul> </article> <article class="article"> <h3>25. Your team lead needs a list of all commits that will be moved before you perform a rebase. Which command can you use to access that information?</h3> <ul> <li>git rebase -log</li> <li><strong>git rebase -i</strong></li> <li>git rebase -verbose</li> <li>git rebase -all</li> <li>None of these</li> </ul> </article> </article></article>','<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>[St1] Test Algorithms & Data structures</h1> <strong>26 вопросов. Выполнил на 92 баллов из 100</strong> </article> <article class="article"> <h3>1. Despite having a worst-case time complexity of O(n²), which algorithm is often more efficient in practice?</h3> <ul> <li>Merge Sort</li> <li><strong>Quick Sort</strong></li> <li>Bubble Sort</li> <li>Binary Search</li> </ul> </article> <article class="article"> <h3>2. In a Binary Search, what is the worst-case time complexity?</h3> <ul> <li>O(n)</li> <li><strong>O(log n)</strong></li> <li>O(n²)</li> <li>O(n log n)</li> </ul> </article> <article class="article"> <h3>3. In a Max Heap, the value of a parent node is __________ the values of its children.</h3> <ul> <li>less than</li> <li><strong>greater than</strong></li> <li>equal to</li> <li>not related to</li> </ul> </article> <article class="article"> <h3>4. In graph theory, what does \'Dijkstra\'s Algorithm\' compute?</h3> <ul> <li>Shortest path in a graph with cycles</li> <li>Maximum flow in a network</li> <li><strong>Shortest path between two nodes in a weighted graph</strong></li> <li>Connectivity in a disjoint graph</li> </ul> </article> <article class="article"> <h3>5. In which usage scenario do Linked List and Array show similar operation execution speed?</h3> <ul> <li>Adding an element to the end of the list / array</li> <li>Accessing an arbitrary element by index</li> <li>Modifying an arbitrary element by index</li> <li><strong>Outputting all list / array elements to the console</strong></li> <li>Removing an element from the list / array</li> </ul> </article> <article class="article"> <h3>6. In which usage scenarios do Linked List and Array show significantly different operation execution speeds? (checkbox)</h3> <ul> <li><strong>Accessing an arbitrary element by index</strong></li> <li><strong>Modifying an arbitrary element by index</strong></li> <li>Outputting all list / array elements to the console</li> <li>Removing an element from the list / array</li> </ul> </article> <article class="article"> <h3>7. What data structure only stores unique elements?</h3> <ul> <li><strong>Set</strong></li> <li>Map / Object</li> <li>Array</li> <li>Linked List</li> </ul> </article> <article class="article"> <h3>8. What data structure processes elements in the sequence they were added, adhering to the FIFO (First In First Out) principle?</h3> <ul> <li>Stack</li> <li><strong>Queue</strong></li> <li>Tree</li> <li>Linked List</li> </ul> </article> <article class="article"> <h3>9. What does amortized analysis of an algorithm generally provide?</h3> <ul> <li>Exact worst-case runtime</li> <li><strong>Average case runtime over a sequence of operations</strong></li> <li>Comparison with other algorithms</li> <li>Memory usage over time</li> </ul> </article> <article class="article"> <h3>10. What does \'hash collision\' mean in the context of a Hash Table?</h3> <ul> <li><strong>A function returning the same hash for different keys</strong></li> <li>An error when the table is full</li> <li>The process of adding a new element</li> <li>Deleting an element from the table</li> </ul> </article> <article class="article"> <h3>11. What is primarily described by Big-O Notation?</h3> <ul> <li>Memory usage of an algorithm</li> <li>Best-case scenario of an algorithm</li> <li><strong>Execution time or space used by an algorithm</strong></li> <li>Number of operations a CPU can perform</li> <li>The size of the headache you get when trying to understand algorithms</li> </ul> </article> <article class="article"> <h3>12. What is the average-case time complexity of Quick Sort?</h3> <ul> <li>O(n)</li> <li>O(n²)</li> <li><strong>O(n log n)</strong></li> <liO (log n)> </liO></ul> </article> <article class="article"> <h3>13. What is the best-case time complexity of Merge Sort?</h3> <ul> <li>O(n²)</li> <li><strong>O(n log n)</strong></li> <li>O(n)</li> <li>O(log n)</li> <li>O(😅) - when the data is already sorted by magic.</li> </ul> </article> <article class="article"> <h3>14. What is the most common use-case of a Trie data structure?</h3> <ul> <li>Sorting</li> <li><strong>Fast lookups and insertions</strong></li> <li>Balancing other trees</li> <li>Network routing</li> </ul> </article> <article class="article"> <h3>15. What is the time complexity of Bubble Sort in its best-case scenario?</h3> <ul> <li>O(n²)</li> <li>O(n log n)</li> <li><strong>O(n)</strong></li> <li>O(log n)</li> <li>O(🎈) - as fast as a bubble pops!</li> </ul> </article> <article class="article"> <h3>16. Which algorithm is commonly used for sorting a linked list in O(n log n) time?</h3> <ul> <li>Quick Sort</li> <li>Bubble Sort</li> <li><strong>Merge Sort</strong></li> <li>Insertion Sort</li> </ul> </article> <article class="article"> <h3>17. Which Array method checks that all elements satisfy some condition (predicate)?</h3> <ul> <li>.forEach()</li> <li>.check()</li> <li><strong>.every()</strong></li> <li>.some()</li> <li>.filter()</li> <li>magicMirror()</li> </ul> </article> <article class="article"> <h3>18. Which data structure is most convenient for working with nested properties / parameters?</h3> <ul> <li>Set</li> <li><strong>Map / Tree / Object</strong></li> <li>Array</li> <li>Linked List</li> </ul> </article> <article class="article"> <h3>19. Which data structure is typically used for implementing Last-In-First-Out (LIFO) operations?</h3> <ul> <li>Queue</li> <li>Heap</li> <li><strong>Stack</strong></li> <li>Linked List</li> </ul> </article> <article class="article"> <h3>20. Which data structure provides fast access by key, which doesn\'t necessarily have to be numeric or may have missing values in numeric order (e.g., “0”, “4”, “5”, “100”)?</h3> <ul> <li>Set</li> <li><strong>Map / Object</strong></li> <li>Array</li> <li>Linked List</li> </ul> </article> <article class="article"> <h3>21. Which data structure provides the fastest access to elements by key, where the key is numeric, starts from 0, and has no missing values in between?</h3> <ul> <li>Set</li> <li>Map / Object</li> <li><strong>Array</strong></li> <li>Linked List</li> </ul> </article> <article class="article"> <h3>22. Which elements are accessible in the traditional implementation of the Stack data structure? (checkbox)</h3> <ul> <li><strong>Only to the top of the stack (the last added element)</strong></li> <li>Only to the base of the stack (the first added element)</li> <li>Only to the second element after the top</li> <li>Access is available to any element of the stack</li> </ul> </article> <article class="article"> <h3>23. Which graph traversal algorithm employs a queue?</h3> <ul> <li>Depth-First Search</li> <li><strong>Breadth-First Search</strong></li> <li>Binary Search</li> <li>Merge Sort</li> </ul> </article> <article class="article"> <h3>24. Which internal (standard) JS structure is the most convenient and fastest to create a Stack?</h3> <ul> <li>Set</li> <li>Map / Tree / Object</li> <li><strong>Array</strong></li> <li>Linked List</li> </ul> </article> <article class="article"> <h3>25. Which of the following is not a characteristic of a Max Heap?</h3> <ul> <li><strong>Parent node is smaller than children</strong></li> <li>Complete binary tree</li> <li>Used in Heap Sort</li> <li>Parent node is larger than children</li> </ul> </article> <article class="article"> <h3>26. Which sorting algorithm is not stable by default?</h3> <ul> <li>Bubble Sort</li> <li>Merge Sort</li> <li><strong>Quick Sort</strong></li> <li>Insertion Sort</li> </ul> </article> ','<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>Test [St1] Clean-code</h1> <strong>24 вопроса. Выполнил на 88 баллов из 100</strong> </article> <article class="article"> <h3>1. Complete the statement correctly: "When naming project files, it is advisable to..."</h3> <ul> <li>... start the file name with a capital letter and use the underscore character as a delimiter.</li> <li><strong>... use lowercase characters and hyphen as a delimiter.</strong></li> <li>... use consistent naming style.</li> <li>... use uppercase characters and hyphen as a delimiter.</li> </ul> </article> <article class="article"> <h3>2. Explain a potential drawback of overly strict adherence to DRY principle.</h3> <ul> <li>Increased memory usage</li> <li><strong>Decreased code readability</strong></li> <li>Slower execution time</li> <li>Higher compilation time</li> </ul> </article> <article class="article"> <h3>3. Folding N identical sequences of commands into a loop is an example of which principle?</h3> <ul> <li>SoC</li> <li>KISS</li> <li><strong>DRY</strong></li> <li>SRP</li> </ul> </article> <article class="article"> <h3>4. Grouping repeating CSS rules from different {}-blocks into one is an example of applying which principle?</h3> <ul> <li>KISS</li> <li><strong>DRY</strong></li> <li>YAGNI</li> <li>SMACK</li> </ul> </article> <article class="article"> <h3>5. How can misapplication of the DRY principle lead to software inefficiency?</h3> <ul> <li>By duplicating more code</li> <li><strong>By overly abstracting code</strong></li> <li>By reducing modularity</li> <li>By avoiding code reviews</li> </ul> </article> <article class="article"> <h3>6. How does applying KISS principle benefit new team members?</h3> <ul> <li><strong>Reduces onboarding time</strong></li> <li>Increases code complexity</li> <li>Encourages individual work</li> <li>Limits creativity</li> </ul> </article> <article class="article"> <h3>7. How might the YAGNI principle conflict with future-proofing a software application?</h3> <ul> <li>By encouraging excessive refactoring</li> <li><strong>By discouraging forward-thinking design</strong></li> <li>By overemphasizing user feedback</li> <li>By minimizing code documentation</li> </ul> </article> <article class="article"> <h3>8. In what way can the YAGNI principle guide decision-making in Agile methodologies?</h3> <ul> <li>By emphasizing detailed planning</li> <li><strong>By prioritizing immediate requirements</strong></li> <li>It\'s great for deciding what to order for lunch</li> <li>By encouraging large releases</li> <li>By focusing on external APIs</li> </ul> </article> <article class="article"> <h3>9. In which scenario could the DRY principle be most beneficial?</h3> <ul> <li>When writing documentation</li> <li>When optimizing performance</li> <li><strong>When building reusable functions</strong></li> <li>When designing user interfaces</li> </ul> </article> <article class="article"> <h3>10. Putting repeating groups of styles in a separate class is an example of which principle?</h3> <ul> <li>Composition over inheritance</li> <li>KISS</li> <li>YAGNI</li> <li><strong>DRY</strong></li> </ul> </article> <article class="article"> <h3>11. What does the DRY principle help to reduce?</h3> <ul> <li><strong>Code size</strong></li> <li>Execution time</li> <li>Redundancies in code</li> <li>Compilation errors</li> </ul> </article> <article class="article"> <h3>12. What is accurate regarding the advice on using trailing whitespaces in code?</h3> <ul> <li>The number of spaces is not regulated in any way in the code style guide, as it does not refer to the quality of the code.</li> <li>The rule about avoiding trailing whitespaces is a relic of the past. The browser engine is indifferent to their presence in a file.</li> <li><strong>By avoiding spaces at the end of a line, you reduce the visible changes in Pull Request, which simplifies the review process.</strong></li> </ul> </article> <article class="article"> <h3>13. What is a risk when ignoring the KISS principle in a project\'s initial phase?</h3> <ul> <li>Faster development cycles</li> <li><strong>Increased technical debt</strong></li> <li>Faster Software Testing Cycles</li> <li>Simplified code architecture</li> </ul> </article> <article class="article"> <h3>14. What is the main focus of the KISS principle in software development?</h3> <ul> <li>Complex solutions</li> <li><strong>Simple and clear code</strong></li> <li>Multiple functionalities</li> <li>Long-term planning</li> </ul> </article> <article class="article"> <h3>15. What programming principle advocates against duplicating code solutions?</h3> <ul> <li>KISS</li> <li>YAGNI</li> <li><strong>DRY</strong></li> <li>SOLID</li> </ul> </article> <article class="article"> <h3>16. Which of the following are key benefits of adhering to the KISS principle in software development? (checkbox)</h3> <ul> <li><strong>Easier maintenance</strong></li> <li><strong>Faster development cycles</strong></li> <li>Increased complexity</li> <li>Improved scalability</li> </ul> </article> <article class="article"> <h3>17. Which of the following changes can be attributed to an example of following the DRY principle?</h3> <ul> <li>Breaking a long code into separate functions.</li> <li>Preference of the simplest implementation of the algorithm over too abstruse code.</li> <li><strong>Separating a combination of commands that occurs several times in the code into a separate function.</strong></li> <li>Removing an unused module from a project.</li> </ul> </article> <article class="article"> <h3>18. Which of the following options make the following statement true: "Using the \'left shift\' operator by 1 instead of simply multiplying by two:" (checkbox)</h3> <ul> <li><strong>... is a more performance efficient operation.</strong></li> <li><strong>... is an example of writing abstruse code.</strong></li> <li>... contradicts the YAGNI principle.</li> <li><strong>... contradicts the KISS principle.</strong></li> </ul> </article> <article class="article"> <h3>19. Which of the following phrases are variations of the KISS principle? (checkbox)</h3> <ul> <li><strong>keep it simple, silly</strong></li> <li><strong>keep it simple, stupid</strong></li> <li><strong>keep it short and simple</strong></li> <li><strong>keep it simple and straightforward</strong></li> <li><strong>keep it small and simple</strong></li> </ul> </article> <article class="article"> <h3>20. Which of the following statements are arguments in favor of the YAGNI principle? (checkbox)</h3> <ul> <li>Writing functionality up front will save time writing it in the future. Take advantage of every opportunity that arises.</li> <li><strong>Adding new unnecessary functionality can lead to a desire to add even more new unnecessary functionality, leading to a snowball effect.</strong></li> <li><strong>Your unnecessary new features may later prevent you from adding new, but already needed, features.</strong></li> <li>There is nothing wrong with implementing functionality up front. The main thing is that it should be covered by tests and approved on review.</li> <li><strong>Superfluous code can also lead to bugs / defects / breakdowns. As a result, you will spend precious time searching for the cause of the breakdown and debugging this code.</strong></li> <li>YAGNI encourages developers to add as many features as possible, just in case aliens visit</li> </ul> </article> <article class="article"> <h3>21. Which of the following statements is true?</h3> <ul> <li>Leave as many comments as possible. Writing tons of comments will definitely increase your productivity and help other developers understand your code better.</li> <li>The complete absence of comments in the project indicates the high quality of the code.</li> <li><strong>Comments are worth leaving when your decision is not obvious.</strong></li> <li>Even if your solution seems very obvious, an additional comment will not be superfluous, but on the contrary will increase the readability of the code.</li> </ul> </article> <article class="article"> <h3>22. Which of the following statements is true for the KISS principle?</h3> <ul> <li>It claims that in programming only complex, maximally optimized solutions are correct. The task of a programmer is to be able to deal with code of any level of complexity.</li> <li>This principle states that relations between colleagues should be strictly businesslike.</li> <li>This principle first began to be applied in 1960, but in the realities of today\'s developers it is no longer relevant or even toxic.</li> <li><strong>A universal principle of any system design. It states that a simple, but not the most optimal solution is preferable to a complex, though maximally efficient in terms of performance.</strong></li> </ul> </article> <article class="article"> <h3>23. Which statement accurately describes TODO comments in programming?</h3> <ul> <li>Writing TODO comments is a common practice for forming urgent tasks.</li> <li>TODOs, like any other comments, are useless clogging of the project code. Their use is prohibited in large team projects.</li> <li>TODO comments are the practice of composing non-urgent tasks in a task tracking system like Jira.</li> <li><strong>This type of comment developers leave right in the code to indicate non-urgent but important tasks for the future.</strong></li> <li>TODO comments are a secret code for developers to plan weekend parties.</li> </ul> </article> <article class="article"> <h3>24. YAGNI principle discourages what kind of software development practice?</h3> <ul> <li>Iterative development</li> <li><strong>Adding features not currently needed</strong></li> <li>Code refactoring</li> <li>Debugging</li> </ul> </article> ','<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>Test [St1] Linters, Formatters and Husky</h1> <strong>33 вопроса. Выполнил на 85 баллов из 100</strong> </article> <article class="article"> <h3>1. How can ESLint be configured? (checkbox)</h3> <ul> <li><strong>By enabling a rule as a warning or an error</strong></li> <li><strong>By creation of custom rules</strong></li> <li>By add code quality analytics</li> <li>By integrating linting into a build process</li> </ul> </article> <article class="article"> <h3>2. How do you configure plugins in an ESLint configuration file?</h3> <ul> <li>Using the \'eslint-config\' key</li> <li><strong>Using the \'plugins\' key</strong></li> <li>Directly in the \'rules\' section</li> <li>In the \'.eslintrc\' file\'s header</li> </ul> </article> <article class="article"> <h3>3. How does Husky works?</h3> <ul> <li>It checks if a relevant Git Hook is available for a called Git command</li> <li>It formats code to comply with code style requirements</li> <li><strong>It runs a Git Hook when a relevant Git command is called</strong></li> <li>It scans code to indicate all problems with code quality</li> </ul> </article> <article class="article"> <h3>4. Is ESLint capable of formatting code?</h3> <ul> <li>Yes, without any limits</li> <li><strong>Yes, but Prettier is a more capable tool for this purpose</strong></li> <li>Yes, but Husky is a more relevant tool for this purpose</li> <li>Absolutely not</li> </ul> </article> <article class="article"> <h3>5. Is it mandatory to use linters, formatters, Husky in project?</h3> <ul> <li>Yes, everything is mandatory</li> <li>Only linters and Husky are mandatory</li> <li>Only formatters are mandatory</li> <li><strong>They\'re not mandatory but highly recommended to keep a good code quality</strong></li> </ul> </article> <article class="article"> <h3>6. In which file is Husky\'s command configuration stored after running \'husky-init\'?</h3> <ul> <li><strong>package.json</strong></li> <li>.eslintrc.* (or eslint.config.js.)</li> <li>.prettierrc</li> <li>.huskyrc</li> </ul> </article> <article class="article"> <h3>7. What are benefits of using ESLint? (checkbox)</h3> <ul> <li><strong>Objective measurement of a code quality</strong></li> <li><strong>Readable, maintainable, and more consistent code</strong></li> <li><strong>Fewer errors in production</strong></li> <li>Education about code quality reaches more app users</li> </ul> </article> <article class="article"> <h3>8. What are Code Smells?</h3> <ul> <li>The processes of verifying codebases for adherence to code styles</li> <li>Errors in code after compilation</li> <li><strong>Signs that something might be wrong with a code</strong></li> <li>All of the above</li> </ul> </article> <article class="article"> <h3>9. What are code style guides created for?</h3> <ul> <li>To design application UI in a unified style</li> <li><strong>To help developers write consistent and maintainable code</strong></li> <li>To simplify code writing by accumulation of typical code blocks</li> <li>Style guides are created for UI/UX designers</li> </ul> </article> <article class="article"> <h3>10. What are ESLint rules?</h3> <ul> <li>Open list of rules for code checks, set up in package.json</li> <li>Predefined list of rules for code checks, set up in package.json</li> <li>Open list of rules for code checks, set up in ESLint configuration file</li> <li><strong>Predefined list of rules for code checks, set up in ESLint configuration file</strong></li> </ul> </article> <article class="article"> <h3>11. What are features of Husky? (checkbox)</h3> <ul> <li><strong>Zero dependencies and lightweight</strong></li> <li><strong>User-friendly messages</strong></li> <li><strong>Husky supports platforms such as macOS, Linux, and Windows</strong></li> <li><strong>Powered by modern new Git feature (core.hooksPath)</strong></li> </ul> </article> <article class="article"> <h3>12. What can Husky do? (checkbox)</h3> <ul> <li><strong>Run any command, for example from one of the installed packages (e.g. Prettier)</strong></li> <li><strong>Use \'pre-commit\' script to run all tests</strong></li> <li>Validate commit messages</li> <li>Fix code smells before pushing the commit</li> </ul> </article> <article class="article"> <h3>13. What do an ESLint rule with a value \'error\' in case of any error?</h3> <ul> <li>It crashes an app</li> <li><strong>It shows an error message in the terminal with a path to a file with the error</strong></li> <li>It shows only an error message</li> <li>It shows a number of errors in an app</li> </ul> </article> <article class="article"> <h3>14. What does a .eslintrc.* (or eslint.config.js.) file represent?</h3> <ul> <li>Configuration file used by Prettier</li> <li>Configuration file used by Node.js</li> <li><strong>Configuration file used by ESLint</strong></li> <li>File with this name doesn\'t exist</li> </ul> </article> <article class="article"> <h3>15. What does an ESLint rule with a value \'warn\' do?</h3> <ul> <li><strong>It shows a warning in the terminal with a path to a problematic file</strong></li> <li>It shows an error message</li> <li>It provides analytics with all warnings</li> <li>It does nothing</li> </ul> </article> <article class="article"> <h3>16. What does setting \'singleQuote\' to true do in Prettier?</h3> <ul> <li>Forces the use of double quotes</li> <li>Enables single quotes in JSX</li> <li><strong>Uses single quotes instead of double quotes</strong></li> <li>Disables quote conversion</li> </ul> </article> <article class="article"> <h3>17. What does the \'eslint-plugin-\' prefix in ESLint plugin names indicate?</h3> <ul> <li>It\'s a mandatory prefix for all ESLint plugins</li> <li><strong>It can be omitted from plugin names in configuration</strong></li> <li>It\'s only used for scoped packages</li> <li>Indicates a deprecated plugin</li> </ul> </article> <article class="article"> <h3>18. What does the \'semi\' option in Prettier control?</h3> <ul> <li><strong>The insertion of semicolons at the end of statements</strong></li> <li>Checking for missing semicolons</li> <li>Conversion of double quotes to semicolons</li> <li>The style of semicolons used</li> </ul> </article> <article class="article"> <h3>19. What Git hooks from the list really exists? (checkbox)</h3> <ul> <li><strong>pre-commit</strong></li> <li><strong>pre-push</strong></li> <li>pre-pull</li> <li><strong>pre-rebase</strong></li> </ul> </article> <article class="article"> <h3>20. What is a linter?</h3> <ul> <li><strong>A tool for improving code quality</strong></li> <li>A tool for formatting new code before a commit to be created</li> <li>A modern native Git hooks tool</li> <li>None of the above</li> </ul> </article> <article class="article"> <h3>21. What is a linter used for? (checkbox)</h3> <ul> <li><strong>Fix programming errors</strong></li> <li><strong>Code standardization</strong></li> <li>Adapting legacy code for modern browsers</li> <li><strong>Identify bugs</strong></li> </ul> </article> <article class="article"> <h3>22. What is a .prettierrc file?</h3> <ul> <li><strong>Configuration file used by Prettier</strong></li> <li>Configuration file used by Node.js</li> <li>Configuration file used by ESLint</li> <li>File with this name doesn\'t exist</li> </ul> </article> <article class="article"> <h3>23. What is Husky? (checkbox)</h3> <ul> <li>JavaScript library</li> <li>The most popular code formatter</li> <li><strong>Tool for automation of adding Git Hooks</strong></li> </ul> </article> <article class="article"> <h3>24. What is Prettier?</h3> <ul> <li>A bugs highlighter</li> <li>A pre-commit hook</li> <li>A linter</li> <li><strong>A code formatter</strong></li> </ul> </article> <article class="article"> <h3>25. What is the default value for Prettier\'s \'printWidth\' option?</h3> <ul> <li><strong>80 characters</strong></li> <li>100 characters</li> <li>120 characters</li> <li>No default value</li> </ul> </article> <article class="article"> <h3>26. What statements are correct about Prettier and ESLint integration? (checkbox)</h3> <ul> <li><strong>Integration of this tools gives opportunity to run them together as one job</strong></li> <li><strong>Prettier provides \'eslint-plugin-prettier\' and \'eslint-config-prettier\' rules to accomplish this</strong></li> <li><strong>Prettier\'s config can be defined in a .eslintrc.* (or eslint.config.js.) file when these tools are used together</strong></li> <li>These tools can\'t be integrated with each other</li> </ul> </article> <article class="article"> <h3>27. What types of checks do a linter provide? (checkbox)</h3> <ul> <li><strong>Syntax errors</strong></li> <li><strong>Potential problems</strong></li> <li>Number of warnings in console</li> <li><strong>Code standards adherence</strong></li> </ul> </article> <article class="article"> <h3>28. What values can be set to ESLint rules?</h3> <ul> <li>\'off\', \'on\'</li> <li><strong>\'off\', \'warn\', \'error\'</strong></li> <li>\'ignore\', \'warn\', \'error\'</li> <li>\'disable\', \'enable\'</li> </ul> </article> <article class="article"> <h3>29. Which coding style guides are most popular? (checkbox)</h3> <ul> <li><strong>Airbnb</strong></li> <li>Netflix</li> <li><strong>Google</strong></li> <li><strong>Idiomatic</strong></li> <li>The Rolling Scopes School</li> </ul> </article> <article class="article"> <h3>30. Which of the following Git hooks are not supported by Husky? (checkbox)</h3> <ul> <li><strong>pre-receive</strong></li> <li><strong>update</strong></li> <li>pre-push</li> <li><strong>post-receive</strong></li> </ul> </article> <article class="article"> <h3>31. Which of the following is true about the \'tabWidth\' option in Prettier? (checkbox)</h3> <ul> <li><strong>Specifies the number of characters per indentation-level</strong></li> <li>Defaults to 4 spaces</li> <li>Is used to set the width of tabs in the output file</li> <li><strong>Controls the number of spaces in a tab character</strong></li> </ul> </article> <article class="article"> <h3>32. Which option in Prettier is used to control trailing commas?</h3> <ul> <li>\'commaStyle\'</li> <li><strong>\'trailingComma\'</strong></li> <li>\'commaEnd\'</li> <li>\'endComma\'</li> </ul> </article> <article class="article"> <h3>33. Why is a good practice to use ESLint together with Prettier?</h3> <ul> <li>Prettier is able only detect problems in code, ESLint fix it</li> <li>Prettier makes ESLint warnings and errors more readable for users</li> <li><strong>Prettier enforces a consistent code style and linter/ESLint is responsible for code-quality rules and catching bugs</strong></li> <li>ESLint identifies issues but cannot fix all, Prettier can</li> <li>There is no difference between ESLint and Prettier and it\'s not necessary to use them together</li> </ul> </article> ','<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>Test [St1] Modules in JavaScript</h1> <strong>32 вопроса. Выполнил на 78 баллов из 100</strong> </article> <article class="article"> <h3>1. Are JavaScript modules compatible with older browsers lacking ES6 support?</h3> <ul> <li>Directly supported</li> <li>Yes, using polyfills for backward compatibility</li> <li>With server-side rendering</li> <li><strong>Not compatible</strong></li> <li>Only if you whisper sweet nothings into the browser\'s ear</li> </ul> </article> <article class="article"> <h3>2. Are module scripts always deferred?</h3> <ul> <li><strong>Yes</strong></li> <li>No</li> </ul> </article> <article class="article"> <h3>3. Can named exports in JavaScript modules be modified?</h3> <ul> <li><strong>Yes, always</strong></li> <li>No, named exports are immutable and read-only</li> <li>Only in strict mode</li> <li>Depends on the variable type</li> </ul> </article> <article class="article"> <h3>4. Can the \'import\' keyword be used to import functionality from an index.html file?</h3> <ul> <li>Yes</li> <li><strong>No</strong></li> </ul> </article> <article class="article"> <h3>5. How can you rename an imported module in JavaScript?</h3> <ul> <li>Create new variable with new name in script which uses this import</li> <li>Import the whole content of module and extract it with destructing syntax</li> <li><strong>Use \'as\' (e.g. import { getText as ExternalFunc } from \'./utils/\')</strong></li> <li>Imports can be imported and used only with their original names</li> </ul> </article> <article class="article"> <h3>6. How does JavaScript manage side effects within modules?</h3> <ul> <li>Ignored</li> <li><strong>Executed once</strong></li> <li>Not allowed</li> <li>Depends on the export type</li> </ul> </article> <article class="article"> <h3>7. How does the inclusion of top-level \'await\' affect the loading and execution of a script in an ES module?</h3> <ul> <li><strong>Blocks module execution until the promise resolves</strong></li> <li>Has no impact on script loading</li> <li>Causes a syntax error</li> <li>Delays loading of all dependent modules</li> <li>It throws a dramatic pause into the script, like a cliffhanger in a soap opera</li> </ul> </article> <article class="article"> <h3>8. How many times does a JS module code imports?</h3> <ul> <li>After every re-render</li> <li><strong>Only once, at the initial import</strong></li> <li>Varies depending on the code structure</li> <li>None of above</li> <li>Whenever it feels like it needs a change of scenery</li> </ul> </article> <article class="article"> <h3>9. How to enable modules in project?</h3> <ul> <li><strong>Add attribute type="module" to &lt;script&gt; tag</strong></li> <li>Add to name of JS file identifier of module - script.module.js</li> <li>Modules are enabled by default</li> <li>None of the above</li> </ul> </article> <article class="article"> <h3>10. In a JavaScript ES6 module, what does the \'this\' keyword refer to?</h3> <ul> <li>global</li> <li>window</li> <li>null</li> <li><strong>undefined</strong></li> </ul> </article> <article class="article"> <h3>11. In JavaScript modules, how are live bindings different from typical variable or function references?</h3> <ul> <li><strong>They are constantly updated</strong></li> <li>They are static references</li> <li>No difference in behavior</li> <li>Only applicable to functions</li> </ul> </article> <article class="article"> <h3>12. Is it possible for a JavaScript module to contain both a default export and named exports?</h3> <ul> <li>No</li> <li><strong>Yes</strong></li> <li>Yes, by it should be one default and one named exports</li> <li>Yes, but named exports should be maximum 2</li> </ul> </article> <article class="article"> <h3>13. Is it possible for JavaScript modules to export class declarations?</h3> <ul> <li><strong>Yes, class declarations can be directly exported</strong></li> <li>No, only instances</li> <li>Only anonymous classes</li> <li>Only if extended</li> </ul> </article> <article class="article"> <h3>14. Is it true that JavaScript modules only work with HTTP/HTTPS and require a local web server for local development?</h3> <ul> <li><strong>Yes</strong></li> <li>No</li> </ul> </article> <article class="article"> <h3>15. Is it true that module scripts execute before the HTML document is fully ready if the module\'s size is smaller than the HTML file?</h3> <ul> <li>Yes, they execute based on size comparison</li> <li><strong>No, execution does not depend on file size</strong></li> </ul> </article> <article class="article"> <h3>16. Is the \'export\' keyword used to make variables and functions accessible outside their current JavaScript module?</h3> <ul> <li><strong>Yes</strong></li> <li>No</li> </ul> </article> <article class="article"> <h3>17. What are the key features of a JavaScript module? (checkbox)</h3> <ul> <li><strong>Always work in strict mode</strong></li> <li><strong>Top-level variables and functions from a module are not seen in other scripts</strong></li> <li>In a module, top-level\'s \'this\' equals top-level\'s local scope</li> <li><strong>A module code is evaluated only the first time when imported</strong></li> </ul> </article> <article class="article"> <h3>18. What benefits do modules provide? (checkbox)</h3> <ul> <li><strong>This approach helps to divide code into reusable pieces of code</strong>This approach helps to divide code into reusable pieces of code</li> <li><strong>Encapsulation of implementation details</strong></li> <li>Easy dependencies management</li> <li>Modules automatically download all dependecies</li> </ul> </article> <article class="article"> <h3>19. What correctly describes a JS module? (checkbox)</h3> <ul> <li><strong>Module path must be a string and can’t be a function call</strong></li> <li>Modules offer no benefits to developers</li> <li><strong>Module can be imported conditionally or at run-time</strong></li> <li>Modules can\'t load each other and interchange functionality</li> </ul> </article> <article class="article"> <h3>20. What does \'re-export\' mean in JavaScript modules?</h3> <ul> <li>Duplication of export in module code</li> <li><strong>Ability to export within one module functionality imported into it from another module</strong></li> <li>Ability of JS to export functionality again if something goes wrong</li> <li>None of the above</li> </ul> </article> <article class="article"> <h3>21. What happens when a module imports itself in JavaScript?</h3> <ul> <li>Throws an error</li> <li><strong>Generates a new instance of the module</strong></li> <li>Ignored by the interpreter</li> <li>Handled as a cyclic dependency</li> <li>It gets caught in a narcissistic loop of self-admiration</li> </ul> </article> <article class="article"> <h3>22. What IIFE syntax is correct?</h3> <ul> <li>(function() { ... })</li> <li>function() { ... }</li> <li><strong>(function() { ... })()</strong></li> <li>All of the above</li> </ul> </article> <article class="article"> <h3>23. What information is contained in the \'meta\' property of an \'import\' object in JavaScript?</h3> <ul> <li><strong>Information regarding the current module</strong></li> <li>Settings or configurations of the module</li> <li>List of imports</li> <li>This property doesn\'t exist</li> <li>Secret messages from other developers</li> </ul> </article> <article class="article"> <h3>24. What is a dynamic import?</h3> <ul> <li><strong>Module import in conditional statement</strong></li> <li>Function-like expression that allows loading modules asynchronously</li> <li>Re-exported imports</li> <li>All of the above</li> </ul> </article> <article class="article"> <h3>25. What is the difference between default and named export in a JS module? (checkbox)</h3> <ul> <li>Default and named exports are the same</li> <li><strong>Only one default export is allowed per file, whereas multiple named exports are permitted</strong></li> <li>Only one named export is accepted in one file, default exports can be multiple</li> <li><strong>You can choose any name when importing default export, named exports are imported as it is or should be renamed explicitly</strong></li> </ul> </article> <article class="article"> <h3>26. What is the maximum number of default exports allowed in a single JavaScript module file?</h3> <ul> <li>0</li> <li><strong>1</strong></li> <li>Maximum 5</li> <li>Unlimited number</li> </ul> </article> <article class="article"> <h3>27. What is the primary purpose of using an IIFE in JavaScript?</h3> <ul> <li>Making code more readable</li> <li>Better communication with server</li> <li><strong>Reducing global scope pollution</strong></li> <li>To create a secret society within your code</li> <li>Improving of code quality</li> </ul> </article> <article class="article"> <h3>28. What types of JS modules exist? (checkbox)</h3> <ul> <li><strong>CommonJS</strong></li> <li><strong>Universal Module Definition (UMD)</strong></li> <li><strong>Asynchronous Module Definition (AMD)</strong></li> <li><strong>ES6</strong></li> </ul> </article> <article class="article"> <h3>29. Which of the following statements are correct about JS modules? (checkbox)</h3> <ul> <li><strong>Module can be imported to another module</strong></li> <li>Module is directory with scripts</li> <li><strong>One script is one module</strong></li> <li><strong>Module usually includes \'export\' statements in its code</strong></li> <li>Modules are magical boxes where JS elves write your code</li> </ul> </article> <article class="article"> <h3>30. Which of the following statements correctly describe characteristics of IIFE functions in JavaScript? (checkbox)</h3> <ul> <li><strong>Anonymous function that is invoked when it is declared</strong></li> <li><strong>Immediately Invoked Function Expression</strong></li> <li>Initially Invoked Function Expression</li> <li>Named function that is invoked when it is declared</li> </ul> </article> <article class="article"> <h3>31. Which statements about dynamic import are correct? (checkbox)</h3> <ul> <li><strong>It works in regular scripts and does not require the \'type="module"\' attribute in a &lt;script&gt; tag</strong></li> <li>import() is regular function</li> <li><strong>import() looks like function but it\'s special syntax</strong></li> <li>\'call\' and \'apply\' methods can be used with import()</li> </ul> </article> <article class="article"> <h3>32. Which ways to export code from JS module really exist? (checkbox)</h3> <ul> <li><strong>default export</strong></li> <li>initial export</li> <li>single export</li> <li><strong>named export</strong></li> </ul> </article> ','<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>Test [St1] Introduction to Bundlers</h1> <strong>43 вопроса. Выполнил на 86 баллов из 100</strong> </article> <article class="article"> <h3>1. How are webpack plugins included in the configuration?</h3> <ul> <li>As a global setting</li> <li>As a property in the module object</li> <li><strong>By using the plugins array</strong></li> <li>Through external scripts</li> <li>Through environment variables in the build process</li> </ul> </article> <article class="article"> <h3>2. How do JavaScript bundlers handle module dependencies?</h3> <ul> <li>Ignore dependencies</li> <li>Manually resolve each dependency</li> <li>Convert all dependencies to global variables</li> <li>Through automated version control for each module</li> <li><strong>Create a dependency graph</strong></li> </ul> </article> <article class="article"> <h3>3. How do JavaScript bundlers typically handle different types of assets like CSS and images?</h3> <ul> <li>Convert them to JavaScript</li> <li><strong>Bundle them separately</strong></li> <li>Ignore non-JavaScript assets</li> <li>Integrate them into the JavaScript bundle</li> </ul> </article> <article class="article"> <h3>4. How do loaders handle different file types in webpack?</h3> <ul> <li>Ignore non-JavaScript files</li> <li>Automatically convert them to JavaScript</li> <li>Require separate plugins</li> <li>Play a game of file type bingo, randomly picking which to process</li> <li>Merge all file types into a single, unified format</li> <li><strong>Transform them based on specified rules</strong></li> </ul> </article> <article class="article"> <h3>5. How does a module bundler handle \'require\' statements differently in the browser?</h3> <ul> <li>It uses the native \'require\' function of the browser</li> <li>It creates a custom \'require\' function for the bundled code</li> <li>It ignores \'require\' statements</li> <li>It translates \'require\' into import/export statements</li> <li><strong>Encapsulates \'require\' statements within a secure environment</strong></li> </ul> </article> <article class="article"> <h3>6. How does specifying \'runtime\' in an entry point affect the webpack build?</h3> <ul> <li>Summons a digital genie to optimize your code</li> <li><strong>Creates a new runtime chunk</strong></li> <li>Reduces overall bundle size</li> <li>Increases build time</li> <li>Automatically optimizes load balancing across chunks</li> <li>Disables code splitting</li> </ul> </article> <article class="article"> <h3>7. How does the \'--force\' option affect Vite\'s commands?</h3> <ul> <li>Forces HTTPS connection</li> <li><strong>Ignores cached files and rebundles</strong></li> <li>Forces all plugins to activate</li> <li>Overrides existing files in the output directory</li> </ul> </article> <article class="article"> <h3>8. How does Vite handle project scaffolding?</h3> <ul> <li>Through external libraries</li> <li><strong>Using the create-vite tool</strong></li> <li>Manual configuration</li> <li>Automated code generation</li> </ul> </article> <article class="article"> <h3>9. How does webpack handle \'dependOn\' option in entry description objects?</h3> <ul> <li>Ignores it</li> <li><strong>Creates separate chunks</strong></li> <li>Ensures loaded dependencies before entry point</li> <li>Bundles dependencies with entry point</li> <li>Automatically updates dependencies to their latest versions</li> </ul> </article> <article class="article"> <h3>10. How does Webpack\'s \'loaders\' feature contribute to the bundling process?</h3> <ul> <li>They add secret Easter eggs into your code</li> <li>By managing client-side routing</li> <li><strong>By transforming and bundling non-JS files</strong></li> <li>By implementing security protocols</li> <li>Automatically updating dependencies in the bundle</li> <li>By optimizing server requests</li> </ul> </article> <article class="article"> <h3>11. How does webpack\'s \'mode\' setting affect the build?</h3> <ul> <li>Determines the file types</li> <li>Sets the language level</li> <li><strong>Enables built-in optimizations</strong></li> <li>Changes the output directory</li> </ul> </article> <article class="article"> <h3>12. In the context of JavaScript module bundling, what is the primary function of the \'getModules\' function in dependency resolution?</h3> <ul> <li>Optimizing the performance of module loading</li> <li>Transpiling ES6 code to compatible JavaScript</li> <li>Directly importing modules from node_modules</li> <li>Identifying and reporting outdated or deprecated modules</li> <li><strong>Resolving dependencies recursively starting from the entry module</strong></li> </ul> </article> <article class="article"> <h3>13. In Vite, how are CLI options like `--port` or `--open` used?</h3> <ul> <li>For configuring database connections</li> <li><strong>To specify command line options for the dev server</strong></li> <li>For deploying applications</li> <li>To manage package dependencies</li> <li>`--open` magically opens a portal to the developer\'s utopia</li> </ul> </article> <article class="article"> <h3>14. In webpack, how does the \'filename\' property within \'output\' affect the build?</h3> <ul> <li>Sets up the code splitting strategy</li> <li>Configures the public path</li> <li>Determines module format</li> <li>Instructs webpack on which files to exclude from bundling</li> <li><strong>Defines the bundle name</strong></li> </ul> </article> <article class="article"> <h3>15. In webpack, what does the object syntax for entry points offer?</h3> <ul> <li>Simplified configuration</li> <li><strong>Flexibility and scalability</strong></li> <li>Automatic optimization</li> <li>Reduced bundle size</li> </ul> </article> <article class="article"> <h3>16. In what way can webpack plugins interact with the compilation process?</h3> <ul> <li>By engaging in a digital tug-of-war with the compiler</li> <li>By changing entry points</li> <li><strong>Through the webpack compiler hooks</strong></li> <li>By altering the code structure</li> <li>By modifying output files</li> </ul> </article> <article class="article"> <h3>17. Is it possible to split webpack configuration into multiple files?</h3> <ul> <li><strong>Yes</strong></li> <li>No</li> <li>Only when using specific webpack plugins</li> </ul> </article> <article class="article"> <h3>18. What are the two main stages of a JavaScript module bundler?</h3> <ul> <li>Initial setup and final deployment</li> <li><strong>Dependency Resolution and Packing</strong></li> <li>Error Handling and Debugging</li> <li>Coffee break and panic mode</li> <li>Code Execution and Testing</li> </ul> </article> <article class="article"> <h3>19. What command is used to start Vite\'s development server?</h3> <ul> <li>vite start</li> <li><strong>vite</strong></li> <li>vite run</li> <li>vite launch</li> <li>vite, oh pretty please</li> </ul> </article> <article class="article"> <h3>20. What does the \'output\' property define in webpack\'s configuration?</h3> <ul> <li>Determines which dependencies are to be bundled</li> <li><strong>Specifies the destination for the bundled output files</strong></li> <li>Defines the loaders to be utilized in the bundling process</li> <li>Configures plugin settings within the webpack ecosystem</li> <li>Sets the compatibility level with different browsers and devices</li> </ul> </article> <article class="article"> <h3>21. What does the \'--open\' option do in the Vite CLI?</h3> <ul> <li>Opens the project in a code editor</li> <li><strong>Opens the browser on startup</strong></li> <li>Opens the project configuration</li> <li>Opens a new terminal window</li> </ul> </article> <article class="article"> <h3>22. What function does the \'publicPath\' setting serve in webpack\'s output configuration?</h3> <ul> <li><strong>To set a custom path for public assets</strong></li> <li>To configure the local server\'s base URL</li> <li>To define external dependencies</li> <li>To specify the path for source maps</li> <li>Determines the accessibility levels of different modules in the bundle</li> </ul> </article> <article class="article"> <h3>23. What high-priority challenges can arise when creating a JavaScript module bundler? (checkbox)</h3> <ul> <li><strong>Determining the order of module execution</strong></li> <li><strong>Resolving nested dependencies</strong></li> <li><strong>Preventing modules from getting into arguments over who gets bundled first</strong></li> <li>Integration with external APIs</li> <li>Optimizing for performance</li> </ul> </article> <article class="article"> <h3>24. What impact do JavaScript bundlers have on web application performance?</h3> <ul> <li>Slows down the application</li> <li><strong>Improves loading time by reducing requests</strong></li> <li>Increases server load</li> <li>Gives the application a pep talk for better performance</li> <li>Has no impact</li> </ul> </article> <article class="article"> <h3>25. What is a \'dependency graph\' in the context of JavaScript module bundling?</h3> <ul> <li>A visual representation illustrating the server\'s architectural design</li> <li><strong>A map of all code dependencies and relationships</strong></li> <li>A schematic of user interface component interactions and layouts</li> <li>A chart depicting the relationships and connections within a database system</li> <li>A timeline that tracks module version histories and updates</li> <li>A treasure map leading to the most used piece of code</li> </ul> </article> <article class="article"> <h3>26. What is a webpack configuration file primarily written in?</h3> <ul> <li>JSON</li> <li><strong>JavaScript</strong></li> <li>TypeScript</li> <li>YAML</li> </ul> </article> <article class="article"> <h3>27. What is the advantage of using multiple entry points in webpack for a multi-page application?</h3> <ul> <li>Enhances the speed of the compilation process</li> <li>Streamlines integration with server-side rendering</li> <li><strong>Decreases the size of bundles for each individual page</strong></li> <li>Simplifies the deployment process</li> <li>Facilitates the sharing of code between various pages</li> </ul> </article> <article class="article"> <h3>28. What is the primary function of a JavaScript bundler?</h3> <ul> <li>To compress images</li> <li><strong>To merge multiple JavaScript files into one</strong></li> <li>To convert HTML to JavaScript</li> <li>To debug JavaScript code</li> </ul> </article> <article class="article"> <h3>29. What is the primary function of the \'output\' property in webpack\'s configuration?</h3> <ul> <li>To specify the entry point</li> <li>To configure loaders</li> <li><strong>To define output file location</strong></li> <li>To set up development server</li> <li>Specifies external libraries to be included in the build</li> </ul> </article> <article class="article"> <h3>30. What is the primary purpose of \'loaders\' in webpack?</h3> <ul> <li>Enhancing the efficiency of bundle optimization</li> <li><strong>Facilitating the processing of non-JavaScript files like images and stylesheets</strong></li> <li>Reducing the overall size of code through minification techniques</li> <li>Enabling the live reloading feature during development</li> <li>Detecting and resolving dependency conflicts in code</li> </ul> </article> <article class="article"> <h3>31. What is the purpose of the \'vite preview\' command?</h3> <ul> <li>To start a production build</li> <li>To deploy the project</li> <li>To optimize dependencies</li> <li>To show a movie trailer of your project\'s future success</li> <li><strong>To locally preview a production build</strong></li> </ul> </article> <article class="article"> <h3>32. What is the significance of source maps in JavaScript bundling?</h3> <ul> <li>Optimizing network performance</li> <li><strong>Mapping compiled code back to original source code</strong></li> <li>Reducing the size of the bundle</li> <li>Encrypting the bundled code</li> <li>It\'s like a treasure map for bugs</li> <li>To categorize source code by its functionality</li> </ul> </article> <article class="article"> <h3>33. What is \'tree shaking\' in the context of Rollup?</h3> <ul> <li><strong>Removing unused code</strong></li> <li>Optimizing dependency trees</li> <li>Splitting code into modules</li> <li>Balancing load times</li> </ul> </article> <article class="article"> <h3>34. What role does an Immediately Invoked Function Expression (IIFE) play in JavaScript module bundling?</h3> <ul> <li><strong>Encapsulates module scope to avoid global scope pollution</strong></li> <li>Enhances performance by locally scoping variables</li> <li>Manages and isolates global variables within modules</li> <li>Provides a testing environment within the module</li> <li>Acts as a secret hideout for the module\'s code</li> <li>Executes code asynchronously within the module context</li> </ul> </article> <article class="article"> <h3>35. What role does \'[name]\' play in webpack\'s \'output.filename\' setting?</h3> <ul> <li><strong>Specifies a fixed filename</strong></li> <li>Generates a unique hash for caching</li> <li>Indicates the module name</li> <li>Is the magic word that turns your bundle into a digital chameleon</li> <li>Acts as a placeholder for the entry name</li> </ul> </article> <article class="article"> <h3>36. What types of files does webpack natively understand?</h3> <ul> <li><strong>JavaScript and JSON files</strong></li> <li>HTML and CSS files</li> <li>XML and YAML files</li> <li>All file types</li> <li>Markdown and text files</li> <li>Files written in a secret developer language known only to the initiated</li> </ul> </article> <article class="article"> <h3>37. What unique feature does Rollup.js offer in module bundling?</h3> <ul> <li>Hot module replacement</li> <li>Automatic code splitting</li> <li>Telepathic debugging tools</li> <li>Dynamic module loading</li> <li><strong>Tree shaking</strong></li> </ul> </article> <article class="article"> <h3>38. Which environment do webpack loaders primarily function in?</h3> <ul> <li>In the browser</li> <li>Within a virtual machine</li> <li><strong>In the Node.js environment</strong></li> <li>Function within a containerized Docker environment</li> <li>In a secret underground bunker for maximum code security</li> <li>In the webpack compiler</li> </ul> </article> <article class="article"> <h3>39. Which feature in webpack allows for automatic injection of bundles into an HTML file?</h3> <ul> <li>The use of loaders to manage file integration</li> <li><strong>HTMLWebpackPlugin</strong></li> <li>Output property</li> <li>Entry points</li> <li>Using the WebpackDevServer for real-time injection</li> <li>Webpack\'s magic wand that turns code into HTML fairy dust</li> </ul> </article> <article class="article"> <h3>40. Which feature is a key part of Vite\'s development experience?</h3> <ul> <li><strong>Hot Module Replacement</strong></li> <li>Automated testing</li> <li>Cloud deployment</li> <li>Database optimization</li> <li>Real-time code linting and correction</li> <li>Integrated AI-based code suggestions</li> <li>A virtual assistant named \'Vite Vince\' who cheers you on</li> </ul> </article> <article class="article"> <h3>41. Which feature is commonly provided by JavaScript bundlers?</h3> <ul> <li>HTTP request optimization</li> <li><strong>Code minification and uglification</strong></li> <li>Direct database connection</li> <li>A built-in coffee break reminder</li> <li>Automatic variable renaming</li> </ul> </article> <article class="article"> <h3>42. Which specific challenge is Vite.js designed to overcome in JavaScript module bundling?</h3> <ul> <li>Improving code security</li> <li>Streamlining database interactions</li> <li><strong>Solving building performance issues</strong></li> <li>Automating the testing and deployment processes</li> <li>Vite.js exists solely to make developers feel faster</li> </ul> </article> <article class="article"> <h3>43. Which Vite CLI command is used for building a project for production?</h3> <ul> <li>vite abracadabra</li> <li>vite compile</li> <li>vite production</li> <li>vite pack</li> <li><strong>vite build</strong></li> </ul> </article> ','<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>[St1] Chrome DevTools</h1> <strong>50 вопросов. Выполнил на 94 баллов из 100</strong> </article> <article class="article"> <h3>1. How can developers persist messages across page loads in Chrome DevTools Console?</h3> <ul> <li><strong>Using the \'Preserve Log\' option</strong></li> <li>By saving the Console output as a file</li> <li>Automatically on page reload</li> <li>Through browser settings</li> </ul> </article> <article class="article"> <h3>2. How can developers step through their JavaScript code using Chrome DevTools?</h3> <ul> <li>Through the Performance panel</li> <li>Using the Network panel</li> <li>Via the Sources panel</li> <li><strong>By the Console panel commands</strong></li> <li>Using automated AI-based code analysis</li> </ul> </article> <article class="article"> <h3>3. How can developers test JavaScript in real-time using Chrome DevTools?</h3> <ul> <li>Using the Network panel</li> <li>With the Performance panel</li> <li><strong>Via the Console as a REPL</strong></li> <li>Through the Elements panel</li> </ul> </article> <article class="article"> <h3>4. How can developers use the \'Computed\' pane in Chrome DevTools to resolve CSS conflicts?</h3> <ul> <li>By editing CSS directly</li> <li><strong>By viewing final applied styles and their sources</strong></li> <li>By checking network requests</li> <li>By running JavaScript snippets</li> </ul> </article> <article class="article"> <h3>5. How can developers utilize the Console for modifying the page\'s content?</h3> <ul> <li>By editing HTML in the Elements panel</li> <li><strong>Through JavaScript commands in the Console</strong></li> <li>Using CSS in the Styles panel</li> <li>Via network request modifications</li> </ul> </article> <article class="article"> <h3>6. How can the \'Block Request\' feature in the Network panel be used during development?</h3> <ul> <li><strong>To test a page\'s behavior without specific resources</strong></li> <li>To speed up the page load time</li> <li>To modify requests sent by a page</li> <li>To analyze the content of blocked requests</li> <li>To prioritize certain network requests over others</li> </ul> </article> <article class="article"> <h3>7. How can you filter local storage items in Chrome DevTools?</h3> <ul> <li><strong>Using the filter box</strong></li> <li>Through a Console command</li> <li>By sorting the table</li> <li>Not possible to filter</li> <li>Through an advanced query builder tool</li> </ul> </article> <article class="article"> <h3>8. How does Chrome DevTools assist in identifying CSS values that have no effect due to other properties?</h3> <ul> <li>By highlighting them in red</li> <li><strong>By displaying them in pale text with an info icon</strong></li> <li>By crossing them out</li> <li>By showing a warning icon</li> </ul> </article> <article class="article"> <h3>9. How does one create a new key-value pair in local storage?</h3> <ul> <li><strong>Double-clicking on the table</strong></li> <li>Through a guided wizard in the Application panel</li> <li>Right-clicking on the table</li> <li>It\'s not possible to create new pairs</li> <li>Perform a secret handshake with the local storage table</li> </ul> </article> <article class="article"> <h3>10. How does setting a line-of-code breakpoint help in JavaScript debugging?</h3> <ul> <li>Logs errors to the console</li> <li><strong>Pauses execution at a specified line</strong></li> <li>Monitors network requests</li> <li>Analyzes performance metrics</li> <li>Automatically corrects the code at the breakpoint</li> </ul> </article> <article class="article"> <h3>11. How does setting up a Workspace in the Sources panel benefit developers?</h3> <ul> <li>Enables code version control</li> <li><strong>Saves changes to file system</strong></li> <li>Improves network performance</li> <li>Automates testing</li> <li>Automatically syncs code changes with a cloud service</li> </ul> </article> <article class="article"> <h3>12. How does the \'Evaluate triggers user activation\' setting affect JavaScript execution in the Console?</h3> <ul> <li>Changes the JavaScript context</li> <li><strong>Enables user interaction simulations</strong></li> <li>Alters the execution of async functions</li> <li>Affects how scripts are loaded</li> </ul> </article> <article class="article"> <h3>13. How does the \'Layer Borders\' tool aid in performance debugging?</h3> <ul> <li>By highlighting areas with CSS layout issues</li> <li><strong>By showing borders and tiles of page layers</strong></li> <li>By marking elements with JavaScript event listeners</li> <li>By identifying slow network requests</li> </ul> </article> <article class="article"> <h3>14. How does the \'Paint Flashing\' tool in Chrome DevTools help developers?</h3> <ul> <li>It\'s like a disco for webpages</li> <li>To debug JavaScript execution</li> <li><strong>Highlights areas of a webpage undergoing repainting</strong></li> <li>To check responsive design</li> </ul> </article> <article class="article"> <h3>15. How does throttling network speed in the Network panel aid developers?</h3> <ul> <li>By enhancing the network security</li> <li><strong>By simulating slower network conditions</strong></li> <li>By increasing the page load speed</li> <li>By monitoring WebSocket connections</li> <li>It helps optimize server response times</li> </ul> </article> <article class="article"> <h3>16. How frequently do Live Expressions in Chrome DevTools\' Console update their values?</h3> <ul> <li>Every 500 milliseconds</li> <li><strong>Every 250 milliseconds</strong></li> <li>In real-time without delay</li> <li>Every 1 second</li> <li>Only on days that end in \'y\'</li> </ul> </article> <article class="article"> <h3>17. How is local storage data viewed in Chrome DevTools?</h3> <ul> <li>Via the Network panel</li> <li>Through the Console</li> <li><strong>Using the Application panel</strong></li> <li>In the Elements panel</li> </ul> </article> <article class="article"> <h3>18. How is the \'Console\' drawer used in debugging within Chrome DevTools?</h3> <ul> <li><strong>For viewing network logs</strong></li> <li>To evaluate JavaScript in the current scope</li> <li>To change CSS styles</li> <li>To inspect HTML elements</li> <li>Serves as a cozy chat room for your code snippets</li> <li>Automatically suggests fixes for detected issues</li> </ul> </article> <article class="article"> <h3>19. In Chrome DevTools, which function allows you to quickly reposition the viewport to view a DOM node not currently in sight?</h3> <ul> <li>Inspect Element</li> <li><strong>Scroll into View</strong></li> <li>Force Element State</li> <li>Capture Node Screenshot</li> </ul> </article> <article class="article"> <h3>20. In what ways does the \'Filter\' function in Chrome DevTools assist with CSS debugging?</h3> <ul> <li>Filters network requests</li> <li>Highlights syntax errors</li> <li><strong>Searches for specific CSS properties</strong></li> <li>Shows only overridden properties</li> </ul> </article> <article class="article"> <h3>21. Is it possible to interact with local storage from the Console panel?</h3> <ul> <li><strong>Yes, through JavaScript</strong></li> <li>No, it\'s view-only</li> <li>Yes, but limited to viewing</li> <li>No, it requires special extensions</li> <li>Only data deletion is permitted via the Console</li> <li>You can give motivational speeches to your local storage via the Console</li> </ul> </article> <article class="article"> <h3>22. What are the key tools in Chrome DevTools for diagnosing rendering performance problems? (checkbox)</h3> <ul> <li><strong>Paint Flashing</strong></li> <li><strong>Layout Shift Regions</strong></li> <li><strong>Layer Borders</strong></li> <li><strong>Frame Rendering Stats</strong></li> <li><strong>Core Web Vitals</strong></li> </ul> </article> <article class="article"> <h3>23. What are the uses of the \'Frame Rendering Stats\' tool in performance analysis for developers?</h3> <ul> <li>To view memory usage</li> <li><strong>To monitor real-time frame rates</strong></li> <li>To analyze network requests</li> <li>To inspect DOM elements</li> </ul> </article> <article class="article"> <h3>24. What can you do in the Styles pane of Chrome DevTools?</h3> <ul> <li>Change JavaScript code</li> <li>Edit HTML structure</li> <li><strong>Modify CSS properties</strong></li> <li>Monitor network requests</li> </ul> </article> <article class="article"> <h3>25. What can you do with local storage key-value pairs in the Application panel?</h3> <ul> <li>Only view</li> <li>View and edit</li> <li><strong>View, edit, and delete</strong></li> <li>No interaction possible</li> <li>Synchronize them across different browsers</li> <li>Export them as a JSON file for backup</li> </ul> </article> <article class="article"> <h3>26. What does Chrome DevTools provide to manage shorthand and longhand CSS properties?</h3> <ul> <li>Automatic conversion between shorthand and longhand</li> <li><strong>Drop-down lists in the Styles pane</strong></li> <li>Separate tabs for each</li> <li>Color-coded distinction</li> </ul> </article> <article class="article"> <h3>27. What does crossing out a CSS declaration in the Styles pane indicate in Chrome DevTools?</h3> <ul> <li>Invalid CSS property</li> <li><strong>Overridden CSS property</strong></li> <li>Inactive CSS property</li> <li>Syntax error in CSS</li> <li>The CSS is playing a game of tic-tac-toe</li> </ul> </article> <article class="article"> <h3>28. What does enabling the \'Hide Network\' option in Chrome DevTools Console do?</h3> <ul> <li><strong>Hides network activity logs</strong></li> <li>Improves network performance</li> <li>Filters out network-related JavaScript logs</li> <li>Disables network panel</li> <li>It tells the network to play hide and seek</li> </ul> </article> <article class="article"> <h3>29. What does the \'Autocomplete from history\' feature do in Chrome DevTools Console?</h3> <ul> <li><strong>Suggests previously run commands</strong></li> <li>Completes JavaScript code automatically</li> <li>Remembers console command history</li> <li>Predicts future JavaScript expressions</li> <li>It automatically repeats the last executed command</li> </ul> </article> <article class="article"> <h3>30. What does the Console\'s utility function `debug()` do in Chrome DevTools?</h3> <ul> <li>Logs debugging information</li> <li><strong>Pauses code on a function call</strong></li> <li>Monitors performance</li> <li>Tracks network activity</li> <li>It\'s the panic button when your code goes rogue.</li> </ul> </article> <article class="article"> <h3>31. What does the \'Scope\' pane in the Sources panel of Chrome DevTools display?</h3> <ul> <li>HTML DOM changes</li> <li><strong>Local and global variables</strong></li> <li>CSS style modifications</li> <li>Network activity logs</li> <li>Displays a hierarchy of function calls</li> <li>Reveals the secret life of variables</li> </ul> </article> <article class="article"> <h3>32. What feature does Chrome DevTools offer to understand why a CSS property is inactive?</h3> <ul> <li><strong>Tooltip on hover</strong></li> <li>Detailed error message</li> <li>Link to external documentation</li> <li>Console warnings</li> </ul> </article> <article class="article"> <h3>33. What feature does the Sources panel provide for editing CSS and JavaScript?</h3> <ul> <li><strong>Inline editing in the Editor pane</strong></li> <li>Separate editing window</li> <li>Editing via the Console panel</li> <li>Using external editors only</li> <li>Automatically styles your code in your favorite color scheme</li> </ul> </article> <article class="article"> <h3>34. What feature in Chrome DevTools allows you to edit a node\'s type in the DOM Tree?</h3> <ul> <li>Edit as HTML</li> <li>Duplicate Node</li> <li><strong>Edit Node Type</strong></li> <li>Force Element State</li> </ul> </article> <article class="article"> <h3>35. What feature in Chrome DevTools lets you apply a CSS pseudostate to an element?</h3> <ul> <li><strong>The \':hov\' button located in the Styles pane</strong></li> <li>Console commands</li> <li>Elements panel options</li> <li>Network conditions</li> </ul> </article> <article class="article"> <h3>36. What feature of Chrome DevTools allows viewing of logged messages?</h3> <ul> <li>Gossip Panel</li> <li>Sources Panel</li> <li><strong>Console Panel</strong></li> <li>Network Panel</li> </ul> </article> <article class="article"> <h3>37. What happens when a new line is needed while typing a Live Expression in Chrome DevTools\' Console?</h3> <ul> <li>The expression is automatically executed</li> <li>A new Live Expression is created</li> <li><strong>Use Shift + Enter to start a new line</strong></li> <li>The Console clears the current expression</li> </ul> </article> <article class="article"> <h3>38. What is the function of the console.assert() command in Chrome DevTools?</h3> <ul> <li><strong>To log a message if an assertion is false</strong></li> <li>To stop JavaScript execution</li> <li>Works exactly the same as console.log()</li> <li>To monitor network requests</li> </ul> </article> <article class="article"> <h3>39. What is the implication of using the \'Force state\' feature in the Elements panel of Chrome DevTools?</h3> <ul> <li>Temporarily changes the page layout</li> <li>Permanently modifies the HTML file</li> <li><strong>Temporarily applies CSS pseudo-classes such as :hover or :focus</strong></li> <li>Forces a JavaScript event on the node</li> </ul> </article> <article class="article"> <h3>40. What is the primary function of Live Expressions in Chrome DevTools\' Console?</h3> <ul> <li>To debug JavaScript errors</li> <li><strong>To monitor real-time JavaScript values</strong></li> <li>To edit HTML content</li> <li>To analyze network requests</li> </ul> </article> <article class="article"> <h3>41. What is the primary function of the Snippets feature in Chrome DevTools\' Sources panel?</h3> <ul> <li>Debugging JavaScript</li> <li><strong>Running scripts on any page</strong></li> <li>Monitoring network activity</li> <li>Inspecting DOM elements</li> <li>Automatically generates code based on the user\'s behavior</li> </ul> </article> <article class="article"> <h3>42. What is the primary purpose of the Network panel in Chrome DevTools?</h3> <ul> <li>To monitor HTTP headers of a request</li> <li>To inspect JavaScript source code</li> <li>To modify CSS styles in real-time</li> <li><strong>To track and analyze network activity of web pages</strong></li> <li>To manage client-side caching mechanisms</li> </ul> </article> <article class="article"> <h3>43. What is the purpose of Event Listener Breakpoints in Chrome DevTools?</h3> <ul> <li>To debug JavaScript errors</li> <li>To monitor network requests</li> <li><strong>To pause code at specific DOM events</strong></li> <li>To edit JavaScript in real-time</li> <li>To log all events triggered on the page</li> </ul> </article> <article class="article"> <h3>44. What is the purpose of the Box Model in Chrome DevTools?</h3> <ul> <li>For JavaScript debugging</li> <li>To wrap virtual gifts for your favorite DOM elements</li> <li><strong>To adjust and view an element\'s CSS Box Model properties</strong></li> <li>To inspect the DOM hierarchy</li> </ul> </article> <article class="article"> <h3>45. What is the purpose of the \'Core Web Vitals\' overlay in Chrome DevTools?</h3> <ul> <li>To measure JavaScript execution time</li> <li>To identify page layout instability</li> <li><strong>To provide insights on user-centric performance metrics</strong></li> <li>To optimize CSS rendering</li> </ul> </article> <article class="article"> <h3>46. What is the purpose of the \'element.style\' section in the Styles pane?</h3> <ul> <li>To view the computed style</li> <li><strong>To add inline CSS to an element</strong></li> <li>To edit the external CSS file</li> <li>To inspect JavaScript bound to the element</li> </ul> </article> <article class="article"> <h3>47. What is the significance of \'Focus only on your code\' in the Sources panel?</h3> <ul> <li><strong>Filtering out third-party code</strong></li> <li>Highlighting syntax errors</li> <li>Enhancing code readability</li> <li>Optimizing performance</li> <li>Turns the Sources panel into a no-distraction zen garden</li> </ul> </article> <article class="article"> <h3>48. What method in Chrome DevTools is used to add a new CSS class to an element?</h3> <ul> <li><strong>Using the .cls option in the Styles pane</strong></li> <li>By editing the HTML directly</li> <li>Via the Console panel</li> <li>Through the Elements panel context menu</li> </ul> </article> <article class="article"> <h3>49. What shortcut key combination opens the Command menu in Chrome DevTools for enabling rulers on hover? (checkbox)</h3> <ul> <li><strong>Control + Shift + P</strong></li> <li>Alt + Shift + P</li> <li>Control + Alt + P</li> <li><strong>Command + Shift + P (Mac)</strong></li> <li>Alt + F4</li> </ul> </article> <article class="article"> <h3>50. What type of network activity can be captured using the \'Capture Screenshots\' feature in the Network panel?</h3> <ul> <li>Changes in CSS styles over time</li> <li><strong>Screenshots of how a page looked during loading</strong></li> <li>JavaScript errors occurring during page load</li> <li>HTML DOM mutations during page load</li> <li>Capturing user interactions during network calls</li> </ul> </article> ','<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>[St1] Client - Server interaction</h1> <strong>33 вопроса. Выполнил на 94 баллов из 100</strong> </article> <article class="article"> <h3>1. Choose the correct statements about AES and RSA. (checkbox)</h3> <ul> <li>AES is an encoding scheme</li> <li>RSA is a hashing algorithm</li> <li><strong>AES is a symmetric encryption algorithm</strong></li> <li><strong>RSA is an asymmetric encryption algorithm</strong></li> <li>They are ancient martial arts forms</li> <li>RSA uses the same key for encryption and decryption</li> <li>RSA is the \'Royal Society of Aliens\' favorite encryption method</li> </ul> </article> <article class="article"> <h3>2. How does a client-server model work in the context of the web?</h3> <ul> <li>The client provides data storage</li> <li>The server makes requests to the client</li> <li>Both client and server perform the same roles</li> <li><strong>The client requests resources, and the server provides them</strong></li> </ul> </article> <article class="article"> <h3>3. In HTTP, what does \'persistent connection\' mean?</h3> <ul> <li>A connection that survives even a zombie apocalypse</li> <li><strong>A connection that remains open for further requests after the first one</strong></li> <li>A connection that automatically reopens if it\'s closed</li> <li>A connection that uses persistent cookies</li> <li>A connection that cannot be closed</li> </ul> </article> <article class="article"> <h3>4. In HTTP, what does the term \'stateless\' imply?</h3> <ul> <li><strong>Servers have amnesia after each request</strong></li> <li>The protocol does not maintain any state between different message exchanges</li> <li>All HTTP requests must be sent in a single batch</li> <li>The server undergoes frequent state changes</li> <li>The server retains user data between different requests</li> </ul> </article> <article class="article"> <h3>5. In HTTP, what is the purpose of a \'Cache-Control\' header?</h3> <ul> <li>To control user access to the cached content</li> <li><strong>To specify caching policies for the document being sent</strong></li> <li>To compress the data in the cache</li> <li>To monitor cache sizes on the client</li> </ul> </article> <article class="article"> <h3>6. In SSL, what role does a Certificate Authority (CA) play?</h3> <ul> <li>It speeds up the encryption process</li> <li>It designs the website\'s layout</li> <li><strong>It issues digital certificates</strong></li> <li>It monitors website traffic</li> <li>It maintains a list of expired certificates</li> </ul> </article> <article class="article"> <h3>7. In the OSI Model, which layer encapsulates data for transmission between networks?</h3> <ul> <li>Transport Layer</li> <li>Session Layer</li> <li>Application Layer</li> <li>Network Layer</li> <li>Envelope Layer</li> <li><strong>Data Link Layer</strong></li> </ul> </article> <article class="article"> <h3>8. The Application Layer of the OSI Model is not responsible for:</h3> <ul> <li><strong>Routing data</strong></li> <li>Network resource access</li> <li>User interface provision</li> <li>Providing network services</li> </ul> </article> <article class="article"> <h3>9. What are common methods to ensure SSL implementation on a website? (checkbox)</h3> <ul> <li><strong>Installing an SSL certificate</strong></li> <li>Regularly updating website content</li> <li>Redirecting HTTP to HTTPS</li> <li>Using strong passwords</li> <li>Performing digital rain dances</li> <li>Conducting periodic security audits</li> </ul> </article> <article class="article"> <h3>10. What does \'HTTPS\' stand for?</h3> <ul> <li><strong>HyperText Transfer Protocol Secure</strong></li> <li>HyperText Transfer Protocol for Superheroes</li> <li>HyperText Transmission Protocol Secure</li> <li>HyperText Transfer Protocol Suite</li> <li>HyperText Transfer Protocol Speed</li> <li>HyperText Transmission Protocol Safety</li> </ul> </article> <article class="article"> <h3>11. What does the Physical Layer in the OSI Model primarily focus on?</h3> <ul> <li>Routing protocols</li> <li>Data encryption</li> <li><strong>Physical transmission of data</strong></li> <li>Session management</li> </ul> </article> <article class="article"> <h3>12. What is a \'cookie\' in web browsing?</h3> <ul> <li>A sweet snack</li> <li>A tool for hacking websites</li> <li><strong>A small piece of data stored on the user\'s computer</strong></li> <li>A device to speed up the internet</li> <li>A method for maintaining session state</li> </ul> </article> <article class="article"> <h3>13. What is a fundamental feature of Base64 encoding?</h3> <ul> <li>It uses a key for encoding and decoding</li> <li>It compresses data into binary format</li> <li>It is an encryption algorithm</li> <li><strong>It translates binary data into ASCII format</strong></li> </ul> </article> <article class="article"> <h3>14. What is a key distinction of asymmetric encryption?</h3> <ul> <li>It is mainly used for data compression</li> <li>It uses identical keys for encryption and decryption</li> <li><strong>It uses two different keys – a public key and a private key</strong></li> <li>It is faster than symmetric encryption</li> <li>It involves a secret handshake between keys</li> </ul> </article> <article class="article"> <h3>15. What is a key feature of symmetric encryption?</h3> <ul> <li>Uses a different key for encryption and decryption</li> <li>Is primarily used for hashing</li> <li><strong>Uses the same key for encryption and decryption</strong></li> <li>Operates only on text data</li> <li>Involves a secret handshake</li> </ul> </article> <article class="article"> <h3>16. What is CORS primarily used for in web development?</h3> <ul> <li>To encrypt data sent over HTTP</li> <li>To style web pages</li> <li><strong>To allow a server to indicate which origins can load its resources</strong></li> <li>To speed up website performance</li> </ul> </article> <article class="article"> <h3>17. What is the main function of a Domain Name System (DNS)?</h3> <ul> <li>To encrypt internet traffic</li> <li>To store website content</li> <li><strong>To translate domain names into IP addresses</strong></li> <li>To speed up internet connection</li> </ul> </article> <article class="article"> <h3>18. What is the main function of a \'User-Agent\' string in HTTP?</h3> <ul> <li>To authenticate the user\'s identity</li> <li><strong>To identify the browser and operating system to the server</strong></li> <li>To encrypt data between the client and server</li> <li>To measure the internet speed of the user</li> <li>To help in mobile device detection and optimization</li> </ul> </article> <article class="article"> <h3>19. What is the main purpose of encryption?</h3> <ul> <li>To speed up data transmission</li> <li>To compress data files</li> <li><strong>To convert data into a secure format to prevent unauthorized access</strong></li> <li>To create a backup of the data</li> <li>To make data readable by aliens</li> </ul> </article> <article class="article"> <h3>20. What is the main reason for the CORS preflight request?</h3> <ul> <li>To check server availability</li> <li>To ask the server, "Are you ready for this?"</li> <li><strong>To check that the server will permit the actual request</strong></li> <li>To authenticate the user</li> <li>To retrieve data before the actual request</li> </ul> </article> <article class="article"> <h3>21. What is the primary purpose of an IP address in the context of the internet?</h3> <ul> <li>To identify a user\'s location</li> <li>To encrypt data</li> <li>To increase internet speed</li> <li>To facilitate network communication</li> <li><strong>To provide a unique identifier for each device</strong></li> </ul> </article> <article class="article"> <h3>22. What is the primary purpose of HTTP?</h3> <ul> <li>To encrypt data sent over the internet</li> <li>To compress data to reduce transmission time</li> <li>To generate and manage website cookies</li> <li>To define the structure of messages between web servers and browsers</li> <li><strong>To provide a protocol for transferring data over the web</strong></li> </ul> </article> <article class="article"> <h3>23. What is the primary purpose of SSL?</h3> <ul> <li>To speed up website performance</li> <li><strong>To encrypt communications between a web server and a browser</strong></li> <li>To provide a graphical interface for websites</li> <li>To increase website storage capacity</li> <li>To serve as a digital doorman for websites</li> <li>To ensure data integrity in web transactions</li> </ul> </article> <article class="article"> <h3>24. What is the primary purpose of the OSI Model?</h3> <ul> <li><strong>To provide a standardized framework for network design</strong></li> <li>To increase internet speed</li> <li>To encrypt network communications</li> <li>To monitor network performance</li> <li>To define layers for troubleshooting network issues</li> <li>To predict the future of internet trends</li> </ul> </article> <article class="article"> <h3>25. What is the role of the Session Layer in the OSI Model?</h3> <ul> <li>Data encryption</li> <li><strong>Managing communication sessions</strong></li> <li>Physical data transmission</li> <li>Data format conversion</li> <li>Coordinating communication between devices</li> </ul> </article> <article class="article"> <h3>26. What status code class does \'404 Not Found\' belong to in HTTP?</h3> <ul> <li>0xx Existential crises</li> <li>2xx Success</li> <li><strong>4xx Client errors</strong></li> <li>5xx Server errors</li> <li>3xx Redirection</li> </ul> </article> <article class="article"> <h3>27. Which HTTP method is typically used to request the contents of a web page?</h3> <ul> <li>POST</li> <li><strong>GET</strong></li> <li>CONNECT</li> <li>TRACE</li> <li>ASK POLITELY</li> </ul> </article> <article class="article"> <h3>28. Which language is predominantly used for client-side scripting to make web pages interactive?</h3> <ul> <li>Python</li> <li>C++</li> <li>HTML</li> <li><strong>JavaScript</strong></li> <li>Elvish</li> <li>TypeScript</li> <li>ECMAScript</li> </ul> </article> <article class="article"> <h3>29. Which layer of the OSI Model is responsible for data format standardization?</h3> <ul> <li>Session Layer</li> <li>Network Layer</li> <li><strong>Presentation Layer</strong></li> <li>Fashion Layer</li> <li>Data Link Layer</li> <li>Physical Layer</li> </ul> </article> <article class="article"> <h3>30. Which layer of the OSI Model is responsible for reliable data transfer between end systems?</h3> <ul> <li>Teleportation Layer</li> <li><strong>Transport Layer</strong></li> <li>Application Layer</li> <li>Presentation Layer</li> <li>Data Link Layer</li> </ul> </article> <article class="article"> <h3>31. Which of the following is a characteristic of TCP in the context of internet communication?</h3> <ul> <li>Transmission of data without establishing a connection</li> <li><strong>Guarantees delivery of packets in the order sent</strong></li> <li>Only used for email communication</li> <li>Does not require an IP address</li> <li>Transmits Cat Pictures</li> </ul> </article> <article class="article"> <h3>32. Which of the following is a security measure enforced by browsers in relation to CORS?</h3> <ul> <li>Encrypting all scripts</li> <li><strong>Restricting cross-origin HTTP requests initiated from scripts</strong></li> <li>Disabling JavaScript</li> <li>Automatically deleting cookies</li> <li>Sending a virtual security guard</li> </ul> </article> <article class="article"> <h3>33. Which of the following methods are idempotent in HTTP? (checkbox)</h3> <ul> <li>POST</li> <li><strong>GET</strong></li> <li><strong>PUT</strong></li> <li><strong>DELETE</strong></li> <li>YELL</li> <li><strong>OPTIONS</strong></li> </ul> </article> <article class="article"> <h3>34. Which OSI layer handles error detection and correction? (checkbox)</h3> <ul> <li><strong>Transport Layer</strong></li> <li>Network Layer</li> <li>Physical Layer</li> <li><strong>Data Link Layer</strong></li> <li>Comedy Layer</li> </ul> </article> <article class="article"> <h3>35. Which protocol does SSL directly enhance the security of?</h3> <ul> <li><strong>HTTP</strong></li> <li>FTP</li> <li>SMTP</li> <li>UDP</li> </ul> </article> <article class="article"> <h3>36. Which protocol is primarily used for secure communication over the internet?</h3> <ul> <li>UFO (Unidentified Flying Object Protocol)</li> <li>SMTP (Simple Mail Transfer Protocol)</li> <li>HTTP (Hypertext Transfer Protocol)</li> <li>TLS (Transport Layer Security)</li> <li>FTP (File Transfer Protocol)</li> <li><strong>HTTPS (Hypertext Transfer Protocol Secure)</strong></li> </ul> </article> ','<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>[St1] Classes & Prototypes</h1> <strong>27 вопросов. Выполнил на 96 баллов из 100</strong> </article> <article class="article"> <h3>1. Can a class be declared as follows: const MyClass = class { ... }?</h3> <ul> <li><strong>Yes</strong></li> <li>No</li> </ul> </article> <article class="article"> <h3>2. Can a class be defined without specifying a constructor?</h3> <ul> <li>No, it will result in an error</li> <li>Yes, in that case, the constructor will not be called at all</li> <li><strong>Yes, in that case, the default constructor will be called (including the parent or an empty one)</strong></li> </ul> </article> <article class="article"> <h3>3. Can a class have both #someProp and someProp fields simultaneously?</h3> <ul> <li>No, but there won\'t be an error, only the first field will be assigned</li> <li>No, there will be an error</li> <li><strong>Yes</strong></li> </ul> </article> <article class="article"> <h3>4. Can classes inherit from built-in classes (Array, Map, etc.)?</h3> <ul> <li><strong>Yes</strong></li> <li>No</li> </ul> </article> <article class="article"> <h3>5. Can you assign __proto__ properties to objects in a circular manner?</h3> <ul> <li>Yes</li> <li><strong>No</strong></li> </ul> </article> <article class="article"> <h3>6. Does JavaScript support multiple inheritance?</h3> <ul> <li>Yes</li> <li><strong>No</strong></li> </ul> </article> <article class="article"> <h3>7. How can you create an object with a null prototype?</h3> <ul> <li>It is not possible to create an object with such a prototype</li> <li>const obj = null;</li> <li>const obj = {}; obj.prototype = null;</li> <li><strong>Object.create(null)</strong></li> <li>Object.create()</li> </ul> </article> <article class="article"> <h3>8. How many constructor methods can a class contain?</h3> <ul> <li><strong>1</strong></li> <li>2</li> <li>3</li> <li>&gt;3</li> </ul> </article> <article class="article"> <h3>9. In what mode is the code executed inside classes?</h3> <ul> <li><strong>In strict mode (use strict)</strong></li> <li>In non-strict mode</li> <li>It is impossible to determine</li> </ul> </article> <article class="article"> <h3>10. Is it a good practice to modify built-in prototypes?</h3> <ul> <li>No, it is not recommended to modify them</li> <li>Yes, there is no reason not to modify built-in prototypes</li> <li><strong>Yes, in case of creating polyfills</strong></li> </ul> </article> <article class="article"> <h3>11. Is there a difference between __proto__ and [[Prototype]]?</h3> <ul> <li>There is no difference</li> <li>[[Prototype]] is a function, while __proto__ is an object or primitive</li> <li><strong>[[Prototype]] is a hidden property of objects, while __proto__ is a combination of getter/setter that extends the internal prototype of the object</strong></li> <li>__proto__ is a hidden property of objects, while [[Prototype]] is a combination of getter/setter that extends the internal prototype of the object</li> </ul> </article> <article class="article"> <h3>12. Select the correct statements: (checkbox)</h3> <ul> <li><strong>Mixins allow to add properties/methods to an instance of a class without inheriting them from another class.</strong></li> <li>Mixins exist because JavaScript supports multiple inheritance.</li> <li><strong>Mixins can make use of inheritance inside themselves.</strong></li> <li>\'Mixin\' is just another way to say \'inheritance\'.</li> </ul> </article> <article class="article"> <h3>13. Select the correct statements: (checkbox)</h3> <il> <li>One object can have multiple [[Prototype]]</li> <li><strong>One object can only have one [[Prototype]]</strong></li> <li><strong>The \'isPrototypeOf\' method of an object checks if the object is part of the prototype chain of another object</strong></li> <li>The \'propertyIsEnumerable\' method of an object returns a boolean indicating whether the object has a prototype</li> </il> </article> <article class="article"> <h3>14. Select the correct statements: (checkbox)</h3> <ul> <li><strong>Protected properties of a class are conventionally named starting with the _ symbol, it is not supported at the language level, it is rather a well-known convention</strong></li> <li><strong>Protected methods are inherited</strong></li> <li>Protected methods are not inherited</li> <li><strong>Private properties and methods are conventionally named starting with the # symbol, it is supported at the language level</strong></li> <li><strong>Private properties and methods are only accessible within the class</strong></li> </ul> </article> <article class="article"> <h3>15. Select the correct statements: (checkbox)</h3> <ul> <li><strong>Static properties and methods of classes are inherited</strong></li> <li><strong>A static method is declared using the \'static\' keyword</strong></li> <li>Static methods belong to a specific object of a class, not the class itself</li> <li>Static properties are not inherited, but class methods are inherited</li> </ul> </article> <article class="article"> <h3>16. Select the correct statements: (checkbox)</h3> <ul> <li><strong>The \'instanceof\' operator allows you to check if an object belongs to a specific class, taking inheritance into account</strong></li> <li>The \'instanceof\' operator does not work with constructor functions</li> <li><strong>The \'instanceof\' operator can check if an object is inherited from a built-in class</strong></li> <li><strong>The \'instanceof\' operator checks the prototype chain, and JavaScript does not provide a way to check membership only to the parent</strong></li> </ul> </article> <article class="article"> <h3>17. Select the correct statements: (checkbox)</h3> <ul> <li><strong>\'typeof\' works for primitives and returns a string</strong></li> <li><strong>\'Object.prototype.toString()\' returns a string</strong></li> <li>\'instanceof\' works for primitives and returns true or false</li> <li><strong>\'instanceof\' works for objects</strong></li> </ul> </article> <article class="article"> <h3>18. Should class methods be separated by a comma (,)?</h3> <ul> <li>Yes</li> <li><strong>No</strong></li> <li>It is optional</li> </ul> </article> <article class="article"> <h3>19. What is a class in JavaScript?</h3> <ul> <li>A primitive</li> <li>A separate entity - a class</li> <li>An interface</li> <li><strong>A function</strong></li> <li>A logical expression</li> </ul> </article> <article class="article"> <h3>20. What is a polyfill?</h3> <ul> <li>Any method of a class that extends its capabilities</li> <li>Built-in methods of a specific object</li> <li>All methods of a specific object</li> <li><strong>An emulation of a method that exists in the JavaScript specification but is not yet supported by the JavaScript engine</strong></li> </ul> </article> <article class="article"> <h3>21. What is the purpose of the \'super()\' keyword used in a class constructor?</h3> <ul> <li><strong>super calls the parent constructor</strong></li> <li>to inherit classes, without explicitly calling super, the class will not be inherited and an error will occur</li> <li>to declare a class</li> <li>to override the constructor</li> <li>to set a getter\\setter</li> </ul> </article> <article class="article"> <h3>22. What is the term in OOP for the separation of internal interface from external interface?</h3> <ul> <li>inheritance</li> <li><strong>encapsulation</strong></li> <li>polymorphism</li> <li>abstraction</li> </ul> </article> <article class="article"> <h3>23. What keyword is used to create a class that inherits from another class?</h3> <ul> <li>using</li> <li>prototypes</li> <li><strong>extends</strong></li> <li>as</li> <li>super</li> <li>No correct answer</li> </ul> </article> <article class="article"> <h3>24. What value(s) can be assigned to proto? (checkbox)</h3> <il> <li><strong>object</strong></li> <li>primitive</li> <li><strong>null</strong></li> <li>undefined</li> <li>true/false</li> </il> </article> <article class="article"> <h3>25. Which kind of functions within a class do not have \'super\'? (When accessed from this function, the \'super\' is taken from the outer function)</h3> <ul> <li>function declaration</li> <li>function expression</li> <li><strong>arrow function</strong></li> <li>All functions have \'super\': when accessed from any function, \'super\' is not taken from the outer function</li> </ul> </article> <article class="article"> <h3>26. Which object method returns only the [[Prototype]] property?</h3> <ul> <li>create</li> <li><strong>getPrototypeOf</strong></li> <li>setPrototypeOf</li> <li>[[Prototype]]</li> </ul> </article> <article class="article"> <h3>27. Which term in OOP describes the ability of objects to take on many forms depending on the context?</h3> <ul> <li>inheritance</li> <li><strong>polymorphism</strong></li> <li>encapsulation</li> <li>abstraction</li> </ul> </article> ','<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>[St1] OOP Test</h1> <strong>20 вопросов. Выполнил на 95 баллов из 100</strong> </article> <article class="article"> <h3>1. A collection of objects characterized by common methods and properties:</h3> <ul> <li>Object</li> <li>Property</li> <li><strong>Class</strong></li> <li>Type</li> <li>Method</li> <li>The Methodical Mob</li> <li>Method Collection</li> </ul> </article> <article class="article"> <h3>2. At what level of abstraction should one strive for when determining the number of classes?</h3> <ul> <li>1-2 classes</li> <li>2-3 classes</li> <li>The more, the better</li> <li><strong>The minimum necessary</strong></li> </ul> </article> <article class="article"> <h3>3. Class diagrams in UML:</h3> <ul> <li>Are used to visualize and describe the dynamic aspects of a system or software application</li> <li><strong>Are used to model the structure of object-oriented applications, including classes, their attributes, inheritance, class relationships, etc.</strong></li> <li>Are used to know how objects interact with each other during a certain period of time and visualizes the timing constraints of a system</li> <li>Focus on lifelines, or the processes and objects that live simultaneously, the messages exchanged between them and the order of the interaction</li> <li>Are essentially a flowchart that shows activities performed by a system</li> </ul> </article> <article class="article"> <h3>4. How is a destructor characterized in Object-Oriented Programming?</h3> <ul> <li>Called upon the creation of an object</li> <li>Activated when any method within the class is called</li> <li><strong>Automatically invoked when an object is destroyed</strong></li> <li>Code\'s Retirement Ceremony</li> <li>No correct answer</li> </ul> </article> <article class="article"> <h3>5. How is the concept of "composition" understood in Object-Oriented Programming?</h3> <ul> <li><strong>One class contains and manages the lifecycle of an object from another class.</strong></li> <li>A class agrees to fulfill a contract by defining all methods described in the interface</li> <li>A class includes an object of another class without managing its lifecycle</li> <li>An object of one type is connected to an object of another type</li> <li>A class owns and is responsible for the objects it contains</li> <li>No correct answer</li> </ul> </article> <article class="article"> <h3>6. How is the concept of "method overloading" defined in Object-Oriented Programming?</h3> <ul> <li><strong>When 2 or more methods in a class have the same name but different parameters (varying in number or types)</strong></li> <li>When the parameters in a class method have the same name</li> <li>When 2 or more methods in a class have the same name but different parameters (different number of parameters, but not types)</li> <li>No correct answer</li> </ul> </article> <article class="article"> <h3>7. In Object-Oriented Programming, how is a constructor defined?</h3> <ul> <li>Called automatically when any method in the class is invoked</li> <li><strong>Called automatically when an object of the class is created</strong></li> <li>No correct answer</li> <li>Called automatically when an object of the class is destroyed</li> </ul> </article> <article class="article"> <h3>8. In Object-Oriented Programming, what is used to describe and define the behavior of an object?</h3> <ul> <li>Fields</li> <li>Objects</li> <li><strong>Methods</strong></li> <li>Classes</li> <li>Behaviors</li> </ul> </article> <article class="article"> <h3>9. In the context of Object-Oriented Programming, how is the term "association" defined?</h3> <ul> <li>A class fulfills a contract by defining all methods described within the interface</li> <li><strong>An object of one type being somehow connected to an object of another type</strong></li> <li>A relationship where one class contains an object of another class but does not manage the lifecycle of the other object</li> <li>A relationship where one class contains an object of another class and manages the lifecycle of the other object</li> <li>Friendship Between Code Classes</li> <li>Objects work together to achieve common goals</li> <li>No correct answer</li> </ul> </article> <article class="article"> <h3>10. In the context of Object-Oriented Programming, what does "implementation" refer to?</h3> <ul> <li>A class contains an object of another class and manages its lifecycle</li> <li>An object of one type is somehow connected to an object of another type</li> <li>A class contains an object of another class but does not manage the lifecycle of the other object</li> <li><strong>A class agrees to fulfill a contract by defining all methods described in the interface</strong></li> <li>No correct answer</li> </ul> </article> <article class="article"> <h3>11. Interaction diagrams in UML:</h3> <ul> <li>Are used to know how objects interact with each other during a certain period of time and visualizes the timing constraints of a system</li> <li>Focus on lifelines, or the processes and objects that live simultaneously, the messages exchanged between them and the order of the interaction</li> <li>Are essentially a flowchart that shows activities performed by a system</li> <li>Serve to model the structure of object-oriented applications, including classes, their attributes, inheritance, class relationships, etc.</li> <li><strong>Are used to visualize and describe the dynamic aspects of a system or software application</strong></li> </ul> </article> <article class="article"> <h3>12. Is it possible for a single class in Object-Oriented Programming to implement multiple interfaces at the same time?</h3> <ul> <li><strong>Yes, it can</strong></li> <li>No, it cannot</li> </ul> </article> <article class="article"> <h3>13. Is it true that the \'protected\' access modifier in Object-Oriented Programming allows accessibility from a derived class?</h3> <ul> <li>True</li> <li>False</li> </ul> </article> <article class="article"> <h3>14. Select the statements that are characteristic of an abstract class: (checkbox)</h3> <ul> <li><strong>Contains common functionality for related objects</strong></li> <li>Can create an instance</li> <li><strong>Can contain fields</strong></li> <li><strong>Can contain unrealized methods that require implementation in child classes</strong></li> <li><strong>Can contain a constructor</strong></li> <li>Can only contain public methods</li> </ul> </article> <article class="article"> <h3>15. Select the statements that are characteristic of an interface: (checkbox)</h3> <ul> <li><strong>Can only contain public methods</strong></li> <li><strong>Can contain fields</strong></li> <li><strong>Can contain unrealized methods that require implementation in classes according to the contract</strong></li> <li><strong>Contains common functionality for related objects</strong></li> <li>Can create an instance</li> <li>Can contain a constructor</li> </ul> </article> <article class="article"> <h3>16. Select the subcategories of UML diagrams: (checkbox)</h3> <ul> <li><strong>Structural</strong></li> <li>Class</li> <li><strong>Behavioral</strong></li> <li>Object</li> </ul> </article> <article class="article"> <h3>17. Should classes describe all possible properties and actions of real-world objects?</h3> <ul> <li><strong>They should</strong></li> <li>They should not</li> </ul> </article> <article class="article"> <h3>18. The main structural entities of the UML language are: (checkbox)</h3> <ul> <li><strong>Collaborations</strong></li> <li>State machines</li> <li><strong>Use cases</strong></li> <li>States</li> <li><strong>Classes</strong></li> <li><strong>Components</strong></li> <li><strong>Interfaces</strong></li> </ul> </article> <article class="article"> <h3>19. The property of objects where the same action with the same names results in different behavior for different objects:</h3> <ul> <li>Delegation</li> <li><strong>Polymorphism</strong></li> <li>Openness/Closure</li> <li>Abstraction</li> <li>Inheritance</li> <li>Encapsulation</li> <li>Interface Segregation</li> <li>Dynamic Dispatch</li> </ul> </article> <article class="article"> <h3>20. The UML language was developed to: (checkbox)</h3> <ul> <li><strong>Unify existing visual modeling methods</strong></li> <li><strong>Model the entire system using object-oriented methods</strong></li> <li><strong>Create a modeling language that can be used by humans and computers</strong></li> <li><strong>Address the scalability issue inherent in complex systems</strong></li> </ul> </article> <article class="article"> <h3>21. Timing diagrams in UML:</h3> <ul> <li>Are used to visualize and describe the dynamic aspects of a system or software application</li> <li><strong>Are used to know how objects interact with each other during a certain period of time and visualizes the timing constraints of a system</strong></li> <li>Are essentially a flowchart that shows activities performed by a system</li> <li>Focus on lifelines, or the processes and objects that live simultaneously, the messages exchanged between them and the order of the interaction</li> <li>Serve to model the structure of object-oriented applications, including classes, their attributes, inheritance, class relationships, etc.</li> </ul> </article> <article class="article"> <h3>22. What are the distinctive features of the \'private\' access modifier in Object-Oriented Programming? (checkbox)</h3> <ul> <li><strong>Accessible only within the declaring class</strong></li> <li>Accessible from a class that inherits from the declaring class</li> <li>Accessible from any part of the program</li> <li>The \'Keep Out\' Sign of Programming</li> </ul> </article> <article class="article"> <h3>23. What is the defining characteristic of the DRY (Don\'t Repeat Yourself) principle in programming?</h3> <ul> <li>Avoiding unnecessary complexity in tasks</li> <li>Not solving problems before they are required</li> <li><strong>Minimizing code duplication for efficiency</strong></li> <li>Optimizing code at an early development stage</li> </ul> </article> <article class="article"> <h3>24. What is the difference between an instance method and a static method?</h3> <ul> <li><strong>To call an instance method, it is necessary to create an instance of an object. A static method is not tied to an instance and can be called without creating an object</strong></li> <li>To call a static method, it is necessary to create an instance of an object. An instance method can be called without creating an object</li> <li>An instance method is a method inside a class. A static method is a method outside a class</li> <li>There is no difference</li> <li>A static method is a method inside a static class, and an instance method is a method inside an abstract class</li> </ul> </article> <article class="article"> <h3>25. What are the fundamental principles of Object-Oriented Programming (OOP)? (checkbox)</h3> <ul> <li><strong>Inheritance</strong></li> <li><strong>Polymorphism</strong></li> <li>Delegation</li> <li>Openness/Closure</li> <li><strong>Encapsulation</strong></li> <li>Interface Segregation</li> <li>Class Abstraction</li> </ul> </article> <article class="article"> <h3>26. What is the full meaning of the acronym "OOP" in programming?</h3> <ul> <li>Fundamentals of Object-Oriented Programming</li> <li><strong>Object-Oriented Programming</strong></li> <li>Object-Oriented Programs</li> <li>Overly Optimistic Porcupine</li> <li>Operational Object Programming</li> </ul> </article> <article class="article"> <h3>27. What is the term for an action or operation that an object can perform in Object-Oriented Programming?</h3> <ul> <li>Property</li> <li>Event</li> <li><strong>Method</strong></li> <li>Digital Jugglery</li> <li>Operation</li> <li>No correct answer</li> </ul> </article> ','<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>[St1] Final test stage#1</h1> <strong>33 вопроса. Выполнил на 91 баллов из 100</strong> </article> <article class="article"> <h3>Are media queries case-sensitive?</h3> <ul> <li>yes</li> <li><strong>no</strong></li> </ul> </article> <article class="article"> <h3>1. Class diagrams in UML:</h3> <ul> <li>Are used to visualize and describe the dynamic aspects of a system or software application</li> <li><strong>Are used to model the structure of object-oriented applications, including classes, their attributes, inheritance, class relationships, etc.</strong></li> <li>Are used to know how objects interact with each other during a certain period of time and visualizes the timing constraints of a system</li> <li>Focus on lifelines, or the processes and objects that live simultaneously, the messages exchanged between them and the order of the interaction</li> <li>Are essentially a flowchart that shows activities performed by a system</li> </ul> </article> <article class="article"> <h3>2. Does the specification allow to add HTML tags after the &lt;body&gt; closing tag?</h3> <ul> <li>Yes, but these tags will be rendered after &lt;body&gt; in the DOM tree</li> <li>Yes, but these tags will be rendered inside &lt;body&gt;</li> <li>Yes, but they will not render</li> <li>No, and such tags will not render</li> <li><strong>No, but they will render inside &lt;body&gt;</strong></li> <li>No, but they will render after &lt;body&gt; in the DOM tree</li> </ul> </article> <article class="article"> <h3>6. How does applying KISS principle benefit new team members?</h3> <ul> <li><strong>Reduces onboarding time</strong></li> <li>Increases code complexity</li> <li>Encourages individual work</li> <li>Limits creativity</li> </ul> </article> <article class="article"> <h3>3. How does webpack\'s \'mode\' setting affect the build?</h3> <ul> <li>Determines the file types</li> <li>Sets the language level</li> <li><strong>Enables built-in optimizations</strong></li> <li>Changes the output directory</li> </ul> </article> <article class="article"> <h3>4. How many times does a JS module code imports?</h3> <ul> <li>After every re-render</li> <li><strong>Only once, at the initial import</strong></li> <li>Varies depending on the code structure</li> <li>None of above</li> <li>Whenever it feels like it needs a change of scenery</li> </ul> </article> <article class="article"> <h3>5. How to assign a name to a grid area?</h3> <ul> <li><strong>grid-area: hd;</strong></li> <li>grid-template-areas: "hd hd hd";</li> <li>grid-area: hd 2 / 4 / 3 / 8;</li> <li>none of the above</li> </ul> </article> <article class="article"> <h3>6. I can’t find myself in the Total score and see how many points I have. How to do it?</h3> <ul> <li><strong>Open the Score tab. In the table row after Github, click on the magnifying glass, enter your nickname on GitHub and press \'Enter\'</strong></li> <li>Open the Score tab. Sort everyone by name and view all pages in a row</li> <li>Open the Score tab. Sort everyone by nickname in Github and view all pages in a row</li> <li>Write to the #question-to-admins channel. They\'ll find it there right away</li> </ul> </article> <article class="article"> <h3>7. Identify the correct touch event types supported in JavaScript. (checkbox)</h3> <ul> <li>touchenter</li> <li><strong>touchstart</strong></li> <li><strong>touchmove</strong></li> <li>touchleave</li> <li><strong>touchend</strong></li> <li><strong>touchcancel</strong></li> </ul> </article> <article class="article"> <h3>14. In webpack, how does the \'filename\' property within \'output\' affect the build?</h3> <ul> <li>Sets up the code splitting strategy</li> <li>Configures the public path</li> <li>Determines module format</li> <li>Instructs webpack on which files to exclude from bundling</li> <li><strong>Defines the bundle name</strong></li> </ul> </article> <article class="article"> <h3>8. In which element is the "media" attribute incorrectly specified?</h3> <ul> <li><strong>&lt;img src="flowers.jpg" alt="flowers" media="max: 500, min: 350"&gt;</strong></li> <li>&lt;link href="mobile.css" rel="stylesheet" media="screen and (max-width: 750px)"&gt;</li> <li>&lt;source srcset="flowers.jpg" media="(max-width: 1400px)"&gt;</li> <li>&lt;a href="att_a_media.asp?output=print" media="print and (resolution:300dpi)"&gt;...&lt;/a&gt;</li> </ul> </article> <article class="article"> <h3>9. In which usage scenarios do Linked List and Array show significantly different operation execution speeds? (checkbox)</h3> <ul> <li><strong>Accessing an arbitrary element by index</strong></li> <li><strong>Modifying an arbitrary element by index</strong></li> <li>Outputting all list / array elements to the console</li> <li>Removing an element from the list / array</li> </ul> </article> <article class="article"> <h3>10. Interaction diagrams in UML:</h3> <ul> <li>Are used to know how objects interact with each other during a certain period of time and visualizes the timing constraints of a system</li> <li>Focus on lifelines, or the processes and objects that live simultaneously, the messages exchanged between them and the order of the interaction</li> <li>Are essentially a flowchart that shows activities performed by a system</li> <li>Serve to model the structure of object-oriented applications, including classes, their attributes, inheritance, class relationships, etc.</li> <li><strong>Are used to visualize and describe the dynamic aspects of a system or software application</strong></li> </ul> </article> <article class="article"> <h3>11. Is the condition truthy: document.body.parentNode === document.documentElement?</h3> <ul> <li><strong>Yes</strong></li> <li>No</li> </ul> </article> <article class="article"> <h3>12. Select the correct statements: (checkbox)</h3> <ul> <li><strong>Static properties and methods of classes are inherited</strong></li> <li><strong>A static method is declared using the \'static\' keyword</strong></li> <li>Static methods belong to a specific object of a class, not the class itself</li> <li>Static properties are not inherited, but class methods are inherited</li> </ul> </article> <article class="article"> <h3>13. Select the valid control directives and loop expressions used in Sass: (checkbox)</h3> <ul> <li><strong>@if</strong></li> <li><strong>@for</strong></li> <li><strong>@each</strong></li> <li><strong>@while</strong></li> <li>@goto</li> </ul> </article> <article class="article"> <h3>14. What commands can be used to make changes to the latest commit? (checkbox)</h3> <ul> <li><strong>git commit --amend --no-edit</strong></li> <li><strong>git commit --amend</strong></li> <li>git commit -am</li> <li>git commit -m</li> </ul> </article> <article class="article"> <h3>15. What does destructuring assignment do?</h3> <ul> <li><strong>“Unpacks” arrays or objects into a bunch of variables</strong></li> <li>Destroys an object provided as argument</li> <li>Shows structure object passed as argument</li> <li>Creates variables in a row using one keyword</li> </ul> </article> <article class="article"> <h3>16. What does \'IP\' in \'IP address\' stand for?</h3> <ul> <li>Intelligent Protocol</li> <li>Incredible Pizza</li> <li>Instant Pudding</li> <li><strong>Internet Protocol</strong></li> </ul> </article> <article class="article"> <h3>24. What is a dynamic import?</h3> <ul> <li><strong>Module import in conditional statement</strong></li> <li>Function-like expression that allows loading modules asynchronously</li> <li>Re-exported imports</li> <li>All of the above</li> </ul> </article> <article class="article"> <h3>17. What is a key feature of symmetric encryption?</h3> <ul> <li>Uses a different key for encryption and decryption</li> <li>Is primarily used for hashing</li> <li><strong>Uses the same key for encryption and decryption</strong></li> <li>Operates only on text data</li> <li>Involves a secret handshake</li> </ul> </article> <article class="article"> <h3>18. What is a .prettierrc file?</h3> <ul> <li><strong>Configuration file used by Prettier</strong></li> <li>Configuration file used by Node.js</li> <li>Configuration file used by ESLint</li> <li>File with this name doesn\'t exist</li> </ul> </article> <article class="article"> <h3>19. What is the difference between git fetch AND git pull</h3> <ul> <li>git fetch creates a new branch off the master branch, while git pull creates a new branch off the local repository\'s master branch.</li> <li>git pull downloads new data from a remote repository without integrating it into local files, while git fetch updates the current HEAD branch with the latest changes from the remote server.</li> <li>git fetch updates remote tracking branches with changes from a remote repository, while git pull updates remote tracking branches with changes from a remote repository and merges them into their corresponding local branches.</li> <li>git fetch downloads and merges data from the local repository, while git pull informs your colleagues you are about to make changes to the master branch.</li> <li><strong>None of these</strong></li> </ul> </article> <article class="article"> <h3>19. What is the fundamental role of the Internet?</h3> <h3>Какова фундаментальная роль Интернета</h3> <ul> <li>A large storage system for data</li> <li>A service provided by specific companies to access websites</li> <li><strong>A large network of computers that communicate with each other</strong></li> <li>A physical infrastructure spanning across continents</li> </ul> </article> <article class="article"> <h3>20. What is the result of: 2 + \'2\'?</h3> <ul> <li>4</li> <li>\'4\'</li> <li><strong>\'22\'</strong></li> <li>22</li> <li>NaN</li> </ul> </article> <article class="article"> <h3>21. What is the result of: \'6\' * \'3\'?</h3> <ul> <li>NaN</li> <li>true</li> <li><strong>18</strong></li> <li>\'18\'</li> <li>63</li> <li>\'63\'</li> </ul> </article> <article class="article"> <h3>22. What is the result of: null===undefined?</h3> <ul> <li>null</li> <li>undefined</li> <li>true</li> <li><strong>false</strong></li> </ul> </article> <article class="article"> <h3>21. What methods are available on a JavaScript event object? (checkbox)</h3> <ul> <li>preventPropagation</li> <li><strong>preventDefault</strong></li> <li><strong>stopPropagation</strong></li> <li>stopDefault</li> </ul> </article> <article class="article"> <h3>22. What method returns the value of the specified element attribute?</h3> <ul> <li>hasAttribute()</li> <li><strong>getAttribute()</strong></li> <li>setAttribute()</li> <li>attributes()</li> </ul> </article> <article class="article"> <h3>23. What statement is correct about attribute \'novalidate\' for the &lt;form&gt; tag?</h3> <ul> <li>This attribute doesn\'t exist</li> <li><strong>It turns off automatic validation by browser and Constraint Validation API support</strong></li> <li>It turns off automatic validation by browser and turns on Constraint Validation API support</li> <li>It turns off built-in error messages and lets to add custom messages instead using JS</li> </ul> </article> <article class="article"> <h3>24. What statements about modern CSS are correct? (checkbox)</h3> <ul> <li><strong>Trigonometric functions are available for use in CSS</strong></li> <li><strong>You can mix any colors using mix color function</strong></li> <li>There are no new added features to CSS since releasing of Flexbox</li> <li>CSS is about to be replaced with SCSS</li> </ul> </article> <article class="article"> <h3>25. What will be the result of executing the code \'\\nHey!\'[1]?</h3> <ul> <li>\\n</li> <li>n</li> <li><strong>H</strong></li> <li>e</li> <li>Uncaught SyntaxError: Invalid or unexpected token</li> </ul> </article> <article class="article"> <h3>26. What will be the result of the code execution? <br>function foo(a, b) { <br> return a * b; <br>} <br>const bar = foo.bind(null, 2); <br>bar(2); </h3> <ul> <li>2</li> <li><strong>4</strong></li> <li>NaN</li> <li>Will be an error</li> </ul> </article> <article class="article"> <h3>27. What will the code below output to the console? <br>console.log(message); <br>var message = \'Hello\';</h3> <ul> <li>\'Hello\'</li> <li><strong>undefined</strong></li> <li>Will be an error</li> </ul> </article> <article class="article"> <h3>28. What will the code below output to the console? <br>console.log(message); <br>let message = \'Hello\';</h3> <ul> <li>\'Hello\'</li> <li>undefined</li> <li><strong>Will be an error</strong></li> </ul> </article> <article class="article"> <h3>29. Which data structure is most convenient for working with nested properties / parameters?</h3> <ul> <li>Set</li> <li><strong>Map / Tree / Object</strong></li> <li>Array</li> <li>Linked List</li> </ul> </article> <article class="article"> <h3>30. Which graph traversal algorithm employs a queue?</h3> <ul> <li>Depth-First Search</li> <li><strong>Breadth-First Search</strong></li> <li>Binary Search</li> <li>Merge Sort</li> </ul> </article> <article class="article"> <h3>31. Which of the following template categories, as defined by Luke Wroblewski, are commonly used in creating responsive web designs?</h3> <ul> <li>Mostly Fluid</li> <li>Column Drop</li> <li>Layout Shifter</li> <li>Tiny Tweaks</li> <li>Off Canvas</li> <li>combinations of templates (e.g., Column Drop and Off Canvas)</li> <li>none of the above</li> <li><strong>all of them</strong></li> </ul> </article> <article class="article"> <h3>32. Which of the following ways can you define a function to add two numbers in JavaScript? (checkbox)</h3> <ul> <li>const sum = {a, b} => ( return a + b )</li> <li><strong>const sum = (a, b) => { return a + b }</strong></li> <li>const sum = {a, b} => a + b</li> <li><strong>const sum = (a, b) => a + b</strong></li> <li>const sum = a, b => a + b</li> </ul> </article> <article class="article"> <h3>21. Which property helps to hide an element from the page, as if it never existed?</h3> <ul> <li>display: block</li> <li>display: inline</li> <li>display: inline-block</li> <li>display: list-item</li> <li><strong>display: none</strong></li> <li>display: run-in</li> <li>display: table</li> <li>display: flex</li> <li>display: magic-disappearo-trick</li> </ul> </article> <article class="article"> <h3>33. Which track sizes can you use to create a grid?</h3> <ul> <li>Fixed track sizes</li> <li>Flexible track sizes</li> <li><strong>Both of them</strong></li> <li>None of them</li> </ul> </article> ','<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>[St2] TypeScript Basics</h1> <strong>33 вопроса. Выполнил на 88 баллов из 100</strong> </article> <article class="article"> <h3>1. According to Microsoft recommendations, should the name of an interface in TS start with an additional \'I\'?</h3> <ul> <li>Yes, it should.</li> <li><strong>No, it is not recommended.</strong></li> </ul> </article> <article class="article"> <h3>2. Can a function in TS accept another function as an argument?</h3> <ul> <li><strong>Yes, it can.</strong></li> <li>No, it cannot.</li> <li>By default, it cannot, but you can create conditions under which it becomes possible.</li> </ul> </article> <article class="article"> <h3>3. Can a function in TS return an object?</h3> <ul> <li><strong>Yes, it can.</strong></li> <li>No, it cannot.</li> <li>By default, it cannot, but you can create conditions under which it becomes possible.</li> <li>It depends on the type of function (declaration, expression, arrow).</li> </ul> </article> <article class="article"> <h3>4. Can JavaScript code be executed in a file with the .ts extension?</h3> <ul> <li><strong>Yes, it can.</strong></li> <li>No, it cannot.</li> </ul> </article> <article class="article"> <h3>5. Can you pass more parameters than expected in a function call in TS?</h3> <ul> <li>No, you cannot.</li> <li><strong>Yes, you can.</strong></li> </ul> </article> <article class="article"> <h3>6. Can you set a value that is another expression (e.g., a function call) as the default value for function parameters in TS?</h3> <ul> <li><strong>No, you cannot.</strong></li> <li>Yes, you can.</li> <li>By default, you cannot, but you can create conditions under which it becomes possible.</li> </ul> </article> <article class="article"> <h3>7. Can you use alert() in TS?</h3> <ul> <li><strong>Yes, you can.</strong></li> <li>No, you cannot.</li> </ul> </article> <article class="article"> <h3>8. Does array destructuring work in TS?</h3> <ul> <li><strong>Yes</strong></li> <li>No, it doesn\'t work</li> <li>Only in readonly arrays</li> </ul> </article> <article class="article"> <h3>9. How can you add type annotations to variables in TypeScript?</h3> <ul> <li>Before the variable, using "int x = 0;" style declarations.</li> <li><strong>After the variable, using "let x: string = \'hello\';" style declarations.</strong></li> <li>Using the type keyword.</li> <li>TypeScript automatically infers types; no annotations needed.</li> </ul> </article> <article class="article"> <h3>10. How do you correctly describe the type of a function: function func(){ console.log("My function"); };</h3> <ul> <li>()=>string;</li> <li><strong>()=>void;</strong></li> <li>(string)=>void;</li> <li>(undefined)=>void;</li> <li>There is no correct answer.</li> </ul> </article> <article class="article"> <h3>11. In the expression \'let someVar: any = "hello"; test = 23;\'</h3> <ul> <li><strong>No error will occur</strong></li> <li>There will be an error because the type is not specified in the second expression</li> <li>There will be an error because the types do not match in the first and second expressions</li> <li>There is no correct answer</li> </ul> </article> <article class="article"> <h3>12. In the expression \'let test: any = "hello"; test = 23;\'</h3> <ul> <li>There will be an error because the type is not specified in the first expression.</li> <li>There will be an error because the type is not specified in the second expression.</li> <li><strong>No error will occur.</strong></li> <li>There is no correct answer.</li> </ul> </article> <article class="article"> <h3>13. In the expression \'let test: string = "hello world"; test = 23;\'</h3> <ul> <li>No error will occur.</li> <li>There will be an error because the type is not specified in the second expression.</li> <li><strong>There will be an error because the types of the first and second expressions do not match.</strong></li> <li>There is no correct answer.</li> </ul> </article> <article class="article"> <h3>14. In TypeScript, what is the default visibility modifier for class members?</h3> <ul> <li><strong>public</strong></li> <li>private</li> <li>protected</li> <li>internal</li> </ul> </article> <article class="article"> <h3>15. In TypeScript, which syntax is used to declare a variable that can be either a \'number\' or a \'string\'?</h3> <ul> <li>Types cannot be combined in TS.</li> <li>number && string</li> <li><strong>number | string</strong></li> <li>number || string</li> <li>number & string</li> </ul> </article> <article class="article"> <h3>16. Is it possible to combine two or more other types to form a combined type representing values that may be any one of those initial types?</h3> <ul> <li><strong>Yes, it is called a union.</strong></li> <li>Yes, it is called an onion.</li> <li>Yes, it is called a merger.</li> <li>No, it is not possible.</li> </ul> </article> <article class="article"> <h3>17. Is the function call func(\'1\',\'2\') valid for the function function func(a: number, b: number){ ...some code... }?</h3> <ul> <li>The call is valid, there will be no error.</li> <li>The call is incorrect, but there will be no error.</li> <li><strong>The call is incorrect and there will be an error.</strong></li> </ul> </article> <article class="article"> <h3>18. Select the type for let person = ["Alan", 20]; (checkbox)</h3> <ul> <li>It is impossible to write a type for this structure</li> <li>number[ ]</li> <li>[number, string]</li> <li>string[ ]</li> <li><strong>[string, number]</strong></li> <li>[never]</li> <li>[any]</li> </ul> </article> <article class="article"> <h3>19. Select types in TS: (checkbox)</h3> <ul> <li>int</li> <li><strong>string</strong></li> <li><strong>object</strong></li> <li><strong>any</strong></li> <li><strong>boolean</strong></li> <li><strong>tuple</strong></li> <li><strong>never</strong></li> <li>double</li> <li><strong>Array</strong></li> </ul> </article> <article class="article"> <h3>20. Valid syntax in TS: (checkbox)</h3> <ul> <li><strong>let test = "hello world";</strong></li> <li><strong>let test: string = "hello world";</strong></li> <li>let test string = "hello world";</li> <li>let string test = "hello world";</li> <li><strong>let test: any = "hello world";</strong></li> </ul> </article> <article class="article"> <h3>21. What distinguishes type aliases from interfaces in TypeScript?</h3> <ul> <li>Type aliases are extendable, while interfaces are not.</li> <li><strong>Type aliases cannot be re-opened to add new properties, while interfaces can.</strong></li> <li>Type aliases are more powerful and versatile than interfaces.</li> <li>Interfaces cannot be used to declare the shapes of objects.</li> </ul> </article> <article class="article"> <h3>22. What does the function type expression (a: string) => void mean in TypeScript?</h3> <ul> <li><strong>A function with one parameter named "a" of type string, returning void.</strong></li> <li>A function with one parameter named "string" of type any.</li> <li>A function with a parameter named "a" of type any.</li> <li>A function with no parameters and returns void.</li> </ul> </article> <article class="article"> <h3>23. What does the keyof operator do?</h3> <ul> <li>It takes an array and produces a union of its elements.</li> <li><strong>It takes an object type and produces a union of its keys.</strong></li> <li>It converts a string or number into a union type.</li> <li>It extracts the values from an array of objects.</li> </ul> </article> <article class="article"> <h3>24. What does the question mark (?) signify when used in TypeScript object types?</h3> <ul> <li>The property is required.</li> <li><strong>The property is optional.</strong></li> <li>The property is read-only.</li> <li>The property is a function.</li> </ul> </article> <article class="article"> <h3>25. What does the postfix ! operator do in TypeScript?</h3> <ul> <li>It negates a boolean value.</li> <li><strong>It asserts that a value isn\'t null or undefined.</strong></li> <li>It converts a variable to a different type.</li> <li>It is used for arithmetic operations.</li> </ul> </article> <article class="article"> <h3>26. What is a limitation of const assertions?</h3> <ul> <li>They can only be applied to complex literal expressions.</li> <li>Const contexts immediately convert expressions to be fully immutable.</li> <li>They cannot be used with array literals.</li> <li><strong>They can only be applied to simple literal expressions.</strong></li> </ul> </article> <article class="article"> <h3>27. What is \'as\' in TS?</h3> <ul> <li><strong>It is a type assertion, a way to specify to the compiler which type (previously declared) the variable will have.</strong></li> <li>It is a way to combine types and assign a different type (not previously defined) to a variable during compilation forcibly.</li> <li>It is a replacement of the type previously described for a variable with the type needed in a specific line.</li> <li>It is a deprecated operator that is not used at the moment.</li> </ul> </article> <article class="article"> <h3>28. What is the main advantage of the new unknown top type introduced in TypeScript 3.0?</h3> <ul> <li>It absorbs everything in a union type.</li> <li>It allows operations without type assertion or narrowing.</li> <li><strong>It is assignable to any type without restrictions.</strong></li> <li>It is assignable only to itself and "any" without a type assertion or control flow based narrowing.</li> </ul> </article> <article class="article"> <h3>29. What is the purpose of intersection types in TypeScript?</h3> <ul> <li><strong>To create new types by extending existing types using the & operator.</strong></li> <li>To define the relationship between interfaces and objects.</li> <li>To handle conflicts between types and aliases.</li> <li>To create generic helper types.</li> </ul> </article> <article class="article"> <h3>30. What is the type called for the structure: let person: [string, number] = ["Alan", 20];</h3> <ul> <li>Readonly Array</li> <li>Enum</li> <li><strong>Tuple</strong></li> <li>Array</li> </ul> </article> <article class="article"> <h3>31. What is the value of C in enum One {A = 1,B = 5,C,D = 0}?</h3> <ul> <li>3</li> <li>undefined</li> <li><strong>6</strong></li> <li>5</li> <li>There will be an error</li> </ul> </article> <article class="article"> <h3>32. What types of functions can be written in TS? (checkbox)</h3> <ul> <li><strong>function declaration</strong></li> <li><strong>function expression</strong></li> <li><strong>arrow function</strong></li> </ul> </article> <article class="article"> <h3>33. What values can the type-checking operator return? (checkbox)</h3> <ul> <li><strong>symbol</strong></li> <li><strong>number</strong></li> <li><strong>boolean</strong></li> <li>tuple</li> <li><strong>string</strong></li> <li><strong>undefined</strong></li> <li><strong>bigint</strong></li> <li>any</li> </ul> </article> <article class="article"> <h3>34. When deciding between type aliases and interfaces, what is recommended to use?</h3> <ul> <li><strong>Always use type aliases for better performance.</strong></li> <li>Use type for simple structures and interfaces for complex structures.</li> <li>Use interfaces until you need features from type, then switch to type.</li> <li>There is no significant difference; choose based on personal preference.</li> </ul> </article> <article class="article"> <h3>35. When working with class constructors in TypeScript, what is a key difference between function signatures and constructor signatures?</h3> <ul> <li>Constructors can have type parameters, unlike functions</li> <li>Constructors can have return type annotations, unlike functions</li> <li><strong>Constructors always return the class instance type</strong></li> <li>Constructors cannot have default values for parameters</li> </ul> </article> <article class="article"> <h3>36. Which enum declaration is correct? (checkbox)</h3> <ul> <li><strong>enum Month { Jan, Feb, Mar, Apr }</strong></li> <li><strong>enum Month { Jan=1, Feb=2, Mar=3, Apr=5 }</strong></li> <li>enum Month = { Jan, Feb, Mar=3, Apr }</li> <li>enum Month { Jan=\'Янв\', Feb=\'Фев\', Mar, Apr=\'Апр\' }</li> <li><strong>enum Month { Jan=1, Feb=2, Mar, Apr=5 }</strong></li> <li>enum Month { Jan, Feb=\'Фев\', Mar, Apr=\'Апр\' }</li> <li>enum Month = { Jan, Feb=\'Фев\', Mar=\'Мар\', Apr=\'Апр\' }</li> <li><strong>enum Month { Jan=1, Feb=2, Mar, Apr=\'Апр\' }</strong></li> </ul> </article> <article class="article"> <h3>37. Which of the following are correct ways to perform type assertions in TypeScript? (checkbox)</h3> <ul> <li><strong>const myCanvas = document.getElementById("main_canvas") as HTMLCanvasElement;</strong></li> <li><strong>const myCanvas = &lt;HTMLCanvasElement&gt;document.getElementById("main_canvas");</strong></li> <li><strong>const myCanvas = document.getElementById("main_canvas") as string;</strong></li> <li>const myCanvas = (HTMLCanvasElement)document.getElementById("main_canvas");</li> </ul> </article> <article class="article"> <h3>38. Which of the following syntax options is valid for const assertions in TypeScript?</h3> <ul> <li>let x = "hello" &lt;const&gt;;</li> <li><strong>let y = [10, 20] as const;</strong></li> <li>let z = { text: "hello" } const;</li> <li>let a = (Math.random() &lt; 0.5 ? 0 : 1) as const;</li> </ul> </article> <article class="article"> <h3>39. Which type corresponds to the array let arr = [1, 2, 3];? (checkbox)</h3> <ul> <li><strong>number[ ]</strong></li> <li>string[ ]</li> <li>Array</li> <li><strong>Array&lt;number&gt;</strong></li> <li>Array&lt;string&gt;</li> </ul> </article> <article class="article"> <h3>40. Which type corresponds to the array let arr = [1, 2, 3]; where the elements cannot be modified?</h3> <ul> <li><strong>ReadonlyArray&lt;number&gt;</strong></li> <li>ReadonlyArray&lt;string&gt;</li> <li>ReadonlyArray</li> <li>readonly string[ ]</li> <li><strong>readonly number[ ]</strong></li> </ul> </article> <article class="article"> <h3>41. Which TypeScript strictness flag makes TypeScript issue an error on variables implicitly inferred as \'any\'?</h3> <ul> <li>strictNullChecks</li> <li><strong>noImplicitAny</strong></li> <li>strict</li> <li>noSurpriseVariables</li> <li>noAnyChecks</li> </ul> </article> <article class="article"> <h3>42. With strictNullChecks turned on in TypeScript, what is the behavior when a value is null or undefined?</h3> <ul> <li>Values can be accessed normally without any issues</li> <li>Null and undefined can be assigned to a property of any type.</li> <li><strong>Values must be tested for null or undefined before using methods or properties.</strong></li> <li>Both a and b.</li> </ul> </article> ','<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>[St2] TS Advanced [EN]</h1> <strong>41 вопрос. Выполнил на 85 баллов из 100</strong> </article> <article class="article"> <h3>1. A primitive data type which represents the type of values that never occur.</h3> <ul> <li>any</li> <li><strong>never</strong></li> <li>null</li> <li>void</li> <li>undefined</li> <li>unknown</li> </ul> </article> <article class="article"> <h3>2. A primitive type indicating intentional absence of the value. It has the same characteristics as the type in JS.</h3> <ul> <li>never</li> <li>unknown</li> <li>any</li> <li>void</li> <li><strong>null</strong></li> </ul> </article> <article class="article"> <h3>3. A primitive type indicating that a value is not defined. It has the same characteristics as the type in JS.</h3> <ul> <li>any</li> <li>void</li> <li>never</li> <li>null</li> <li><strong>undefined</strong></li> </ul> </article> <article class="article"> <h3>4. A type which represents the return value of functions which don\'t return a value.</h3> <ul> <li>any</li> <li>never</li> <li>unknown</li> <li><strong>void</strong></li> <li>null</li> <li>undefined</li> </ul> </article> <article class="article"> <h3>5. Can a class be used as an interface?</h3> <ul> <li>yes, it can</li> <li>no</li> <li><strong>by default, no, but conditions can be created to make it possible</strong></li> </ul> </article> <article class="article"> <h3>6. Can a class be used as a type specifier?</h3> <ul> <li><strong>yes, it can</strong></li> <li>no</li> <li>by default, no, but conditions can be created to make it possible</li> </ul> </article> <article class="article"> <h3>7. Can an interface contain getters and setters?</h3> <ul> <li>yes, it can</li> <li><strong>no</strong></li> </ul> </article> <article class="article"> <h3>8. Can be abstract: (checkbox)</h3> <ul> <li><strong>field</strong></li> <li>type</li> <li><strong>class</strong></li> <li>interface</li> <li>namespace</li> <li><strong>method</strong></li> <li>import and export</li> </ul> </article> <article class="article"> <h3>9. Can you specify the allowed data types for a getter and setter in an interface?</h3> <ul> <li>yes, you can</li> <li><strong>no</strong></li> </ul> </article> <article class="article"> <h3>10. Choose the correct answer:</h3> <ul> <li>TS supports namespaces, namespaces cannot be nested</li> <li>TS does not support namespaces</li> <li><strong>TS supports namespaces, namespaces can be nested</strong></li> <li>TS supports namespaces, namespaces can be nested, namespaces cannot be exported</li> </ul> </article> <article class="article"> <h3>11. Creates a tuple type from the types used in the type parameters of a function.</h3> <ul> <li>Omit&lt;T, K&gt;</li> <li>Record&lt;K, T&gt;</li> <li>Pick&lt;T, K&gt;</li> <li>Extract&lt;T, K&gt;</li> <li><strong>no correct answer</strong></li> </ul> </article> <article class="article"> <h3>12. Creates a type by selecting a set of properties K (keys) from T.</h3> <ul> <li>Omit&lt;T, K&gt;</li> <li>Record&lt;K, T&gt;</li> <li><strong>Pick&lt;T, K&gt;</strong></li> <li>Extract&lt;T, K&gt;</li> <li>no correct answer</li> </ul> </article> <article class="article"> <h3>13. Creates a type by selecting all properties from T and then removing K (keys):</h3> <ul> <li><strong>Omit&lt;T, K&gt;</strong></li> <li>Record&lt;K, T&gt;</li> <li>Pick&lt;T, K&gt;</li> <li>Extract&lt;T, K&gt;</li> <li>no correct answer</li> </ul> </article> <article class="article"> <h3>14. Creates a type consisting of all properties of T where the value is set as required.</h3> <ul> <li>Readonly&lt;T&gt;</li> <li><strong>Required&lt;T&gt;</strong></li> <li>Omit&lt;T&gt;</li> <li>Partial&lt;T&gt;</li> <li>Parameters&lt;T&gt;</li> <li>NonNullable&lt;T&gt;</li> <li>ConstructorParameters&lt;T&gt;</li> <li>ReturnType&lt;T&gt;</li> <li>InstanceType&lt;T&gt;</li> </ul> </article> <article class="article"> <h3>15. Creates a type consisting of the return type of the function T</h3> <ul> <li>Readonly&lt;T&gt;</li> <li>Required&lt;T&gt;</li> <li>Omit&lt;T&gt;</li> <li>Partial&lt;T&gt;</li> <li>Parameters&lt;T&gt;</li> <li>NonNullable&lt;T&gt;</li> <li>ConstructorParameters&lt;T&gt;</li> <li><strong>ReturnType&lt;T&gt;</strong></li> <li>InstanceType&lt;T&gt;</li> </ul> </article> <article class="article"> <h3>16. Creates a type consisting of the type of an instance of the constructor function in T.</h3> <ul> <li>Readonly&lt;T&gt;</li> <li>Required&lt;T&gt;</li> <li>Omit&lt;T&gt;</li> <li>Partial&lt;T&gt;</li> <li>Parameters&lt;T&gt;</li> <li>NonNullable&lt;T&gt;</li> <li>ConstructorParameters&lt;T&gt;</li> <li>ReturnType&lt;T&gt;</li> <li><strong>InstanceType&lt;T&gt;</strong></li> </ul> </article> <article class="article"> <h3>17. Creates a type that excludes null and undefined from Type:</h3> <ul> <li>Readonly&lt;T&gt;</li> <li>Required&lt;T&gt;</li> <li>Omit&lt;T&gt;</li> <li>Partial&lt;T&gt;</li> <li>Parameters&lt;T&gt;</li> <li><strong>NonNullable&lt;T&gt;</strong></li> <li>ConstructorParameters&lt;T&gt;</li> <li>ReturnType&lt;T&gt;</li> <li>InstanceType&lt;T&gt;</li> </ul> </article> <article class="article"> <h3>18. Creates a type with all properties of T set as optional.</h3> <ul> <li>Readonly&lt;T&gt;</li> <li>Required&lt;T&gt;</li> <li>Omit&lt;T&gt;</li> <li><strong>Partial&lt;T&gt;</strong></li> <li>Parameters&lt;T&gt;</li> <li>NonNullable&lt;T&gt;</li> <li>ConstructorParameters&lt;T&gt;</li> <li>ReturnType&lt;T&gt;</li> <li>InstanceType&lt;T&gt;</li> </ul> </article> <article class="article"> <h3>19. Creates a type with all properties of T set as read-only.</h3> <ul> <li><strong>Readonly&lt;T&gt;</strong></li> <li>Required&lt;T&gt;</li> <li>Omit&lt;T&gt;</li> <li>Partial&lt;T&gt;</li> <li>Parameters&lt;T&gt;</li> <li>NonNullable&lt;T&gt;</li> <li>ConstructorParameters&lt;T&gt;</li> <li>ReturnType&lt;T&gt;</li> <li>InstanceType&lt;T&gt;</li> </ul> </article> <article class="article"> <h3>20. Does the interface remain in the code after compilation?</h3> <ul> <li>yes, it remains</li> <li><strong>no</strong></li> <li>by default, no, but conditions can be created to make it possible</li> </ul> </article> <article class="article"> <h3>21. How can you check if an object belongs to a class in TS?</h3> <ul> <li>inheritenceOf</li> <li><strong>instanceOf</strong></li> <li>typeof</li> <li>extends</li> </ul> </article> <article class="article"> <h3>22. How does TypeScript implement type assertions?</h3> <ul> <li>const x: number = (number) \'123\'</li> <li>const x: number = as.number \'123\'</li> <li>const x: number = \'123\'.asNumber</li> <li><strong>const x: number = &lt;number&gt; \'123\'</strong></li> </ul> </article> <article class="article"> <h3>23. In TS, classes are inherited from each other using the keyword:</h3> <ul> <li><strong>extends</strong></li> <li>implements</li> <li>as</li> <li>inherit</li> </ul> </article> <article class="article"> <h3>24. Is the \'extends\' keyword used in generics?</h3> <ul> <li><strong>yes, it is used</strong></li> <li>no</li> </ul> </article> <article class="article"> <h3>25. Is there support for classes and constructors within them in TS?</h3> <ul> <li><strong>yes, both classes and class constructors</strong></li> <li>only classes</li> <li>only class constructors</li> <li>no</li> </ul> </article> <article class="article"> <h3>26. No operations are allowed on this type. Equivalent to the any type.</h3> <ul> <li>null</li> <li>undefined</li> <li>void</li> <li>never</li> <li><strong>unknown</strong></li> </ul> </article> <article class="article"> <h3>27. Please choose the correct syntax for generics in a function. (checkbox)</h3> <ul> <li><strong>function test&lt;A&gt;(arg: A[ ]): A[ ] {...}</strong></li> <li>function test&lt;T&gt;(arg&lt;T&gt;): T {...}</li> <li>function test: T(arg: T): T {...}</li> <li><strong>function test&lt;T&gt;(arg: T): T {...}</strong></li> <li>function test&lt;T&gt;(arg&lt;T&gt;) &lt;T&gt; {...}</li> </ul> </article> <article class="article"> <h3>28. Select the correct imports and exports in TS: (checkbox)</h3> <ul> <li><strong>export var test = 5;</strong></li> <li><strong>import { a, b, c} from \'./test.js\'</strong></li> <li><strong>import { a as v, b, c} from \'./test.js\'</strong></li> <li><strong>export default function test(){...}</strong></li> <li><strong>import * as a from \'./test.js\'</strong></li> <li><strong>export type Test = { .... }</strong></li> </ul> </article> <article class="article"> <h3>29. Select the correct statement:</h3> <ul> <li>Unlike ES6, in TS, any file containing import or export is considered a module.</li> <li><strong>Just like in ES6, in TS, any file containing import or export is considered a module.</strong></li> <li>In TS, any file containing import (but not export) is considered a module.</li> <li>In TS, any file containing export (but not import) is considered a module.</li> </ul> </article> <article class="article"> <h3>30. Select the correct statements: (checkbox)</h3> <ul> <li><strong>Modifiers public, protected, and private cannot be applied to static fields</strong></li> <li><strong>Static fields of a class are not associated with specific instances of the class</strong></li> <li>Static fields of a class are not inherited</li> <li><strong>Static fields of a class can be accessed through the class constructor object</strong></li> </ul> </article> <article class="article"> <h3>31. What does a TypeScript conditional type look like?</h3> <ul> <li><strong>T extends U ? X : Y</strong></li> <li>T if U ? X : Y</li> <li>T === U ? X : Y</li> <li>If T extends U Then X Else Y</li> </ul> </article> <article class="article"> <h3>32. What does Partial&lt;T&gt; do in TypeScript?</h3> <ul> <li>Converts all properties of T into required properties</li> <li><strong>Converts all properties of T into optional properties</strong></li> <li>Converts all properties of T into read-only properties</li> <li>Converts all properties of T not to accept null or undefined</li> </ul> </article> <article class="article"> <h3>33. What does the TypeScript unknown type represent?</h3> <ul> <li><strong>The type of a variable is not known to the compiler</strong></li> <li>The type of a variable is any object</li> <li>The type of a variable is any non-null object</li> <li>The type of a variable is any non-undefined object</li> </ul> </article> <article class="article"> <h3>34. What is the correct syntax when an argument is optional?</h3> <ul> <li>function test(a: string) { ... }</li> <li>function test?(a: string) { ... }</li> <li><strong>function test(a?: string) { ... }</strong></li> <li>function test(a:? string) { ... }</li> </ul> </article> <article class="article"> <h3>35. What keyword is used in the implementation of a generic constraint?</h3> <ul> <li>instance</li> <li>implements</li> <li><strong>extends</strong></li> <li>as</li> <li>inheritance</li> </ul> </article> <article class="article"> <h3>36. What type of function corresponds to the call test(\'5\')? (checkbox)</h3> <ul> <li>function test(val: number): number</li> <li>function test(val: number, t: string): number</li> <li><strong>function test(val: string): number</strong></li> <li>function test(val: number, t?: string): number</li> <li><strong>function test(val: string, t?: string): number</strong></li> </ul> </article> <article class="article"> <h3>37. What utility types exist in TS? (checkbox)</h3> <ul> <li><strong>Omit</strong></li> <li><strong>ReturnType</strong></li> <li><strong>PartialType</strong></li> <li><strong>InstanceType</strong></li> <li><strong>Required</strong></li> <li><strong>Pick</strong></li> <li><strong>Extract</strong></li> <li><strong>Exclude</strong></li> <li>This</li> </ul> </article> <article class="article"> <h3>38. Which keyword is used to declare a namespace?</h3> <ul> <li>export</li> <li>constructon</li> <li>name</li> <li>set</li> <li><strong>namespace</strong></li> <li>TS does not have namespaces</li> </ul> </article> <article class="article"> <h3>39. Which modifiers can be applied during type binding? (checkbox)</h3> <ul> <li>readonly and ?</li> <li>, and -</li> <li>+ and |</li> <li>& and &&</li> <li><strong>||</strong></li> <li><strong>! and !!</strong></li> </ul> </article> <article class="article"> <h3>40. Which operator lets us validate that the type of an expression matches some type, without changing the resulting type of that expression?</h3> <ul> <li>reassures</li> <li>satisfies</li> <li><strong>typeof</strong></li> <li>no correct answer</li> </ul> </article> <article class="article"> <h3>41. Which utility type can be used to represent all subsets of a given type?</h3> <ul> <li><strong>Partial</strong></li> <li>Readonly</li> <li>Record</li> <li>Omit</li> </ul> </article> ','<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>[St2] Code-Review</h1> <strong>33 вопроса. Выполнил на 82 баллов из 100</strong> </article> <article class="article"> <h3>1. How can a code author improve the code review process? (checkbox)</h3> <ul> <li><strong>Providing clear and concise descriptions</strong></li> <li><strong>Automating as much as possible</strong></li> <li>Skipping unnecessary reviews</li> <li><strong>Submitting large changes for review</strong></li> <li>By not running any tests</li> </ul> </article> <article class="article"> <h3>2. How can code reviewers reduce context switching?</h3> <ul> <li>By reviewing all code at the end of the day</li> <li>By ignoring code reviews</li> <li>By multitasking more efficiently</li> <li>By using a magic crystal ball to predict code issues</li> <li><strong>By scheduling dedicated times for code reviews</strong></li> </ul> </article> <article class="article"> <h3>3. How can review requests be managed in a GitHub pull request?</h3> <ul> <li>Through automated suggestions based on code analysis</li> <li>Asking a magic 8-ball for advice</li> <li>Using carrier pigeons</li> <li><strong>By adding users to your pull request for feedback</strong></li> <li>By sending a formal invitation letter</li> </ul> </article> <article class="article"> <h3>4. How do code reviews help in spreading product knowledge?</h3> <ul> <li>Focusing exclusively on external documentation for knowledge transfer</li> <li>By restricting knowledge to senior members</li> <li><strong>Enabling exposure to various aspects of the codebase, enhancing overall understanding</strong></li> <li>Limiting knowledge sharing to formal, structured training sessions</li> </ul> </article> <article class="article"> <h3>5. How does GitHub\'s \'Blame\' feature assist developers?</h3> <ul> <li>To play practical jokes on team members</li> <li>By revealing who ate the last slice of pizza</li> <li><strong>It assigns blame to developers for broken code</strong></li> <li>By showing how a file looked before a specific change</li> <li>It helps in identifying the most productive developer</li> </ul> </article> <article class="article"> <h3>6. How should complexity be assessed in a code review?</h3> <ul> <li><strong>If the code can be understood quickly</strong></li> <li>By the number of coffee breaks taken during coding</li> <li>By the weight of the computer running the code</li> <li>The age of the developer</li> <li>The color of the code in the editor</li> </ul> </article> <article class="article"> <h3>7. How should reviewers approach understanding the context of a code change?</h3> <ul> <li>Only focusing on the code, not the context</li> <li><strong>Relying on the code change description</strong></li> <li>Ignoring the context completely</li> <li>By guessing the author\'s intent</li> <li>Asking the author to explain it in person</li> </ul> </article> <article class="article"> <h3>8. In a code review, what is an important aspect of the review feedback?</h3> <ul> <li>Providing feedback in a cryptic manner</li> <li>Ignoring minor issues</li> <li>Only pointing out major bugs</li> <li><strong>Being constructive and empathetic</strong></li> <li>Rating each line of code with an emoji for expressiveness</li> <li>Focusing only on syntax errors</li> </ul> </article> <article class="article"> <h3>9. What are the benefits of involving junior developers in code reviews?</h3> <ul> <li><strong>For training and learning purposes</strong></li> <li>Because they bring snacks to the review meetings</li> <li>To increase the number of reviewers</li> <li>To make coffee for senior developers</li> <li>Junior developers are always right</li> <li>For entertainment value</li> </ul> </article> <article class="article"> <h3>10. What are the benefits of small, incremental code changes in reviews? (checkbox)</h3> <ul> <li>Makes the code look mysterious</li> <li>Less intimidating for new reviewers</li> <li><strong>Enhances bug detection probability</strong></li> <li>Reduces the complexity of reviews</li> <li><strong>Better for tracking changes</strong></li> <li><strong>Easier to understand for reviewers</strong></li> </ul> </article> <article class="article"> <h3>11. What can be used on GitHub to maintain the integrity of your code?</h3> <ul> <li>Shouting motivational quotes at the screen</li> <li>Duct tape</li> <li>A secret handshake</li> <li><strong>Protected branches</strong></li> <li>A magic spell</li> </ul> </article> <article class="article"> <h3>12. What can you do with GitHub\'s pull request timeline interface?</h3> <ul> <li>Organize your vacation photos</li> <li>Predict future code changes</li> <li><strong>Browse commits, comments, and references related to a pull request</strong></li> <li>Check the weather forecast</li> <li>Time travel to the date of the first commit</li> </ul> </article> <article class="article"> <h3>13. What do GitHub\'s \'Permissions\' in code review allow?</h3> <ul> <li>Setting visibility levels for different parts of the repository</li> <li>To restrict internet access</li> <li><strong>To control who can push to a branch</strong></li> <li>To grant access to secret company recipes</li> <li>Determining who gets the last donut</li> <li>To decide who gets the corner office</li> </ul> </article> <article class="article"> <h3>14. What does a wide net of reviewers in code reviews ensure?</h3> <ul> <li>Initiating a debate club atmosphere among the developers</li> <li>Introducing increased bureaucratic layers in the review procedure</li> <li>Reducing reliance on automated testing tools</li> <li><strong>Ensuring comprehensive coverage and decentralizing the review process</strong></li> <li>Allowing only popular developers to have their code reviewed</li> </ul> </article> <article class="article"> <h3>15. What does GitHub allow you to resolve directly on the platform?</h3> <ul> <li>Deciding what to eat for lunch</li> <li>Disputes between team members</li> <li><strong>Simple merge conflicts</strong></li> <li>Internet connectivity issues</li> <li>Existential crises</li> </ul> </article> <article class="article"> <h3>16. What does peer review in code reviews encourage?</h3> <ul> <li>Sole reliance on automated testing, bypassing human review</li> <li>Prioritizing individual effort over collaborative team work</li> <li>Coding in a secretive manner to avoid peer review</li> <li>Competitiveness among developers</li> <li>Writing elaborate fictional comments in code to entertain reviewers.</li> <li><strong>Writing high-quality code with the awareness that it will undergo scrutiny</strong></li> </ul> </article> <article class="article"> <h3>17. What does reviewing every line of code ensure?</h3> <ul> <li>The code has a nice rhythm</li> <li>It ensures reviewers get no sleep</li> <li><strong>Understanding of what all the code is doing</strong></li> <li>The code forms a secret message</li> <li>That reviewers feel overwhelmed</li> </ul> </article> <article class="article"> <h3>18. What does the side-by-side \'Diffs\' feature on GitHub highlight?</h3> <ul> <li>Alien messages hidden in the code</li> <li>Code performance metrics</li> <li>The best coding practices</li> <li>The developer\'s coding style preferences</li> <li><strong>Added, edited, and deleted code next to the original file</strong></li> </ul> </article> <article class="article"> <h3>19. What is a crucial element of code reviews in the context of mentoring new engineers?</h3> <ul> <li>Assigning the review of complex code segments exclusively to new engineers</li> <li>Assigning code names to new engineers and communicating in Morse code</li> <li>Limiting new engineers to simplistic tasks to avoid complexity</li> <li>Actively discouraging inquiries from new engineers to toughen them up</li> <li><strong>Facilitating discussions and sharing knowledge about the code base</strong></li> <li>Experienced engineers critiquing without providing constructive feedback</li> </ul> </article> <article class="article"> <h3>20. What is a key benefit of adding experienced reviewers in a code review?</h3> <ul> <li>To make junior developers feel inexperienced</li> <li>They take less time to review</li> <li>They use their psychic powers to find bugs</li> <li>Experienced reviewers never make mistakes</li> <li>Experienced reviewers use their telekinetic powers to fix code on the fly</li> <li><strong>They tend to give more insightful feedback</strong></li> </ul> </article> <article class="article"> <h3>21. What is a key benefit of code reviews for agile teams? (checkbox)</h3> <ul> <li><strong>Improving estimation accuracy</strong></li> <li><strong>Sharing knowledge across the team</strong></li> <li>Restricting code writing to senior developers only</li> <li><strong>Reducing the need for project management</strong></li> <li>Preventing the participation of new developers</li> <li>Discovering the finest local coffee establishments</li> </ul> </article> <article class="article"> <h3>22. What is a key consideration for comments in code?</h3> <ul> <li>Comments should be cryptic and mysterious</li> <li><strong>Comments should explain why some code exists</strong></li> <li>Comments should use Shakespearean English</li> <li>Comments should be in haiku form</li> <li>Comments should narrate a fantasy story</li> </ul> </article> <article class="article"> <h3>23. What is a key element in the success of a code review?</h3> <ul> <li>The number of coffee breaks taken</li> <li>Focusing solely on finding bugs</li> <li>Using the most expensive code editor</li> <li><strong>The communication quality between author and reviewers</strong></li> <li>Using a specific programming language</li> </ul> </article> <article class="article"> <h3>24. What is a recommended practice for code authors when submitting a code review?</h3> <ul> <li>To submit without any description</li> <li>To only use emojis in the description</li> <li>To expect reviewers to understand without a description</li> <li><strong>To include a detailed description of the changes</strong></li> <li>To wait for reviewers to ask questions</li> </ul> </article> <article class="article"> <h3>25. What is crucial to check about tests in a code review?</h3> <ul> <li><strong>Whether tests are correct and useful</strong></li> <li>The number of test files</li> <li>The color of the test output</li> <li>If the tests can predict the weather</li> <li>If the tests have nice names</li> </ul> </article> <article class="article"> <h3>26. What is essential to review in terms of documentation? (checkbox)</h3> <ul> <li>If the documentation is written in iambic pentameter</li> <li>Whether documentation includes fun facts</li> <li><strong>If documentation reflects changes in how users interact with the app</strong></li> <li><strong>Whether documentation is updated with code changes</strong></li> <li>If the documentation includes a cookie recipe</li> </ul> </article> <article class="article"> <h3>27. What is important about naming in code?</h3> <ul> <li>Names should be as long as possible</li> <li>Names should reflect the developer\'s pets</li> <li>Names should be humorous</li> <li><strong>Names should fully communicate what the item is or does</strong></li> <li>Names should be in Latin</li> </ul> </article> <article class="article"> <h3>28. What is the primary aspect to consider in a code review?</h3> <ul> <li>The time of day the code was written</li> <li>The font size used in the code</li> <li>The color scheme of the code editor</li> <li>The developer\'s coding speed</li> <li><strong>The overall design of the code</strong></li> </ul> </article> <article class="article"> <h3>29. What is the primary function of GitHub\'s \'Comments\' feature in code reviews?</h3> <ul> <li><strong>To leave detailed comments on code syntax and structure</strong></li> <li>For posting memes</li> <li>For documenting bug reports and tracking issues</li> <li>Commenting on the latest fashion trends</li> <li>To rate developers\' performance</li> <li>For casual chatting</li> </ul> </article> <article class="article"> <h3>30. What is the primary purpose of a code review in agile development?</h3> <ul> <li>To identify logical errors and confirm compliance with all requirements</li> <li>To reduce the number of comments in the code</li> <li>To verify the code compiles without any errors</li> <li>To play a prank on the intern</li> <li><strong>To optimize the runtime efficiency of the code</strong></li> </ul> </article> <article class="article"> <h3>31. What is the purpose of \'Required status checks\' on GitHub?</h3> <ul> <li>To verify if coffee is available in the office</li> <li>To check the status of the server</li> <li><strong>To ensure only high-quality code gets merged</strong></li> <li>For checking the weather status</li> <li>To monitor the stock market</li> </ul> </article> <article class="article"> <h3>32. What is the role of consistency in code review?</h3> <ul> <li>Code should be consistently cryptic</li> <li>Consistency refers to the mood of the developer</li> <li>Consistency ensures the code has a consistent color theme</li> <li>Code should consistently include jokes</li> <li><strong>New code should be consistent with style guidelines or existing code</strong></li> </ul> </article> <article class="article"> <h3>33. What role does automation play in code reviews?</h3> <ul> <li>It replaces manual reviews completely</li> <li><strong>It helps catch syntax errors and enforce style guides</strong></li> <li>It\'s not used in code reviews</li> <li>Only for generating funny comments</li> <li>Automation writes the code itself</li> </ul> </article> <article class="article"> <h3>34. What should be avoided when selecting reviewers for your code change?</h3> <ul> <li>Selecting too many reviewers</li> <li>Adding inexperienced reviewers</li> <li>Asking for external reviewers</li> <li><strong>Choosing reviewers from the same team</strong></li> </ul> </article> <article class="article"> <h3>35. What should be ensured about code style in a review?</h3> <ul> <li>Code style reflects the latest fashion trends</li> <li><strong>Code follows the appropriate style guides</strong></li> <li>Code is stylish and trendy</li> <li>Style should match the reviewer\'s personal preference</li> <li>Code style changes with each season</li> </ul> </article> <article class="article"> <h3>36. What should code reviewers focus on regarding functionality?</h3> <ul> <li>Whether the code can make coffee</li> <li>The number of lines in the code</li> <li>The brand of the developer\'s computer</li> <li><strong>If the code does what the developer intended</strong></li> <li>The programming language used</li> </ul> </article> <article class="article"> <h3>37. When should a code review be initiated in an agile team?</h3> <ul> <li>Whenever the office cat wanders into the room</li> <li>Following the merge of code into the main branch</li> <li><strong>After code is written and tests are passed, but before merging into the main branch</strong></li> <li>Once a year during performance reviews</li> <li>At the end of each sprint</li> <li>Prior to commencing any code development</li> </ul> </article> <article class="article"> <h3>38. Why are code reviews important before merging code?</h3> <ul> <li>Creating an additional layer of documentation requirements</li> <li>Prolonging the code review process unnecessarily</li> <li>Conducting a ritual to appease the coding gods for smooth functionality</li> <li><strong>To catch any poor decisions or errors before they affect the main codebase</strong></li> <li>To ensure that only the team leader\'s code is merged</li> <li>Using the review process as a strategy to procrastinate on deadlines</li> </ul> </article> <article class="article"> <h3>39. Why is it important to give timely feedback in code reviews?</h3> <ul> <li>It\'s not important; delays are expected</li> <li><strong>To prevent blocking the code author</strong></li> <li>Feedback is not time-sensitive</li> <li>To showcase rapid response skills</li> <li>It helps in winning a speed contest</li> </ul> </article> <article class="article"> <h3>40. Why is running tests before submitting a code review important?</h3> <ul> <li>It ensures code reviewers have more work</li> <li><strong>To ensure the code works as expected</strong></li> <li>To show off the latest test animations</li> <li>It\'s a way to demonstrate programming skills</li> <li>Tests are not important in code reviews</li> </ul> </article> ','<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>[St2] Single Page Application</h1> <strong>33 вопроса. Выполнил на 88 баллов из 100</strong> </article> <article class="article"> <h3>1. How do SPAs typically handle data updates on the page?</h3> <ul> <li>Sending a fax to the server</li> <li>By updating the entire website</li> <li><strong>Using JavaScript to update only parts of the page</strong></li> <li>By getting another standalone page with data from the server</li> <li>By reloading the entire page</li> </ul> </article> <article class="article"> <h3>2. How does Location.assign() method function?</h3> <ul> <li>It assigns homework to web developers</li> <li>It opens a new browser window</li> <li><strong>It loads the resource at the given URL</strong></li> <li>It reloads the current document</li> <li>It replaces the current document with a new one without adding to history</li> </ul> </article> <article class="article"> <h3>3. In web development, what is a practical use of the History API?</h3> <ul> <li>Storing user data</li> <li>Creating animations</li> <li>Tracking user location</li> <li>Organizing online historical reenactments</li> <li>Managing browser history navigation</li> <li><strong>Optimizing website loading speed</strong></li> </ul> </article> <article class="article"> <h3>4. What are Server-Sent Events (SSEs) used for in SPAs?</h3> <ul> <li>Client-to-server communication</li> <li>Implementing data encryption</li> <li>Managing user sessions</li> <li>Load balancing between servers</li> <li>Facilitating movie streaming services</li> <li>Persisting data within the client-side storage</li> <li><strong>Sending data from server to client in real time</strong></li> </ul> </article> <article class="article"> <h3>5. What does AJAX stand for in the context of SPAs?</h3> <ul> <li>Always Joking and eXaggerating</li> <li>Automatic Java and XHTML</li> <li>Asynchronous Java and XML</li> <li>Advanced JavaScript and XML</li> <li><strong>Asynchronous JavaScript and XML</strong></li> </ul> </article> <article class="article"> <h3>6. What does the Location.origin property provide?</h3> <ul> <li>The hostname of the URL</li> <li>The secret location of the lost city of Atlantis</li> <li>The coordinates of the International Space Station</li> <li><strong>The protocol, hostname and port of the URL</strong></li> <li>The port number of the URL</li> <li>The pathname of the URL</li> </ul> </article> <article class="article"> <h3>7. What does the Location.pathname property return?</h3> <ul> <li><strong>The path of the URL</strong></li> <li>The protocol of the URL</li> <li>The fragment identifier of the URL</li> <li>The latest trending path on social media</li> <li>The query string of the URL</li> </ul> </article> <article class="article"> <h3>8. What does the Location.search property return?</h3> <ul> <li>The protocol of the URL</li> <li>The secret search history of the user</li> <li><strong>A \'?\' followed by the parameters of the URL</strong></li> <li>The search results for the current URL</li> <li>The hostname of the URL</li> </ul> </article> <article class="article"> <h3>9. What does the \'pushState()\' method in the History API do?</h3> <ul> <li><strong>Adds a new entry to the history stack</strong></li> <li>Updates the current history entry</li> <li>Deletes the current history entry</li> <li>Sends a push notification</li> <li>Replaces the current history entry with a new one</li> </ul> </article> <article class="article"> <h3>10. What does the \'replaceState()\' method in the History API do?</h3> <ul> <li><strong>Updates the most recent entry on the history stack</strong></li> <li>Swaps history with an alternate universe</li> <li>Saves the current page as a bookmark</li> <li>Replaces the current page with a new one</li> <li>Deletes all history entries</li> </ul> </article> <article class="article"> <h3>11. What functionality does the \'go()\' method provide in the History API?</h3> <ul> <li>Teleports you to the past</li> <li><strong>Loads a specific page from session history based on relative position</strong></li> <li>Opens a new browser window</li> <li>Changes the color of the browser</li> <li>Sends an email</li> <li>Closes the current browser tab</li> </ul> </article> <article class="article"> <h3>12. What is a common issue faced by SPAs in terms of SEO?</h3> <ul> <li>They are incompatible with major search engines</li> <li>They are always ranked first in search engines</li> <li>They only appear in searches made on weekends</li> <li><strong>Their dynamic content can be harder for search engines to index</strong></li> <li>They tend to overheat search engines</li> </ul> </article> <article class="article"> <h3>13. What is a key characteristic of SPAs in terms of page loading?</h3> <ul> <li>They teleport users to a parallel universe</li> <li>They require the entire page to be reloaded for every action</li> <li><strong>They load all content on the initial page load, then dynamically update</strong></li> <li>They never need to be reloaded</li> <li>They only load text, not images or videos</li> <li>Lazy loading of resources</li> </ul> </article> <article class="article"> <h3>14. What is a major benefit of SPAs?</h3> <ul> <li>They use less JavaScript</li> <li>They don\'t require a web server</li> <li>They are easier to debug</li> <li><strong>Faster transitions and a more app-like experience</strong></li> </ul> </article> <article class="article"> <h3>15. What is a single-page application (SPA)?</h3> <ul> <li>An offline desktop application</li> <li>A web application that requires constant page refreshing</li> <li>A website that only contains one page</li> <li>An application downloaded from an app store for mobile devices</li> <li><strong>A web application that dynamically updates the current page with new data from the web server, without reloading</strong></li> </ul> </article> <article class="article"> <h3>16. What is a valid method for advancing forward in the browsing history using the History API?</h3> <ul> <li>Using a time machine</li> <li>history.fastForward()</li> <li>history.proceed()</li> <li>history.skip()</li> <li><strong>history.forward()</strong></li> <li>history.moveForward()</li> <li>history.next()</li> </ul> </article> <article class="article"> <h3>17. What is an important prerequisite before learning client-side frameworks?</h3> <ul> <li>Having a degree in computer science</li> <li>Understanding quantum physics</li> <li><strong>Knowing the basics of HTML, CSS, and JavaScript</strong></li> <li>Mastering graphic design</li> </ul> </article> <article class="article"> <h3>18. What is one major advantage of using a JavaScript framework?</h3> <ul> <li>They work without an internet connection</li> <li>They can automatically write code</li> <li><strong>They standardize web development practices</strong></li> <li>They eliminate the need for testing</li> </ul> </article> <article class="article"> <h3>19. What is the correct method in the History API to refresh the current webpage?</h3> <ul> <li>history.update()</li> <li><strong>history.go(0) or history.go()</strong></li> <li>history.reloadCurrent()</li> <li>history.reload()</li> <li>history.refresh()</li> </ul> </article> <article class="article"> <h3>20. What is the function of Location.replace() method?</h3> <ul> <li><strong>It replaces the current URL with a new one without adding to history</strong></li> <li>It updates the current URL\'s query string</li> <li>It redirects to a default URL without reloading the page</li> <li>It reloads the current URL</li> <li>It adds a new URL to the history stack</li> </ul> </article> <article class="article"> <h3>21. What is the purpose of Location.reload() method?</h3> <ul> <li><strong>To reload the current URL</strong></li> <li>To delete the current URL\'s history</li> <li>To refresh the browser cache for the current URL</li> <li>To save the current URL</li> <li>To update the current URL\'s hash</li> </ul> </article> <article class="article"> <h3>22. What specific information does the Location.href property of a web page return?</h3> <ul> <li>A random internet meme</li> <li>The ID of the current element</li> <li><strong>The current URL in its entirety</strong></li> <li>The title of the current document</li> <li>The protocol of the current URL</li> </ul> </article> <article class="article"> <h3>23. When was the term \'single-page application\' first discussed?</h3> <ul> <li>When dinosaurs roamed the internet</li> <li>After a big party in Silicon Valley</li> <li>During the year 2010</li> <li><strong>As early as 2003</strong></li> <li>In the year 2005</li> <li>Sometime in the 1990s</li> </ul> </article> <article class="article"> <h3>24. Which event is associated with the History API for detecting when the active history entry changes?</h3> <ul> <li>modifyHistory</li> <li>historyHokeyPokey</li> <li><strong>popstate</strong></li> <li>historyShift</li> <li>changeState</li> <li>historyChange</li> </ul> </article> <article class="article"> <h3>25. Which History API property indicates the total number of entries in the browser\'s history stack?</h3> <ul> <li>history.pages</li> <li>history.size</li> <li>history.total</li> <li>history.count</li> <li><strong>history.length</strong></li> <li>history.stack</li> </ul> </article> <article class="article"> <h3>26. Which JavaScript framework is NOT typically associated with SPAs?</h3> <ul> <li>Meteor.js</li> <li>React</li> <li>Ember.js</li> <li><strong>jQuery</strong></li> <li>Vue.js</li> <li>AngularJS</li> </ul> </article> <article class="article"> <h3>27. Which main feature does the History API offer access to?</h3> <ul> <li>The browser\'s session cookies</li> <li><strong>The user\'s personal browsing history</strong></li> <li>Access to the browser\'s download history</li> <li>A list of bookmarks in the browser</li> <li>The browser\'s session history</li> </ul> </article> <article class="article"> <h3>28. Which method is used to move backward through the user\'s history?</h3> <ul> <li>history.rewind()</li> <li><strong>history.back()</strong></li> <li>history.previous()</li> <li>history.turnBackTime()</li> <li>history.backward()</li> </ul> </article> <article class="article"> <h3>29. Which methods are part of the Location interface? (checkbox)</h3> <ul> <li><strong>reload()</strong></li> <li><strong>toString()</strong></li> <li><strong>replace()</strong></li> <li>navigate()</li> <li>open()</li> <li><strong>assign()</strong></li> <li>go()</li> <li>singAlong()</li> </ul> </article> <article class="article"> <h3>30. Which methods are used to navigate the user\'s history in the History API? (checkbox)</h3> <ul> <li>previous() and next()</li> <li>reload() and refresh()</li> <li>timeTravel() and freezeTime()</li> <li>go() and stop()</li> <li><strong>go() and go(-1)</strong></li> <li><strong>back() and forward()</strong></li> </ul> </article> <article class="article"> <h3>31. Which of these is a challenge associated with SPAs? (checkbox)</h3> <ul> <li><strong>Analytics</strong></li> <li><strong>Search engine optimization</strong></li> <li><strong>Browser history management</strong></li> <li>Mobile responsiveness</li> <li><strong>Security scanning</strong></li> </ul> </article> <article class="article"> <h3>32. Which properties can be found in the Location interface? (checkbox)</h3> <ul> <li><strong>origin</strong></li> <li><strong>search</strong></li> <li>favoriteColor</li> <li><strong>protocol</strong></li> <li><strong>href</strong></li> <li>length</li> <li><strong>hash</strong></li> </ul> </article> <article class="article"> <h3>33. Which property is used to get the protocol scheme of the URL?</h3> <ul> <li>Location.urlProtocol</li> <li>Location.pathname</li> <li>Location.protocol</li> <li>Location.host</li> <li>Location.queryProtocol</li> <li><strong>Location.origin</strong></li> </ul> </article> <article class="article"> <h3>34. Which technology is crucial for real-time communication in SPAs?</h3> <ul> <li>FTP</li> <li>Morse code over telegraph lines</li> <li>WebSockets</li> <li>HTML</li> <li>CSS</li> <li><strong>GraphQL</strong></li> </ul> </article> ','<article class="article"> <div id="link-to-quiz" class="btn-back">назад</div> <h1>[St2] Web Storage</h1> <strong>33 вопроса. Выполнил на 88 баллов из 100</strong> </article> <article class="article"> <h3>1. Based on the provided JavaScript code, what output will be displayed in the console? <br>console.log(document.cookie); <br>// stage1=done; stage2=inprogress <br>document.cookie = "school=RSSchool"; <br>console.log(document.cookie); // ??</h3> <ul> <li>stage1=done; stage2=inprogress</li> <li>school=RSSchool</li> <li>SyntaxError</li> <li><strong>stage1=done; stage2=inprogress; school=RSSchool</strong></li> </ul> </article> <article class="article"> <h3>2. Cache methods: (checkbox)</h3> <ul> <li><strong>Cache.match()</strong></li> <li><strong>Cache.matchAll()</strong></li> <li><strong>Cache.add()</strong></li> <li><strong>Cache.put()</strong></li> <li><strong>Cache.delete()</strong></li> <li>Cache.deleteAll()</li> <li><strong>Cache.keys()</strong></li> <li>Cache.values()</li> <li>Cache.clear()</li> </ul> </article> <article class="article"> <h3>3. Can IndexedDB store objects with circular references?</h3> <ul> <li>it can</li> <li><strong>it cannot</strong></li> <li>by default, no, but certain conditions can be created to allow it</li> </ul> </article> <article class="article"> <h3>4. Cookies are considered third-party if: (checkbox)</h3> <ul> <li><strong>they are set by a domain that\'s different from the page being visited by the user</strong></li> <li>they are imported into a new browser session</li> <li>they store various types of data on the server side</li> <li>have the SameSite=None attribute</li> </ul> </article> <article class="article"> <h3>5. Do IndexedDB events bubble up?</h3> <ul> <li><strong>yes</strong></li> <li>no</li> <li>i don\'t know</li> <li>no, but not sure</li> <li>only if you add soap, then they bubble everywhere</li> </ul> </article> <article class="article"> <h3>6. Does the Storage interface have length property?</h3> <ul> <li><strong>yes</strong></li> <li>no</li> </ul> </article> <article class="article"> <h3>7. During private browsing after the last incognito tab is closed...</h3> <ul> <li><strong>all localStorage data gets automatically cleared</strong></li> <li>localStorage data behaves as usual</li> <li>localStorage data transfers to cookies and then moves to sessionStorage</li> <li>localStorage functionality is disabled in incognito mode</li> </ul> </article> <article class="article"> <h3>8. In web browsing, what exactly is a \'cookie\'?</h3> <ul> <li>the history log of a web browser</li> <li><strong>tiny data strings retained directly within the browser</strong></li> <li>an API that stores key/value pairs and sends them to the server</li> <li>a unique property granting access to session or local storage for particular domains</li> <li>no such thing in a web browser, it\'s just a bakery product</li> </ul> </article> <article class="article"> <h3>9. Is it permissible to include spaces within a key path in an IndexedDB?</h3> <ul> <li><strong>yes</strong></li> <li>no</li> </ul> </article> <article class="article"> <h3>10. Is it possible for various websites to access each other\'s IndexedDB databases?</h3> <ul> <li>yes, cross-website database access is permitted</li> <li><strong>no, cross-website database access is restricted</strong></li> <li>no, by default access is restricted, but under specific conditions, it may be allowed</li> <li>it depends on luck</li> </ul> </article> <article class="article"> <h3>11. Is it possible to continue the execution of a transaction when an error occurs?</h3> <ul> <li>it is possible</li> <li>it is not possible</li> <li><strong>it is possible under certain conditions</strong></li> </ul> </article> <article class="article"> <h3>12. Operations using IndexedDB are performed:</h3> <ul> <li>synchronously</li> <li>in parallel</li> <li><strong>asynchronously</strong></li> <li>there is no such information in the documentation</li> </ul> </article> <article class="article"> <h3>13. Possible ways to manually clear cookies in Chrome are the following: (checkbox)</h3> <ul> <li>by calling Cookie Monster</li> <li><strong>Settings > Privacy and security > Clear browsing data</strong></li> <li>by running in the console cookies.delete()</li> <li><strong>by click on the "Clear all cookies" icon in DevTools > Application > Cookies</strong></li> </ul> </article> <article class="article"> <h3>14. The difference between local storage and session storage is that:</h3> <ul> <li><strong>local storage also serves as a data storage area for each domain, available during a session, but it retains data even if the browser is reopened</strong></li> <li>session storage also serves as a data storage area for each domain, available during a session, but it retains data even if the browser is reopened</li> <li>not all browsers support local storage, unlike session storage</li> <li>they are functionally identical with no differences</li> </ul> </article> <article class="article"> <h3>15. The keys and values of localStorage always have the type:</h3> <ul> <li><strong>String</strong></li> <li>Symbol</li> <li>Number</li> <li>Object</li> </ul> </article> <article class="article"> <h3>16. The maximum size of a single cookie is:</h3> <ul> <li>20KB</li> <li>20MB</li> <li>5MB</li> <li><strong>4KB</strong></li> </ul> </article> <article class="article"> <h3>17. The mechanism that serves as a per tab/window data storage area for each domain, available during a session...</h3> <ul> <li>Window</li> <li>Browser history</li> <li>Browser bookmarks</li> <li><strong>sessionStorage</strong></li> </ul> </article> <article class="article"> <h3>18. The options \'expires\' and \'max-age\' for cookies are used to:</h3> <ul> <li>indicate to browsers that the cookie should not be sent with cross-site requests</li> <li><strong>determine the lifespan of the cookie, after which it will be automatically deleted</strong></li> <li>ensure continuous access to the cookie</li> <li>designate cookie accessibility to specific domains or subdomains</li> </ul> </article> <article class="article"> <h3>19. Valid types of keys in an indexed database: (checkbox)</h3> <ul> <li><strong>number</strong></li> <li><strong>string</strong></li> <li><strong>date</strong></li> <li><strong>array</strong></li> <li><strong>binary</strong></li> </ul> </article> <article class="article"> <h3>20. Web Storage is:</h3> <ul> <li><strong>an API that provides mechanisms for browsers to securely store key/value pairs</strong></li> <li>an online data storage server</li> <li>a memory space in the computer\'s RAM for storing data from visited web pages</li> <li>a tiny data fragment dispatched by a web server and saved on the user\'s computer</li> </ul> </article> <article class="article"> <h3>21. What arguments need to be passed to open an IndexedDB database?</h3> <ul> <li>host and port</li> <li><strong>name and version</strong></li> <li>name and password</li> <li>there is no correct answer</li> </ul> </article> <article class="article"> <h3>22. What cookie configuration serves as a defense against Cross-Site Request Forgery (CSRF) attacks?</h3> <ul> <li>httpOnly</li> <li>getCookie(name)</li> <li><strong>SameSite</strong></li> <li>GDPR</li> </ul> </article> <article class="article"> <h3>23. What happens if client has newer version of the IndexedDB database than the version specified in the \'open\' call?</h3> <ul> <li>no noticeable change or impact</li> <li>the browser will not open the page</li> <li>the browser automatically resolves the issue.</li> <li>an error will occur</li> <li><strong>an error will occur, and an \'error\' event will be generated</strong></li> </ul> </article> <article class="article"> <h3>24. What is the characteristic behavior of data stored in the localStorage property?</h3> <ul> <li>remains stored only for the duration of the session, disappearing when the browser or tab closes</li> <li><strong>faces no expiration and can be programmatically removed using JavaScript</strong></li> <li>maintains storage for a fixed period of 7 days before automatic deletion</li> <li>vanishes upon refreshing the webpage</li> </ul> </article> <article class="article"> <h3>25. What is the primary purpose of the Storage interface in web development?</h3> <ul> <li>facilitating access to session and local storage for a particular domain</li> <li>reviewing session and local storage data from the most recent browser session</li> <li><strong>interacting with the Web Storage API</strong></li> </ul> </article> <article class="article"> <h3>26. What is the storage capacity limit of Web Storage?</h3> <ul> <li>a maximum of 5 MB</li> <li>there is no set limit on the amount of data</li> <li><strong>a total of 10MB, comprising 5MB for local storage and 5MB for session storage per origin</strong></li> <li>depends on the phase of the moon</li> </ul> </article> <article class="article"> <h3>27. What occurs with sessionStorage when the same web page is opened in a new browser window or tab?</h3> <ul> <li>the previous session is loaded from sessionStorage</li> <li><strong>a new session is created</strong></li> <li>the session is not interrupted, and nothing happens</li> </ul> </article> <article class="article"> <h3>28. What primary function do third-party cookies serve in web browsing?</h3> <ul> <li>transferring user-related information back to the server</li> <li><strong>monitoring user browsing habits for targeted advertising</strong></li> <li>facilitating cross-site request forgery (CSRF), an unintended use</li> </ul> </article> <article class="article"> <h3>29. What sites would not be considered as same origin? (checkbox)</h3> <ul> <li>http://example.com:80</li> <li>http://example.com</li> <li><strong>https://example.com/app2</strong></li> <li>http://example.com/app1</li> <li><strong>http://www.example.com</strong></li> <li><strong>http://example.com:8080</strong></li> <li><strong>http://my.example.com</strong></li> <li>http://example.com/app2/index.html</li> <li><strong>http://example.org/dir</strong></li> <li><strong>http://example.com:443</strong></li> </ul> </article> <article class="article"> <h3>30. What type of error browsers throw if either local or session storage limit is reached?</h3> <ul> <li>TypeError</li> <li>SyntaxError</li> <li><strong>QuotaExceededError</strong></li> <li>InternalError</li> <li>URIError</li> <li>no exception will be thrown</li> </ul> </article> <article class="article"> <h3>31. What types of transactions exist in IndexedDB? (checkbox)</h3> <ul> <li><strong>readonly</strong></li> <li>private</li> <li><strong>readwrite</strong></li> <li>protected</li> <li>public</li> <li>versionchange</li> <li>strict</li> <li>default</li> <li>upgradeneeded</li> </ul> </article> <article class="article"> <h3>32. Where are IndexedDB data stored?</h3> <ul> <li>on the server</li> <li>in Web Storage</li> <li><strong>in a user\'s browser</strong></li> <li>in the cloud</li> </ul> </article> <article class="article"> <h3>33. Which are the valid methods of the Storage interface in JavaScript? (checkbox)</h3> <ul> <li><strong>Storage.key()</strong></li> <li><strong>Storage.getItem()</strong></li> <li>Storage.delete()</li> <li><strong>Storage.setItem()</strong></li> <li><strong>Storage.clear()</strong></li> <li>Storage.values()</li> </ul> </article> <article class="article"> <h3>34. Which are valid configurations for setting up cookies via document.cookie? (checkbox)</h3> <ul> <li><strong>path=/</strong></li> <li>getCookie(name)</li> <li><strong>domain=site.com</strong></li> <li><strong>secure</strong></li> <li>httpOnly</li> <li><strong>SameSite</strong></li> </ul> </article> <article class="article"> <h3>35. Which JavaScript API is designed for client-side storage of substantial amounts of structured data?</h3> <ul> <li>Express</li> <li>MongoDB</li> <li><strong>IndexedDB</strong></li> <li>Node.js</li> <li>LocalForage</li> </ul> </article> <article class="article"> <h3>36. Which of the following is the localStorage interface similar to?</h3> <ul> <li>Number</li> <li>Function</li> <li><strong>Map</strong></li> <li>Heap</li> </ul> </article> <article class="article"> <h3>37. Which time zone should be used when setting the expiration time for a cookie?</h3> <ul> <li>GMT+3</li> <li>server time zone</li> <li>client time zone</li> <li><strong>UTC</strong></li> </ul> </article> <article class="article"> <h3>38. Which Web Storage interfaces exist according to the specification? (checkbox)</h3> <ul> <li><strong>Storage</strong></li> <li>LocalStorage</li> <li><strong>Window</strong></li> <li>SessionStorage</li> <li><strong>StorageEvent</strong></li> <li>Cookie</li> </ul> </article> '];function kt(){var e=document.querySelector("#edu"),t=document.querySelectorAll(".js-dsr-lecture");if(t)for(var r=function(r){t[r].addEventListener("click",(function(t){t.preventDefault(),bt[r]&&(e.innerHTML=bt[r],Lt())}))},i=0;i<t.length;i++)r(i);var a=document.querySelectorAll(".js-dsr-workshop");if(a)for(var o=function(t){a[t].addEventListener("click",(function(r){r.preventDefault(),yt[t]&&(e.innerHTML=yt[t],Lt())}))},l=0;l<a.length;l++)o(l)}function Lt(){var e=document.querySelector("#edu"),t=document.getElementById("link-to-dsr2023net");t&&t.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML=ut,kt()}))}function St(){var e=document.querySelector("#edu"),t=document.querySelectorAll(".js-rs-test");if(t)for(var r=function(r){t[r].addEventListener("click",(function(t){t.preventDefault(),wt[r]&&(e.innerHTML=wt[r],xt())}))},i=0;i<t.length;i++)r(i);var a=document.querySelectorAll(".dsr-exam");if(a)for(var o=function(t){a[t].addEventListener("click",(function(r){r.preventDefault(),vt[t]&&(e.innerHTML=vt[t],xt())}))},l=0;l<a.length;l++)o(l)}function xt(){var e=document.querySelector("#edu"),t=document.getElementById("link-to-quiz");t&&t.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML=ft,St()}))}for(var Tt=[],_t=function(){var e=Vt[Ct],t=document.createElement("a");t.href="#",t.innerHTML=e,t.id="edu-".concat(e.replace(/[^a-z0-9]/gi,"").toLowerCase()),Tt.push(t),t.addEventListener("click",(function(e){e.preventDefault(),jt(Tt,t)}))},Ct=0,Vt=["RSS 2024 Stage2","Courses","Courses learned","Learning","RS School","RSS 2022 Stage0","RSS 2022 Stage1","RSS 2022 Stage3 Angular","DSR 2023 .Net","RSS 2023 Stage0","RSS 2023 Stage1","Quiz","JS Examples"];Ct<Vt.length;Ct++)_t();function jt(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;e.forEach((function(e){e.classList.remove("active")})),t&&t.classList.add("active")}r(868);for(var Nt=[],Pt=function(){var e=Et[Mt],t=document.createElement("a");t.href="#",t.innerHTML=e,t.id="learned-".concat(e.replace(/[^a-z0-9а-я]/gi,"").toLowerCase()),Nt.push(t),t.addEventListener("click",(function(e){var r;e.preventDefault(),r=t,Nt.forEach((function(e){e.classList.remove("active")})),r.classList.add("active")}))},Mt=0,Et=["All","Books","Video","Online courses","Youtube","Верстка"];Mt<Et.length;Mt++)Pt();r(89);for(var Dt=[],At=function(){var e=Ot[Ft],t=document.createElement("a");t.href="#",t.innerHTML=e,t.id="node-".concat(e.toLowerCase()),Dt.push(t),t.addEventListener("click",(function(e){var r;e.preventDefault(),r=t,Dt.forEach((function(e){e.classList.remove("active")})),r.classList.add("active")}))},Ft=0,Ot=["Node","Axios","Babel","Eslint","Gulp","Vite","Webpack","Tailwind","Nodejs"];Ft<Ot.length;Ft++)At();r(902),r(715);const It='<h1>Структуры данных</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#about">О структурах данных</a></p> <p><a href="#links">Links</a></p> <p><a href="#array">1. Массив (Array)</a></p> <p><a href="#dynamic-array">2. Динамический массив (Dynamic array)</a></p> <p><a href="#queue">3. Очередь (Queue)</a></p> <p><a href="#stack">4. Стек (Stack)</a></p> <p><a href="#deck">5. Дек (Deck)</a></p> <p><a href="#linked-list">6. Связанный список (Linked list)</a></p> <p><a href="#set">7. Множество (Set)</a></p> <p><a href="#map">8. Карта (Map). Ассоциативный массив, словарь</a></p> <p><a href="#hash-tables">9. Хэш-таблицы (Hash-tables)</a></p> <p><a href="#graph">10. Граф (Graph)</a></p> <p><a href="#binary-search-tree">11. Двоичное дерево поиска (Binary search tree)</a></p> <p><a href="#trie">12. Префиксное дерево (Trie)</a></p> <p><a href="#binary-heap">13. Двоичная куча (Binary heap)</a></p> </div> </div> <article class="article"> <div class="anchor" id="about"></div> <h2>Что такое структуры данных</h2> <p>Структура данных — это способ организации информации для более эффективного использования. В программировании структурой обычно называют набор данных, связанных определённым образом. Например, массив — это структура.</p> <p>Со структурой можно работать: добавлять данные, извлекать их и обрабатывать, например изменять, анализировать, сортировать. Для каждой структуры данных — свои алгоритмы. Работа программиста — правильно выбирать уже написанные готовые либо писать свои.</p> <p>Главное свойство структур данных в том, что у любой единицы данных должно быть чёткое место, по которому её можно найти. Как определяется это место и как происходит поиск, зависит от конкретной структуры.</p> <p>Характеристики структур данных следующие:</p> <ul> <li>Данные в памяти представлены определённым образом, который однозначно позволяет определить структуру.</li> <li>Чаще всего внутрь структуры можно добавить элемент или извлечь оттуда. Это свойство не постоянное — бывают структуры, которые нельзя изменять после создания.</li> <li>Существуют алгоритмы, которые позволяют взаимодействовать с этой структурой.</li> </ul> <p>При этом данных необязательно должно быть много. Массив из одного элемента — уже структура данных.</p> <h3>Зачем нужны структуры данных</h3> <p>Структуры нужны, чтобы упорядочивать, искать, анализировать и использовать данные с применением алгоритмов программирования.</p> <p>Фактически использование структур данных в программировании начинается ещё с задания переменной. Формат переменной — определённая структура данных, так как в память переменная записывается конкретным способом. Но на практике программисты работают с другими структурами, которые объединяют в себе разные переменные и типы данных. Далее приведем описание и классификацию основных структур данных, чтобы было удобнее в них разобраться.</p> <p>Структуру данных для работы выбирают в зависимости от задачи. Если нужно что-то простое, подойдёт обычный массив. Когда требуется создать очередь или историю запросов, выбирают связный список или очередь. Если нужен поиск и сортировка, поможет двоичное дерево. Именно поэтому важно знать все типы данных в программировании, чтобы подбирать оптимальный в любой ситуации.</p> </article> <article class="article"> <div class="anchor" id="links"></div> <h2>Links</h2> <p><a href="https://practicum.yandex.ru/blog/10-osnovnyh-struktur-dannyh/">10 структур данных, которые должен знать каждый разработчик</a> (Сергей Савельев, Лена Шпрингер 2022.08.10 5 мин)</p> <p><a href="https://blog.skillfactory.ru/glossary/struktura-dannyh/">Структура данных</a> (2023.03.25)</p> </article> <article class="article"> <div class="anchor" id="array"></div> <h2>1. Массив (Array)</h2> <p>Одна из самых простых структур данных, которая встречается чаще всего. Именно на массивах основаны многие другие структуры данных: списки, стеки, очереди.</p> <p>Для простоты восприятия можно считать, что массив — это таблица. Каждый его элемент имеет индекс — «адрес», по которому этот элемент можно извлечь. В большинстве языков программирования индексы начинаются с нуля. То есть первый элемент массива имеет индекс не [1], а [0]. Данные в массиве можно просматривать, сортировать и изменять с помощью специальных операций.</p> <p>Массивы бывают двух видов:</p> <ul> <li>Одномерные. У каждого элемента только один индекс. Можно представить это как строку с данными, где одного номера достаточно, чтобы чётко определить положение каждой переменной.</li> <li>Многомерные. У каждого элемента два или больше индексов. По сути, это комбинация из нескольких одномерных массивов, то есть вложенная структура.</li> </ul> <p>Основное отличие между одномерным и многомерным массивом ― их размерность и способ организации данных. Одномерный массив ― простая линейная структура данных, многомерный ― более сложная структура данных с несколькими измерениями</p> <h3>Как применяют массивы:</h3> <ul> <li>В качестве блоков для более сложных структур данных. Массивы предусмотрены в синтаксисе большинства языков программирования, и на их основе удобно строить другие структуры.</li> <li>Для хранения несложных данных небольших объёмов.</li> <li>Для сортировки данных.</li> </ul> </article> <article class="article"> <div class="anchor" id="dynamic-array"></div> <h2>2. Динамический массив (Dynamic array)</h2> <p>В классическом массиве размер задан заранее — мы точно знаем, сколько в нём индексов. А динамический массив — это тот, у которого размер может изменяться. При его создании задаётся максимальная величина и количество заполненных элементов. При добавлении новых элементов они сначала заполняются до максимальной величины, а при превышении сразу создаётся новый массив, с большей максимальной величиной.</p> <p>Элементы в динамический массив можно добавлять без ограничений и куда угодно. Однако, если добавлять их в середину, остальные придётся сдвигать, что занимает много времени. Поэтому лучше всего динамический массив работает при добавлении элементов в конце.</p> <h3>Как применяют динамические массивы:</h3> <ul> <li>В качестве блоков для структур данных.</li> <li>Для хранения неопределённого количества элементов.</li> </ul> </article> <article class="article"> <div class="anchor" id="queue"></div> <h2>3. Очередь (Queue)</h2> <p>Этот вид структуры представляет собой ряд данных, как и стек. Но в отличие от него она работает по принципу FIFO — First In, First Out (англ. «первым пришёл — первым ушёл»). Данные добавляют в конец, а извлекают из начала.</p> <p>В этой структуре данных всегда работают только с первым элементом. Остальные в это время «ждут своей очереди»</p> <p>Бывают неклассические, двусторонние очереди. В них можно добавлять элементы и извлекать их из начала и конца структуры. Элементы посередине недоступны.</p> <h3>Как применяют очереди:</h3> <ul> <li>Для реализации очередей, например на доступ к определённому ресурсу.</li> <li>Для управления потоками в многопоточных средах.</li> <li>Для генерации значений.</li> <li>Для создания буферов.</li> </ul> </article> <article class="article"> <div class="anchor" id="stack"></div> <h2>4. Стек (Stack)</h2> <p>Эта структура данных позволяет добавлять и удалять элементы только из начала. Она работает по принципу LIFO — Last In, First Out (англ. «последним пришёл — первым ушёл»). Последний добавленный в стек элемент должен будет покинуть его раньше остальных.</p> <p>Просмотреть стек можно целиком, а работать — только с вершиной. Для этого надо удалить или добавить последний элемент</p> <h3>Как применяют стеки:</h3> <ul> <li>Для реализации рекурсии.</li> <li>Для вычислений постфиксных значений.</li> <li>Для временного хранения данных, например истории запросов или изменений.</li> </ul> </article> <article class="article"> <div class="anchor" id="deck"></div> <h2>5. Дек (Deck)</h2> <p>Деками называют двусторонние очереди: они объединяют возможности и очереди, и стека. Такие структуры данных могут работать и по принципу FIFO, и по принципу LIFO. Доступ к элементам возможен с любого конца.</p> <p><strong>Операции.</strong> Можно сказать, что деки объединяют в себе операции, характерные для очередей и стеков. В каком-то смысле эти структуры данных напоминают массивы и приближены к ним по функциональности.</p> <p><strong>Применение.</strong> Деки используют, когда важно обеспечить доступ и к первым, и к последним элементам. Например, при оптимизации выполнения процессов.</p> </article> <article class="article"> <div class="anchor" id="linked-list"></div> <h2>6. Связный список (Linked list)</h2> <p>Ещё одна базовая структура данных, которую, как и массивы, используют для реализации других структур. Связный список — это группа из узлов. В каждом узле содержатся:</p> <ul> <li>Данные.</li> <li>Указатель или ссылка на следующий узел.</li> <li>В некоторых списках — ещё и ссылка на предыдущий узел.</li> </ul> <p>В итоге получается список, у которого есть чёткая последовательность элементов. При этом сами элементы более разрозненны, чем в массиве, поскольку хранятся отдельно. Быстро перемещаться между элементами списка помогают указатели.</p> <h3>Как применяют связные списки:</h3> <ul> <li>Для построения более сложных структур данных.</li> <li>Для реализации файловых систем.</li> <li>Для формирования хэш-таблиц.</li> <li>Для выделения памяти в динамических структурах данных.</li> </ul> </article> <article class="article"> <div class="anchor" id="set"></div> <h2>7. Множество (Set)</h2> <p>В отличие от предыдущих базовых структур, во множестве данные не упорядочены. Они хранятся группой, их нельзя структурировать и в некоторых случаях нельзя сортировать. Зато с ними можно работать как с классическими математическими множествами: объединять, искать пересечения, вычислять разность и смотреть, является ли одно множество подмножеством другого.</p> <p>Обычно во множество помещают объекты, у которых есть что-то общее. Важны свойства объектов, а их порядок значения не имеет</p> <h3>Как применяют множества:</h3> <ul> <li>Для поддержания множества уникальных элементов.</li> <li>Для хранения данных, которые не нужно сортировать.</li> <li>Для сравнения, объединения наборов данных и других операций с ними.</li> </ul> </article> <article class="article"> <div class="anchor" id="map"></div> <h2>8. Карта (Map). Ассоциативный массив, словарь</h2> <p>Её ещё называют ассоциативным массивом или словарём. Данные здесь хранятся в паре «ключ/значение», причем каждый ключ уникален, а вот значения могут повторяться. То есть определённому уникальному ключу всегда соответствует конкретное значение.</p> <p>Зная ключ, данные в Map можно искать быстрее, чем в других структурах</p> <h3>Как применяют Карту:</h3> <ul> <li>Для быстрого поиска данных.</li> <li>Для создания баз, в которых нужно хранить уникальное соответствие между двумя множествами значений. Их помещают в ключ, и структура проверяет, чтобы ключ не повторялся.</li> </ul> <p>Частный случай map — это hash-map, или хэш-таблица. В ней есть ключи и значения, а для их реализации добавляются индексы. Специальная хэш-функция позволяет по ключу вычислить индекс, чтобы найти нужные данные.</p> </article> <article class="article"> <div class="anchor" id="hash-tables"></div> <h2>9. Хэш-таблицы (Hash-tables)</h2> <p>Эта структура данных похожа на ассоциативный массив и иногда реализуется через него. Разница в том, что ключ для каждого значения задается автоматически с помощью специальной формулы — хэш-формулы. Эта формула применяется к самому значению — в результате генерируется ключ, основанный на нем.</p> <p>С помощью хэш-таблицы можно генерировать ключи автоматически, например, в ситуациях, когда их название не должно нести полезной нагрузки. Это удобнее и быстрее, чем словарь, если речь идет о больших объемах данных. Кроме того, использование хэшей позволяет шифровать информацию — правда, одной таблицы для этого недостаточно.</p> <p>При работе с хэш-таблицами важно избегать коллизий — ситуаций, когда применение формулы к разным значениям дает одинаковые ключи. Чтобы такого не было, нужно грамотно подбирать формулу для каждого случая. Также существуют специальные стратегии для предотвращения коллизий.</p> <p><strong>Операции.</strong> В таблицу можно добавить элемент, удалить или найти по тому или иному признаку. При ее создании также можно и нужно задать формулу, по которой будут генерироваться хэши.</p> <p><strong>Применение.</strong> Хэш-таблицы используются для хранения больших объемов информации, в базах данных, а также для создания кэшей или при построении более сложных структур. Чаще всего таблицы используют, когда нужен быстрый доступ к информации.</p> </article> <article class="article"> <div class="anchor" id="graph"></div> <h2>10. Граф (Graph)</h2> <p>Граф — это более общий случай дерева. Иногда деревья называют ациклическими графами. Отличий у этих структур данных два:</p> <ul> <li>В графе возможны циклы, то есть «ребёнок» может быть «родителем» для того же элемента.</li> <li>Рёбра тоже могут нести смысловую нагрузку, то есть нужно сохранять их значения.</li> </ul> <p>Графы бывают ориентированные и неориентированные. У первых рёбра между узлами имеют направление, так что порядок элементов важен. У вторых направлений нет, и элементы можно читать и обходить в любом порядке.</p> <p>У ориентированных графов важен порядок элементов, у неориентированных ― элементы можно менять местами</p> <p>Графы часто представляют в виде матрицы смежности.</p> <h3>Как применяют графы:</h3> <ul> <li>Для хранения информации, связанной друг с другом сложными соотношениями.</li> <li>Для анализа соотносящейся друг с другом информации.</li> <li>Для построения маршрута из точки А в точку Б.</li> </ul> </article> <article class="article"> <div class="anchor" id="binary-search-tree"></div> <h2>11. Двоичное дерево поиска (Binary search tree)</h2> <p>Дерево — это структура, данные в которой лежат в узлах. У каждого узла могут быть один или несколько дочерних и только один родитель, то есть они расходятся, как ветви дерева:</p> <p>Деревья бывают разных типов, но наиболее распространены двоичные деревья поиска. У них есть следующие особенности:</p> <ul> <li>У каждого узла не больше двух дочерних.</li> <li>Если новое значение меньше, оно становится левым дочерним либо дочерним левого дочернего.</li> <li>Если значение больше, оно становится правым дочерним или дочерним правого дочернего.</li> </ul> <h3>Как применяют двоичные деревья:</h3> <ul> <li>Для быстрого поиска данных.</li> <li>Для хранения данных в отсортированном виде с возможностью быстро их добавлять и удалять.</li> </ul> </article> <article class="article"> <div class="anchor" id="trie"></div> <h2>12. Префиксное дерево (Trie)</h2> <p>Другие названия этой структуры данных — Бор и нагруженное дерево. Данные в нём хранятся последовательно: каждый узел — это префикс, по которому находятся следующие узлы.</p> <h3>Как применяют префиксные деревья:</h3> <ul> <li>Для хранения данных, которые нужно выдавать по цепочке. Например, слова для функции автозаполнения в телефоне: в зависимости от одной набранной буквы дерево выдаёт следующие.</li> <li>Для хранения данных, у которых есть повторяющиеся участки. Например IP-адресов.</li> </ul> </article> <article class="article"> <div class="anchor" id="binary-heap"></div> <h2>13. Двоичная куча (Binary heap)</h2> <p>Двоичные кучи — двоичные деревья, заполненные целиком. У каждого узла два потомка. Потомки в зависимости от типа дерева должны быть строго больше предков или меньше либо равны им.</p> </article> ',Wt='<h1>Алгоритмы</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#about">О алгоритмах</a></p> <p><a href="#links">Links</a></p> <p><a href="#props">Свойства алгоритмов</a></p> <p><a href="#bigo">Сложность</a></p> <p><a href="#sort">Сортировка</a></p> <p><a href="#search">Поиск</a></p> </div> </div> <article class="article"> <div class="anchor" id="about"></div> <h2>О алгоритмах</h2> </article> <article class="article"> <div class="anchor" id="links"></div> <h2>Links</h2> <p><a href="https://teach-in.ru/course/algorithms">teach-in.ru/course/algorithms</a> Лекции преподавателей МГУ</p> <p><a href="hhttps://education.yandex.ru/handbook/algorithms">education.yandex.ru/handbook/algorithms</a> Яндеск образование. Основы алгоритмов</p> <p><a href="https://education.yandex.ru/journal/osnovnye-vidy-sortirovok-i-primery-ikh-realizatsii">education.yandex.ru</a> Основные виды сортировок и примеры их реализации (Илья Шишков 2020-01-16)</p> <p><a href="https://education.yandex.ru/knowledge/algoritmy">education.yandex.ru</a> Алгоритмы (Илья Волков 2020-04-24)</p> <p><a href="https://bimlibik.github.io/posts/complexity-of-algorithms/">bimlibik.github.io</a> Сложность алгоритмов. Big O. Основы. (2020-10-29)</p> <p><a href="https://thecode.media/sort/">thecode.media</a> Зачем нужна сортировка в программировании (2021-06-30)</p> <p><a href="https://dzen.ru/a/ZEpeLTjDQ28UUYOp">dzen.ru</a> Алгоритмы программирования: применение и сложность O(n) (2023-04-27)</p> <h3>Статьи на habr</h3> <p><a href="https://habr.com/ru/articles/204600/">Пузырьковая сортировка и все-все-все</a> (velemak 2013-12-03)</p> <h3>learn.coderslang.com</h3> <p><a href="https://learn.coderslang.com/ru/0036-javascript-bubble-sort/">learn.coderslang.com/ru/0036-javascript-bubble-sort</a> Сортировка пузырьком на JavaScript (2021.02.20)</p> <p><a href="https://learn.coderslang.com/ru/0037-javascript-optimized-bubble-sort.-coctail-sort/">learn.coderslang.com/ru/0037-javascript-optimized-bubble-sort.-coctail-sort</a> Улучшенная сортировка пузырьком на JavaScript. Шейкерная сортировка (2021.02.21)</p> </article> <article class="article"> <div class="anchor" id="props"></div> <h2>Свойства алгоритмов</h2> <ol> <li><strong>Дискретность</strong> – алгоритм представляется как последовательность ин- струкций исполнителя. Каждая инструкция выполняется только после того, как закончилось выполнение предыдущей команды.</li> <li><strong>Конечность (результативность, финитность)</strong> – алгоритм должен за- канчиваться после выполнения конечного числа инструкций.</li> <li><strong>Детерминированность</strong> – каждый шаг алгоритма должен быть одно- значно определен – записан на формальном языке исполнителя. Де- терминированность обеспечивает совпадение результатов, получаемых при многократном выполнении алгоритма, на одном и том же наборе входных данных.</li> <li><strong>Массовость</strong> – алгоритм решения задачи должен быть применим для некоторого класса задач, различающихся лишь значениями входных данных.</li> </ol> </article> <article class="article"> <div class="anchor" id="bigo"></div> <h2>Сложность</h2> <ol> <li>Сложность по времени</li> <li>Сложность по памяти</li> </ol> <h3>Сложность по времени</h3> <p>Сложность по времени это максимальное количество шагов, требующихся алгоритму для завершения ппо мере увеличения n.</p> <ol> <li> <h3>Постоянное время O(1)</h3> <p>Наиболее эффективный порядок величины. Алгоритм выполняется за постоянное время, когда ему требуется одно и то же количество шагов вне зависимости от объема задачи</p> <p>Например, алгоритм выбора первого элемента из набора данных. Независимо от размера n вы выбираете первый элемент за один шаг. Время алгоритма не меняется с увеличением набора данных.</p> </li> <li> <h3>Логарифмическое время O(log n)</h3> <p>Логарифмическое время - это вторая по эффективности временная сложность. Время выполнения алгоритма растет пропорционально логарифму размера входных даных.</p> <p>Например, двоичный поиск, который может не учитывать множество значений в каждом цикле.По мере увеличения набора данных количество шагов алгоритма растет достаточно медленно.</p> </li> <li> <h3>Линейное время O(n)</h3> <p>Такой алгоритм растет пропорционально росту размера задачи.</p> <p>Например, надо в одном цикле перебрать все входные данные. В линейном алгоритме по мере роста n количество шагов алгоритма увеличиватся на то же количество n.</p> </li> <li> <h3>Линейно-логарифмическое время O(n log n)</h3> <p>Растет как умножение линейных и логарифмических сложностей. Операция O(log n) вычисляется n раз. Линейно-логарифмические алгоритмы разделяют набор данных на меньшие части и каждую из них обрабатывают по отдельности.</p> <p>Например, большинство наиболее эффективных алгоритмов сортировки, такие как сортировка слиянием, являются линейно-логарифмическими.</p> </li> <li> <h3>Квадратичное время O(n**2)</h3> <p>Алгоритм выполняется за квадратичное время, когда его производительность прямо пропорциональна размеру задачи в квадрате.</p> <p>Например, вложенный цикл будет иметь квадратичную сложность, когда данные перебираются в цикле и для каждого элемента опять в цикле перебираются данные. Простые алгоритмы сортировки, такие как пузырьковая и сортировка вставками выполняются за квадратичное время.</p> </li> <li> <h3>Кубическое время O(n**3)</h3> <p>Алгоритм выполняется за кубическое время, когда производительность прямо пропорциональна размеру задачи в кубе.</p> </li> <li> <h3>Экспоненциальное время O(c**n)</h3> <p>Наихудшая сложность алгоритма. Содержит константу, увеличенную до размеров задачи. Количество шагов алгоритма растет с невероятной скоростью.</p> <p>Например, для угадывания пароля из 8 десятичных цифр придется выполнить 100 миллионов шагов. Отгадывание пароля это пример алгоритма полного перебора, проверяющего все возможные варианты. Алгоритмы полного перебора неэффективны.</p> </li> </ol> <p>Сложность алгоритма зависит от входных данных. Поэтому необходимо учитывать сложность в лучшем, худшем и среднем случае. Например, в лучшем случае, во время поиска, мы можем найти элемент в первом элементе списка. В худшем случае элемента может не быть вообще и алгоритм полностью выполнит свою работу только перебрав все данные.</p> <h3>Сложность по памяти</h3> <p>У компьютера есть ограниченные ресурсы, такие как память, поэтому важно учитывать не только временную сложность, но и потребление ресурсов. Сложность по памяти это объем памяти необходимый алгоритму. Чем меньше памяти требуется алгоритму тем лучше.</p> <h3>Оптимизация алгоритма</h3> <p>Важно понимать порядок величины чтобы оптимизировать алгоритм. Нужно изменять порядок величины.Например, при O(n**2) с двумя циклами вместо оптимизации процессов внутри циклов, постарайтесь избавиться от одного цикла.</p> </article> <article class="article"> <div class="anchor" id="sort"></div> <h2>Сортировка</h2> <ol> <li>Сортировка пузырьком (Bubble Sort)</li> <li>Сортировка перемешиванием (шейкерная сортировка)</li> <li>Сортировка расчёской</li> <li>Сортировка вставками (Insertion Sort)</li> <li>Сортировка выбором</li> <li>Сортировка Шелла (Shell Sort)</li> <li>Сортировка подсчетом (Counting Sort)</li> <li>Сортировка слиянием (Merge Sort)</li> <li>Пирамидальная сортировка</li> <li>Быстрая сортировка Хоара (Quick Sort)</li> <li>Гномья сортировка (Gnome Sort)</li> </ol> <h3>1. Сортировка пузырьком (Bubble Sort)</h3> <p>Сортировка пузырьком — один из самых известных алгоритмов сортировки. Здесь нужно последовательно сравнивать значения соседних элементов и менять числа местами, если предыдущее оказывается больше последующего. Таким образом элементы с большими значениями оказываются в конце списка, а с меньшими остаются в начале.</p> <p>Когда дойдем до конца массива, то самый последний элемент будет гарантированно на своем месте. Самый большой пузырек всплыл на поверхность воды. Мы повторим процедуру еще раз, но уже до предпоследнего элемента. После второй итерации, на своих позициях будет уже 2 последних элемента. Будем повторять алгоритм до тех пор, пока у нас не останется только первый элемент.</p> <pre>function bubbleSort(arr) {\r\n  for (let i = 0; i &lt; arr.length; i++) {\r\n    for (let j = 0; j &lt; arr.length - i; j++) {\r\n      if (arr[j] &gt; arr[j + 1]) {\r\n        let tmp = arr[j];\r\n        arr[j] = arr[j + 1];\r\n        arr[j + 1] = tmp;\r\n      }\r\n    }\r\n  }\r\n  return arr;\r\n}</pre> <p>Этот алгоритм считается учебным и почти не применяется на практике из-за низкой эффективности: он медленно работает на тестах, в которых маленькие элементы (их называют «черепахами») стоят в конце массива. Однако на нём основаны многие другие методы, например, шейкерная сортировка и сортировка расчёской.</p> <h3>Улучшенная сортировка пузырьком</h3> <p>Алгоритм пузырьковой сортировки никак не следит за текущим состоянием массива. Даже если на вход мы отправим уже отсортированный массив, нам нужно будет столько же итераций цикла, как и для неотсортированного массива, чтобы получить результат. Быстродействие пузырьковой сортировки в JavaScript можно улучшить, если добавить флаг (логическую переменную) который будет следить за тем был ли хотя бы один обмен на текущей итерации. Если нет, то массив отсортирован и задача выполнена.</p> <pre>function bubbleSort(arr) {\r\n  let isSwap = false;\r\n  for (let i = 0; i &lt; arr.length; i++) {\r\n    for (let j = 0; j &lt; arr.length - i; j++) {\r\n      if (arr[j] &gt; arr[j + 1]) {\r\n        let temp = arr[j + 1];\r\n        arr[j + 1] = arr[j];\r\n        arr[j] = temp;\r\n        isSwap = true;\r\n      }\r\n    }\r\n    if (!isSwap) {\r\n      return arr;\r\n    }\r\n  }\r\n  return arr;\r\n}</pre> <p>Если отсортировать массив в котором все элементы уже расположены по возрастанию, то нам нужна будет только одна итерация внешнего цикла. Поэтому в лучшем случае мы получим сложность O(n).</p> <h3>2. Сортировка перемешиванием (шейкерная сортировка)</h3> <p>Шейкерная сортировка отличается от пузырьковой тем, что она двунаправленная: алгоритм перемещается не строго слева направо, а сначала слева направо, затем справа налево.</p> <p>Начинаем мы точно так же, как и в пузырьковой сортировке, и “выдавливаем наверх” максимальный элемент. После этого, разворачиваемся и “толкаем вниз” минимальный из оставшийся элементов.</p> <p>Оказавшись в начале массива, на своих местах будет уже 2 элемента - первый и последний. Остановимся когда дойдем до середины массива. Таким образом сделаем в 2 раза меньше итераций внешнего цикла. За счет этого скорость шейкерной сортировки будет немного выше, чем у обычного пузырька.</p> <p>Начнем с небольшого рефакторинга и вынесем функцию обмена наружу. Назовем ее swap</p> <pre>function swap(arr, i, j) {\r\n  let temp = arr[j];\r\n  arr[j] = arr[i];\r\n  arr[i] = temp;\r\n}\r\n\r\nfunction cocktailSort(arr) {\r\n  let left = 0;\r\n  let right = arr.length - 1;\r\n  let isSwap = false;\r\n  while(left &lt; right) {\r\n    for (let i = left; i &lt; right; i++) {\r\n      if (arr[i] &gt; arr[i + 1]) {\r\n        swap(arr, i, i + 1);\r\n        isSwap = true;\r\n      }\r\n    }\r\n    if (!isSwap) {\r\n      return arr;\r\n    }\r\n    isSwap = false;\r\n    right--;\r\n    for (let i = right; i &gt; left; i--) {\r\n      if (arr[i] &lt; arr[i - 1]) {\r\n        swap(arr, i, i - 1);\r\n        isSwap = true;\r\n      }\r\n    }\r\n    if (!isSwap) {\r\n      return arr;\r\n    }\r\n    isSwap = false;\r\n    left++;\r\n  }\r\n  return arr;\r\n}</pre> <h3>3. Сортировка расчёской</h3> <p>Сортировка расчёской — улучшение сортировки пузырьком. Её идея состоит в том, чтобы «устранить» элементы с небольшими значения в конце массива, которые замедляют работу алгоритма. Если при пузырьковой и шейкерной сортировках при переборе массива сравниваются соседние элементы, то при «расчёсывании» сначала берётся достаточно большое расстояние между сравниваемыми значениями, а потом оно сужается вплоть до минимального.</p> <p>Первоначальный разрыв нужно выбирать не случайным образом, а с учётом специальной величины — фактора уменьшения, оптимальное значение которого равно 1,247. Сначала расстояние между элементами будет равняться размеру массива, поделённому на 1,247; на каждом последующем шаге расстояние будет снова делиться на фактор уменьшения — и так до окончания работы алгоритма.</p> <pre>// исходный массив\r\n  var arr = [3,14,1,7,9,8,11,6,4,2]\r\n\r\n  // получаем длину массива\r\n  const l = arr.length;\r\n  // оптимальное число для вычисления шага сравнения\r\n  const factor = 1.247;\r\n  // получаем точный шаг сравнения\r\n  let gapFactor = l / factor;\r\n  // пока шаг больше единицы\r\n  while (gapFactor &gt; 1) {\r\n      // округляем шаг до целого\r\n      const gap = Math.round(gapFactor);\r\n      // и организуем цикл как в пузырьковой сортировке\r\n      for (let i = 0, j = gap; j &lt; l; i++, j++) {\r\n          // если сначала идёт большое число\r\n          if (arr[i] &gt; arr[j]) {\r\n              // меняем их местами\r\n              [arr[i], arr[j]] = [arr[j], arr[i]];\r\n          }\r\n          // выводим текущее состояние массива в консоль\r\n          // это необязательный шаг, он здесь для наглядности\r\n          console.log(arr);\r\n      }\r\n      // в конце цикла рассчитываем новый шаг\r\n      gapFactor = gapFactor / factor;\r\n  }</pre> <p>Расчёска лучше пузырьковой сортировки, потому что в ней намного меньше операций перестановки. Именно перестановка занимает основное время процессора. В самом худшем случае алгоритм сортировки расчёской будет работать так же, как и пузырьковая, а в среднем — алгоритм работает быстрее пузырьковой.</p> <h3>4. Сортировка вставками (Insertion Sort)</h3> <p>При сортировке вставками массив постепенно перебирается слева направо. При этом каждый последующий элемент размещается так, чтобы он оказался между ближайшими элементами с минимальным и максимальным значением.</p> <h3>5. Сортировка выбором</h3> <p>Сначала нужно рассмотреть подмножество массива и найти в нём максимум (или минимум). Затем выбранное значение меняют местами со значением первого неотсортированного элемента. Этот шаг нужно повторять до тех пор, пока в массиве не закончатся неотсортированные подмассивы.</p> <h3>6. Сортировка Шелла (Shell Sort)</h3> <h3>7. Сортировка подсчетом (Counting Sort)</h3> <h3>8. Сортировка слиянием (Merge Sort)</h3> <h3>9. Пирамидальная сортировка</h3> <h3>10. Быстрая сортировка Хоара (Quick Sort)</h3> <h3>11. Гномья сортировка (Gnome Sort)</h3> </article> <article class="article"> <div class="anchor" id="sort"></div> <h2>Поиск</h2> <ol> <li>Линейный поиск</li> <li>Двоичный (бинарный) поиск</li> </ol> <h3>Линейный поиск</h3> <p>Линейный поиск числа перебирает каждый элемент в наборе данных и сравнивает его с целевым числом. Если находит совпадение то выдает ответ, что число найдено в списке. Если проходит все числа от первого до последнего и совпадения не будет, то выдает ответ что число отсутствует в списке.</p> <p>Временная сложность линейного поиска O(n). O(n) это худший случай, если элемент окажется последний в списке и придется просмотреть каждый элемент, чтобы найти его. В лучшем случае элемент окажется первым в списке и с сложность будет O(1). В среднем линейному поиску требуется n/2 шагов.</p> <p>Линейный поиск используют если данные не отсортированы. Если данные отсортированы то можно использовать двоичный поиск.</p> <h3>Двоичный (бинарный) поиск</h3> <p>Двоичный поиск работает только с отсортированными данными. Первый шаг это определить среднее число. Второй шаг это сравнить целевое число со средним числом. Если число совпало то алгоритм закончен, если нет то переходим на третий шаг. Третий шаг определить целевое число больше или меньше среднего числа. Отбросить ненужную половину чисел и искать в нужной.</p> <p>Временная сложность двоичного поиска O(log n). Это эффективнее чем линейный поиск. Линейный поиск среди миллиона элементов займет миллион шагов. Двоичный поиск среди миллиона элементов займет 20 шагов.</p> <p>Когда при двоичном поиске первый раз делим список пополам, то остается n/2 элементов, после второй итерации n/(2*2), после третьей n/(2**3) и т.д. Двоичный поиск при каждой итерации делит список пополам, а это значит, что основание логарифма, описывающего время выполнени поиска, равно 2. Тем не менее, в нотации "О большое" основание логарифма не имеет значение, потому что его можно изменить, умножив логарифм на константу.</p> <p>Если есть большой список, к которому требуется выполнить много поисковых запросов, то выгоднее отсортировать данные один раз, чтобы ускорить каждый поиск в будущем.</p> </article>',Rt='<h1>Принципы разработки</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#about">about</a></p> <p><a href="#links">links</a></p> <p><a href="#dry">DRY</a></p> <p><a href="#kiss">KISS</a></p> <p><a href="#yagni">YAGNI</a></p> <p><a href="#solid">SOLID</a></p> <p><a href="#bduf">BDUF</a></p> <p><a href="#okkama">Бритва Оккама</a></p> </div> </div> <article class="article"> <div class="anchor" id="about"></div> <h2>about</h2> </article> <article class="article"> <div class="anchor" id="links"></div> <h2>links</h2> <p><a href="https://habr.com/ru/companies/itelma/articles/546372/">habr.com/ru/companies/itelma/articles/546372</a> Принципы для разработки: KISS, DRY, YAGNI, BDUF, SOLID, APO и бритва Оккама (2021.03.10)</p> <p><a href="https://skillbox.ru/media/code/eto-klassika-eto-znat-nado-dry-kiss-solid-yagni-i-drugie-poleznye-sokrashcheniya/">skillbox.ru</a> Это классика, это знать надо: DRY, KISS, SOLID, YAGNI и другие полезные сокращения (2022.06.06)</p> </article> <article class="article"> <div class="anchor" id="dry"></div> <h2>DRY. Don’t Repeat Yourself / Не повторяйтесь</h2> <p>Дублирование кода – пустая трата времени и ресурсов. Вам придется поддерживать одну и ту же логику и тестировать код сразу в двух местах, причем если вы измените код в одном месте, его нужно будет изменить и в другом.</p> </article> <article class="article"> <div class="anchor" id="kiss"></div> <h2>KISS. Keep It Simple, Stupid / Будь проще</h2> <p>Простые системы будут работать лучше и надежнее. Не придумывайте к задаче более сложного решения, чем ей требуется. Иногда самое разумное решение оказывается и самым простым. Написание производительного, эффективного и простого кода – это прекрасно.</p> </article> <article class="article"> <div class="anchor" id="yagni"></div> <h2>YAGNI. You Aren’t Gonna Need It / Вам это не понадобится</h2> <p>Не пишите код, если думаете, что он пригодится позже.</p> </article> <article class="article"> <div class="anchor" id="solid"></div> <h2>SOLID</h2> <p>Solid — это аббревиатура от:</p> <ol> <li> <h3>S. Single-responsibility principle /Принцип единственной ответственности</h3> <p>Каждый объект, класс и метод должны отвечать только за что-то одно. Если ваш объект/класс/метод делает слишком много, вы получите спагетти-код.</p> </li> <li> <h3>O. Open–closed principle / Принцип открытости-закрытости</h3> <p>Программные объекты должны быть открыты для расширения, но закрыты для модификации. Речь о том, что нельзя переопределять методы или классы, просто добавляя дополнительные функции по мере необходимости. Хороший способ решения этой проблемы – использование наследования. В JavaScript эта проблема решается с помощью композиции. Простое правило: если вы изменяете сущность, чтобы сделать ее расширяемой, вы впервые нарушили этот принцип.</p> </li> <li> <h3>L. Liskov substitution principle / Принцип подстановки Барбары Лисков</h3> <p>Этот принцип гласит, что объекты старших классов должны быть заменимы объектами подклассов, и приложение при такой замене должно работать так, как ожидается.</p> </li> <li> <h3>I. Interface segregation principle / Принцип разделения интерфейсов</h3> <p>Этот принцип был сформулирован Робертом Мартином, когда он консультировал Xerox, и он очевиден. Объекты не должны зависеть от интерфейсов, которые они не используют. ПО должно разделяться на независимые части. Побочные эффекты необходимо сводить к минимуму, чтобы обеспечивать независимость. Убедитесь, что вы не заставляете объекты реализовывать методы, которые им никогда не понадобятся.</p> </li> <li> <h3>D) Dependency inversion principle / Принцип инверсии зависимостей</h3> <p>Мы должны полагаться на абстракции, а не на конкретные реализации. Компоненты ПО должны иметь низкую связность и высокую согласованность. Заботиться нужно не о том, как что-то устроено, а о том, как оно работает. Иногда добавление этого уровня абстракции требует усилий, но в конечном итоге они окупаются.</p> </li> </ol> </article> <article class="article"> <div class="anchor" id="bduf"></div> <h2>BDUF. Big design up front / Глобальное проектирование прежде всего</h2> <p>Прежде чем переходить к реализации, убедитесь, что все хорошо продумано. Зачастую продумывание решений избавляло нас от проблем при разработке… Внесение изменений в спецификации занимало час или два. Если бы мы вносили эти изменения в код, на это уходили бы недели. Многие разработчики считают, что если они не пишут код, то они не добиваются прогресса. Это неверный подход. Составив план, вы избавите себя от необходимости раз за разом начинать с нуля.</p> </article> <article class="article"> <div class="anchor" id="okkama"></div> <h2>Бритва Оккама</h2> <ol> <li>Не нужно создавать лишние сущности без необходимости в них.</li> <li>Всегда начинайте с максимально простого кода, затем увеличивайте сложность по мере необходимости.</li> </ol> </article> ',Ht='<h1>Паттерны проектирования</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#about">about</a></p> <p><a href="#links">links</a></p> </div> </div> <article class="article"> <div class="anchor" id="about"></div> <h2>about</h2> <p>Паттерн представляет определенный способ построения программного кода для решения часто встречающихся проблем проектирования. В данном случае предполагается, что есть некоторый набор общих формализованных проблем, которые довольно часто встречаются, и паттерны предоставляют ряд принципов для решения этих проблем.</p> <p>При написании программ мы можем формализовать проблему в виде классов и объектов и связей между ними. И применить один из существующих паттернов для ее решения. В итоге нам не надо ничего придумывать. У нас уже есть готовый шаблон, и нам только надо его применить в конкретной программе.</p> <p>Причем паттерны, как правило, не зависят от языка программирования. Их принципы применения будут аналогичны и в C#, и в Jave, и в других языках.</p> <p>Также мышление паттернами упрощает групповую разработку программ. Зная применяемый паттерн проектирования и его основные принципы другому программисту будет проще понять его реализацию и использовать ее.</p> <h3>Виды паттернов:</h3> <ol> <li>Creational / Порождающие</li> <li>Structural / Структурные</li> <li>Behavioral / Поведенческие</li> </ol> <h3>Порождающие паттерны</h3> <p>Порождающие паттерны — это паттерны, которые абстрагируют процесс инстанцирования или, иными словами, процесс порождения классов и объектов. Среди них выделяются следующие:</p> <ol> <li>Абстрактная фабрика (Abstract Factory)</li> <li>Строитель (Builder)</li> <li>Фабричный метод (Factory Method)</li> <li>Прототип (Prototype)</li> <li>Одиночка (Singleton)</li> </ol> <h3>Структурные паттерны</h3> <p>Структурные паттерны - рассматривают, как классы и объекты образуют более крупные структуры - более сложные по характеру классы и объекты. К таким шаблонам относятся:</p> <ol> <li>Адаптер (Adapter)</li> <li>Мост (Bridge)</li> <li>Компоновщик (Composite)</li> <li>Декоратор (Decorator)</li> <li>Фасад (Facade)</li> <li>Приспособленец (Flyweight)</li> <li>Заместитель (Proxy)</li> </ol> <h3>Поведенческие паттерны</h3> <p>Поведенческие паттерны определяют алгоритмы и взаимодействие между классами и объектами, то есть их поведение. Среди подобных шаблонов можно выделить следующие:</p> <ol> <li>Цепочка обязанностей (Chain of responsibility)</li> <li>Команда (Command)</li> <li>Интерпретатор (Interpreter)</li> <li>Итератор (Iterator)</li> <li>Посредник (Mediator)</li> <li>Хранитель (Memento)</li> <li>Наблюдатель (Observer)</li> <li>Состояние (State)</li> <li>Стратегия (Strategy)</li> <li>Шаблонный метод (Template method)</li> <li>Посетитель (Visitor)</li> </ol> </article> <article class="article"> <div class="anchor" id="links"></div> <h2>links</h2> <p><a href="https://habr.com/ru/articles/210288/">habr.com/ru/articles/210288</a> Шпаргалка по шаблонам проектирования (2014.01.25)</p> <p><a href="https://metanit.com/sharp/patterns/">metanit.com/sharp/patterns</a> Паттерны проектирования в C# и .NET (2023.08.16)</p> </article>';for(var Bt=[],zt=function(){var e=Gt[Jt],t=document.createElement("a");t.href="#",t.innerHTML=e,t.id="base-".concat(e.replace(/[^a-z0-9]/gi,"").toLowerCase()),Bt.push(t),t.addEventListener("click",(function(e){var r;e.preventDefault(),r=t,Bt.forEach((function(e){e.classList.remove("active")})),r.classList.add("active")}))},Jt=0,Gt=["Structure","Algorithm","Principle","Pattern"];Jt<Gt.length;Jt++)zt();r(154);const Ut='<h1>Angular</h1> <div class="content__menu"> <p class="content__menu-link" id="content__menu-link1">about</p> <p class="content__menu-link" id="content__menu-link2">links</p> <p class="content__menu-link" id="content__menu-link3">install</p> <p class="content__menu-link" id="content__menu-link4">gh pages</p> <p class="content__menu-link" id="content__menu-link5">files</p> <p class="content__menu-link" id="content__menu-link6">start</p> <p class="content__menu-link" id="content__menu-link7">ng build</p> <p class="content__menu-link" id="content__menu-link8">errors</p> </div> <div class="content__items"> <div class="content__item" id="content__item1"> <h3>Об Angular</h3> <ul> <li>Angular представляет собой JavaScript-фреймворк, который позволяет создавать высокопроизводительные и функциональные клиентские web-приложения. Angular состоит из совокупности библиотек, каждая из которых отвечает за определенный функционал: создание форм, работа с анимацией, осуществление HTTP-запросов и т. д.</li> </ul> </div> <div class="content__item" id="content__item2"> <h3>Ссылки на пакеты</h3> <ul> <li><a href="https://angular.io/">https://angular.io/ </a><br><a href="https://github.com/angular/angular">https://github.com/angular/angular </a><br><a href="https://cli.angular.io">https://cli.angular.io </a><br><a href="https://github.com/angular/angular-cli">https://github.com/angular/angular-cli</a><br><a href="https://material.angular.io/">https://material.angular.io/ </a><br><a href="https://ng-bootstrap.github.io/">https://ng-bootstrap.github.io/</a></li> </ul> <h3>Ссылки на обучение</h3> <ul> <li><a href="https://angdev.ru/">https://angdev.ru/</a><br><a href="https://angular24.ru/">https://angular24.ru/</a><br><a href="https://angular-doc.ru/">https://angular-doc.ru/</a><br><a href="https://angular-ru.github.io/">https://angular-ru.github.io/</a><br><a href="https://metanit.com/web/angular2/">https://metanit.com/web/angular2/ </a><br><a href="http://www.front-nika.ru/ru/angular-2-luchshie-praktiki-style-guide/">front-nika.ru Angular Style Guide</a></li> </ul> <h3>Ссылки на статьи</h3> <ul> <li><a href="https://habr.com/ru/post/333716/">переключение темы</a><br> <p>Приложения Angular строятся на базе паттерна проектирования MVC (модель - представление - контроллер). Это простота расширения, удобство сопровождения, удобство тестирования, стандартизация. Angular является частью стека MEAN (MongoDB, ExpressJS, Angular, NodeJS)</p> </li> </ul> </div> <div class="content__item" id="content__item3"> <h3>Установка</h3> <ol> <li>Для установки Angular требуется установленные node.js и npm. Проверим версии установленных node.js и npm <code> node -v <br>v16.13.1 <br>npm -v <br>8.1.2 </code> (сокращенно от node --version и npm --version)<br>если их нет, то поставить с оффициального сайта <a href="https://nodejs.org/en/">https://nodejs.org/en/</a> </li> <li>Установим angular cli глобально во всей системе. Эта же команда обновит уже установленную версию.<code>npm i -g @angular/cli</code>(сокращенно от npm install --global @angular/cli)<br>Поскольку Angular CLI устанавливается глобально, то устанавливать его отдельно для каждого проекта не нужно. Все команды Angular CLI начинаются со слова ng. Проверим установленную версию Angular CLI<code>ng -v</code>(сокращенно от ng version)</li> <li>Есть два способа установки Angular. Первый это ручная сборка (создать файл package.json с нужными зависимостями и запустить npm init), мы ей пользоваться не будем. Будем использовать только второй способ это через специальное консольное приложение Angular CLI.</li> <li>Создадим новый проект на Angular в папке app (если ее нет то она создастся)<code>ng new app --style=scss --skip-tests --skip-install --routing</code>app имя нового проекта<br>--style=scss добавит в проект scss вместо обычного css<br>--skip-tests не создавать тесты<br>--skip-install не устанавливать npm модули<br>--routing добавить код для маршрутизации<br>--prefix смена префикса по умолчанию для селекторов<br>--skip-git не добавлять проект в репозиторий<br>--dry-run не создавать файлы<br>Все опции, которые мы прописали при создании проекта попадут в файл настроек .angular-cli.json который можно редактировать.</li> <li>Если npm модули не устанавливались, то их можно установить в любой момент командой<code>npm install</code> </li> <li>Установим в проект ESLint <code>ng add @angular-eslint/schematics</code>Подробнее можно посмотреть на сайте <a href="https://habr.com/ru/post/501830/">Переносим Angular проект на ESLint, с Prettier, Husky и lint-staged</a></li> <li>Добавим в наш конфиг ESLint правила стайл гайда AirBnB<code>npm install eslint-plugin-import eslint-config-airbnb-typescript --save-dev</code></li> <li>Добавим в наш проект Prettier <code>npm i prettier eslint-config-prettier eslint-plugin-prettier --save-dev</code> </li> <li>Добавим в наш проект Angular Materuai UI <code>ng add @angular/material</code></li> <li>Добавим в наш проект Bootstrap<code>ng add @ng-bootstrap/ng-bootstrap</code></li> </ol> </div> <div class="content__item" id="content__item4"> <h3>Деплой angular проекта на github</h3> <ul> <li> <p>Есть несколько способов выложить готовый проект angular на github</p> </li> </ul> <ol> <li>Первый способ. Собрать проект в папке docs, для этого в файле angular.json изменить значение параметра outputPath<code>"outputPath": "docs",</code></li> <li>Собрать проект командой<code>ng build</code></li> <li>Перенести проект на гитхаб</li> <li>Перейти settings > pages > при выборе источника source выбрать docs вместо root</li> <li>Второй способ. Установим пакет ghpages глобально, чтобы задеплоить Angular проект на Github <code>npm i -g angular-cli-ghpages</code>После этого можно собрать готовый проект командой<code>ng build --prod --base-href="https://frontend200tb.github.io/my-app/"</code> </li> </ol> </div> <div class="content__item" id="content__item5"> <h3>Структура проекта</h3> <ul> <li> <p>После создания нового проекта, в папке проекта появляются начальные файлы и папки. В корне проекта лежат файлы </p> </li> </ul> <ul> <li>.angular-cli.json отвечает за настройку angular cli</li> <li>.editorconfig настройки редактора чтобы код в проекте был одинаковый для всех</li> <li>.gitignore говорит какие файлы и папки не отслеживать в git</li> <li>karma.conf.js настройки инструмента тестирования karma</li> <li>npm-debug.log ошибки связанные с пакетным менеджером</li> <li>package.json содержит объекты scripts (команды для запуска из консоли), dependencies (зависимости для работы проекта), devDependencies (зависимости для разработки)</li> <li>protractor.conf.js настройка системы protractor предназначенной для e2e (end-to-end) тестирования</li> <li>README.md красивое описание проекта в формате markdown для git</li> <li>tsconfig.json конфикурация typescript (например для компилирования в js с синтаксисом es5)</li> </ul> <ul> <li> <p>В папке node_modules лежат все пакеты необходимые для работы нашего приложения</p> <p>В папке src лежит весь исходный код нашего приложения. Здесь происходит вся разработка. Рассмотрим файлы и папки из папки src</p> </li> </ul> <ul> <li>favicon.ico фавиконка нашего приложения</li> <li>index.html единственная страница нашего проекта</li> <li>main.ts запускает все наше приложение, в нем есть ссылка на environments, где выставляется режим разработки или продакшн</li> <li>polyfills.ts подключает все библиотеки для работы typescript </li> <li>styles.scss общий файл стилей. Содержит глобальные стили которые применятся ко всему нашему сайту</li> <li>test.js нужен для тестирования</li> <li>tsconfig.app.json отвечает за компиляцию typescript и наследуется от ../tsconfig.json</li> <li>tsconfig.spec.json содержит конфигурацию для тестирования typescript </li> <li>typings.d.js вспомогательный файл для работы с typescript</li> <li>папка environments для хранения режима разработки (development mode или production mode). Мы запускаем приложение из консоли, поэтому в этой папке ничего изменять не надо</li> <li>папка assets для хранения статических файлов</li> <li>папка app хранится весь исходный код нашего приложения</li> </ul> <ul> <li> <p>Изначально в папке app лежит только один компонент AppComponent который описывается файлами</p> </li> </ul> <ul> <li>app.component.html html шаблон</li> <li>app.component.scss scss стили</li> <li>app.component.spec.ts unit тесты</li> <li>app.component.ts код на тайпскрипте</li> <li>app.module.ts файл модуля</li> </ul> </div> <div class="content__item" id="content__item6"> <h3>Начало работы</h3> <ol> <li>Откроем наш проект в VS Code. В папке src в файле index.html находится только один элемент<code>&lt;app-root&gt;&lt;app-root&gt;</code>в котором уже будет находиться все наше SPA (одностраничное приложение) работающее без перезагрузки браузера</li> <li>Соберем проект и запустим сервер одной командой<code>ng serve -o</code>(сокращенно от ng serve --open)<br>Флаг -o откроет сервер в браузере. Если запустили проект без флага -o, то перейдем в браузере на localhost:4200 и увидим шаблон нашего нового приложения</li> <li>Создадим компонент comp в папке components. Если такой папки нет, то она создастся<code>ng g c components/comp</code>(сокращенно от ng generate component components/comp) <p>В папке components получим новые файлы компонента comp <code> comp.component.html <br>comp.component.scss <br>comp.component.ts </code> </p> <p>Кроме того, компонент прописывается в файле app.module.ts <code>import { CompComponent } from \'./components/comp.component\'; <br>@NgModule({ <br>&nbsp;&nbsp;declarations: [ <br>&nbsp;&nbsp;&nbsp;&nbsp;CompComponent, </code> </p> </li> <li>Создадим директиву dir <code>ng g d dir</code>(сокращенно от ng generate directive dir)</li> <li>Создадим пайп pip<code>ng g p pip</code>(сокращенно от ng generate pipe pip)</li> <li>Создадим сервис serv<code>ng g s serv</code>(сокращенно от ng generate service serv)</li> <li>Создадим интерфейс inter в папке models<code>ng g i inter</code>(сокращенно от ng generate interface models/inter) <p>В папке models получим новый файл интерфейса</p><code>inter.ts</code> </li> <li>Создадим класс new-class в папке models<code>ng g cl new-class</code>(сокращенно от ng generate class models/new-class) <p>В папке models получим новый файл класса</p><code>new-class.ts</code> </li> <li>Создадим модуль mod<code>ng g m mod</code>(сокращенно от ng generate module mod)</li> <li>Создадим Guard guar<code>ng g g guar</code>(сокращенно от ng generate guard guar)</li> <li>Создадим Enum enn<code>ng g e enn</code>(сокращенно от ng generate enum enn)</li> </ol> </div> <div class="content__item" id="content__item7"> <h3>ng build Сборка проекта</h3> <ol> <li>Соберем проект командой. Проект соберется в папке dist</li><code>ng build</code> </ol> </div> <div class="content__item" id="content__item8"> <h3>Ошибки при сборке проекта</h3> <ol> <li>error TS2564: Property \'sortWordInput\' has no initializer and is not definitely assigned in the constructor. Это ошибка Strict Class Initialization. Когда объявлена переменная и ее тип, но не назначено значение. Чтобы ее решить нужно добавить к типу | undefined<a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html">https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html</a> </li> <li>error TS2322: Type \'string | undefined\' is not assignable to type \'string\'. Это ошибка Non-null assertion operator. Когда строковая переменная не может быть null или undefined. Чтобы ее решить надо добавить постфиксный оператор "!"" к строковой переменной<a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator">https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator</a> </li><li>error TS2532: Object is possibly \'undefined\'. Перед действием с объектом нужно проверить что он есть if (obj) </li>  </ol> </div> </div>',qt='<h1>React</h1> <div class="content__menu"> <p class="content__menu-link" id="content__menu-link1">about</p> <p class="content__menu-link" id="content__menu-link2">links</p> <p class="content__menu-link" id="content__menu-link3">install</p> </div> <div class="content__items"> <div class="content__item" id="content__item1"> <h2>About React</h2> <ul> <li>React (иногда React.js или ReactJS) — JavaScript-библиотека с открытым исходным кодом для разработки пользовательских интерфейсов. React разрабатывается и поддерживается Facebook, Instagram и сообществом отдельных разработчиков и корпораций. React может использоваться для разработки одностраничных и мобильных приложений. Его цель — предоставить высокую скорость разработки, простоту и масштабируемость. В качестве библиотеки для разработки пользовательских интерфейсов React часто используется с другими библиотеками, такими как MobX, Redux и GraphQL.</li> </ul> </div> <div class="content__item" id="content__item2"> <h2>links</h2> <ul> <li> <p><a href="https://ru.legacy.reactjs.org/">ru.legacy.reactjs.org</a> Этот сайт больше не обновляется. Перейдите на react.dev</p> <p><a href="https://react.dev/">react.dev</a> The library for web and native user interfaces</p> <p><a href="https://create-react-app.dev/">https://create-react-app.dev</a> Set up a modern web app by running one command</p> <p><a href="https://npmjs.com/package/create-react-app/">https://npmjs.com/package/create-react-app</a></p> <p><a href="https://max-frontend.gitbook.io/react-course-ru/">https://max-frontend.gitbook.io/react-course-ru/ Максим Пацианский 2016</a></p> <p><a href="https://max-frontend.gitbook.io/react-course-ru-v2/">https://max-frontend.gitbook.io/react-course-ru-v2/ Максим Пацианский 2018</a></p> <p><a href="https://metanit.com/web/react/">metanit.com/web/react</a> Руководство по React (Последнее обновление: 29.10.2022)</p> <p><a href="https://metanit.com/web/react/2.1.php">metanit.com/web/react/2.1.php</a> Читаю Глава 2 Основы React Рендеринг элементов</p> </li> </ul> <h3>Статьи на habr</h3> <ul> <li><a href="https://habr.com/ru/post/544046/">Разрабатываем чат на React с использованием Socket.IO (2021-02-25)</a></li> </ul> <h3>Статьи</h3> <ul> <li><a href="https://gcoder.ru/kak-izuchit-react-v-2021-7-neobhodimyh-navykov/">https://gcoder.ru/</a> КАК ИЗУЧИТЬ REACT В 2021: 7 НЕОБХОДИМЫХ НАВЫКОВ (2021-01-12)</li> </ul> </div> <div class="content__item" id="content__item3"> <h2>Install</h2> <ul> <li> <p>Рассмотрим два варианта установки и работы с React</p> </li> </ul> <h3>Вариант 1. Подключаем React на страницу index.html с помощью тега script</h3> <ul> <li> <p>На странице index.html подключаем следующие файлы <code> &lt;script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"&gt;&lt;/script&gt; <br>&lt;script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"&gt;&lt;/script&gt; <br>&lt;script src="https://unpkg.com/@babel/standalone/babel.min.js"&gt;&lt;/script&gt; </code> </p> </li> <li> <p>Тогда index.html может выглядеть так <code> &lt;!DOCTYPE html&gt; <br>&lt;html&gt; <br>&lt;head&gt; <br>&nbsp;&nbsp;&lt;meta charset="utf-8" /&gt; <br>&nbsp;&nbsp;&lt;title&gt;Hello React&lt;/title&gt; <br>&lt;/head&gt; <br>&lt;body&gt; <br>&nbsp;&nbsp;&lt;div id="app"&gt; &lt;/div&gt; <br>&nbsp;&nbsp;&lt;script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"&gt;&lt;/script&gt; <br>&nbsp;&nbsp;&lt;script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"&gt;&lt;/script&gt; <br>&nbsp;&nbsp;&lt;script src="https://unpkg.com/@babel/standalone/babel.min.js"&gt;&lt;/script&gt; <br>&nbsp;&nbsp;&lt;script type="text/babel"&gt; <br>&nbsp;&nbsp;const rootNode = document.getElementById("app"); <br>&nbsp;&nbsp;const root = ReactDOM.createRoot(rootNode); <br>&nbsp;&nbsp;root.render( <br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;Hello React&lt;/h1&gt; <br>&nbsp;&nbsp;); <br>&nbsp;&nbsp;&lt;/script&gt; <br>&lt;/body&gt; <br>&lt;/html&gt; </code> </p> </li> </ul> </div> </div>',Qt='<h1>Vue</h1> <div class="content__menu"> <p class="content__menu-link" id="content__menu-link1">about</p> <p class="content__menu-link" id="content__menu-link2">links</p> <p class="content__menu-link" id="content__menu-link3">install</p> </div> <div class="content__items"> <div class="content__item" id="content__item1"> <h3>Vue</h3> </div> <div class="content__item" id="content__item2"> <h3>Ссылки</h3> <ul> <li> <a href="https://vuejs.org/">vuejs.org</a></li> <li> <a href="https://ru.vuejs.org/">ru.vuejs.org </a>Vue 2</li> <li> <a href="https://v3.ru.vuejs.org/">v3.ru.vuejs.org</a>Vue 3</li> </ul> <h3>Статьи на habr</h3> <ul> <li> <a href="https://habr.com/ru/post/329452/">Vue.js для сомневающихся. Все, что нужно знать (2017-05-25)</a></li> <li> <a href="https://habr.com/ru/company/ruvds/blog/509700/">Vue.js для начинающих, урок 1: экземпляр Vue (2020-07-06)</a></li> <li> <a href="https://habr.com/ru/post/543298/">Улучшение производительности vue приложения (2021-02-19)</a></li> </ul> <h3>Статьи</h3> <ul> <li> <a href="https://webdevblog.ru/5-sovetov-po-povysheniju-proizvoditelnosti-vue/">5 советов по повышению производительности Vue (2021-03-18)</a></li> </ul> </div> <div class="content__item" id="content__item3"> <h3>Установка</h3> <ul> <li> <h3>Подключение через &lt;script&gt; </h3><a href="https://ru.vuejs.org/v2/guide/installation.html">https://ru.vuejs.org/v2/guide/installation.html</a> <p>Просто скачайте JS-файл и подключите его тегом &lt;script&gt; на странице. Будет зарегистрирована глобальная переменная Vue.</p> <pre>&lt;script src="js/vue.js"&gt;&lt;/script&gt;</pre> </li> <li> <h3>Подключениие через cdn </h3><a href="https://ru.vuejs.org/v2/guide/installation.html">https://ru.vuejs.org/v2/guide/installation.html</a> <pre>&lt;script src="https://cdn.jsdelivr.net/npm/vue@2.7.0/dist/vue.js"&gt;&lt;/script&gt;</pre> </li> </ul> </div> </div>';for(var Yt=[],Kt=function(){var e=Zt[Xt],t=document.createElement("a");t.href="#",t.innerHTML=e,t.id="framework-".concat(e.replace(/[^a-z0-9]/gi,"").toLowerCase()),Yt.push(t),t.addEventListener("click",(function(e){var r;e.preventDefault(),r=t,Yt.forEach((function(e){e.classList.remove("active")})),r.classList.add("active")}))},Xt=0,Zt=["Angular","React","Vue"];Xt<Zt.length;Xt++)Kt();r(433);const $t='<h2>Инструменты фронтенд разработчика</h2> <h3>Обзор редакторов</h3> <ul> <li><a href="http://htmleditors.ru/">htmleditors.ru</a></li> <li><a href="https://webkato.ru/code-editors-with-plugins/">webkato.ru</a></li> </ul> <h3>Emmet плагин (2013)</h3> <ul> <li><a href="https://emmet.io/">emmet.io</a><br>emmet</li> <li><a href="https://docs.emmet.io/cheat-sheet/">docs.emmet.io</a><br>emmet сокращения</li> <li><a href="https://webdesign-master.ru/blog/html-css/2.html">webdesign-master.ru</a><br>emmet сокращения</li> <li><a href="https://zaurmag.ru/programmy-i-servisy/emmet-doc.html">zaurmag.ru</a><br>emmet сокращения</li> </ul>',er='<h1>Git</h1> <div class="content__menu"> <p class="content__menu-link" id="content__menu-link1">Links</p> <p class="content__menu-link" id="content__menu-link2">Установка git и Git Bash</p> <p class="content__menu-link" id="content__menu-link3">Первоначальная настройка Git</p> <p class="content__menu-link" id="content__menu-link4">Создание репозитория</p> <p class="content__menu-link" id="content__menu-link5">Требования к именам коммитов</p> <p class="content__menu-link" id="content__menu-link6">О файле .gitignore</p> <p class="content__menu-link" id="content__menu-link7">Команды консоли</p> <p class="content__menu-link" id="content__menu-link8">workflow</p> <p class="content__menu-link" id="content__menu-link9">Команды Git Bash</p> <p class="content__menu-link" id="content__menu-link10">Переписывание истории</p> <p class="content__menu-link" id="content__menu-link11">Текстовый редактор</p> </div> <div class="content__items"> <div class="content__item" id="content__item1"> <h2>Links</h2> <ol> <li><a href="https://git-scm.com/book/ru/v2">git-scm.com/book</a></li> <li><a href="https://smartiqa.ru/courses/git">smartiqa.ru/courses/git</a></li> <li><a href="https://git-scm.com/">git-scm.com</a><br>git и Git Bush</li> <li><a href="https://uleming.github.io/gitbook/index.html">uleming.github.io/gitbook</a><br>git хорошая документация</li> <li><a href="https://www.evernote.com/shard/s368/client/snv?noteGuid=b1359883-2b9e-419a-b9de-dd959fc05f05&amp;noteKey=97c0f19486d851b3&amp;sn=https%3A%2F%2Fwww.evernote.com%2Fshard%2Fs368%2Fsh%2Fb1359883-2b9e-419a-b9de-dd959fc05f05%2F97c0f19486d851b3&amp;title=Git">evernote</a><br>Хороший конспект по git</li> <li><a href="https://gitforwindows.org/">gitforwindows.org</a><br>git for windows</li> <li><a href="https://www.sourcetreeapp.com/">sourcetreeapp.com</a><br>git окно</li> <li><a href="https://githowto.com/ru">githowto.com/ru</a><br>Обучение git 51 урок</li> <li><a href="https://git-scm.com/book/ru/v2">git-scm.com/book/ru/v2</a><br>Обучение git 10 уроков</li> <li><a href="https://learngitbranching.js.org/">learngitbranching.js.org</a><br>Learn git branching</li> <li><a href="https://www.atlassian.com/git">atlassian.com/git</a><br>Learn git</li> <li><a href="https://pingvinus.ru/git">pingvinus.ru/git</a><br>Git в вопросах и ответах</li> <li><a href="https://ymatuhin.ru/tools/git-default-editor/">ymatuhin.ru/tools/git-default-editor</a><br>Связывание текстового редактора с Git</li> </ol> </div> <div class="content__item" id="content__item2"> <h2>Установка git и Git Bush</h2> <ul> <li>Переходим на сайт <a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a> и скачиваем последнюю версию Git-2.42.0-64-bit.exe. Устанавливаем и на рабочем столе появится иконка Git Bush. Это и есть командная строка для работы с git.</li> <li>Запустим Git Bush и узнаем текущую версию git введя команду <code> git -v <br>git version 2.42.0.windows.2 </code> (сокращение от git --version) </li> <li>Получить информацию по командам <code>git --help</code> Получить информацию по команде <code>git help команда</code></li> </ul> </div> <div class="content__item" id="content__item3"> <article class="article"> <h2>Первоначальная настройка Git</h2> </article> <article class="article"> <p>Теперь, когда Git установлен в вашей системе, самое время настроить среду для работы с Git под себя. Это нужно сделать только один раз — при обновлении версии Git настройки сохранятся. Но, при необходимости, вы можете поменять их в любой момент, выполнив те же команды снова.</p> <p>В состав Git входит утилита git config, которая позволяет просматривать и настраивать параметры, контролирующие все аспекты работы Git, а также его внешний вид.</p> <p>Для начала необходимо задать в глобальной конфигурации имя пользователя (frontend200tb), электронную почту (frontend200tb@mail.ru), имя начальной ветки (master) и текстовый редактор (notead++).</p> <code>git config --global user.name frontend200tb</code> <code>git config --global user.email frontend200tb@mail.ru</code> <code>git config --global init.defaultBranch master</code> <code>git config --global core.editor "\'c:/Portable/Notepad/notepad++.exe\' -multiInst -notabbar -nosession -noPlugin"</code> </article> <article class="article"> <p>Проверим в глобальной конфигурации имя пользователя, электронную почту и имя начальной ветки.</p> <code>git config --global user.name <br>frontend200tb</code> <code>git config --global user.email <br>frontend200tb@mail.ru</code> <code>git config --global init.defaultBranch <br>master</code> <code>git config --global core.editor <br>\'c:/Portable/Notepad/notepad++.exe\' -multiInst -notabbar -nosession -noPlugin</code> </article> <article class="article"> <p>В зависимости от области действия и места хранения в Git cуществуют 3 уровня настроек. Каждый из этих уровней (системный, глобальный, локальный) переопределяет значения предыдущего уровня.</p> </article> <article class="article"> <p>1. Системные. Представляют собой настройки на уровне всей системы, то есть они распространяются на всех пользователей. Файл с этими настройками хранится по следующему пути:</p> <code>c:\\Program Files\\Git\\etc\\gitconfig</code> <p>Задать параметр системной конфигурации можно командой</p> <code>git config --system &lt;параметр&gt; &lt;значение&gt;</code> <p>Посмотреть значение параметра системной конфигурации можно командой</p> <code>git config --system &lt;параметр&gt;</code> </article> <article class="article"> <p>2. Глобальные. Эти настройки одинаковы для всех репозиториев, созданных под вашим пользователем. Среди них есть, например, имя ветки по умолчанию. Файл с этими параметрами хранятся по следующему адресу:</p> <code>c:\\Users\\имя пользователя\\.gitconfig</code> <p>Задать параметр глобальной конфигурации можно командой</p> <code>git config --global &lt;параметр&gt; &lt;значение&gt;</code> <p>Посмотреть значение параметра глобальной конфигурации можно командой</p> <code>git config --global &lt;параметр&gt;</code> </article> <article class="article"> <p>3. Локальные. Это настройки на уровне репозитория, они не будут применяться к другим вашим проектам. Эти параметры хранятся в каждом вашем репозитории по адресу:</p> <code>.git\\config</code> <p>Задать параметр локальной конфигурации можно командой</p> <code>git config --local &lt;параметр&gt; &lt;значение&gt;</code> <p>Посмотреть значение параметра локальной конфигурации можно командой</p> <code>git config --local &lt;параметр&gt;</code> </article> <article class="article"> <p>Список возможных команд утилиты git config</p> <code>git config --list</code> <p>Посмотрим все установленные настройки и узнаем где именно они заданы</p> <code>git config --list --show-origin</code> </article> </div> <div class="content__item" id="content__item4"> <h2>Создание репозизтория</h2> <ul> <li>Начать работу с Git можно 2 способами <p>1. Создать новый репозиторий на GitHub (если его еще нет)</p> <p>2. Клонировать существующий репозиторий из GitHub на локальный компьютер</p> или <p>3. Создать новый проект на локальном компьютере</p> <p>4. Создать репозиторий на локальном компьютере</p> <p>5. Связать существующий репозиторий на локальном компьютере с новым репозиторием на GitHub</p> </li> </ul> <h3>1. Создать новый репозиторий на GitHub</h3> <ul> <li>Перейдите на https://github.com и войдите в свой аккаунт. Нажмите кнопку New repository (Новый репозиторий). На открывшейся странице введите имя репозитория (Repository name) и нажмите кнопку Create repository. Данная команда добавит удаленный репозиторий с именем origin, который указывает на ваш Github-репозиторий.</li> </ul> <h3>2. Клонировать существующий репозиторий из GitHub на локальный компьютер</h3> <ul> <li>Для получения копии существующего Git-репозитория, например, проекта, в который вы хотите внести свой вклад, необходимо использовать команду <code>git clone &lt;url&gt;</code></li> <li>Git получает копию практически всех данных, которые есть на сервере. При выполнении git clone с сервера забирается (pulled) каждая версия каждого файла из истории проекта. Фактически, если серверный диск выйдет из строя, вы можете использовать любой из клонов на любом из клиентов, для того, чтобы вернуть сервер в то состояние, в котором он находился в момент клонирования (вы можете потерять часть серверных хуков (server-side hooks) и т. п., но все данные, помещённые под версионный контроль, будут сохранены</li> <li>Команда <code>git clone https://github.com/frontend200tb/200tb.git</code> создаёт каталог 200tb, инициализирует в нём подкаталог .git, скачивает все данные для этого репозитория и извлекает рабочую копию последней версии. Если вы перейдёте в только что созданный каталог 200tb, то увидите в нём файлы проекта, готовые для работы или использования. Для того, чтобы клонировать репозиторий в каталог с именем, отличающимся от 200tb, необходимо указать желаемое имя, как параметр командной строки <code>git clone https://github.com/frontend200tb/200tb.git 400tb</code></li> <li>Чтобы изменить URL удаленного репозитория на &lt;remote-repo&gt; нужно набрать команду <code>git remote set-url origin &lt;remote-repo&gt;</code> Убедитесь, что URL-адрес удаленного сервера был успешно изменен, перечислив удаленные соединения <code>git remote -v</code> Вывод должен выглядеть так <code>origin\tssh://git@gitserver.com:user/repo_name.git (fetch) <br>origin\tssh://git@gitserver.com:user/repo_name.git (push)</code> </li> </ul> <h3>3. Создать новый проект на локальном компьютере</h3> <ul> <li>Создадим новый каталог, в котором будет проект, который нужно добавить под версионный контроль Git.</li> </ul> <h3>4. Создать репозиторий на локальном компьютере</h3> <ul> <li>Если уже есть проект в каталоге, который нужно добавить под версионный контроль Git. Нужно зайти в этот каталог и выполнить команду <code>git init</code></li> <li>Эта команда создаёт в текущем каталоге новый подкаталог с именем .git, содержащий все необходимые файлы репозитория — структуру Git репозитория. На этом этапе ваш проект ещё не находится под версионным контролем</li> <li>Если вы хотите добавить под версионный контроль существующие файлы (в отличие от пустого каталога), вам стоит добавить их в индекс и осуществить первый коммит изменений.</li> </ul> <h3>5. Связать существующий репозиторий на локальном компьютере с новым репозиторием на GitHub</h3> <ul> <li>В верхней части нового репозитория на GitHub скопируйте URL-адрес удаленного репозитория.</li> <li>Откройте GIT Bash.</li> <li>Измените текущий рабочий каталог на локальный проект.</li> <li>В командной строке добавьте URL-адрес удаленного репозитория, в который будет отправлен локальный репозиторий. <code>$ git remote add origin &lt;REMOTE_URL&gt; <br># Sets the new remote <br>$ git remote -v <br># Verifies the new remote URL</code> </li> <li>Отправьте изменения в локальном репозитории на GitHub.com. Для команды git push нужно указывать ветку и удаленный репозиторий. <code>git push origin master</code> Если ветка master не является отслеживаемой веткой, то нужно один раз выполнить команду с флагом -u (сокращение от --set-upstream) чтобы сделать удаленную ветку master репозитория origin отслеживаемой. Потом можно будет отправлять изменения лишь выполняя git push <code>git push -u origin master</code> </li> </ul> </div> <div class="content__item" id="content__item5"> <h2>Требования к именам коммитов</h2> <ul> <li>- Названия коммитов должны быть согласно <a href="https://www.conventionalcommits.org/en/v1.0.0/">гайдлайну</a> <br>- Тип коммита должен быть только в нижнием регистре (docs, feat, fix, init, refactor) <br>- Должен использоваться present tense ("add feature" not "added feature") <br>- Должен использоваться imperative mood ("move cursor to..." not "moves cursor to...")</li> </ul> <h3>Примеры имен коммитов</h3> <ul> <li>init: - используется для начала проекта/таска. Примеры: <code>init: start youtube-task <br>init: start mentor-dashboard task</code> </li> <li>feat: - это реализованная новая функциональность из технического задания (добавил поддержку зумирования, добавил footer, добавил карточку продукта). Примеры: <code>feat: add basic page layout <br>feat: implement search box <br>feat: implement request to youtube API <br>feat: implement swipe for horizontal list <br>feat: add additional navigation button <br>feat: add banner <br>feat: add social links <br>feat: add physical security section <br>feat: add real social icons</code> </li> <li>fix: - исправил ошибку в ранее реализованной функциональности. Примеры: <code>fix: implement correct loading data from youtube <br>fix: change layout for video items to fix bugs <br>fix: relayout header for firefox <br>fix: adjust social links for mobile</code> </li> <li>refactor: - новой функциональности не добавлял / поведения не менял. Файлы в другие места положил, удалил, добавил. Изменил форматирование кода (white-space, formatting, missing semi-colons, etc). Улучшил алгоритм, без изменения функциональности. Примеры: <code>refactor: change structure of the project <br>refactor: rename vars for better readability <br>refactor: apply eslint <br>refactor: apply prettier</code> </li> <li>docs: - используется при работе с документацией/readme проекта. Примеры: <code>docs: update readme with additional information <br>docs: update description of run() method</code> </li> </ul> </div> <div class="content__item" id="content__item6"> <h2>О файле .gitignore</h2> <ul> <li>.gitignore нужен для скрытия файлов и папок от системы контроля версий Git. Обычно скрывают конфигурационные файлы (особенно с паролями), временные файли и папки. gitignore использует glob формат для выборки файлов.</li> <li>Основной синтаксис:</li> <li>Каждая строка - отдельный шаблон</li> <li>Пустые строки игнорируются</li> <li>Строки начинающиеся с # являются комментариями</li> <li>Символ слеша "/" в начале строки указывает на текущую папку (где лежит .gitignore)</li> <li>Звёздочка(*) заменяет любое количество символов</li> <li>Две звёздочки(**) используются для указания всех подпапок.</li> <li>Восклицательный знак(!) в начале строки инвертирует шаблон (используется для исключений)</li> <li>Для экранирования спецсимволов используется обратный слэш "\\". Для игнорирования всей директории, правило должно оканчиваться на слэш(/), в противном случае правило считается именем файла.</li> </ul> <h3>Пример .gitignore файла</h3> <ul> <li> <pre>\r\n# В этом файле можно оставлять комментарии\r\n# Имя файла .gitignore\r\n# Файл нужно создать самостоятельно\r\n\r\n# Каждая строчка — это шаблон, по которому происходит игнорирование\r\n\r\n# Игнорируем файл в любой директории проекта\r\naccess.log\r\n\r\n# Игнорируем директорию в любой директории проекта\r\nnode_modules/\r\n\r\n# Игнорируем каталог в корне рабочей директории\r\n/coverage/\r\n\r\n# Игнорируем все файлы с расширением sqlite3 в директории db\r\n# При этом не игнорируются такие же файлы внутри любого вложенного каталога в db\r\n# Например, /db/something/lala.sqlite3\r\n/db/*.sqlite3\r\n\r\n# Игнорировать все .txt файлы в каталоге doc/ на всех уровнях вложенности\r\ndoc/**/*.txt\r\n\r\n# Игнорировать файл foo.txt.\r\nfoo.txt\r\n# Игнорировать html файлы\r\n*.html\r\n# Но конкретно foo.html не игнорировать\r\n!foo.html\r\n    </pre> </li> </ul> </div> <div class="content__item" id="content__item7"> <h2>Команды консоли</h2> <ul> <li>Команды консоли будут работат и без установленной git. <br>Очистить консоль <code>clear или cls</code> Перейдем на диск d <code>cd d:</code> Посмотреть список папок и файлов в текущем каталоге <code>ls или dir</code> Посмотреть в виде списка (-l), отображать скрытые (-a) <code>ls -la</code> Создадим каталог нового проекта <code>mkdir learngit</code> Перейдем в каталог нового проекта <code>cd learngit</code> Создадим файл index.html <code>touch index.html</code> Посмотреть файл index.html <code>cat index.html</code> </li> </ul> </div> <div class="content__item" id="content__item8"> <h2>workflow</h2> <ul> <li>Репозиторий Git условно можно разделить на 4 составляющие:</li> </ul> <ol> <li>Working directory. Рабочая директория - это файловая структура, с которой непосредственно работает пользователь в конкретный момент времени. Технически же - это копия определенной версии вашего проекта, которую вы извлекли из базы Git и в которую пытаетесь внести свои изменения. Чтобы внести изменения из working directory в staging area введите команду <code>git add .</code> </li> <li>Staging area / index. Индекс или Область подготовленных файлов, где хранятся имена файлов и изменения в них, которые должны войти в следующий коммит. Технически индекс - это просто файл. Чтобы внести изменения из индекса в локальный репозиторий введите команду <code>git commit -m ""</code></li> <li>Local branch. Папка, в которой Git хранит все версии вашего проекта и также свои служебные файлы. Данная папка носит название .git и располагается в корневой директории вашего проекта. Чтобы изменения из локального репозитория попали в удаленный репозиторий введите команду <code>git push</code> Если выполнялась команда git reset HEAD~ при которой в локальной ветке изменялась история , то ввести команду <code>git push --force</code> Проверим что у нас актуальная версия <code>git status</code></li> <li>Remote branch. Хранится на github и к нему есть доступ у всех участников команды разработчиков вашего проекта</li> </ol> <h3>Порядок работы в команде с удаленным репозиторием</h3> <ul> <li>Перейти в каталог с локальными репозиториями <code>cd d://git</code></li> <li>Клонировать удаленный репозиторий. В каталоге git создастся каталог c репозиторием test <code>git clone https://github.com/frontend200tb/test.git</code></li> <li>Перейти в каталог репозитория test <code>cd test</code></li> <li>Если для текущего проекта надо создать user.name и user.email не такие как глобальные, то <code>git config --local user.name "Name" <br>fit config --local user.email name@google.com</code></li> <li>Посмотрим какие ветки уже есть в проекте <code>git branch</code></li> <li>Создать новую ветку и переключиться на нее <code>git checkout -b feature</code></li> <li>Внесем изменения в новую ветку</li> <li>Чтобы связать новую ветку с удаленным репозиторием <code>git push --set-upstream origin feature</code></li> <li>Если в ветке master произошли изменения, которых нет в ветке feature, то переключиться на ветку feature и забрать их <code>git checkout feature <br>git merge master</code> или одной командой <code>git merge master feature</code></li> <li>Обязательно сразу отправить изменения на удаленный репозиторий <code>git push</code></li> <li>Другой метод забрать изменения из ветки master <code>git checkout feature <br>git rebase master</code> При этом наша ветка feature будет брать свое начало уже с текущего положения ветки master</li> <li>Обязательно сразу отправить изменения на удаленный репозиторий <code>git push --force</code></li> </ul> </div> <div class="content__item" id="content__item9"> <h2>Команды Git Bush</h2> <ul> <li>Все команды git начинаются со слова git и работают только при установленной git.</li> </ul> <h3>Создание локального репозитория git init</h3> <ul> <li>Создать новый репозиторий в текущей директории <code>git init</code> При этом создалась системная папка .git в корне текущей директории, в которой будет вся история репозитория. </li> <li>Создание репозитория в указанном каталоге <code>git init <директория></директория></code></li> </ul> <h3>Клонирование удаленного репозитория git clone</h3> <ul> <li>Клонирование удаленного репозитория в локальный каталог с именем по умолчанию <code>git clone https://github.com/n0tb0dy/RemoreBranches.git</code></li> <li>Клонирование удаленного репозитория в локальный каталог с указанным именем<code>git clone https://github.com/n0tb0dy/RemoreBranches.git LocalBranches</code></li> </ul> <h3>git remote</h3> <ul> <li>Посмотреть какие есть удаленные репозитории связанные с нашим локальным <code>git remote <br>origin</code></li> <li>Посмотреть откуда мы получаем данные и куда мы их отправляем <code>git remote -v <br>origin git@github.com/myrepo.git (fetch) <br>origin git@github.com/myrepo.git (push)</code></li> <li>Посмотреть какая ссылка соотносится с удаленным репозиторием origin <code>git remote get-url origin <br>origin git@github.com/myrepo.git</code></li> <li>Добавить новый удаленный репозиторий, который находится по указанному адресу. При этом на нашем компьютере к удаленному репозиторию мы будем обращаться по его названию <code>remote add <название> <адрес></адрес></название></code></li> <li>Удалить репозиторий с указанным названием <code>remote remove <название></название></code></li> </ul> <h3>git status</h3> <ul> <li>Показать список измененных, добавленных и удаленных файлов <code>git status</code></li> <li>Файлы в рабочем каталоге могут быть <code>tracked - под версионным контролем (отслеживаемые)</code> <code>untracked - не под версионным контролем (не отслеживаемые)</code></li> <li>tracked файлы могут быть <code>modified (измененные)</code> <code>staged (подготовленные к коммиту)</code> <code>commited (добавленные в коммит)</code></li> </ul> <h3>git status -s</h3> <ul> <li>Показать список в сокращенном виде <code>git status -s</code></li> </ul> <h3>git add</h3> <ul> <li>Переводит untracked и modified файлы в состояние staged <br>Добавление файла index.html в репозиторий <code>git add index.html</code></li> <li>Добавим все измененные файлы <code>git add -A или git add --all</code></li> <li>Добавим все файлы в git <code>git add .</code> Добавленные файлы (новые или измененные) готовы к коммиту. Но если до коммита что-то изменить в этих файлах, то эти изменения нужно опять сперва добавить через команду add, чтобы новые изменения стали готовы к коммиту.</li> </ul> <h3>git commit -m "comment"</h3> <ul> <li>Зафиксировать в коммите все изменения (новые и измененные файлы, которые мы подготовили командой git add к коммиту), и добавить сообщение к коммиту <code>git commit -m "feat: add basic files" <br>[master (root-commit) 1aa7b43] feat: add basic files <br>2 files changed, 12 insertions(+) <br>create mode 100644 css/style.css <br>create mode 100644 index.html</code> где <p>master это ветка, в которой мы создали commit, она у нас пока единственная</p> <p>1aa7b43 это хэш коммита, его уникальный номер который указывает на состояние нашего репозитория в момент этого коммита</p> <p>feat: add basic files это комментарий по которому мы сможем впоследствии найти нужный нам коммит</p> </li> </ul> <h3>git commit -a</h3> <ul> <li>Последовательное выполнение git add . и git commit -m "message" можно заменить одной командой <code>git commit -a -m "message"</code> Единственное отличие - не добавляет в отслеживаемую зону (и в коммит) новые (untracked) файлы. Добавляет только измененные (modified) файлы</li> </ul> <h3>git commit --amend</h3> <ul> <li>Добавить изменения в последний коммит и изменить комментарий последнего коммита <code>git commit --amend -m "new comment"</code> Если комментарий изменять не нужно, то <code>git commit --amend --no-edit</code></li> </ul> <h2>Урок 3. Создание, переключение и удаление веток. Команды branch, checkout, log, diff.</h2> <ul> <li> <h3>git branch</h3> Посмотрим список веток и в какой ветке мы сейчас находимся <code>git branch <br>* master</code> Мы находимся в ветке master . Она же пока и единственная, других веток нет <h3>git branch -r</h3> Посмотреть список только удаленных (remote - удаленный) веток <code>git branch -r</code> <h3>git branch -a</h3> Посмотреть список и локальных и удаленных (all - все) веток <code>git branch -a</code> <h3>git branch <имя ветки></имя></h3> Создадим новую ветку test <code>git branch test</code>Посмотрим список веток и в какой ветке мы сейчас находимся <code>git branch <br>* master <br>test</code> Видим что у нас две ветки: master и test. Мы находимся в ветке master <h3>git branch -d <имя ветки></имя></h3> Удалим ветку test если она полностью слита с другой веткой <code>git branch -d test</code> Иначе git не удалит ветку и покажет предупреждение <h3>git branch -D <имя ветки></имя></h3> Удалим ветку test даже если git показывает предупреждение <code>git branch -D test</code> <h3>git checkout <имя ветки></имя></h3> Нам нужно добавить новый функционал в проект - создать файл readme. Для создания нового функционала создадим новую ветку readme и будем в ней работать отдельно от основной ветки master <code>branch readme</code> Создав новую ветку readme, мы все еще находимся в ветке master <code>git branch <br>* master <br>readme</code> Чтобы переключиться на ветку readme, введем команду <code>git checkout readme Switched to branch \'readme\'</code> Посмотрим в какой ветке мы теперь находимся <code>git branch <br>master <br>* readme</code> <h3>git checkout -b <имя ветки></имя></h3> Теперь мы хотим одной командой создать новую ветку help и переключиться на нее <code>git checkout -b help <br>Switched to a new branch \'help\'</code> Посмотрим список всех веток и в какой мы находимся <code>git branch <br>* help <br>master <br>readme</code> <h3>git checkout -</h3> Вернемся обратно <code>git checkout -</code> Мы вернулись в ветку readme <h3>Работа в ветке readme</h3> Перейдем в ветку readme <code>git checkout readme</code> Создадим файл readme.md и добавим его <code>git add .</code> Теперь мы готовим создать комит первой версии к которой мы сможем потом вернуться в новой ветке readme <code>git commit -m "init: craete readme.md" <br>[readme 21e522a] init: create readme.md</code> где <p>readme это ветка, в которой мы создали commit, она отличается от основной ветки master</p> <p>21e522a это хэш коммита, его уникальный номер который указывает на состояние нашего репозитория в момент этого коммита</p> <p>init: create readme.md это комментарий по которому мы сможем впоследствии найти нужный нам коммит</p> <h3>git log</h3> Посмотрим историю коммитов локальной ветки <code>git log</code> Посмотрим историю последних двух коммитов локальной ветки <code>git log -2</code> <h3>git diff Разница</h3> Посмотреть в чем разница между рабочим каталогом и последним сохраненным состоянием репозитория <code>git diff</code> Посмотреть в чем разница между текущим отслеживаемым состоянием и сохраненным состоянием <code>git diff --staged</code> Посмотреть разницу между рабочим каталогом и указанным сохраненным состоянием репозитория <code>git diff commit_hash</code> </li> </ul> <h2>Урок 4. Перемещение курсора и отмена изменений. Команды rm, restore, reset, revert.</h2> <ul> <li> <h3>git rm</h3> Создадим файл в рабочей директории <code>touch sample.txt</code> Удалим файл из рабочей директории <code>rm sample.txt</code> Создадим файл в рабочей директории и добавим его в индекс <code>touch sample.txt <br>add sample.txt</code> Удалим файл из рабочей директории и из индекса <code>rm sample.txt <br>git add sample.txt</code> Удалим файл sample.txt из рабочей директории и из индекса одной командой <code>git rm sample.txt</code> Команда git rm заменяет собой две команды <code>rm sample.txt и git add sample.txt</code> <h3>git rm --cached</h3> Удалим файл sample.txt только из индекса. При этом в рабочей директории файл останется в статусе untracked <code>git rm --cached sample.txt</code> <h3>git rm -f или --forced</h3> Форсированное удаление. Файл будет удален не смотря на все предупреждения <code>git rm -f sample.txt</code> <h3>git mv</h3> Создадим файл в рабочей директории <code>touch sample1.txt</code> Переименуем файл в рабочей директории<code>mv sample1.txt sample2.txt</code> Добавим изменения в индекс <code>git add .</code> Переименуем файл в рабочей директории и в индексе одной командой <code>git mv sample1.txt sample2.txt</code> Команда git mv заменяет собой две команды <code>mv sample1.txt sample2.txt и git add .</code> <h3>git restore</h3> Если вы случайно удалили файл sample.txt из рабочей копии, то его можно восстановить из области индекса <code>git restore sample.txt</code> <h3>git restore --source</h3> Вернем файл sample.txt к определенному коммиту с хэшем 09c2240. При этом мы изменим только файл в рабочей копии, файл в области индекса не поменяется. <code>git restore --source 09c2240 sample.txt</code> <h3>git restore --staged</h3> Вернем файл sample.txt в индексе к состоянию последнего коммита (отменим все внесенные изменения или удалим файл, если в предыдущем коммите его не было), при этом изменения коснутся только индекса файла, рабочая копия не поменяется. <code>git restore --staged sample.txt</code> <h3>git restore --staged --worktree</h3> Сделаем то же, что и в предыдущем примере, но теперь изменения затронут и файл в рабочей копии. <code>git restore --staged --worktree sample.txt</code> <h3>git reset</h3> Переносем указатель ветки вместе с указателем HEAD к указанному коммиту <code>git reset</code> Не отменяет изменения ни в индексе, ни в рабочей копии <code>git reset --soft</code> Удалит все изменения. Состояние индекса и рабочей копии полностью будут соответствовать состоянию выбранного коммита <code>git reset --hard</code> Откатить проект на один коммит назад <code>git reset HEAD^ или git reset HEAD~1</code> Откатить проект на два коммита назад <code>git reset HEAD^^ или git reset HEAD~2</code> Возвращает проект к указанному коммиту, при этом полностью удаляет все коммиты после указанного <code>git reset --hard HEAD^</code> Возвращает проект к указанному коммиту, при этом переводит все коммиты после указанного в неотслеживаемую (unstaged) зону. То есть все изменения после указанного коммита не удалились. Удалились только последующие коммиты.Изменения можно добавить (add) и закомиттить (commit) <code>git reset --mixed HEAD^</code> Возвращает проект к указанному коммиту, при этом переводит все коммиты после указанного в отслеживаемую (staged) зону. То есть все изменения после указанного коммита не удалились. Все последующие коммиты сохранились <code>git reset --soft HEAD^</code> Если использовать git reset без параметров, то мы вернемся к последнему коммиту <code>git reset = git reset --mixed HEAD</code> <h3>git revert</h3> Создадим новый коммит, который отменит изменения сделанные два коммита назад <code>git revert HEAD~2</code> <h3>git revert -n</h3> Откат к предыдущему коммиту. Изменения коснутся только рабочей копии. Новый коммит не делается <code>git revert -n</code> </li> </ul> <h2>Урок 5. Слияние изменений. Команды merge, cherry-pick, rebase.</h2> <ul> <li> <h3>git merge Слиять ветки</h3> Перейдем в ветку master <code>git checkout master</code> Сделаем слияние ветки master с веткой readme <code>git merge readme</code> Разработка в ветке readme закончилась ее слиянием с веткой master и теперь она нам больше не нужна. Удалим ветку readme <code>git branch -D readme</code> </li> </ul> <h2>Урок 6. Работа с удаленным репозиторием. Команды push, pull, clean, show, fetch</h2> <ul> <li> <h3>git push</h3> Отправим локальный репозиторий на удаленный <code>git push <название> <ветка> <br>git push origin master</ветка></название></code> <h3>git pull</h3> Получим обновления с удаленного репозитория <code>git pull origin master</code> <h3>git clean</h3> Посмотреть untracked файлы которые будут удалены командой git clean <code>git clean -n</code> Удалить untracked файлы <code>git clean -f</code> <h3>git show</h3> Посмотреть изменения, внесенные определенным коммитом <code>git show <commit></commit></code> <h3>git stash</h3> Сохранить изменения, не добавляя их в коммит <code>git stash</code> Посмотреть список всех отложенных изменений <code>git stash list</code> Достать изменения из стека и вернуть их в рабочую копию <code>git stash pop</code> </li> </ul> </div> <div class="content__item" id="content__item10"> <article class="article"> <h2>Переписывание истории</h2> </article> <article class="article"> <p>Есть три механизма переписывания истории git commit --amend, git rebase, git reflog.</p> </article> <article class="article"> <h3>Изменение последнего коммита: git commit --amend</h3> <p>Команда git commit --amend — это удобный способ изменить последний коммит. Она позволяет объединить проиндексированные изменения с предыдущим коммитом без создания нового коммита. Ее можно использовать для редактирования комментария к предыдущему коммиту без изменения состояния кода в нем. Но такое изменение не только редактирует последний коммит, но и полностью его заменяет. То есть измененный коммит станет новой сущностью с отдельной ссылкой. Для Git он будет выглядеть как новый коммит.</p> </article> <article class="article"> <h3>Изменение комментария в последнем коммите Git</h3> <code>git commit --amend -m "new comment"</code> <p>Допустим, при выполнении коммита вы допустили ошибку в комментарии к нему. Выполнение этой команды в отсутствие проиндексированных файлов позволяет отредактировать комментарий к предыдущему коммиту без изменения состояния кода.</p> <p>В процессе разработки регулярно случаются преждевременные коммиты. Очень просто забыть проиндексировать файл или использовать неправильный формат комментария к коммиту. Флаг --amend позволяет удобно исправить эти небольшие ошибки.</p> </article> <article class="article"> <h3>Изменение файлов в последнем коммите</h3> <p>В следующем примере показан распространенный сценарий разработки с использованием Git. Допустим, вы отредактировали несколько файлов и хотите сделать коммит за одну операцию. Но потом выясняется, что вы забыли добавить один из файлов в самом начале. Для того чтобы исправить эту ошибку, достаточно проиндексировать другой файл и выполнить коммит с флагом --amend:</p> <code># Edit hello.py and main.py <br>git add hello.py <br>git commit <br># Realize you forgot to add the changes from main.py <br>git add main.py <br>git commit --amend --no-edit</code> <p>Флаг --no-edit позволит внести изменения в коммит без изменения комментария к нему. Итоговый коммит заменит неполный коммит. При этом все будет выглядеть так, словно изменения в файлах hello.py и main.py были сделаны за один коммит</p> </article> <article class="article"> <h3>Как изменить файлы в старом коммите (не последнем) в Git: git rebase -i</h3> <p>1. Если вы уже изменили какие-либо файлы, то сначала нужно спрятать изменения. Для этого выполняем команду:</p> <code>git stash</code> <p>2. Посмотрим список коммитов:</p> <code>git log --oneline</code> <p>3. Выполняем команду git rebase -i и указываем ей коммит, который мы хотим изменить. В данном случае мы хотим изменить третий коммит (относительно HEAD).</p> <code>git rebase -i HEAD~3</code> <p>4. Откроется текстовый редактор со списком коммитов. Измените слово pick на edit (или просто на букву e) у коммита, который вы хотите изменить.</p> <p>5. Сохраните изменения в файле. Вы снова окажетесь в командной строке.</p> <p>6. Теперь внесите те изменения, которые вы хотели сделать с файлами. Если вы на первом шаге спрятали эти изменения, то сейчас их можно снова извлечь:</p> <code>git stash pop</code> <p>Или же просто отредактируйте файлы.</p> <p>7. Добавьте отредактированные файлы в индекс:</p> <code>git add myfile1 myfile2</code> <p>8. Применим наши изменения к коммиту:</p> <code>git commit --amend --no-edit</code> <p>9. Завершим процесс ребейза:</p> <code>git rebase --continue</code> <p>Если все пройдет успешно, то появится сообщение вида:</p> <code>Successfully rebased and updated refs/heads/master.</code> </article> </div> <div class="content__item" id="content__item11"> <article class="article"> <h2>Связывание текстового редактора с Git</h2> </article> <article class="article"> <p>При редактировании сообщений комита Git по умолчанию открывает Vim. Для тех кто с ним не знаком, это может стать серьезной проблемой. Хорошо что это поведение легко изменить выполнив одну команду в терминале.</p> <h4>Visual Studio Code</h4> <code>git config --global core.editor "code --wait"</code> <h4>Atom</h4> <code>git config --global core.editor "atom --wait"</code> <h4>TextMate</h4> <code>git config --global core.editor "mate -w"</code> <h4>nano</h4> <code>git config --global core.editor "nano -w"</code> <h4>Text Wrangler (Mac)</h4> <code>git config --global core.editor "edit -w"</code> <h4>Sublime Text (Mac)</h4> <code>git config --global core.editor "subl -n -w"</code> <h4>Sublime Text (Win, x32)</h4> <code>git config --global core.editor "\'c:/program files (x86)/sublime text 3/sublime_text.exe\' -w"</code> <h4>Sublime Text (Win, x64)</h4> <code>git config --global core.editor "\'c:/program files/sublime text 3/sublime_text.exe\' -w"</code> <h4>Notepad++ (Win, x32)</h4> <code>git config --global core.editor "\'c:/program files (x86)/Notepad++/notepad++.exe\' -multiInst -notabbar -nosession -noPlugin"</code> <h4>Notepad++ (Win, x64)</h4> <code>git config --global core.editor "\'c:/program files/Notepad++/notepad++.exe\' -multiInst -notabbar -nosession -noPlugin"</code> <h4>Kate (Linux)</h4> <code>git config --global core.editor "kate"</code> <h4>Gedit (Linux)</h4> <code>git config --global core.editor "gedit --wait --new-window"</code> <h4>Scratch (Linux)</h4> <code>git config --global core.editor "scratch-text-editor"</code> <h4>emacs</h4> <code>git config --global core.editor "emacs"</code> <h4>vim</h4> <code>git config --global core.editor "vim"</code> </article> </div> </div> ',tr='<h2>Notepad++</h2> <div class="content__menu"> <p class="content__menu-link" id="content__menu-link1">Документация</p> <p class="content__menu-link" id="content__menu-link2">Установка</p> <p class="content__menu-link" id="content__menu-link3">Плагины</p> <p class="content__menu-link" id="content__menu-link4">Настройка</p> <p class="content__menu-link" id="content__menu-link5">Горячие клавиши</p> </div> <div class="content__items"> <div class="content__item" id="content__item1"> <h3>Документация Notepad++</h3> <ol> <li><a href="https://npp-user-manual.org/">npp-user-manual.org</a></li> <li><a href="https://notepad-plus-plus.org/">notepad-plus-plus.org</a><br>notepad++ (eng)</li> <li><a href="https://notepad-download.ru/">notepad-download.ru</a><br>notepad++</li> <li><a href="https://sourceforge.net/projects/npp-plugins/files/">sourceforge.net</a><br>plugins (eng)</li> </ol> </div> <div class="content__item" id="content__item2"> <h3>Установка Notepad++ (портативной версии)</h3> <ol> <li>Заходим на сайт <a href="https://notepad-plus-plus.org/">notepad-plus-plus.org</a></li> <li>Скачиваем 64битную портативную версию <code>npp.8.5.7.portable.zip</code></li> <li>Распаковываем ее в каталог <code>c:\\Portable\\Notepad++\\</code></li> </ol> <h3>Как добавить Notepad++ в меню пуск</h3> <ol> <li>Выбираем файл (клик правой кнопкой мыши) <code>c:\\Portable\\Notepad++\\notepad++.exe</code></li> <li>Выбираем Закрепить на начальном экране</li> </ol> <h3>Как добавить <em>программу</em> Notepad++ в контекстное меню</h3> <ol> <li>Открыть Редактор реестра, для этого выбрать Пуск - Выполнить или нажать<code>win + R</code>и ввести команду <code>regedit</code></li> <li>В редакторе реестра переходим к ветке <code>HKEY_CLASSES_ROOT\\*\\shell</code></li> <li>Клик правой кнопкой мыши на папке shell и выберите команду <code>Создать &gt; Раздел</code></li> <li>Назовите его так, как должна называться команда в контекстном меню. Скажем, <code>Открыть с помощью Notepad++</code></li> <li>Клик правой кнопкой мыши на созданной папке и снова выбираем команду <code>Создать &gt; Раздел</code></li> <li>Новый вложенный раздел назовите <code>command</code></li> <li>Щелкните на значке раздела command и дважды в окне справа на ключе <code>(По умолчанию) REG_SZ</code></li> <li>В открывшемся окне введите следующую команду <code>"c:\\Portable\\Notepad++\\notepad++.exe" "%1"</code></li> </ol> <h3>Как добавить <em>иконку</em> Notepad++ в контекстное меню</h3> <ol> <li>Открыть Редактор реестра, для этого выбрать Пуск - Выполнить или нажать<code>win + R</code>и ввести команду <code>regedit</code></li> <li>В редакторе реестра переходим к ветке <code>HKEY_CLASSES_ROOT\\*\\shell\\Открыть с помощью Notepad++</code></li> <li>Клик правой кнопкой мыши и выбираем команду <code>Создать &gt; Строковый параметр</code></li> <li>в поле Имя укажите значение <code>Icon</code></li> <li>а в поле Значение укажите путь к exe-файлу, как показано ниже (кавычки обязательны): <code>"c:\\Portable\\Notepad++\\notepad++.exe"</code> </li> </ol> </div> <div class="content__item" id="content__item3"> <h3>Установка плагина Emmet</h3> <ol> <li>Заходим на сайт <a href="https://emmet.io/">emmet.io</a></li> <li>Выбираем плагин Emmet для notepad++</li> <li>Переходим на сайт https://github.com/emmetio/ и скачиваем архив <code>emmet-npp.zip</code></li> <li>Распаковываем архив emmet-npp.zip в папку <code>c:\\Portable\\Notepad++\\plugins\\</code> Оставляем папку и в ней файл <code>c:\\Portable\\Notepad++\\plugins\\EmmetNPP\\ <br>c:\\Portable\\Notepad++\\plugins\\EmmetNPP\\EmmetNPP.dll</code> </li> <li>Запускаем notepad++ от имени Администратора</li> <li>Выбираем меню <code>Settings - Import - Import plugin(s)...</code></li> <li>В открывшемся окне выбираем файл <code>c:\\Portable\\Notepad++\\plugins\\EmmetNPP\\EmmetNPP.dll</code> </li> <li>После успешного импортирования перезапускаем notepad++</li> <li>Смотрим меню Плагины и видим Emmet</li> <li>Как Установить pythonscript и emmet на 64битную версию notepad++ я не знаю</li> </ol> <h3>Полезные плагины для Notepad++ которые надо сразу установить</h3> <ol> <li>Python Script (нужен для Emmet)<br><a href="https://sourceforge.net/projects/npppythonscript/">https://sourceforge.net/projects/npppythonscript/</a></li> <li>Emmet (ускоряет ввод кода)<br><a href="https://emmet.io/">emmet.io</a></li> <li>Explorer показывает слева файлы и папки<br><a href="https://sourceforge.net/projects/npp-plugins/files/Explorer/">https://sourceforge.net/projects/npp-plugins/files/Explorer/</a></li> <li>Auto Indent отступы в коде<br><a href="https://sourceforge.net/projects/npp-plugins/files/NppAutoIndent/">https://sourceforge.net/projects/npp-plugins/files/NppAutoIndent/</a></li> <li>MultiClipboard копирует в много буферов обмена<br><a href="https://sourceforge.net/projects/npp-plugins/files/MultiClipboard/">https://sourceforge.net/projects/npp-plugins/files/MultiClipboard/</a></li> <li>NppFTP</li> <li>Compare сравнивает два текста</li> <li>Snippets</li> <li>TextFX Characters подставляет закрывающий тег</li> <li>Webedit</li> </ol> <h3>Установка плагинов</h3> <ol> <li>Заходим на сайт <a href="https://sourceforge.net/projects/npp-plugins/files/">sourceforge.net/projects/npp-plugins</a></li> <li>Скачиваем нужный плагин</li> <li>Распаковываем его в <code>c:\\Portable\\Notepad++\\plugins\\имя_плагина\\</code> </li> <li>Запускаем notepad++ от имени Администратора</li> <li>Выбираем меню <code>Settings - Import - Import plugin(s)...</code></li> <li>В открывшемся окне выбираем файл <code>c:\\Portable\\Notepad++\\plugins\\имя_плагина\\имя_плагина.dll</code> </li> <li>После успешного импортирования перезапускаем notepad++</li> <li>Смотрим меню Плагины и видим имя_плагина</li> </ol> </div> <div class="content__item" id="content__item4"> <h3>Настройка Notepad++</h3> <ol> <li> Цветовая схема Опции - Определение стилей - Выбрать стиль - Plastic Code Wrap </li> <li>Вид - Отображение символов - Отображать пробелы и табуляции</li> <li>Вид - Отображение символов - Отображать направляющие отступов</li> <li> меню Запуск - Запуск чтобы запустить файл из нотепада надо написать путь к программе и <code>"$(FULL_CURRENT_PATH)"</code> </li> <li> меню Опции - Настройки - Правка - Мультиредактирование ctrl + shift + t открыть последнюю закрытую вкладку </li> </ol> </div> <div class="content__item" id="content__item5"> <h3>Горячие клавиши (Hot keys)</h3> </div> <hr><a href="#header">К началу страницы</a> <hr> </div>',rr=' <h2>Sublime Text (2007)</h2> <div class="content__menu"> <p class="content__menu-link" id="content__menu-link1">Документация</p> <p class="content__menu-link" id="content__menu-link2">Установка</p> <p class="content__menu-link" id="content__menu-link3">Плагины</p> <p class="content__menu-link" id="content__menu-link4">Настройка</p> <p class="content__menu-link" id="content__menu-link5">Горячие клавиши</p> </div> <div class="content__items"> <div class="content__item" id="content__item1"> <h3>Документация Sublime text</h3> <ol> <li><a href="https://www.sublimetext.com/">sublimetext.com</a><br>sublime (eng)</li> <li><a href="https://packagecontrol.io/">packagecontrol.io</a><br>Плагины</li> <li><a href="https://sublimetext.ru/">sublimetext.ru</a><br>sublime (рус)</li> <li><a href="https://freefrontend.com/sublime-text-themes-ui/">freefrontend.com</a><br>Темы sublime</li> </ol> </div> <div class="content__item" id="content__item2"> <h3>Установка Sublime text (портативной версии)</h3> <ol> <li>Заходим на сайт <a href="https://www.sublimetext.com/">sublimetext.com</a></li> <li>Нажимаем Download</li> <li>Выбираем portable version sublime_text_build_4113_x64.zip</li> <li>Распаковываем ее в каталог <code>c:\\Portable\\SublimeText\\</code></li> </ol> <h2>Как добавить Sublime text в меню пуск</h2> <ol> <li>Выбираем файл (клик правой кнопкой мыши) <code>c:\\Portable\\SublimeText\\sublime_text.exe</code></li> <li>Выбираем Закрепить на начальном экране</li> </ol> <h3>Как добавить <em>программу</em> Sublime text в контекстное меню</h3> <ol> <li>Открыть Редактор реестра, для этого выбрать Пуск - Выполнить или нажать<code>win + R</code>и ввести команду <code>regedit</code></li> <li>В редакторе реестра переходим к ветке <code>HKEY_CLASSES_ROOT\\*\\shell</code></li> <li>Клик правой кнопкой мыши на папке shell и выберите команду <code>Создать &gt; Раздел</code></li> <li>Назовите его так, как должна называться команда в контекстном меню. Скажем, <code>Открыть с помощью Sublime text</code></li> <li>Клик правой кнопкой мыши на созданной папке и снова выбираем команду <code>Создать &gt; Раздел</code></li> <li>Новый вложенный раздел назовите <code>command</code></li> <li>Щелкните на значке раздела command и дважды в окне справа на ключе <code>(По умолчанию) REG_SZ</code></li> <li>В открывшемся окне введите следующую команду <code>"c:\\Portable\\SublimeText\\sublime_text.exe" "%1"</code></li> </ol> <h3>Как добавить <em>иконку</em> Sublime text в контекстное меню <ol> <li>Открыть Редактор реестра, для этого выбрать Пуск - Выполнить или нажать<code>win + R</code>и ввести команду <code>regedit</code></li> <li>В редакторе реестра переходим к ветке <code>HKEY_CLASSES_ROOT\\*\\shell\\Открыть с помощью Sublime text</code></li> <li>Клик правой кнопкой мыши и выбираем команду <code>Создать > Строковый параметр</code></li> <li>в поле Имя укажите значение <code>Icon</code></li> <li> а в поле Значение укажите путь к exe-файлу, как показано ниже (кавычки обязательны): <code>"c:\\Portable\\SublimeText\\sublime_text.exe"</code> </li> </ol> </h3></div> <div class="content__item" id="content__item3"> <h3>Установка Packege Control <ol> <li>Перед установкой плагинов надо установить Packege Control. Для установки в автоматическом режиме (если есть выход в интернет) надо нажать <code>ctrl + shift + P</code> и в появившемся окне набрать <code>Install Package Control</code> Для установки в ручном режиме заходим на сайт <a href="https://packagecontrol.io/installation">packagecontrol.io/installation.</a> Инструкция с сайта ниже </li> <li>Click menu Preferences &gt; Browse Packages</li> <li>Browse up Installed Packages folder <code>C:\\Portable\\SublimeText\\Data\\Packages</code> </li> <li>Download Package Control.sublime-package and copy it into the Installed Packages folder</li> <li>Restart Sublime Text</li> </ol> <h3>Установка плагинов для Sublime Text</h3> <ul> <li>Для установки плагинов в автоматическом режиме (если есть выход в интернет) надо нажать нажать <code>Preferences - Package Control - Install Package</code> или <code>ctrl + shift + P</code> и в появившемся окне набрать Install Package и найти нужный плагин. Для установки в ручном режиме ищем плагины на сайте <p></p><a href="https://packagecontrol.io/">packagecontrol.io</a> </li> <li>Список полезных плагинов</li> </ul> <ol> <li>Emmet ускоряет написание кода</li> <li>All Autocomplete начинаем писать и нам предлагают подставить то что уже есть</li> <li>AutoFileName автоподстановка пути файлов и картинок</li> <li>Alignment выравнивает фрагменты кода</li> <li>BracketHighlighter подсветка начального и закрывающего тега</li> <li>ColorHighlighter подсветка цвета</li> <li>ColorPicker выбор цвета</li> <li>Goto-CSS-Declaration находит класс в css</li> <li>LiveReload Обновление файла в браузере при редактировании</li> <li>LiveServer</li> <li>LiveStyle</li> <li>Sass для работы с препроцессором Sass, выделяет синтаксис</li> <li>SideBarEnhancements больше команд в сайд баре</li> <li>SublimeLinter</li> </ol> </h3></div> <div class="content__item" id="content__item4"> <h3>Настройка пункта меню View</h3> <ul> <li>показать навигацию по файлам слева <code>View - Side bar - Show side bar </code> показать миникарту справа <code>View - Show Minimap</code> показать панель выбора текущего документа сверху <code>View - Show Tabs</code> показать строку состояния внизу <code>View - Show Status Bar</code> показать меню (если выбран Hide Menu, то меню появляется и исчезает по нажатию на клавишу alt, когда меню появится надо выбрать Show menu) <code>View - Show menu</code> показать консоль <code>View - Show Console</code> цветовая тема <code>Preferences - Color Scheme</code> </li> </ul> <h3>Настройка окна редактирования</h3> <ul> <li> <code>Preferences – Settings </code> <p>Открывается такое окно разделенное на две части. В левой части настройки по умолчанию, их изменить нельзя, а вот в правой части ты можешь эти настройки переназначить, каждая следующая должна идти через запятую.</p> <p>"margin": 0, // Отступ стрки кода от номера строки слева</p> <p>"font_size": 12, // Размер шрифта по умолчанию</p> <p>"tab_size": 4, //Размер табуляции</p> <p>"draw_white_space": "all", // Отображает непечатаемые символы</p> <p>"draw_indent_guides": true, // Включает/выключает направляющие линии</p> <p>"translate_tabs_to_spaces": true, // Преобразовывает табуляцию в пробелы</p> <p>"remeber_open_files": true, // Помнит открытые ранее файлы</p> <p>"highlight_line": true, // Подсветка текущей строки</p> <pre>{\r\n"show_definitions": false,\r\n"auto_complete": false,\r\n"bold_folder_labels": true,\r\n"color_scheme": "Packages/One Dark Material - Theme/schemes/OneDark.tmTheme",\r\n"fold_buttons": false,\r\n"font_size": 13,\r\n"highlight_line": true,\r\n"indent_guide_options":\r\n[\r\n"draw_normal",\r\n"draw_active"\r\n],\r\n"line_padding_bottom": 2,\r\n"line_padding_top": 2,\r\n"margin": 2,\r\n"material_theme_compact_sidebar": true,\r\n"material_theme_compact_panel": true,\r\n"material_theme_small_statusbar": true,\r\n"material_theme_small_tab": true,\r\n"tab_size": 2,\r\n"theme": "OneDarkMaterial.sublime-theme",\r\n"word_wrap": "false",\r\n}</pre> </li> </ul> <h3>Настройка браузера для просмотра кода</h3> <ul> <li> <code>Tools - Build System - New Build System...</code> прописываем в открывшемся окне путь до хрома <pre>{\r\n"cmd": ["c:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe", "$file"]\r\n}</pre> <p>При этом двойной слеш нужен для экранирования</p> <p>Собственно все, сохраняем файл как</p><code>Chrome.sublime-build</code> <p>Закрываем и открываем снова SublimeText</p> <p>Заходим в</p><code>Tools - Build System </code> <p>Выбираем Chrome и запускать открытые файлы в нем можно нажатием Ctrl+B</p> </li> </ul> </div> <div class="content__item" id="content__item5"> <h3>Горячие клавиши</h3> <ul> <li> <p>ctrl + s сохранить<br>alt + shift + 2 две колонки<br>ctrl + f поиск<br>ctrl + shift + / комментарий<br>ctrl + shift + d копировать строку</p> </li> </ul> <h3>Настройка горячих клавиш</h3> <ul> <li> <code>Preferences - Key Bindings</code> <p>Код пресета для пользовательских клавиатурных сокращений (Default (Windows).sublime-keymap:</p> <pre>[\r\n{ "keys": ["alt+shift+f"], "command": "reindent" },\r\n]</pre> <p>Теперь при выделении и по нажатию Alt+Shift+F ваш код будет автоматически выравниваться отступами с соответствующей иерархией вложенности элементов.</p> </li> </ul> </div> <hr><a href="#header">К началу страницы</a> <hr> </div>',ir='<h2>VS Code (2015)</h2> <div class="content__menu"> <p class="content__menu-link" id="content__menu-link1">Документация</p> <p class="content__menu-link" id="content__menu-link2">Удаление</p> <p class="content__menu-link" id="content__menu-link3">Установка</p> <p class="content__menu-link" id="content__menu-link4">Расширения</p> <p class="content__menu-link" id="content__menu-link5">Настройка</p> <p class="content__menu-link" id="content__menu-link6">Горячие клавиши</p> </div> <div class="content__items"> <div class="content__item" id="content__item1"> <h3>Документация VS Code</h3> <ul> <li><a href="https://code.visualstudio.com/">code.visualstudio.com</a><br>VSCode</li> <li><a href="https://dev-gang.ru/article/visual-studio-code-moscznoe-rukovodstvo-polzovatelja-dwedy9wjzg/">dev-gang.ru</a> </li> </ul> </div> <div class="content__item" id="content__item2"> <h3>Удаление VS Code (не портативной версии)</h3> <ol> <li>Удалить через Панель управления - Программы и компоненты<code>Microsoft Visual Studio Code (User)</code></li> <li>Удалить папки <code>c:\\Users\\1\\.vscode\\ <br>c:\\Users\\1\\AppData\\Roaming\\Code\\</code> </li> </ol> </div> <div class="content__item" id="content__item3"> <h3>Установка VS Code (портативной версии)</h3> <ol> <li>Заходим на сайт <a href="https://code.visualstudio.com/">code.visualstudio.com</a> </li> <li>Скачиваем 64битную zip (портативную) версию <code>VSCode-win32-x64-1.82.2.zip</code></li> <li>Распаковываем ее в каталог <code>c:\\Portable\\VSCode\\</code> </li> <li>В этом каталоге создать папку data (здесь будет храниться пользовательский профиль настроек и расширения): <code>c:\\Portable\\VSCode\\data</code> </li> <li>Далее, внутри data создаём 2 обязательные <code>c:\\Portable\\VSCode\\data\\extensions <br>c:\\Portable\\VSCode\\data\\user-data</code> и 1 опциональную папки <code>c:\\Portable\\VSCode\\data\\tmp</code> extensions — здесь будут храниться все установленные расширения; <br>user-data — это, собственно, пользовательский профиль настроек; <br>tmp — опциональная папка, если вы хотите, чтобы Visual Studio Code хранил все временные файлы локально, если эту папку не создавать, то все временные файлы будут храниться в %TEMP%. </li> <li>Вот и всё, можно запускать Code.exe и настраивать, работать. Если вы уже работали на ПК с Visual Studio Code и хотите скопировать или иммигрировать с обычной версии на портативную, то повторяем все шаги выше, и дополнительно для переноса расширений и настроек необходимо сделать следующее: <code>data\\extensions — копируем сюда всё из %USERPROFILE%\\.vscode\\extensions <br>data\\user-data — копируем сюда всё из %APPDATA%\\Code</code> </li> </ol> <h3>Как добавить VS Code в меню пуск</h3> <ol> <li>Выбираем файл (клик правой кнопкой мыши) <code>c:\\Portable\\VSCode\\Code.exe</code></li> <li>Выбираем Закрепить на начальном экране</li> </ol> <h3>Как добавить <em>программу</em> VS Code в контекстное меню</h3> <ol> <li>Открыть Редактор реестра, для этого выбрать Пуск - Выполнить или нажать<code>win + R</code>и ввести команду <code>regedit</code> </li> <li>В редакторе реестра переходим к ветке <code>HKEY_CLASSES_ROOT\\*\\shell</code></li> <li>Клик правой кнопкой мыши на папке shell и выберите команду <code>Создать > Раздел</code></li> <li>Назовите его так, как должна называться команда в контекстном меню. Скажем, <code>Открыть с помощью VS Code</code> </li> <li>Клик правой кнопкой мыши на созданной папке и снова выбираем команду <code>Создать > Раздел</code> </li> <li>Новый вложенный раздел назовите <code>command</code></li> <li>Щелкните на значке раздела command и дважды в окне справа на ключе <code>(По умолчанию) REG_SZ</code></li> <li>В открывшемся окне введите следующую команду <code>"c:\\Portable\\VSCode\\Code.exe" "%1"</code></li> </ol> <h3>Как добавить <em>иконку</em> VS Code в контекстное меню</h3> <ol> <li>Открыть Редактор реестра, для этого выбрать Пуск - Выполнить или нажать<code>win + R</code>и ввести команду <code>regedit</code> </li> <li>В редакторе реестра переходим к ветке <code>HKEY_CLASSES_ROOT\\*\\shell\\Открыть с помощью VS Code</code></li> <li>Клик правой кнопкой мыши и выбираем команду <code>Создать > Строковый параметр</code></li> <li>в поле Имя укажите значение <code>Icon</code></li> <li> а в поле Значение укажите путь к exe-файлу, как показано ниже (кавычки обязательны): <code>"c:\\Portable\\VSCode\\Code.exe"</code> </li> </ol> </div> <div class="content__item" id="content__item4"> <h3>Расширения (extentions)</h3> <h3>Visual extentions</h3> <ol> <li>indent-rainbow (oderwat) Цветные отступы</li> <li>Image preview (Kiss Tamas) Просмотр превью картинки в html коде</li> <li>Theme (Mhammed Talhaouy) A Visual Studio Code theme for those of us who like to code late into the night</li> <li>Prettier - Code formatter (Prettier) Code formatter using prettier Выравнивание кода <h3>Настройка Prettier</h3> <div>В VSCode открыть настройки Settings. <br>Выбрать Prettier: Semi для добавления ";" в конце строки. <br>Выбрать Prettier: Single Quote для замены двойных кавычек на одинарные. <br>Выбрать Prettier: Tab Width 2 для замены табуляции на 2 пробела </div> </li> <li>Polacode (P & P) Делает красивые скриншоты кода</li> <li>Debugger for Chrome (Microsoft) Отладка javascript кода</li> </ol> <h3>Functional extentions</h3> <ol> <li>Live Server (Ritwick Dey) local Server with live reload feature</li> <li>Auto Rename Tag (Jun Han) При изменении открывающего тега изменяет закрывающий</li> <li>CSS Peek (Pranay Prakash) Переход из html в css к выбранному классу</li> <li>HTML CSS Support (ecmel) Дописывает название класса в html из css</li> <li>Live Sass Compiler (Ritwick Dey) Вместе сним уже идет Live Server</li> <li>Beautify (HookyQR)</li> <li>HTML Snippets (Mohamed Abusaid)</li> </ol> <h3>JavaScript extentions</h3> <ol> <li>ESLint (Microsoft) Integrates ESLint JavaScript into VS Code.</li> <li>Babel JavaScript (Michael McDermott) Подсветка нового синтаксиса</li> <li>Quokka.js (Wallaby.js) Песочница js внутри редактора</li> <li>JavaScript (ES6) code snippets (charalampos karypidis)</li> </ol> <h3>C# extentions</h3> <ol> <li>.NET Runtime Install Tool (Microsoft) This extension installs and manages different versions of the .NET Runtime.</li> </ol> </div> <div class="content__item" id="content__item5"> <h2>Настройка (Settings)</h2> <ul> <li>Чтобы войти в настройки редактора, выберем <code>File - Preferences - Settings (Ctrl + ,)</code> </li> </ul> <h3>Git Bash в VS Code</h3> <ul> <li> Согласно статье <a href="https://flagman.top/about-business/php-i-t-p-uzelki/git-bash-%D0%B2-vs-code">Git Bash в VS Code</a> чтобы вместо стандартного терминала PowerShell в VSCode открывался терминал GitBash - нужно его настроить <br>Открыть VS Code. Войти в настройки редактора File &gt; Preferences &gt; Settings (Ctrl + ,). Набрать в строке поиска <code>Terminal Default Profile</code> Перейти в <code>Terminal &gt; Integrated &gt; Default Profile: Windows</code> и выбрать <code>Git Bash</code> </li> </ul> <h3>Изменить отступы в тексте</h3> <ul> <li>Войти в настройки редактора File &gt; Preferences &gt; Settings (Ctrl + ,). Набрать в строке поиска <code>tab size</code> Перейти в <code>Editor: Tab Size</code> Изменим отступ с 4 на 2 </li> </ul> <h3>Wrap. Перенос строк</h3> <ul> <li>Войти в настройки редактора File &gt; Preferences &gt; Settings (Ctrl + ,). Набрать в строке поиска <code>wrap</code> Перейти в <code>Editor: Word Wap</code> Выбрать on </li> </ul> <h3>Color Theme. Выбор цветовой темы</h3> <ul> <li>Войти в настройки редактора File &gt; Preferences &gt; Settings (Ctrl + ,). Набрать в строке поиска <code>theme</code> Перейти в <code>Workbench: Color Theme</code> Выбрать Theme </li> </ul> </div> <div class="content__item" id="content__item6"> <h3>Горячие клавиши (Hot keys)</h3> <ul> <li>Ctrl+, Открыть настройки</li> <li>Ctrl+Shift+P Показать все команды (Command Palette)</li> <li>Ctrl+O Открыть файл</li> <li>Ctrl+K Ctrl+O Открыть папку</li> <li>Ctrl+R Открыть последний</li> <li>Ctrl+P Перейти к файлу</li> <li>Ctrl+Shift+F Найти в файлах</li> <li>F5 Начать отладку</li> <li>Ctrl+Shift+G Открыть git</li> <li>Ctrl+Shift+X Открыть расширения</li> <li>Ctrl+= Увеличить масштаб программы</li> <li>Ctrl+- Уменьшить масштаб программы</li> <li>Ctrl+0 Масштаб по умолчанию</li> <li>Alt+Z Вкл/выкл перенос текста</li> <li>Ctrl+Shift+M Открыть панель Проблемы</li> <li>Ctrl+~ Открыть терминал</li> <li>Ctrl+Shift+E Открыть проводник</li> </ul> </div> <hr><a href="#header">К началу страницы</a> <hr> </div>',ar='<h2>Текстовый редактор vim (1991)</h2> <div class="content__menu"> <p class="content__menu-link" id="content__menu-link1">links</p> <p class="content__menu-link" id="content__menu-link2">Основные режимы работы</p> <p class="content__menu-link" id="content__menu-link3">Перемещение по файлу</p> <p class="content__menu-link" id="content__menu-link4">Ввод текста</p> <p class="content__menu-link" id="content__menu-link5">Удаление и вставка</p> <p class="content__menu-link" id="content__menu-link6">Отмена изменений</p> <p class="content__menu-link" id="content__menu-link7">Поиск</p> <p class="content__menu-link" id="content__menu-link8">Выход</p> </div> <div class="content__items"> <div class="content__item" id="content__item1"> <h3>Ссылки</h3> <ul> <li><a href="https://www.vim.org/">vim.org</a><br>Vim редактор без мыши</li> <li><a href="https://thecode.media/vim/">thecode.media/vim/</a></li> <li><a href="https://xakep.ru/2017/10/03/vim/">xakep.ru/2017/10/03/vim/</a></li> <li><a href="https://ru.wikibooks.org/wikiVim">ru.wikibooks.org/wikiVim</a></li> </ul> </div> <div class="content__item" id="content__item2"> <h3>Основные режимы работы</h3> <ul> <li> <p>Для вызова справки (помощи) о редакторе введите в терминале команду:</p><code>man vim</code> <p>Открываем файл с помощью vim в командной строке</p><code>vim test.txt</code>Чтобы начать писать в файле, нажать i чтобы перейти в интерактивный режим. Внизу появится надпись<code>-- INSERT --</code>Чтобы выйти из интерактивного режима нажать ESC. Чтобы сохраниться и выйти из vim<code>:wq</code> </li> </ul> <ul> <li>«Обычный режим» — перемещение по файлу, стирание текста и другие редактирующие функции. Это - основной режим, только из него можно сразу перейти в другие режимы. Для возврата в основной режим из любого другого режима: <code>ESC, иногда 2 раза</code> <code>Ctrl-[</code> </li> <li>«Режим ввода» - ввод текста. Как только завершается ввод текста, принято сразу возвращаться в обычный режим. Заметьте, что стирание и ввод текста происходит в двух разных режимах. Переход в него из обычного режима: <code>i</code> <code>Insert</code> </li> <li>«Командный режим» - Команды (операции с файлом, поиск и замена, настройка редактора…). Переход в него из обычного режима:<code>:</code></li> <li>«Режим поиска» - ввод поискового запроса. Переход в него из обычного режима <code>/ , поиск от курсора до конца документа</code> <code>? , поиск от курсора до начала документа</code> </li> <li>«Визуальный режим» - режим выделения текста: <pre>"v" и влево или вправо стрелками;\r\nShift+v вся строка целиком;\r\nCtrl+v прямоугольник, часть текста.\r\n</pre> </li> </ul> </div> <div class="content__item" id="content__item3"> <h3>Перемещение по файлу</h3> <ul> <li> <p>После загрузки Vim, на экране вы увидите часть загруженного вами текстового файла. Загрузившись, Vim находится в «командном режиме» - один из основных режимов. Это значит, что если вы нажмете клавишу &lt;l&gt; (строчная L), вместо появления «l» на месте курсора вы увидите, что курсор сдвинулся на один символ вправо. В командном режиме знаки, набираемые на клавиатуре, используются как команды для Vim, а не как помещаемые в текст символы. Команды перемещения - один из наиболее важных типов команд. Вот некоторые из них:</p> <pre>Для перемещения курсора нажмите клавиши h,j,k,l так, как показано ниже:\r\n            ^\r\n            k          Советы: Клавиша h находится слева и перемещает влево.\r\n      &lt; h       l &gt;            Клавиша l находится справа и перемещает вправо.\r\n            j                  Клавиша j похожа на стрелку "вниз".\r\n            v\r\n\r\nCtrl-f - на страницу (экран) вниз;\r\nCtrl-b - на страницу (экран) верх;\r\nCtrl-d - на пол страницы (экрана) вниз;\r\nCtrl-u - на пол страницы (экрана) верх;\r\nCtrl-y - на строку вниз, без изменения положения курсора;\r\nCtrl-e - на строку верх, без изменения положения курсора;\r\n0 («ноль») - в начало текущей строки;\r\n^ - в начало текущей строки (к первому непробельному символу);\r\n$ - в конец текущей строки;\r\nw - на слово вправо;\r\nb - на слово влево;\r\nW - до пробела вправо;\r\nB - до пробела влево;\r\n} - абзац вниз;\r\n{ - абзац вверх;\r\ngg - перейти в начало файла;\r\nG - перейти в конец файла;\r\nnumber G - перейти на конкретную строку number;\r\n/ text CR - перейти к text;\r\n? text CR - то же самое, но искать назад;\r\nn - повторить поиск;\r\nN - повторить поиск назад;\r\n[[ - в начало функции;\r\n\'\' - к месту выполнения команды [[\r\n</pre> </li> </ul> </div> <div class="content__item" id="content__item4"> <h3>Ввод текста</h3> <ul> <li> <p>Следующие команды переводят редактор в режим ввода:</p><code>i — перейти в режим ввода с текущей позиции<br>a — перейти в режим ввода после курсора<br>I — переместиться в начало строки и перейти в режим ввода<br>А — переместиться в конец строки и перейти в режим ввода<br>o — перейти в режим ввода с новой строки под курсором<br>O — перейти в режим ввода с новой строки над курсором<br>s - заменяет указанное количество символов (удаляет указанное число символов и переходит в режим ввода). В отличии от команды с которая может удалить кусок текста размером не меньше слова (cw), командой s можно удалить любое число символов. Например 4s удалит четыре символа начиная с того который находится под курсором. Эта команда применяется для замены одного или нескольких символов другими символами.<br>S - удаляет всю текущую строку и переходит в режим ввода. Число перед командой показывает сколько нужно удалить строк начиная с текущей. Например 4S удалит четыре строки включая текущую.<br>R — перейти в режим ввода с заменой текста (аналог insert). Символы под курсором заменяются на вводимые. Команда применяется когда неизвестно сколько придётся изменить символов на другие (иначе можно было бы использовать команду s с указанием числа заменяемых символов, например, 7s). При удалении вводимых символов возвращаются те которые были до ввода команды. Такой режим сохраняется до конца строки. При вводе новой строки (по нажатию Enter), происходит не переход на другую строку с тем же режимом замены текста, а создание новой строки.<br>r — заменить один символ. Заменяет символ находящийся под курсором на символ который следует за командой. При этом не происходит выхода из командного режима (не надо нажимать ESC после изменения текста). Например, команда ry - символ под курсором меняется на "y". Числовой показатель указывает сколько символов необходимо заменить на данный. Например, 3ry вставляет три символа "y".</code> </li> </ul> </div> <div class="content__item" id="content__item5"> <h3>Удаление и вставка</h3> <ul> <li> <p>Ниже перечислены основные комманды удаления и вставки текста:</p><code>x — удалить символ под курсором (&lt;число&gt;x удаляет указанное число символов начиная с того который находится под курсором);<br>X — удалить символ влево (удалить символ перед курсором);<br>d — используется совместно с командами перемещения. Удаляет символы с текущего положения курсора до положения после ввода команды перемещения. Пример:<br>dw - удаляет символы с текущего до конца слова. включая пробел после слова, чтобы удалить символы до конца слова, но оставить пробел используется команда de,<br>dE - удаляет символы с текущего до конца слова, включая символы пунктуации, но оставляет пробел после слова,<br>diw - удаляет слово под курсором,<br>dd — удалить текущую строку (вырезать);<br>d&lt;число&gt;d или &lt;число&gt;dd — стирание числа строк начиная с текущей;<br>db - удаляет символы с текущего до начала слова (удаление в обратном направлении);<br>d0 - удаление символов с начала строки до текущего положения курсора;<br>d$ или D - удаление символов с текущего положения курсора до конца строки;<br>с — команда аналогичная d, но после удаление переходит в режим ввода;<br>сс - команда удаляет текущую строку и переходит в режим ввода;<br>C - удаляет текст с текущего положения курсора до конца строки, аналогична команде с$ (где $ - символ конца строки);<br>yy (также Y) — копирование текущей строки в буфер;<br>y&lt;число&gt;y — копирование числа строк начиная с текущей в буфер;<br>p — вставка содержимого буфера под курсором. Поскольку в vim девять ячеек буфера удаления. Можно вставить не только последнее удаление, но и удаления сделанные ранее. Например "4p" вставит под курсор содержимое четвертого удаления начиная с последнего. Также чтобы поменять местами два символа можно использовать комбинацию команд "удалить" -x (удаление в буфер) и "вставить" - p (вставить из буфера). Таким образом, поставив курсор на первую букву из двух которые необходимо поменять местами и нажав комбинацию клавиш xp мы совершим необходимые действия;<br>P — вставка содержимого буфера перед курсором;<br>J — слияние текущей строки со следующей. Числовой аргумент перед командой показывает сколько следующих линий необходимо объединить с текущей. Например 2J объединить две следующие строки с текущей, на которой расположен курсор.</code> </li> </ul> </div> <div class="content__item" id="content__item6"> <h3>Отмена изменений</h3> <ul> <li> <code>u — отмена последней команды;<br>U — отмена всех последних изменений в строке, если строка удалена, то применить эту команду к данной строке будет невозможно.</code> </li> </ul> </div> <div class="content__item" id="content__item7"> <h3>Поиск</h3> <ul> <li> <p>Перейти на строку:</p> <pre>/фраза - поиск фразы во всем документе.\r\nn - следующее найденное (вниз) N - предыдущее (вверх).\r\n</pre> </li> </ul> </div> <div class="content__item" id="content__item8"> <h3>Выход</h3> <ul> <li> <p>Есть еще пара команд, которые вам необходимо знать:</p> <pre>:q! - выйти без сохранения;\r\n:wq - записать файл и выйти;\r\nZZ - записать файл и выйти (Если файл не изменяли, то записываться он не будет)\r\n</pre> <p>В этой статье описаны основные возможности, необходимые для работы. Практически во все дистрибутивы Linux входит учебник по работе с редактором, - просто введите в командной строке команду vimtutor.</p> </li> </ul> </div> </div>';for(var or=[],lr=function(){var e=sr[nr],t=document.createElement("a");t.href="#",t.innerHTML=e,t.id="tools-".concat(e.replace(/[^a-z0-9]/gi,"").toLowerCase()),or.push(t),t.addEventListener("click",(function(e){e.preventDefault(),function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;e.forEach((function(e){e.classList.remove("active")})),t&&t.classList.add("active")}(or,t)}))},nr=0,sr=["Tools","Git","Notepad++","Sublime Text","VS Code","Vim"];nr<sr.length;nr++)lr();r(948);const cr='<h1>HTTP</h1> <div class="content__menu"> <p class="content__menu-link" id="content__menu-link1">Links</p> <p class="content__menu-link" id="content__menu-link2">Интернет</p> <p class="content__menu-link" id="content__menu-link3">Веб (всемирная паутина)</p> <p class="content__menu-link" id="content__menu-link4">HTTP</p> </div> <div class="content__items"> <div class="content__item" id="content__item1"> <h3>Links</h3> <ol> <li><a href="https://webref.ru/course/introduction">webref.ru</a> Курс введение в интернет</li> <li><a href="https://blog.skillfactory.ru/glossary/http/">blog.skillfactory.ru</a> HTTP-протокол (2023-05-23)</li> <li><a href="https://skillbox.ru/media/code/chto-takoe-http-i-zachem-on-nuzhen/">skillbox.ru</a> Что такое HTTP и зачем он нужен (2022-09-30)</li> <li><a href="https://htmlacademy.ru/blog/php/http">htmlacademy.ru</a> как работает протокол http (2023-02-08)</li> <li><a href="https://practicum.yandex.ru/blog/chto-takoe-protokol-http/">practicum.yandex.ru</a> что такое протокол HTTP (2022-12-29)</li> <li><a href="http://www.4stud.info/web-programming/protocol-http.html">4stud.info</a> Основа www: протокол HTTP</li> <li><a href="https://cloud.mts.ru/cloud-thinking/blog/http-protokol/">cloud.mts.ru</a> Все самое важное о протоколе HTTP простыми словами (2021-11-30)</li> <li><a href="https://selectel.ru/blog/http-request/">selectel.ru</a> HTTP-запросы: структура, методы, строка статуса и коды состояния (2022-06-29)</li> </ol> </div> <div class="content__item" id="content__item2"> <h3>Интернет</h3> <ul> <li class="article"> <p>Интернет не то же самое, что и веб. Интернет больше, старше и разнообразней.</p> <p>Представьте себе, что <strong>дороги</strong> связываются между собой по всему миру: маленькие улочки соединяются с городскими переулками и превращаются в федеральные трассы, которые затем сливаются с национальными и международными автострадами. Вы можете доехать от вашего дома до любого другого дома в мире (помимо океанов, очевидно). В этой сети дорог нет фактически никакого центра.</p> <p>Интернет похож на дороги, но вместо дорог — <strong>кабели</strong>, вместо домов — <strong>компьютеры</strong>, а вместо автомобилей, путешествующих по этой сети,&nbsp;— <strong>информация</strong>.</p> <p>Интернет был изобретен в 1969 году для подключения компьютеров по всей территории США. В настоящее время миллиарды устройств (включая персональные компьютеры, ноутбуки, мобильные телефоны, телевизоры, холодильники и др.) <strong>соединены между собой</strong>.</p> <h2>Клиент и сервер</h2> <p>Как правило, соединение в Интернете происходит только между <strong>двумя</strong> компьютерами:</p> <ul> <li>один из них <strong>содержит</strong> информацию (сервер);</li> <li> другой <strong>желает</strong> эту информацию (клиент).</li> </ul> <p><strong>Клиент</strong> — это программа, которая может принимать множество форм:</p> <ul> <li>веб-браузер (например, Firefox);</li> <li> клиент электронной почты (например, Outlook);</li> <li> мессенджер (например, Whatsapp);</li> <li> сервис потокового видео (например, Netflix).</li> </ul> <p>Каждая из этих программ будет получать информацию с <strong>сервера</strong>, где хранится что-то (веб-сайт, ваши электронные письма, сообщения, фильмы). Хотя клиентские программы также отправляют информацию на сервер, они обычно не хранят её, в то время как серверы делают это.</p> <p><strong>Сервер</strong> можно считать выделенным компьютером, всегда подключенным к Интернету, единственной целью которого является <strong>предоставление</strong> контента.</p> <p class="callout primary">Хотя любое устройство, подключенное к сети Интернет, может быть как клиентом, так и сервером одновременно, большинство устройств, которые мы используем считаются <strong>клиентами</strong>, потому что мы только извлекаем данные, но не предоставляем их.</p> <h2>IP-адрес</h2> <p>Как и каждый дом имеет определённый и уникальный почтовый адрес, каждый компьютер, подключенный к Интернету, получает <strong>IP-адрес</strong> чтобы идентифицироваться в сети.</p> <p>IP-адрес, как правило, выглядит как сочетание четырёх чисел от 0 до 255: 91.198.174.192.</p> <h2>Домены</h2> <p>Хотя IP-адреса, благодаря своей уникальности, удобны для компьютеров, чтобы передавать друг другу детали, людям их трудно читать и запоминать.</p> <p>Именно поэтому <strong>домены</strong> были созданы в 1985 году. Они связывают IP-адрес типа 91.198.174.192 со строкой <strong>текста</strong>, вроде wikipedia.org. В результате оба являются <strong>взаимозаменяемыми</strong>: вы можете перейти на http://91.198.174.192 или http://wikipedia.org и в конечном итоге оказаться на том же сайте.</p> <p>Домен состоит из трёх частей, которые читаются справа налево:</p> <ul> <li><strong>домен верхнего уровня</strong>: существуют общие (.com, .org, .net) и по отдельным странам (.us, .nl, .fr);</li> <li><strong>имя домена</strong>: имя вроде wikipedia или marksheet, которое может включать буквы, цифры, но не пробел или точку;</li> <li><strong>поддомен</strong> (по желанию). Хотя эта третья часть не является обязательной, большинство веб-сайтов используют www в качестве поддомена по умолчанию.</li> </ul> <p>Подумайте о доменах как о способе <strong>именования</strong> компьютеров, подключенных к Интернету.</p> <p>Как я могу купить домен?</p> <p>Вы на самом деле не можете купить домен, в действительности он арендуется у того, кто управляет доменом верхнего уровня, к которому вы стремитесь. Компании, которые управляют доменами называются регистраторами доменов. Самыми известными из них являются <a href="https://www.namecheap.com">Namecheap</a> и <a href="https://www.gandi.net">Gandi</a>.</p> <h2>Протокол</h2> <p>Целью соединения всех этих компьютеров является возможность <strong>взаимодействия</strong> друг с другом. И как люди говорят на разных <em>языках</em>, компьютеры в Интернете беседуют с помощью <strong>протоколов</strong>.</p> <p>Каждый из них служит своим целям.</p> <table class="data"> <tbody><tr><th>Протокол</th> <th>Используется</th> <th>Создан</th></tr> <tr><td>FTP</td> <td>Для передачи файлов</td> <td>1971</td></tr> <tr><td>SMTP</td> <td>Для отправки писем</td> <td>1971</td></tr> <tr><td>IMAP</td> <td>Для получения писем</td> <td>1986</td></tr> <tr><td>IRC</td> <td>Для чата</td> <td>1988</td></tr> <tr><td>HTTP</td> <td>Для просмотра HTML-документов (веб-страниц)</td> <td>1989</td></tr></tbody> </table> <h2>URL</h2> <p>Теперь, когда мы познакомились с доменами и протоколами, мы можем построить <strong>URL</strong> (Uniform Resource Locator, единый указатель ресурса).</p> <p>Например, URL страницы — это http://marksheet.io/internet.html и его можно разделить на три части:</p> <ul> <li>http:// — <strong>протокол</strong>;</li> <li> marksheet.io — <strong>домен</strong>;</li> <li> /internet.html — <strong>путь</strong>.</li> </ul> <p>Этот URL является <strong>уникальным</strong> и определяет:</p> <ul> <li>где найти что-то в Интернете — marksheet.io/internet.html</li> <li> как компьютер должен прочитать это — http://</li> </ul> <p class="callout primary">URL могут выглядеть более сложными, об этом вы можете прочитать в статье <a href="http://doepud.co.uk/blog/anatomy-of-a-url">Anatomy of a URL</a>.</p> <p><strong>Интернет</strong> <br>Огромная <strong>сеть компьютеров</strong>, соединённых друг с другом.</p> <p><strong>Протокол</strong> <br>Набор правил подобных <strong>языку</strong>, на котором компьютеры <strong>общаются</strong> друг с другом.</p> <p><strong>IP-адрес</strong> <br>Комбинация цифр, вроде 91.198.174.192, которая действует как <strong>уникальный идентификатор</strong> компьютера, подключенного к Интернету.</p> <p><strong>Домен</strong> <br><strong>Текст</strong>, вроде marksheet.io, который действует как <strong>уникальный идентификатор</strong> компьютера, подключенного к Интернету. Разница с IP-адресами заключается в том, что домены легче для прочтения <strong>человеком</strong>.</p> </li> </ul> </div> <div class="content__item" id="content__item3"> <h3>Веб (всемирная паутина)</h3> <ul> <li class="article"> <p>Мы видели, как компьютеры, подключенные к Интернету, общаются на разных языках, называемых <strong>протоколами</strong>, для обмена электронной почтой, файлами, сообщениями чата и др.</p> <p>Один из таких протоколов называется <span title="HyperText Transfer Protocol">HTTP</span>. Это протокол, через который компьютеры делятся друг с другом <strong>веб-страницами</strong>, вроде той, что вы сейчас читаете.</p> <p>Всемирная паутина или <strong>веб</strong> (от англ. web — паутина) — это часть Интернета, где веб-страницы являются совместно используемыми. Вы можете сказать, что просматриваете веб-страницу, если её адрес начинается с http://.</p> <h2>Веб-страница</h2> <p>Веб-страницей называется <strong>документ</strong>, написанный на HTML, который является общим по всей <strong>паутине</strong>. Вы открываете эти документы с помощью <strong>веб-браузера</strong>.</p> <p>Чтобы получить доступ к веб-странице вы можете:</p> <ul> <li>набрать её адрес, вроде http://marksheet.io/web.html</li> <li> нажать на ссылку, вроде <a href="//marksheet.io/internet.html">этой</a></li> </ul> <p>Поскольку запоминание адресов обременительно, происхождение паутины основано на <strong>взаимосвязанных документах</strong>, что облегчает пользователям просмотр веб-страниц.</p> <h2>Веб-сайт</h2> <p><strong>Сайт</strong> — это просто набор веб-страниц, расположенных на <strong>одном домене</strong>.</p> <ul> <li>Веб http:// <ul> <li> Веб-сайт marksheet.io <ul> <li> Веб-страница /introduction.html</li> <li> Веб-страница /internet.html</li> <li> Веб-страница /web.html</li> </ul> </li> </ul> </li> </ul> <h2>Открытие веб-страницы в браузере</h2> <p>При навигации к <a href="http://marksheet.io/web.html">http://marksheet.io/web.html</a>, вы просите компьютер в Интернете отдать документ web.html.</p> <p>В этом случае, ваш компьютер является <strong>клиентом</strong>. Вы просите <strong>сервер</strong> MarkSheet (на котором размещён веб-сайт) отдать файл с именем web.html.</p> <table> <tbody><tr><td>Клиент<br>Ваш компьютер</td><td>Привет, компьютер MarkSheet! Я хотел бы получить файл web.html.</td></tr> <tr><td>Сервер<br>Компьютер MarkSheet</td> <td>Позволь мне проверить, что он есть...</td></tr> <tr><td>Клиент<br>Ваш компьютер</td> <td>Хорошо, я подожду.</td></tr> <tr><td>Сервер<br>Компьютер MarkSheet</td> <td>А, вот он! Сейчас отправлю его тебе.</td></tr> <tr><td>Клиент<br>Ваш компьютер</td> <td>Понял, спасибо!</td></tr></tbody> </table> <p>После этого ваш браузер может отобразить web.html.</p> <p>Файл <strong>не сохраняется</strong> на вашем компьютере: он отображается только временно, пока вы к нему переходите. Если зайдёте на http://marksheet.io/web.html позже, то будете запрашивать компьютер MarkSheet <em>снова</em> для того же файла, если он ещё существует. Таким образом, это гарантирует, что вы всегда получите самую последнюю версию файла.</p> <div class="callout secondary"> <p>Всемирная паутина или <strong>веб</strong> <br>Часть Интернета, которая использует протокол HTTP.</p> <p><strong>Веб-страница</strong> <br>Документ, написанный на HTML.</p> <p><strong>Веб-сайт</strong> <br>Набор веб-страниц на одном домене.</p> <p><strong>Браузер</strong> <br>Программа, которая может открывать веб-страницы для их отображения.</p> </div></li> </ul> </div> <div class="content__item" id="content__item3"> <h3>HTTP</h3> <ul> <li class="article"> <p>HTTP – это протокол передачи информации в интернете, который расшифровывается как «протокол передачи гипертекста» (HyperText Transfer Protocol). Например, браузер отправляет единичный запрос на сервер, который в свою очередь обрабатывает его, формирует ответ и делится с браузером этим ответом – ресурсами в виде данных.</p> <h3>Для чего нужен HTTP</h3> <p>Благодаря взаимодействию клиента (локального компьютера с браузером) и сервера (высокопроизводительного специального компьютера) в сети можно передавать данные. Изначально HTTP использовался только для гипертекстовых документов, но сейчас он может передавать любую информацию. Гипертекстовые документы также могут содержать гиперcсылки, при нажатии на которые формируется новый http-запрос, в ответе на который может содержаться другой гипертекстовый документ. Таким образом мы перемещаемся по страницам в интернете.</p> <h3>Как он работает</h3> <p>HTTP-запрос состоит из трех элементов:</p> <ul> <li>стартовой строки, которая задает параметры запроса или ответа,</li> <li>заголовка, который описывает сведения о передаче и другую служебную информацию.</li> <li>тело (его не всегда можно встретить в структуре). Обычно в нем как раз лежат передаваемые данные. От заголовка тело отделяется пустой строкой.</li> </ul> <p>Важнейшим элементом структуры запроса является стартовая строка. Благодаря ей сервер понимает, что от него хотят. Вот как она устроена:</p> <p><em>Метод + URL + HTTP/Версия</em></p><p><strong>Метод</strong> (иногда его называют HTTP-глаголом) – описывает, какое именно действие нужно совершить со страницей. Можно придумать самые разные, но стандартных методов девять: GET, HEAD, POST, PUT, DELETE,CONNECT, OPTIONS, TRACE, PATCH. Их функциональность раскрывается в названии, они позволяют получить данные (GET), отправить данные на сервер (POST), удалить (DELETE) или заменить часть (PATCH).</p> <p>Чаще всего используют GET и POST, они нужны для чтения и отправки данных на сервер. Например вы зашли в соцсеть, увидели пост и решили оставить комментарий. Или зашли в интернет-магазин, решили что-то купить и оставили данные карты.</p> <p><strong>URL (</strong>Uniform Resource Locator<strong>)</strong> – единообразный идентификатор ресурса, идентифицирует ресурс и определяет его точное местоположение. Именно с помощью URL записаны ссылки в интернете.</p> <p>В отличие от него URN не ведет к конкретному адресу, а просто определяет ресурс во множестве терминов. Потенциально это удобно, чтобы не перегружать интернет устаревшими или пропавшими ссылками.</p> <p><strong>Версия</strong> показывает, какую версию протокола нужно использовать в ответе сервера.</p> <p>HTTP-ответ строится примерно по тому же принципу, что и запрос:</p> <p><em>HTTP/Версия + Код состояния + Пояснение</em></p> <p><strong>Версия</strong> совпадает с версией в запросе.</p> <p><strong>Код состояния </strong>показывает статус запроса. Это трехзначное число, благодаря которому можно узнать, получен ли запрос, обработан ли он, какие ошибки есть. Например, одна из самых известных ошибок – 404 – сообщает о том, что сервер не нашел ресурс по адресу. Возможно, в запросе опечатка, ошибка или он не соответствует протоколу.</p> <p>В<strong> пояснении</strong> стоит краткое описание ответа, например, к той же ошибке 404 может добавляться Not Found, что и раскрывает суть статуса запроса.</p> <h2>Чем отличаются HTTP и HTTPS</h2> <p>HTTPS – это расширение протокола HTTP, которое обеспечивает защиту передаваемых данных. Для сайта это важный параметр, так как шифрование позволяет ему обезопасить информацию, которую туда вводят люди (пароли, реквизиты кредитных карт), от хакерских атак. HTTP-протокол передает данные в открытую, поэтому их легко перехватить.</p> <p>HTTPS защищен SSL-сертификатом. Благодаря ему уязвимые данные шифруются сначала на клиенте (браузере, например) в результате чего они становятся похожи на случайный набор символов и только потом отправляются на сервер. Каждый раз при HTTP-запросе шифр меняется, поэтому успеть подобрать ключ и украсть данные довольно трудно.</p> <p>Сейчас защищенное соединение есть у большинства сайтов, причем многие браузеры по умолчанию уже работают только с https. Это легко проверить: в адресной строке браузера обычно стоит замок или она помечена зеленым цветом. Это показывает, что сайт подлинный и у него есть SSL-сертификат.</p> </li> </ul> </div> </div>',dr='<h1>WebSocket</h1> <div class="content__menu"> <p class="content__menu-link" id="content__menu-link1">Links</p> <p class="content__menu-link" id="content__menu-link2">WebSocket</p> <p class="content__menu-link" id="content__menu-link3">WebSocket API</p> </div> <div class="content__items"> <div class="content__item" id="content__item1"> <h2>Links</h2> <ol> <li><a href="https://vc.ru/dev/417980-websocket-smotrim-kak-rabotaet-za-kulisami">vc.ru</a> WebSocket: смотрим как работает за кулисами (Даниил Шило 2022-05-08)</li> <li><a href="https://wiki.merionet.ru/articles/chto-takoe-websocket-prostymi-slovami">wiki.merionet.ru</a> Что такое WebSocket простыми словами (Свет Иванов 2022-08-19)</li> <li><a href="https://ru.hexlet.io/blog/posts/chto-takoe-websocket-i-kak-oni-voobsche-rabotayut">ru.hexlet.io</a> Что такое веб-сокеты и как они вообще работают (Свет Иванов 2022-10-18)</li> <li><a href="https://blog.skillfactory.ru/glossary/websocket/">blog.skillfactory.ru</a> WebSocket (2023-09-12)</li> </ol> <h3>Статьи на habr</h3> <ol> <li><a href="https://habr.com/ru/sandbox/171066/">WebSocket: разбираем как работает</a> (2022-05-17)</li> </ol> </div> <div class="content__item" id="content__item2"> <h2>WebSocket</h2> <div class="article"> <p>WebSocket — протокол связи поверх TCP-соединения, предназначенный для обмена сообщениями между браузером и веб-сервером, используя постоянное соединение.</p> <p>Появился в 2011 году. С помощью веб-сокетов можно создавать многопользовательские игры, мессенджеры, а также сервисы для совместной работы.</p> <p>WebSocket разработан для воплощения в веб-браузерах и веб-серверах, но он может быть использован для любого клиентского или серверного приложения. Протокол WebSocket — это независимый протокол, основанный на протоколе TCP. Он делает возможным более тесное взаимодействие между браузером и веб-сайтом, способствуя распространению интерактивного содержимого и созданию приложений реального времени.</p> <p>Протокол WebSocket определяет две URI (англ. Uniform Resource Identifier - унифицированный (единообразный) идентификатор ресурса) схемы: ws: (нешифрованное соединение) и wss: (шифрованное соединение)</p> </div> <h3>Где используют WebSockets</h3> <div class="article"> <p>Мессенджеры, Многопользовательские игры, Приложения для совместной работы, Инструменты разработчика, Карты</p> </div> </div> <div class="content__item" id="content__item2"> <h3>WebSocket API</h3> <div class="article"> <p>WebSocket API является передовой технологией , которая позволяет открыть двусторонний сеанс интерактивной связи между браузером пользователя и сервером. С помощью этого API вы можете отправлять сообщения на сервер и получать управляемые событиями ответы, не запрашивая ответ у сервера.</p> <p>Чтобы открыть веб-сокет-соединение, нам нужно создать объект new WebSocket, указав в url-адресе специальный протокол ws (или wss) <code>let socket = new WebSocket("ws://javascript.info");</code> </p> <p>Также существует протокол wss://, использующий шифрование. Это как HTTPS для веб-сокетов. Всегда предпочитайте wss://</p> <p>Протокол wss:// не только использует шифрование, но и обладает повышенной надёжностью.</p> <p>Это потому, что данные ws:// не зашифрованы, видны для любого посредника. Старые прокси-серверы не знают о WebSocket, они могут увидеть «странные» заголовки и закрыть соединение.</p> <p> С другой стороны, wss:// – это WebSocket поверх TLS (так же, как HTTPS – это HTTP поверх TLS), безопасный транспортный уровень шифрует данные от отправителя и расшифровывает на стороне получателя. Пакеты данных передаются в зашифрованном виде через прокси, которые не могут видеть, что внутри, и всегда пропускают их.</p> <p>Как только объект WebSocket создан, мы должны слушать его события. Их всего 4:</p> <p>open – соединение установлено,</p> <p>message – получены данные,</p> <p>error – ошибка,</p> <p>close – соединение закрыто.</p> <p>Чтобы отправить данные, то надо вызвать метод socket.send(data)</p> <p> <code> let socket = new WebSocket("ws://javascript.info"); <br>socket.onopen = function(e) { <br>&nbsp;&nbsp;alert("[open] Соединение установлено"); <br>&nbsp;&nbsp;alert("Отправляем данные на сервер"); <br>&nbsp;&nbsp;socket.send("Меня зовут Джон"); <br>}; <br> <br>socket.onmessage = function(event) { <br>&nbsp;&nbsp;alert(`[message] Данные получены с сервера: ${event.data}`); <br>}; <br> <br>socket.onclose = function(event) { <br>&nbsp;&nbsp;if (event.wasClean) { <br>&nbsp;&nbsp;&nbsp;&nbsp;alert(`[close] Соединение закрыто чисто, код=${event.code} причина=${event.reason}`); <br>&nbsp;&nbsp;} else { <br>&nbsp;&nbsp;&nbsp;&nbsp;// например, сервер убил процесс или сеть недоступна <br>&nbsp;&nbsp;&nbsp;&nbsp;// обычно в этом случае event.code 1006 <br>&nbsp;&nbsp;&nbsp;&nbsp;alert(\'[close] Соединение прервано\'); <br>&nbsp;&nbsp;} <br>}; <br> <br>socket.onerror = function(error) { <br>&nbsp;&nbsp;alert(`[error]`); <br>}; </code> </p> <p>Вот пример заголовков для запроса, который делает new WebSocket("wss://javascript.info/chat")</p> <p> <code> GET /chat <br>Host: javascript.info <br>Origin: https://javascript.info <br>Connection: Upgrade <br>Upgrade: websocket <br>Sec-WebSocket-Key: Iv8io/9s+lYFgZWcXczP8Q== <br>Sec-WebSocket-Version: 13 </code> </p> <p>Чтобы получить состояние соединения, существует дополнительное свойство socket.readyState со значениями:</p> <p>0 – «CONNECTING»: соединение ещё не установлено,</p> <p>1 – «OPEN»: обмен данными,</p> <p>2 – «CLOSING»: соединение закрывается,</p> <p>3 – «CLOSED»: соединение закрыто.</p> </div> </div> </div>',hr='<h1>Перенос пакетов npm на ноутбук без интернета</h1> <h2>Доккументация nmp</h2> <ol> <li><a href="https://docs.npmjs.com/">docs.npmjs.com</a></li> <li><a href="https://habr.com/ru/post/133363/">habr.com/ru/post/133363</a></li> </ol> <h2>Доккументация Verdaccio</h2> <ol> <li><a href="https://verdaccio.org/">verdaccio.org</a></li> <li><a href="https://habr.com/ru/post/453614/">habr.com/ru/post/453614</a></li> </ol> <h2>Как настроить локальный npm репозиторий verdaccio</h2> <ul> <li> <p>При использовании локального npm репозитория на ноутбуке без интернета используется команда установки репозитария:</p><code><span class="pre_function">npm </span><span class="pre_keyword">set</span> registry http://172.18.0.4:4873</code> <p>Есть возможность установить registry для отдельного пакета, например @devkit</p><code><span class="pre_function">npm </span><span class="pre_keyword">set</span> @devkit:registry http://172.18.0.39:4873</code> <p>Посмотреть текущее значение</p><code><span class="pre_function">npm </span><span class="pre_keyword">get</span> registry https://registry.npmjs.org/</code> <p>Вернуть значение по-умолчанию</p><code><span class="pre_function">npm </span><span class="pre_keyword">set</span> registry https://registry.npmjs.org/</code> <p>или</p><code><span class="pre_function">npm </span><span class="pre_keyword">config</span> delete registry</code> </li> </ul> <h2>Установка локального npm репозитория Verdaccio</h2> <ul> <li> <p>Есть ноутбук с доступом к интернету — исходник и ноутбук без доступа - целевая машина</p> <p>На исходнике и на целевой машине должны быть node.js (проще всего, если одной или близких версий).</p> <p><strong>Далее все команды вводим в терминале</strong> (например в терминале VS Code).</p> <p>Создаем на исходнике папочку verdaccio и переходим в нее:</p><code><span class="pre_function">mkdir</span> verdaccio<br><span class="pre_function">cd</span> verdaccio</code> <p>Проверим версию node:</p> <code>C:\\\\verdaccio> <span class="pre_function">node</span> -v<br>v16.13.1</code> <p>Проверим версию npm (он установился вместе с node.js):</p> <code>C:\\\\verdaccio> <span class="pre_function">npm</span> -v<br>8.1.2</code> <p>Посмотрим все установленные глобальные библиотеки:</p> <code>C:\\\\verdaccio> <span class="pre_function">npm</span> list -g<br>C:\\\\Users\\\\Admin\\\\AppData\\\\Roaming\\\\npm<br>└── (empty)</code> <p>Если нужно удалить глобальну библиотеку:</p> <code>C:\\\\verdaccio> <span class="pre_function">npm</span> uninstall -g имя_пакета</code> <p>Посмотрим библиотеки установленные локально в папку verdaccio:</p> <code>C:\\\\verdaccio> <span class="pre_function">npm</span> list<br>C:\\\\verdaccio<br>└── (empty)</code> <p>Если нужно удалить локальную библиотеку:</p> <code>C:\\\\verdaccio> <span class="pre_function">npm</span> uninstall имя_пакета</code> <p>Посмотрим эффективный каталог установки наших глобальных пакетов npm:</p> <code>C:\\\\verdaccio> <span class="pre_function">npm</span> root -g <br>C:\\\\Users\\\\Admin\\\\AppData\\\\Roaming\\\\npm\\\\node_modules</code> <p>Посмотрим эффективный каталог установки наших локальных пакетов npm:</p> <code>C:\\\\verdaccio> <span class="pre_function">npm</span> root <br>C:\\\\verdaccio\\\\node_modules</code> <p>Посмотрим текущее значение репозитория</p> <code><span class="pre_function">npm </span><span class="pre_keyword">get</span> registry <br>https://registry.npmjs.org/</code> <p>Если отличается, то вернем значение по-умолчанию</p> <code><span class="pre_function">npm </span><span class="pre_keyword">set</span> registry https://registry.npmjs.org/</code> <p>или</p> <code><span class="pre_function">npm </span><span class="pre_keyword">config</span> delete registry</code> <p>Локально ставим пакет Verdaccio</p> <code><span class="pre_function">npm</span> i verdaccio</code> <p>Посмотрим библиотеки установленные локально в папку verdaccio:</p> <code>C:\\\\verdaccio> <span class="pre_function">npm</span> list <br>C:\\\\verdaccio<br>└── verdaccio@5.3.0</code> <p>В каталоге c:\\\\verdaccio появится каталог node_modules и файлы package.json и package-lock.json</p> <p>Запустим verdaccio в отдельном терминале</p> <code>c:\\\\verdaccio\\\\node_modules\\\\.bin\\\\verdaccio.cmd</code> <p>Появится сообщение</p> <code>warn --- config file - C:\\\\Users\\\\Admin\\\\AppData\\\\Roaming\\\\verdaccio\\\\config.yaml <br>warn --- Plugin successfully loaded: verdaccio-htpasswd <br>warn --- Plugin successfully loaded: verdaccio-audit <br>warn --- http address - http://localhost:4873/ - verdaccio/5.3.0</code> <p>Первая строка указывает путь к созданному файлу конфигурации config.yaml</p> <p>Последняя строка указывает адрес хранилища локального репозитория verdaccio, доступного пока запущена программа verdaccio.cmd</p> <p>Чтобы проверить доступен ли в данный момент локальный репозиторий, можно открыть этот адрес в браузере</p> <code>http://localhost:4873</code> </li> <li>Теперь нам нужно сделать несколько вещей:</li> </ul> <ol> <li>Очистить npm-cache (убить содержимое c:\\\\Users\\\\Admin\\\\AppData\\\\Roaming\\\\npm-cache )</li> <li>Переключить npm на локальный репозиторий <code><span class="pre_function">npm</span> set registry http://localhost:4873/</code></li> <li>Скопировать config.yaml в нашу уютную папку verdaccio</li> <li>Убедиться, что раздел uplinks этого файла выглядит так: <code>\\\\nuplinks: <br>npmjs: <br>url: https://registry.npmjs.org/ <br>cache: true</code> <p>В конце конфига добавить :</p> <code>\\\\nlisten: <br>- 0.0.0.0:4873</code> <p>Если этого не сделать, то вы не сможете достучаться позже на целевой машине к локальному адресу.</p> </li> </ol> <ul> <li> Собственно мы готовы, теперь все пакеты, что мы возьмем через npm install осядут в <code>c:\\\\Users\\\\Admin\\\\AppData\\\\Roaming\\\\verdaccio\\\\storage\\\\</code>, что нам и нужно. Восстанавливаем целевой проект, ставим дополнительно: <code><span class="pre_function">npm</span> i node-windows</code> <p>Посмотрим библиотеки установленные локально в папку verdaccio:</p> <code>C:\\\\verdaccio> <span class="pre_function">npm</span> list <br>C:\\\\verdaccio <br>├── node-windows@1.0.0-beta.6 <br>└── verdaccio@5.3.0</code> <p>Установим локально нужные нам библиотеки в текущий проект и они же осядут в хранилище</p> <code>C:\\\\verdaccio> <span class="pre_function">npm</span> i pug <br>C:\\\\verdaccio> <span class="pre_function">npm</span> i gulp <br>C:\\\\verdaccio> <span class="pre_function">npm</span> i webpack <br>C:\\\\verdaccio> <span class="pre_function">npm</span> i webpack-cli</code> <p>Посмотрим установленные библиотеки</p> <code>C:\\\\verdaccio> <span class="pre_function">npm</span> list <br>C:\\\\verdaccio <br>├── gulp@4.0.2 <br>├── node-windows@1.0.0-beta.6 <br>├── pug@3.0.2 <br>├── verdaccio@5.3.0 <br>├── webpack-cli@4.9.1 <br>└── webpack@5.65.0</code> <p>Архивируем папку c:\\\\Users\\\\Admin\\\\AppData\\\\Roaming\\\\verdaccio\\\\ в verdaccio-roaming.zip <br>Архивируем папку c:\\\\verdaccio\\\\ в verdaccio-c.zip<br>и отправляем их на целевую машину</p> </li> </ul> <h2>Настройка доступа к локальному npm репозиторию на целевой машине</h2> <ul> <li> <p>На целевой машине распаковываем папку verdaccio-roaming.zip в c:\\\\Users\\\\1\\\\AppData\\\\Roaming\\\\ <br>Теперь здесь находится наш локальный npm репозиторий</p> <code>c:\\\\Users\\\\1\\\\AppData\\\\Roaming\\\\verdaccio\\\\storage\\\\</code> <p>распаковываем папку verdaccio-c.zip в c:\\\\. В корне папки создать файл installservice.js:</p> <pre>var Service = require(\'node-windows\').Service;\r\nvar svc = new Service({\r\nname: \'VerdaccioSvc\',\r\ndescription: \'Verdaccio - npm local repository\',\r\nscript: \'C:\\\\verdacio\\\\node_modules\\\\verdaccio\\\\bin\\\\verdaccio\',\r\nnodeOptions: []\r\n}); \r\nsvc.on(\'install\', function() {svc.start();});\r\nsvc.install();    </pre> <p>Запускаем :</p> <code>node installservice.js</code> <p>последующая синхронизация сводится к копированию содержимого</p> <code>./storage</code> <p>Запустим verdaccio в отдельном терминале</p> <code>c:\\verdaccio\\node_modules\\.bin\\verdaccio.cmd</code> <p>Появится сообщение</p> <code>warn --- config file - C:\\\\Users\\\\1\\\\AppData\\\\Roaming\\\\verdaccio\\\\config.yaml <br>warn --- Plugin successfully loaded: verdaccio-htpasswd <br>warn --- Plugin successfully loaded: verdaccio-audit <br>warn --- http address - http://localhost:4873/ - verdaccio/5.3.0</code> <p>Первая строка указывает путь к созданному файлу конфигурации config.yaml</p> <p>Последняя строка указывает адрес хранилища локального репозитория verdaccio, доступного пока запущена программа verdaccio.cmd</p> <p>Чтобы проверить доступен ли в данный момент локальный репозиторий, можно открыть этот адрес в браузере</p> <code>http://localhost:4873</code> <p>Переключить npm на локальный репозиторий</p><code><span class="pre_function">npm</span> set registry http://localhost:4873/</code> <p>Посмотрим установленные пакеты:</p> <code>C:\\\\verdaccio> <span class="pre_function">npm</span> list<br>C:\\\\verdaccio <br>├── gulp@4.0.2 <br>├── node-windows@1.0.0-beta.6 <br>├── pug@3.0.2 <br>├── verdaccio@5.3.0 <br>├── webpack-cli@4.9.1 <br>└── webpack@5.65.0</code> <p>Установим пакет sass</p> <code><span class="pre_function">npm</span> i sass</code> <p>Посмотрим установленные пакеты:</p> <code>C:\\\\verdaccio> <span class="pre_function">npm</span> list <br>C:\\\\verdaccio<br>├── gulp@4.0.2 <br>├── node-windows@1.0.0-beta.6 <br>├── pug@3.0.2 <br>├── sass@1.43.4 <br>├── verdaccio@5.3.0 <br>├── webpack-cli@4.9.1 <br>└── webpack@5.65.0</code> </li> </ul>',pr='<h1>How ask questions</h1> <ul> <li>11 простых правил о том, как правильно задавать вопросы по программированию Adel Dubinnikova May 3, 2019·4 min read (Это перевод статьи, написанной Gordon Zhu 17 сентября 2016) <p>Прочитайте и распечатайте это текст прямо сейчас. Повесьте себе на стену. Каждый раз когда вы собираетесь задавать вопрос читайте статью снова и снова до тех пор, пока не будете выполнять все рекомендации на автомате.</p> </li> <li>Ситуация. <p>Большинство людей ужасны, когда они начинают спрашивать что-либо о своем коде, но достаточно сделать пару простых шагов, чтобы начать спрашивать понятнее и получать более подробные ответы. </p> <p>Умение задавать хорошие вопросов очень важно вне зависимости от того являетесь ли вы частью команды на «StackOverFlow» или студентом в «Watch and Code». Ведь люди, которые задают хорошие вопросы, более эффективны, потому что они получают лучшие ответы чаще и быстрее других. Также к ним относятся более серьезно и уважительно, что имеет значение, если вы думаете о своей карьере.</p> <p>Хорошие вопросы экономят время. Плохие вопросы тратят время. Плохие вопросы создают ненужный круговорот обсуждений и уточнений, которые ведут к разочарованию и конфликтам. Люди, которые задают плохие вопросы, расстроены, потому что они не могут получить помощь, а люди, которые хотят помочь также расстроены, потому что ответы на плохие вопросы так чертовски печальны.</p> <p>Те, кто плохо задают вопросы обычно далеко не продвигаются в своей карьере. Потому что работа с ними — чистое разочарование. Если бы вы были менеджером и должны были уволить кого-то, то вы немедленно подумали бы о людях, которые задают плохие вопросы. Единственная вещь, которая спасает людей, ужасно задающих вопросы, состоит в том, что все вокруг них так же ужасны и, если посмотреть относительно, то они выглядят вполне нормально.</p> </li> <li>Процесс</li> <li>1. Как следует постарайтесь понять код в меру своих способностей <p>- Да, сделайте это. Не пропускайте этот шаг.</p> <p>- Проходите строчку за строчкой и поймите, что происходит на каждой. Делайте заметки, думайте о том, что сбивает с толку. Дайте себе время переварить информацию.</p> <p>- Гуглите незнакомые понятия. Вам следует избегать задавать вопросы, которые можете сами быстро нагуглить.</p> <p>- Используйте отладчик(debugger), чтобы помочь себе. Если Вы не знаете, как использовать отладчик, или не знайте, что это, посмотрите ролик ниже.</p> </li> <li>2. Четко и подробно опишите проблему <p>- Объясните, что у вас происходит. Например, если вы — студент в Watch and Code, то пришлите ссылку на урок, поясните, что пытаетесь сделать. Если у вас вопрос по видео, укажите на какой минуте этот вопрос освещается в видео, чтобы кто-то пытающийся помочь мог быстро перейти на нужное место, где вы застряли.</p> <p>- Опишите ваши действия до того как появилась проблема. Например, вы нажимали три кнопки в определенном месте? Это хорошо работало в Chrome, но не в Safari? Поясните каждый свой шаг.</p> <p>- Объясните, что вы хотите получить.</p> <p>- Объясните, что происходит в вашем коде. Например, если есть сообщение об ошибке, покажите код, который вызвал её. Если есть странная проблема в пользовательском интерфейсе, сделайте скриншот.</p> </li> <li>3. Покажите код, который иллюстрирует проблему <p>- Если вы работаете над крупным проектом, то отделите часть, которая не работает, и покажите её.</p> <p>- Когда вы демонстрируете код, убедитесь, что ничего не меняете, пока кто-то его изучает. Это значит, что вы должны создать отдельную копию своего кода к своему вопросу. Если вы меняете код, пока кто-то изучает его, то ваш вопрос не просто плохой вопрос, а ужасный. Потому что возможно в коде все поменялось, но нет никакого способа узнать об этом человеку, который вам помогает. Не наказывайте людей, которые хотят помочь вам.</p> </li> <li>4. Будьте уверены в том, что код, которым вы делитесь, способен решить вашу проблему <p>- Возьмите код, которым поделились, и убедитесь, что он ведет к той же ошибке. Если вы поделились не тем кодом, то помочь вам будет невозможно.</p> </li> <li>5. Вы должны предоставить рабочий образец кода, если только это не невозможно (а это маловероятно) <p>- Например, если у вас проблема с фронтендом, то создайте образец на Plunker и поделитесь ссылкой.</p> <p>- Если невозможно предоставить образец кода, объясните почему. Затем загрузите свой код на GitHub и подробно шаг за шагом расскажите, как его запустить.</p> </li> <li>6. Будьте последовательны <p>- Не имеет значения по какому стандарту вы пишите код, просто удостоверьтесь, что вы последовательны. Это делает код более понятным. И это поможет вам в следующем шаге.</p> </li> <li>7. Избегайте опечаток <p>- Никто не хочет видеть ваши опечатки. Если вы не можете найти свои собственные опечатки, вы должны научиться этому (просто продолжайте читать).</p> <p>- Например, если вы застреваете на уроке курса, то вернитесь к предыдущему пункту, где ваш код верен и делайте заново оттуда, проверяя, что ваш код продолжает работать на каждом шаге. Если Вы добрались до пункта, где ваш код не работает, перепроверьте нет ли опечаток.</p> <p>- Если вы находитесь на уроке, где есть готовый вариант кода, проверьте работает он. Если предоставленный код работает, а ваш нет, то у вас опечатка. И теперь, ваша работа — найти её. Не тратьте чужое время и не просите, чтобы другие сделали то, что вам следует сделать самим.</p> </li> <li>8. Объясните, что вы сделали, чтобы решить проблему <p>- Предположите пару вариантов из-за чего может быть проблема и проверьте свои предположения. Для каждого варианта поясните зачем вы так сделали.</p> <p>- Скорее всего во время этого процесса вы сможете решить свою проблему сами. Так чаще всего и бывает.</p> </li> <li>9. Предположите из-за чего может быть проблема <p>- На основе ваших проверок в предыдущем шаге расскажите ваши лучше идеи в чем может быть ошибка.</p> </li> <li>10. Откорректируйте свой вопрос <p>- Прочитайте свой вопрос и удостоверьтесь, что предоставили все необходимое, чтобы кто-то мог ответить на него.</p> <p>- Отредактируйте для ясности. Если вам кажется, что какие-то моменты сбивают с толку, то исправьте. Если есть опечатки, исправьте. Если у Вас будут опечатки в вашем вопросе, люди предположат, что у вас есть опечатки в вашем коде. И как я сказал прежде, другие люди не ваши личные «исправители опечаток».</p> </li> <li>11. Обновите информацию, если что-то выяснили и помните, что это не ваш последний вопрос <p>- Если вы выяснили ответ до того, как вам ответили. Скажите людям об этом, чтобы они не тратили напрасно свое время ища ответ на то, что уже найдено.</p> <p>- Когда вы получаете ответ, потратьте свое время и постарайтесь полностью понять, что человек хочет вам донести. Следует иметь в виду, что ответ может быть и не правильным. Вам следует проверить работает ли решение.</p> <p>- Благодарите каждого человека, который помог вам, и помните, что он не должен был отвечать на ваш вопрос, но по некоторым причинам захотел.</p> </li> <li>Если Вам понравилась эта статья, вам, вероятно, очень понравится мой курс Practical JavaScript. Это — основополагающий курс для серьезных новичков, которые хотят стать профессиональными разработчиками, и он абсолютно бесплатен. <hr> <a href="#header">К началу страницы</a> <hr> </li> </ul>',ur="<h1>Полезные заметки</h1> <article> <h2>Как сделать текстовый документ, содержащий список файлов в нужной папке</h2> <h3>Командами консоли</h3> <ol> <li>Запустите командную строку от имени администратора.</li> <li>Введите <code>cd x:\\\\folder\\\\</code> где x:\\\\folder\\\\ — полный путь к папке, список файлов из которой нужно получить. Нажмите Enter.</li> <li>Введите команду <code>dir /a /-p /o:gen >files.txt</code> (где files.txt — текстовый файл, в котором будет сохранен список файлов). Нажмите Enter.</li> <li>Если использовать команду с параметром /b <code>dir /a /b /-p /o:gen >files.txt</code> то в полученном списке будет отсутствовать любая дополнительная информация о размерах файлов или дате создания — только список имен.</li> <li>Готово. В результате будет создан текстовый файл, содержащий необходимую информацию. В команде выше, данный документ сохраняется в той же папке, список файлов из которой требуется получить. Можно также убрать вывод в текстовый файл, в этом случае список будет отображаться только в командной строке.</li> </ol> </article>";for(var mr=[],gr=function(){var e=br[fr],t=document.createElement("a");t.href="#",t.innerHTML=e,t.id="other-".concat(e.replace(/[^a-z0-9]/gi,"").toLowerCase()),mr.push(t),t.addEventListener("click",(function(e){var r;e.preventDefault(),r=t,mr.forEach((function(e){e.classList.remove("active")})),r.classList.add("active")}))},fr=0,br=["Http","Websocket","Verdaccio","How ask questions","Articles"];fr<br.length;fr++)gr();function yr(){var e=document.querySelector("#offline"),t=document.getElementById("offline-1");t&&t.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML="<front-base></front-base>",function(){var e=document.querySelector(".aside");e.innerHTML="",e.append.apply(e,Bt),function(){var e=[It,Wt,Rt,Ht],t=document.querySelector("#base");document.querySelectorAll(".aside a").forEach((function(r,i){!function(r,i){r.addEventListener("click",(function(r){r.preventDefault(),t.innerHTML=e[i]}))}(r,i)}))}();var t=new Event("click");Bt[0].dispatchEvent(t)}()}));var r=document.getElementById("offline-framework");r&&r.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML="<front-framework></front-framework>",function(){var e=document.querySelector(".aside");e.innerHTML="",e.append.apply(e,Yt),function(){var e=document.querySelector("#framework"),t=document.getElementById("framework-angular");t&&t.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML=Ut,H()}));var r=document.getElementById("framework-react");r&&r.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML=qt,H()}));var i=document.getElementById("framework-vue");i&&i.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML=Qt,H()}))}();var t=new Event("click");Yt[0].dispatchEvent(t)}()}));var i=document.getElementById("offline-tools");i&&i.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML="<front-tools></front-tools>",function(){var e=document.querySelector(".aside");e.innerHTML="",e.append.apply(e,or),function(){var e=document.querySelector("#tools"),t=document.getElementById("tools-tools");t&&t.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML=$t,H()}));var r=document.getElementById("tools-git");r&&r.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML=er,H()}));var i=document.getElementById("tools-notepad");i&&i.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML=tr,H()}));var a=document.getElementById("tools-sublimetext");a&&a.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML=rr,H()}));var o=document.getElementById("tools-vscode");o&&o.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML=ir,H()}));var l=document.getElementById("tools-vim");l&&l.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML=ar,H()}))}();var t=new Event("click");or[0].dispatchEvent(t)}()}));var a=document.getElementById("offline-other");a&&a.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML="<front-other></front-other>",function(){var e=document.querySelector(".aside");e.innerHTML="",e.append.apply(e,mr),function(){var e=document.querySelector("#other"),t=document.getElementById("other-http");t&&t.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML=cr,H()}));var r=document.getElementById("other-websocket");r&&r.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML=dr,H()}));var i=document.getElementById("other-verdaccio");i&&i.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML=hr,H()}));var a=document.getElementById("other-howaskquestions");a&&a.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML=pr,H()}));var o=document.getElementById("other-articles");o&&o.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML=ur,H()}))}();var t=new Event("click");mr[0].dispatchEvent(t)}()}))}for(var vr=[],wr=1,kr=function(){var e,t=Sr[Lr],r=document.createElement("a");r.href="#",r.innerHTML=t,r.id=(""===(e=t).replace(/[^a-z0-9]/gi,"")&&(e=""+wr,wr++),"offline-".concat(e.replace(/[^a-z0-9]/gi,"").toLowerCase())),vr.push(r),r.addEventListener("click",(function(e){var t;e.preventDefault(),t=r,vr.forEach((function(e){e.classList.remove("active")})),t.classList.add("active")}))},Lr=0,Sr=["основы","framework","tools","other"];Lr<Sr.length;Lr++)kr();r(342);var xr=[[{id:1,theme:"Vacancy",header2:"Вакансии"},{id:2,theme:"Vacancy",header3:"Вакансии",link:"https://voronezh.hh.ru/",name:"voronezh.hh.ru"},{id:3,theme:"Vacancy",header3:"Вакансии",link:"https://career.habr.com/",name:"career.habr.com"},{id:4,theme:"Vacancy",header3:"Вакансии",link:"https://www.rabota.ru/",name:"rabota.ru"},{id:5,theme:"Vacancy",header3:"Вакансии",link:"https://vc.ru/job",name:"vc.ru/job"},{}],[{id:1,theme:"Epam",header2:"EPAM"},{id:2,theme:"Epam",header3:"Epam",link:"https://www.epam-group.ru/",name:"epam-group.ru"},{id:3,theme:"Epam",header3:"Epam",link:"https://anywhere.epam.com/ru",name:"anywhere.epam.com/ru"},{id:4,theme:"Epam",header3:"Epam",link:"https://training.ru/",name:"training.ru"},{id:5,theme:"Epam",header3:"Epam",link:"https://klever.blog/",name:"klever.blog"},{id:6,theme:"Epam",header3:"Epam",link:"https://vk.com/epam_russia",name:"vk.com/epam_russia"},{id:7,theme:"Epam",header3:"Epam курс английского",link:"https://learn.epam.com/detailsPage?id=316e94a2-11f2-41ef-8036-ca2c87b6ee9a",name:"Project Interviews in English"},{id:8,theme:"Epam",header3:"Epam курс английского",link:"https://elearn.epam.com/courses/course-v1:EPAM+ETI+1020/course/",name:"Project Interviews in English"},{id:9,theme:"Epam",header3:"Epam собеседование",link:"https://anywhere.epam.com/ru/blog/epam-anywhere-job-interviews-what-to-expect",name:"Собеседование в EPAM Anywhere: чего ожидать"},{id:10,theme:"Epam",header3:"Epam собеседование",link:"https://habr.com/ru/company/epam_systems/blog/525414/",name:"Что нужно знать начинающим специалистам о процессе найма перед собеседованием? 12 вопросов рекрутерам"},{id:11,theme:"Epam",header3:"Epam собеседование",link:"https://habr.com/ru/company/epam_systems/blog/567736/",name:"Как успешно пройти собеседование на английском в ИТ"},{id:12,theme:"Epam",header3:"Epam собеседование",link:"https://habr.com/ru/company/epam_systems/blog/483384/",name:"Какие английские слова IT-лексикона мы неправильно произносим чаще всего"},{id:13,theme:"Epam",header3:"Epam собеседование",link:"https://habr.com/ru/company/epam_systems/blog/497952/",name:"Английские сокращения и названия из сферы IT, которые мы неправильно произносим"},{id:14,theme:"Epam",header3:"Epam собеседование",link:"https://habr.com/ru/post/486820/",name:"70 вопросов по JavaScript для подготовки к собеседованию"},{id:15,theme:"Epam",header3:"Epam собеседование",link:"https://habr.com/ru/post/646847/",name:"Собеседование по Javascript, мой опыт. Часть первая"},{id:16,theme:"Epam",header3:"Epam собеседование",link:"https://itvdn.com/ru/blog/article/300-js",name:"300+ ВОПРОСОВ ПО JAVASCRIPT НА СОБЕСЕДОВАНИИ"},{}],[{id:1,theme:"DSR",header3:"DSR Corporation",link:"https://ru.dsr-corporation.com/",name:"ru.dsr-corporation.com",text:"DSR (Doing Software Right) создана инженерами для инженеров"},{id:2,theme:"DSR",header3:"DSR вакансии",link:"https://ru.dsr-corporation.com/vacancies/",name:"ru.dsr-corporation.com/vacancies"},{id:3,theme:"DSR",header3:"DSR учебный центр",link:"https://ru.dsr-corporation.com/student/",name:"ru.dsr-corporation.com/student"},{id:4,theme:"DSR",header3:"DSR учебный центр",link:"https://ru.dsr-corporation.com/student/courses/jsbootcamp/",name:"https://ru.dsr-corporation.com/student/courses/jsbootcamp/",text:"У студентов бесплатного курса JS Bootcamp 2023 будет наставник, с которым можно лично созваниваться. На обучение мы возьмем до 15 человек (студентов и слушателей), которых определим по результатам входного тестирования."},{id:5,theme:"DSR",header3:"DSR учебный центр",link:"https://ru.dsr-corporation.com/student/courses/dotnet-school/",name:"ru.dsr-corporation.com/student/courses/dotnet-school",text:"Окунемся в мир .NET веб-разработки под чутким руководством инженеров DSR Corporation. Во время прохождения курса вы узнаете, как разрабатывается реальное приложение, из чего оно состоит и как выглядит процесс промышленной разработки ПО."},{}],[{id:1,theme:"Neoflex",header3:"Neoflex",link:"https://www.neoflex.ru/",name:"neoflex.ru"},{id:2,theme:"Neoflex",header3:"Neoflex вакансии",link:"https://www.neoflex.ru/about/career",name:"neoflex.ru/about/career"},{id:3,theme:"Neoflex",header3:"Neoflex учебный центр",link:"https://edu.neoflex.ru/",name:"edu.neoflex.ru"},{id:4,theme:"Neoflex",header3:"Neoflex учебный центр",link:"https://edu.neoflex.ru/frontend",name:"edu.neoflex.ru/frontend"},{}],[{id:1,theme:"Яндекс",header3:"Яндекс Образование",link:"https://education.yandex.ru/",name:"https://education.yandex.ru/",text:"Яндекс Образование. Школьникам Студентам Родителям"},{id:1,theme:"Яндекс",header3:"Яндекс Образование",link:"https://education.yandex.ru/kruzhok",name:"https://education.yandex.ru/kruzhok",text:"Яндекс Образование. Олимпиадное программирование для школьников 6-11 классов"},{id:1,theme:"Яндекс",header3:"Яндекс Образование",link:"https://education.yandex.ru/vsosh",name:"https://education.yandex.ru/vsosh",text:"Яндекс Образование. Подготовка к олимпиаде по информатике для школьников 5-11 классов"},{id:1,theme:"Яндекс",header3:"Яндекс Лицей",link:"https://lyceum.yandex.ru/",name:"https://lyceum.yandex.ru",text:"Яндекс Лицей. Путь в IT начинается здесь"},{id:2,theme:"Яндекс",header3:"Академия Яндекса",link:"https://academy.yandex.ru/",name:"https://academy.yandex.ru",text:"Вместе учимся, решаем сложные задачи, общаемся и строим свою карьеру в IT"},{id:3,theme:"Яндекс",header3:"Академия Яндекса",link:"https://academy.yandex.ru/knowledge",name:"https://academy.yandex.ru/knowledge",text:"База знаний. Каталог полезных образовательных материалов"},{id:4,theme:"Яндекс",header3:"Академия Яндекса",link:"https://academy.yandex.ru/handbook",name:"https://academy.yandex.ru/handbook",text:"Хендбуки Академии Яндекса по ключевым IT‑дисциплинам"},{id:5,theme:"Яндекс",header3:"Яндекс Практикум",link:"https://practicum.yandex.ru/",name:"https://practicum.yandex.ru",text:"Яндекс Практикум — среда, где всё получится: и новая IT-профессия, и новая жизнь"},{id:6,theme:"Яндекс",header3:"Яндекс Практикум",link:"https://practicum.yandex.ru/frontend-developer/",name:"https://practicum.yandex.ru/frontend-developer/",text:"Программирование. С нуля. Курс «Фронтенд-разработчик». Научитесь писать код для сайтов и веб-сервисов — с нуля за 10 месяцев. Сделаете первые шаги или смените направление в IT."},{id:7,theme:"Яндекс",header3:"Яндекс Стажировка (Young&&Yandex team)",link:"https://yandex.ru/yaintern/",name:"https://yandex.ru/yaintern/",text:"Открыт набор на осеннюю оплачиваемую стажировку"},{id:8,theme:"Яндекс",header3:"Яндекс Стажировка (Young&&Yandex team)",link:"https://yandex.ru/yaintern/int_05",name:"https://yandex.ru/yaintern/int_05",text:"Стажёр-разработчик. фронтенд-разработка"},{id:9,theme:"Яндекс",header3:"Яндекс Стажировка (Young&&Yandex team)",link:"https://yandex.ru/yaintern/algorithm-training_1",name:"https://yandex.ru/yaintern/algorithm-training_1",text:"Тренировки по алгоритмам 1.0"},{id:10,theme:"Яндекс",header3:"Яндекс Контекст",link:"https://contest.yandex.ru/",name:"https://contest.yandex.ru/"},{id:11,theme:"Яндекс",header3:"Яндекс Контекст",link:"https://yandex.ru/support/contest/index.html",name:"https://yandex.ru/support/contest/index.html"},{id:12,theme:"Яндекс",header3:"Яндекс Карьера",link:"https://yandex.ru/jobs",name:"https://yandex.ru/jobs"},{id:12,theme:"Яндекс",header3:"Яндекс Карьера",link:"https://yandex.ru/jobs/skill-diagnostic/",name:"https://yandex.ru/jobs/skill-diagnostic/",text:"Диагностика технических навыков для разработчиков и аналитиков"},{id:13,theme:"Яндекс",header3:"Яндекс Карьера",link:"https://yandex.ru/jobs/pages/how-to-get",name:"https://yandex.ru/jobs/pages/how-to-get",text:"Как попасть в Яндекс"},{id:14,theme:"Яндекс",header3:"Яндекс Карьера",link:"https://yandex.ru/jobs/hiring-events",name:"https://yandex.ru/jobs/hiring-events",text:"Как получить офер в Яндекс за 1–2 дня"},{id:15,theme:"Яндекс",header3:"Яндекс Карьера",link:"https://yandex.ru/jobs/pages/ya-interview",name:"https://yandex.ru/jobs/pages/ya-interview",text:"Собеседование в Яндексе. Как попасть на собеседование. Наём проходит в несколько этапов. Как повысить шансы на успех"},{id:16,theme:"Яндекс",header3:"Яндекс Карьера",link:"https://yandex.ru/jobs/pages/frontend-interview",name:"https://yandex.ru/jobs/pages/frontend-interview",text:"Советы для кандидатов: как мы нанимаем Фронтенд разработчиков"},{}],[{id:1,theme:"Ozon",header3:"Route 256 Ozon Tech",link:"https://route256.ozon.ru/",name:"route256.ozon.ru",text:"Делимся IT-экспертизой Ozon и знакомим с воркфлоу команд"},{id:2,theme:"Ozon",header3:"Route 256 Ozon Tech",link:"https://route256.ozon.ru/c-sharp-junior",name:"route256.ozon.ru/c-sharp-junior",text:"Бесплатный курс «C#-разработчик»"},{id:3,theme:"Ozon",header3:"Route 256 Ozon Tech",link:"https://route256.ozon.ru/c-sharp",name:"route256.ozon.ru/c-sharp",text:"Продвинутая разработка микросервисов на C#"},{}],[{id:1,theme:"Avito",header3:"Avito Tech",link:"https://avito.tech/",name:"avito.tech",text:"AvitoTech — команда инженеров, которые ежедневно улучшают сервисы Авито и прокачивают себя."},{id:2,theme:"Avito",header3:"Avito Career",link:"https://career.avito.com/",name:"career.avito.com",text:"Станьте частью команды Авито"},{id:3,theme:"Avito",header3:"Avito Career",link:"https://manifesto.avito.com/",name:"manifesto.avito.com",text:"Зачем существует Авито, и к чему мы стремимся"},{id:4,theme:"Avito",header3:"Avito Start",link:"https://start.avito.ru/",name:"start.avito.ru",text:"Это стажировки в Авито"},{}],[{id:1,theme:"Тинькофф",header3:"Тинькофф Образование",link:"https://fintech.tinkoff.ru/",name:"https://fintech.tinkoff.ru",text:"Тинькофф Образование. Образовательные программы для школьников, студентов и ИТ-специалистов"},{id:2,theme:"Тинькофф",header3:"Тинькофф Поколение. Для школьников",link:"https://fintech.tinkoff.ru/school/",name:"https://fintech.tinkoff.ru/school/",text:"Бесплатные курсы и мероприятия для школьников, подготовка к олимпиадам по математике, информатике и анализу данных"},{id:2,theme:"Тинькофф",header3:"Тинькофф Поколение. Для школьников",link:"https://fintech.tinkoff.ru/school/basic/analysis/",name:"fintech.tinkoff.ru/school/basic/analysis/",text:'Бесплатный курс "Анализ данных". Для учеников 9—11-х классов и всех желающих разобраться в аналитике'},{id:2,theme:"Тинькофф",header3:"Тинькофф Поколение. Для школьников",link:"https://fintech.tinkoff.ru/school/basic/math/",name:"fintech.tinkoff.ru/school/basic/math/",text:'Бесплатный онлайн-курс "Математика решает" для школьников 4—6 классов'},{id:2,theme:"Тинькофф",header3:"Тинькофф Поколение. Для школьников",link:"https://fintech.tinkoff.ru/school/basic/ios/",name:"fintech.tinkoff.ru/school/basic/ios/",text:'Бесплатный курс "iOS для начинающих" для всех желающих попробовать себя в создании мобильных приложений'},{id:3,theme:"Тинькофф",header3:"Тинькофф Академия. Для студентов",link:"https://fintech.tinkoff.ru/academy/",name:"https://fintech.tinkoff.ru/academy/",text:"Бесплатные курсы и мероприятия для школьников, подготовка к олимпиадам по математике, информатике и анализу данных"},{id:4,theme:"Тинькофф",header3:"Финтех курсы для студентов, выпускников и специалистов с опытом",link:"https://fintech.tinkoff.ru/study/",name:"https://fintech.tinkoff.ru/study/",text:"Проводим бесплатные курсы для студентов, выпускников и специалистов с опытом"},{id:5,theme:"Тинькофф",header3:"Финтех курсы для студентов, выпускников и специалистов с опытом",link:"https://fintech.tinkoff.ru/study/fintech/",name:"https://fintech.tinkoff.ru/study/fintech/",text:"Для начинающих. Образовательные IT-курсы от топ-менеджеров, техлидов и ведущих разработчиков Тинькофф. Обучаем технологиям, которые используем в компании. Для студентов старше 18 лет, выпускников технических вузов и специалистов, которые начинают карьеру в ИТ"},{id:6,theme:"Тинькофф",header3:"Финтех курсы для студентов, выпускников и специалистов с опытом",link:"https://fintech.tinkoff.ru/study/fintech/frontend/",name:"https://fintech.tinkoff.ru/study/fintech/frontend/",text:"Для начинающих. Frontend-разработчик. Трехмесячный бесплатный учебный курс от Финтеха, который можно проходить из любой точки России, Беларуси и Казахстана"},{id:7,theme:"Тинькофф",header3:"Финтех курсы для студентов, выпускников и специалистов с опытом",link:"https://fintech.tinkoff.ru/study/fintech_middle/",name:"https://fintech.tinkoff.ru/study/fintech_middle/",text:"Тинькофф Финтех Мидл. Бесплатные интенсивы для опытных разработчиков, аналитиков, менеджеров и других специалистов. Обучаем редким технологиям, которые используем в компании"},{id:8,theme:"Тинькофф",header3:"Финтех курсы для студентов, выпускников и специалистов с опытом",link:"https://fintech.tinkoff.ru/study/conspectus/",name:"https://fintech.tinkoff.ru/study/conspectus/"},{id:12,theme:"Тинькофф",header3:"Финтех курсы для студентов, выпускников и специалистов с опытом",link:"https://l.tinkoff.ru/algorithms_student24/",name:"l.tinkoff.ru/algorithms_student24/",text:"Набор на курс Алгоритмы и структуры данных"},{id:9,theme:"Тинькофф",header3:"Тинькофф стажировка",link:"https://fintech.tinkoff.ru/start/",name:"https://fintech.tinkoff.ru/start/",text:"Тинькофф Старт. Оплачиваемые стажировки в сфере ИТ. Работа над прикладными бизнес-задачами 40 часов в неделю летом. Удаленно или из офиса в вашем городе"},{id:10,theme:"Тинькофф",header3:"Тинькофф стажировка",link:"https://fintech.tinkoff.ru/start/frontend/",name:"fintech.tinkoff.ru/start/frontend/",text:"Frontend-разработчик. Оплачиваемая стажировка для начинающих специалистов, от 20 часов в неделю, удаленно или в офисе"},{id:11,theme:"Тинькофф",header3:"Тинькофф стажировка",link:"https://l.tinkoff.ru/start_winter24/",name:"l.tinkoff.ru/start_winter24/",text:"Набор на зимнюю стажировку 20 часов в неделю до 18 декабря"},{id:11,theme:"Тинькофф",header3:"Тинькофф стажировка",link:"https://fintech.tinkoff.ru/start/how_to_enroll/",name:"fintech.tinkoff.ru/start/how_to_enroll/",text:"Советы по подготовке к отбору на стажировку"},{id:11,theme:"Тинькофф",header3:"Тинькофф стажировка",link:"https://algocode.ru/page/rules_intern/",name:"algocode.ru/page/rules_intern/",text:"Правила решения контестов"},{id:11,theme:"Тинькофф",header3:"Тинькофф стажировка",link:"https://fintech.tinkoff.ru/activities/contest/",name:"fintech.tinkoff.ru/activities/contest/",text:"Тренировочный контест по программированию"},{id:13,theme:"Тинькофф",header3:"Тинькофф Карьера",link:"https://www.tinkoff.ru/career/it/frontend/",name:"tinkoff.ru/career/it/frontend/"},{id:14,theme:"Тинькофф",header3:"Тинькофф Карьера",link:"https://www.tinkoff.ru/career/it/interview/frontend/",name:"tinkoff.ru/career/it/interview/frontend/"},{}],[{id:1,theme:"Сбер",header3:"Сбер",link:"https://developers.sber.ru/kak-v-sbere/vacancies/frontend-developer-sd",name:"developers.sber.ru"},{id:2,theme:"Сбер",header3:"Сбер учебный центр",link:"https://sberuniversity.ru/",name:"sberuniversity.ru",text:"У студентов бесплатного курса JS Bootcamp 2023 будет наставник, с которым можно лично созваниваться. На обучение мы возьмем до 15 человек (студентов и слушателей), которых определим по результатам входного тестирования."},{id:3,theme:"Сбер",header3:"Сбер школа 21",link:"https://21-school.ru/",name:"21-school.ru",text:"Школа 21 программирование с нуля для тех, кто хочет Сменить профессию Найти себя в ИТ Получить практические знания"},{}],[{id:1,theme:"Metalamp",header2:"MetaLamp (ранее Fullstack Development)"},{id:2,theme:"Metalamp",header3:"Metalamp",link:"https://metalamp.io/",name:"metalamp.io"},{id:3,theme:"Metalamp",header3:"Программа обучения Metalamp",link:"https://coda.io/@metalamp/education",name:"coda.io/education"},{id:4,theme:"Metalamp",header3:"Программа обучения Metalamp",link:"https://coda.io/@metalamp/education/front-end-2",name:"coda.io/frontend"},{id:5,theme:"Metalamp",header3:"Программа обучения Metalamp",link:"https://coda.io/@metalamp/education/back-end-3",name:"coda.io/backend"},{id:6,theme:"Metalamp",header3:"Программа обучения Metalamp Frontend",text:"<a href='#' id='metalamp-frontend1'>Front-end Задание 1. Изучение вёрстки. (1-3 недели)</a> offline"},{id:7,theme:"Metalamp",header3:"Программа обучения Metalamp Frontend",text:"<a href='#' id='metalamp-frontend2'>Front-end Задание 2. Практика вёрстки. (2-4 месяца)</a> offline"},{id:8,theme:"Metalamp",header3:"Программа обучения Metalamp Frontend",text:"<a href='#' id='metalamp-frontend3'>Front-end Задание 3. Изучение JavaScript. (3-4 недели)</a> offline"},{id:9,theme:"Metalamp",header3:"Программа обучения Metalamp Frontend",text:"<a href='#' id='metalamp-frontend4'>Front-end Задание 4. Практика JavaScript. (1-2 месяца)</a> offline"},{id:10,theme:"Metalamp",header3:"Программа обучения Metalamp Frontend",text:"<a href='#' id='metalamp-frontend5'>Front-end Задание 5. (1-4 месяца) 5а. Рефакторинг 5б. Командный проект</a> offline"},{id:11,theme:"Metalamp",header3:"Программа обучения Metalamp Frontend",text:"<a href='#' id='metalamp-faq'>FAQ по программе обучения. Frontend 1</a> offline"},{id:12,theme:"Metalamp",header3:"Программа обучения Metalamp Frontend",text:"<a href='#' id='metalamp-errors'>Наиболее распространенные ошибки на этапе код-ревью</a> offline"},{id:13,theme:"Metalamp",header3:"Программа обучения Metalamp Frontend",text:"<a href='#' id='metalamp-employment'>Про трудоустройство</a> offline"},{id:14,theme:"Metalamp",header3:"Программа обучения Metalamp Frontend",text:"<a href='#' id='metalamp-intro'>Intro</a> offline"},{id:15,theme:"Metalamp",header3:"Metalamp Вконтакте",link:"https://vk.com/metalamp",name:"vk.com/metalamp",text:"MetaLamp Software Development Team"},{id:28,theme:"Metalamp",header3:"Metalamp Telegram",link:"https://t.me/fsd_frontend_1step_edu",name:"t.me/fsd_frontend_1step_edu",text:"MetaLamp Frontend 1 step education"},{id:29,theme:"Metalamp",header3:"Metalamp Telegram",link:"https://t.me/frontend_education",name:"t.me/frontend_education",text:"MetaLamp Frontend 2 step education"},{id:33,theme:"Metalamp",header3:"Metalamp GitHub",link:"https://github.com/fullstack-development",name:"github.com/fullstack-development",text:"MetaLamp We build complex front-end apps with love"},{id:44,theme:"Metalamp",header3:"Metalamp Проекты",link:"https://www.akropolis.io/",name:"akropolis.io",text:"Разработали frontend для порядка 10 MVP перед тем, как проект пришёл к актуальному виду<br> С января 2019 по настоящее время"},{id:45,theme:"Metalamp",header3:"Metalamp Проекты",link:"https://praktikum.yandex.ru/middle-frontend",name:"praktikum.yandex.ru/middle-frontend",text:"Помогли спроектировать программу курса для middle front-end разработчиков<br> С октября 2019 по февраль 2020"},{id:46,theme:"Metalamp",header3:"Metalamp Проекты",link:"https://improvado.io/",name:"improvado.io",text:"Сделали frontend для международного агрегатора рекламных кампаний с множеством визуализаций данных<br> С октября 2016 по октябрь 2019"},{id:47,theme:"Metalamp",header3:"Metalamp Проекты",link:"https://datalight.me/",name:"datalight.me",text:"Frontend для MVP сервиса аналитики и визуализации криптовалютных данных<br> С августа 2018 по январь 2020"},{id:48,theme:"Metalamp",header3:"Metalamp Проекты",link:"https://supercede.com/",name:"supercede.com",text:"Frontend и backend для маркетплейса рынка перестрахования<br> С мая по ноябрь 2019"},{id:49,theme:"Metalamp",header3:"Metalamp Проекты",link:"https://rocketcompute.com/",name:"rocketcompute.com",text:"Frontend сервиса по мониторингу нагрузки основных ресурсов: CPU, GPU, RAM, Storage<br> Декабрь 2020"},{id:50,theme:"Metalamp",header3:"Metalamp Проекты",link:"https://nasport.universe.cc/",name:"nasport.universe.cc",text:"Сервис, объединяющий людей и команды для проведения спортивных игр в оффлайне<br> C мая по август 2021"},{id:51,theme:"Metalamp",header3:"Metalamp Проекты",link:"https://cryptokombat.com/",name:"cryptokombat.com",text:"Разработали frontend для коллекционной карточной крипто-игры «Crypto Kombat»<br> С мая по июнь 2021"},{id:52,theme:"Metalamp",header3:"Metalamp Проекты",link:"https://whatz.watch/",name:"whatz.watch",text:"Frontend с нуля для сервиса по рекомендации фильмов<br> С октября 2020 по август 2021"},{id:53,theme:"Metalamp",header3:"Metalamp Проекты",link:"https://Ptichka.moscow/",name:"Ptichka",text:"сервис срочной курьерской доставки по uber-модели в Москве<br> С марта 2016 по март 2020"},{}],[{id:1,theme:"Skills",header2:"Требования в вакансиях"},{id:2,theme:"Skills",header3:"Вакансия HTML верстальщик, JavaScript разработчик"},{id:3,theme:"Skills",header3:"Обязанности",text:"Вёрстка веб-страниц, лендингов, корпоративных сайтов, интернет-магазинов, рассылок"},{id:4,theme:"Skills",header3:"Обязанности",text:"Вёрстка по дизайн-макетам Photoshop, Figma"},{id:5,theme:"Skills",header3:"Обязанности",text:"Поддержка вёрстки существующих крупных проектов"},{id:6,theme:"Skills",header3:"Обязанности",text:"Проведение проекта с нуля до продакшена"},{id:7,theme:"Skills",header3:"Обязанности",text:"Разработка клиентских приложений на основе JavaScript"},{id:8,theme:"Skills",header3:"Обязанности",text:"Участие в code-review внутри команды и вне её"},{id:9,theme:"Skills",header3:"Обязанности",text:"Написание документации по коду"},{id:10,theme:"Skills",header3:"Требования",text:"Вёрстка адаптивная, кроссбраузерная, отзывчивая (резиновая, responsive), pixel perfect"},{id:11,theme:"Skills",header3:"Требования",text:"Верстка по дизайн-макетам Figma, Photoshop"},{id:12,theme:"Skills",header3:"Требования",text:"Верстка по методологии БЭМ"},{id:13,theme:"Skills",header3:"Требования",text:"Чистая вёрстка, без библиотек и фреймворков"},{id:14,theme:"Skills",header3:"Требования",text:"Знание HTML5, CSS3, JavaScript, TypeScript"},{id:15,theme:"Skills",header3:"Требования",text:"CSS препроцессоры (SASS, SCSS, LESS, Stylus, PostCSS)"},{id:16,theme:"Skills",header3:"Требования",text:"Знание CSS фреймворков Bootstrap, Foundation, Tailwind"},{id:17,theme:"Skills",header3:"Требования",text:"Знание JS фреймворков Angular, React, Vue.js"},{id:18,theme:"Skills",header3:"Требования",text:"Система контроля версий GIT"},{id:19,theme:"Skills",header3:"Требования",text:"Работа с инструментами сборки: менеджеры пакетов (NPM, YARN), исполнители задач (Grunt, Gulp), сборщики модулей (Browseryfy, Webpack, Parcel)"},{id:20,theme:"Skills",header3:"Требования",text:"Работа с CMS системами  Wordpress, 1C Bitrix, Opencart"},{id:21,theme:"Skills",header3:"Требования",text:"Уметь покрывать код тестами (unit tests, integration tests)"},{id:22,theme:"Skills",header3:"Требования",text:"Способность читать и понимать чужой код"},{id:23,theme:"Skills",header3:"Требования",text:"Понимание принципов работы SPA, основ UI/UX"},{id:24,theme:"Skills",header3:"Требования",text:"Умение работать с Rest API"},{id:25,theme:"Skills",header3:"Требования",text:"Понимание принципов ООП, MVC и других JS-паттернов"},{id:26,theme:"Skills",header3:"Soft Skills",text:"Знание английского языка на уровне Intermediate"},{id:27,theme:"Skills",header3:"Soft Skills",text:"Активная жизненная позиция"},{id:28,theme:"Skills",header3:"Soft Skills",text:"Способность быстро обучаться новому"},{id:29,theme:"Skills",header3:"Soft Skills",text:"Желание учиться и развиваться в IT"},{id:30,theme:"Skills",header3:"Soft Skills",text:"Неконфликтность"},{id:31,theme:"Skills",header3:"Soft Skills",text:"Ответственность"},{id:32,theme:"Skills",header3:"Soft Skills",text:"Аналитический склад ума"},{id:33,theme:"Skills",header3:"Soft Skills",text:"Стрессоустойчивость"},{id:34,theme:"Skills",header3:"Soft Skills",text:"Грамотная устная и письменная речь"},{id:35,theme:"Skills",header3:"Soft Skills",text:"Самостоятельность"},{}],[{id:1,theme:"Refuse",header2:"Отказ"},{id:2,theme:"Refuse",header3:"Отказ",text:"18 марта 2022 Frontend-разработчик в компанию<br> <strong>INXY.COM</strong><br> Москва от 1 800 до 3 000 USD на руки"},{id:3,theme:"Refuse",header3:"Отказ",text:"17 марта 2022 Frontend разработчик (React, middle+/senior) в компанию<br> <strong>Тинькофф</strong><br> Воронеж з/п не указана"},{id:4,theme:"Refuse",header3:"Отказ",text:"17 марта 2022 Front-end разработчик Vue.js в компанию<br> <strong>Kvando Technologies</strong><br> Москва от 150 000 до 250 000 руб. на руки"},{id:5,theme:"Refuse",header3:"Отказ",text:"17 марта 2022 Frontend-разработчик в компанию<br> <strong>Doczilla</strong><br> Москва от 170 000 до 230 000 руб. на руки"},{id:6,theme:"Refuse",header3:"Отказ",text:"17 марта 2022 Frontend developer / Frontend-разработчик (Middle) удаленно в компанию<br> <strong>TopAssistant</strong><br> Санкт-Петербург от 240 000 руб. до вычета налогов"},{id:7,theme:"Refuse",header3:"Отказ",text:"10 марта 2022 Frontend разработчик (React) в компанию<br> <strong>РедСейл</strong><br> Гомель от 200 000 руб. на руки"},{id:8,theme:"Refuse",header3:"Отказ",text:"10 марта 2022 Веб-разработчик в компанию<br> <strong>Za-EK</strong><br> Москва от 10 000 до 15 000 руб. на руки"},{id:9,theme:"Refuse",header3:"Отказ",text:"10 марта 2022 Frontend-разработчик в компанию<br> <strong>ИИТ</strong><br> Москва до 160 000 руб. на руки"},{id:10,theme:"Refuse",header3:"Отказ",text:"9 марта 2022 Junior Front-end разработчик в компанию<br> <strong>Онпоинт</strong><br> Москва от 47 000 руб. до вычета налогов"},{id:11,theme:"Refuse",header3:"Отказ",text:"4 марта 2022 Frontend-разработчик (Javascript, удаленная работа) в компанию<br> <strong>Pandora</strong><br> Москва от 250 000 до 290 000 руб. до вычета налогов"},{id:12,theme:"Refuse",header3:"Отказ",text:"4 марта 2022 Верстальщик / Frontend разработчик в компанию<br> <strong>Мегаплан</strong><br> Москва от 80 000 руб. на руки"},{id:13,theme:"Refuse",header3:"Отказ",text:"2 марта 2022 HTML-верстальщик в компанию<br> <strong>Иннософт</strong><br> Воронеж з/п не указана"},{id:14,theme:"Refuse",header3:"Отказ",text:"1 марта 2022 Frontend-разработчик в компанию<br> <strong>ShinSale</strong><br> Москва з/п не указана"},{id:15,theme:"Refuse",header3:"Отказ",text:"21 февраля 2022 HTML-верстальщик в компанию <br> <strong>Инаномо Технолоджис</strong><br> Рязань з/п не указана"},{id:16,theme:"Refuse",header3:"Отказ",text:"18 февраля 2022 Frontend разработчик (JavaScript) в компанию<br> <strong>билайн: Контактные центры</strong><br> Москва з/п не указана"},{id:17,theme:"Refuse",header3:"Отказ",text:"18 февраля 2022 Javascript frontend developer (Middle) в компанию<br> <strong>ИНИТИ</strong><br> Москва з/п не указана"},{id:18,theme:"Refuse",header3:"Отказ",text:"17 февраля 2022 Junior Frontend developer в компанию<br> <strong>АО НТЦ Атлас</strong><br> Москва от 60 000 руб. на руки"},{id:19,theme:"Refuse",header3:"Отказ",text:"15 февраля 2022 Frontend-разработчик (middle) в компанию<br> <strong>Profilance Group (ИП Страмоусов Марк Петрович)</strong><br> Краснодар от 80 000 руб. на руки"},{id:20,theme:"Refuse",header3:"Отказ",text:"15 февраля 2022 Front-end разработчик JavaScript (React) в компанию<br> <strong>Сионик</strong><br> Москва от 140 000 руб. на руки"},{id:21,theme:"Refuse",header3:"Отказ",text:"11 февраля 2022 Frontend разработчик JavaScript / VueJs в компанию<br> <strong>Рабочие Руки</strong><br> Москва от 90 000 до 120 000 руб. на руки"},{id:22,theme:"Refuse",header3:"Отказ",text:"10 февраля 2022 Front-end разработчик в компанию<br> <strong>IT and Digital</strong><br> Воронеж от 280 000 руб. на руки"},{id:23,theme:"Refuse",header3:"Отказ",text:"8 февраля 2022 Junior Front-end разработчик в компанию<br> <strong>Онпоинт</strong><br> Москва от 47 000 руб. до вычета налогов"},{id:24,theme:"Refuse",header3:"Отказ",text:"4 февраля 2022 Javascript frontend developer (Junior) в компанию<br> <strong>ИНИТИ</strong><br> Москва з/п не указана"},{id:25,theme:"Refuse",header3:"Отказ",text:"4 февраля 2022 Frontend-разработчик в компанию<br> <strong>Comindware</strong><br> Москва от 150 000 до 250 000 руб. на руки"},{id:26,theme:"Refuse",header3:"Отказ",text:"2 февраля 2022 Frontend Developer в международный проект в компанию<br> <strong>Мирафокс</strong><br> Москва от 265 000 до 380 000 руб. на руки"},{id:27,theme:"Refuse",header3:"Отказ",text:"2 февраля 2022 HTML-верстальщик / Middle Front-end разработчик в компанию<br> <strong>Девять Линий</strong><br> Москва от 50 000 до 80 000 руб. на руки"},{id:28,theme:"Refuse",header3:"Отказ",text:"1 февраля 2022 Web-программист в компанию<br> <strong>Абба-Пласт</strong><br> Воронеж от 40 000 до 50 000 руб. до вычета налогов"},{id:29,theme:"Refuse",header3:"Отказ",text:"1 февраля 2022 Frontend developer (Junior) в компанию<br> <strong>Селляви</strong><br> Москва от 80 000 до 130 000 руб. на руки"},{id:30,theme:"Refuse",header3:"Отказ",text:"1 февраля 2022 Frontend-разработчик в компанию<br> <strong>Точка</strong><br> Екатеринбург до 340 000 руб. на руки"},{id:31,theme:"Refuse",header3:"Отказ",text:"1 февраля 2022 Frontend-разработчик в компанию<br> <strong>Keep Calm</strong><br> Москва от 60 000 до 70 000 руб. на руки"},{id:32,theme:"Refuse",header3:"Отказ",text:"31 января 2022 Frontend React Developer (remote) в компанию<br> <strong>Velvetech, LLC</strong><br> Воронеж з/п не указана"},{id:33,theme:"Refuse",header3:"Отказ",text:"31 января 2022 Frontend-разработчик в компанию<br> <strong>Sinergium</strong><br> Воронеж от 45 000 руб. на руки"},{id:34,theme:"Refuse",header3:"Отказ",text:"31 января 2022 Старший Frontend-разработчик (react) в компанию<br> <strong>Инфосистемы Джет</strong><br> Воронеж з/п не указана"},{id:35,theme:"Refuse",header3:"Отказ",text:"31 января 2022 Frontend Developer (Vue.js,Nuxt.js) в компанию<br> <strong>HEADS and HANDS</strong><br> Воронеж з/п не указана"},{id:36,theme:"Refuse",header3:"Отказ",text:"31 января 2022 Frontend-разработчик в компанию<br> <strong>HR Prime</strong><br> Москва от 120 000 до 220 000 руб. на руки"},{id:37,theme:"Refuse",header3:"Отказ",text:"30 января 2022 Front-end Developer в компанию<br> <strong>Murano Software</strong><br> Воронеж з/п не указана"},{id:38,theme:"Refuse",header3:"Отказ",text:"30 января 2022 Специалист службы поддержки с техническими знаниями (Браузер) в компанию<br> <strong>Яндекс</strong><br> Воронеж от 15 000 руб. до вычета налогов"},{id:39,theme:"Refuse",header3:"Отказ",text:"28 января 2022 Frontend разработчик (React, middle/senior) в компанию<br> <strong>Тинькофф</strong><br> Воронеж з/п не указана"},{id:40,theme:"Refuse",header3:"Отказ",text:"9 ноября 2021 Junior Frontend Developer в компанию<br> <strong>3205.team</strong><br> Санкт-Петербург з/п не указана"},{id:41,theme:"Refuse",header3:"Отказ",text:"3 ноября 2021 Верстальщик/Junior Frontend-разработчик в компанию<br> <strong>Мурашев Иван Викторович</strong><br> Казань от 40 000 руб. на руки"},{id:42,theme:"Refuse",header3:"Отказ",text:"18 октября 2021 Frontend-разработчик в компанию<br> <strong>Sinergium</strong><br> Воронеж от 45 000 руб. на руки"},{id:43,theme:"Refuse",header3:"Отказ",text:"2 октября 2021 Фронтенд-разработчик/HTML-верстальщик в компанию<br> <strong>Web-студия Internet-Team</strong><br> Москва от 50 000 руб. на руки"},{id:44,theme:"Refuse",header3:"Отказ",text:"30 сентября 2021 Frontend-разработчик (React) в компанию<br> <strong>Атос АйТи Солюшенс энд Сервисез</strong><br> Воронеж з/п не указана"},{id:45,theme:"Refuse",header3:"Отказ",text:"23 сентября 2021 Frontend-разработчик в компанию<br> <strong>Наймиум</strong><br> Москва от 100 000 до 150 000 руб. на руки"},{id:46,theme:"Refuse",header3:"Отказ",text:"20 сентября 2021 Верстальщик (frontend) в компанию<br> <strong>Эко-мед-ИС</strong><br> Москва от 100 000 руб. на руки"},{id:47,theme:"Refuse",header3:"Отказ",text:"20 сентября 2021 Frontend разработчик (React, middle/senior) в компанию<br> <strong>Тинькофф</strong><br> Воронеж з/п не указана"},{id:48,theme:"Refuse",header3:"Отказ",text:"20 сентября 2021 Frontend-разработчик (JavaScript) в компанию<br> <strong>Кар Копи</strong><br> Санкт-Петербург от 150 000 до 150 000 руб. на руки"},{id:49,theme:"Refuse",header3:"Отказ",text:"19 сентября 2021 HTML верстальщик middle+ (удалённо) в компанию<br> <strong>Продамус</strong><br> Москва з/п не указана"},{id:50,theme:"Refuse",header3:"Отказ",text:"19 сентября 2021 Стажер-разработчик 1С в компанию<br> <strong>СГ</strong><br> Воронеж з/п не указана"},{id:51,theme:"Refuse",header3:"Отказ",text:"16 сентября 2021 Front-end разработчик в международную веб-студию на удаленную работу в компанию<br> <strong>AVALON INNOVATIONS PTY</strong><br> город Брисбен от 150 000 до 250 000 руб. на руки"},{id:52,theme:"Refuse",header3:"Отказ",text:"15 сентября 2021 Стажёр-разработчик React в компанию<br> <strong>ГНИВЦ</strong><br> Москва з/п не указана"},{id:53,theme:"Refuse",header3:"Отказ",text:"15 сентября 2021 Начинающий Frontend разработчик в компанию<br> <strong>Noorsoft</strong><br> Воронеж з/п не указана"},{}],[{id:1,theme:"Freelance",header2:"Фриланс Биржа"},{id:2,theme:"Freelance",header3:"Взять заказы",link:"https://www.fl.ru/",name:"fl.ru"},{id:3,theme:"Freelance",header3:"Взять заказы",link:"https://freelance.ru/",name:"freelance.ru"},{id:4,theme:"Freelance",header3:"Взять заказы",link:"https://freelance.habr.com/",name:"freelance.habr.com"},{id:5,theme:"Freelance",header3:"Взять заказы",link:"https://freelancehunt.com/",name:"freelancehunt.com"},{id:6,theme:"Freelance",header3:"Взять заказы",link:"https://www.freelancejob.ru/",name:"freelancejob.ru"},{id:7,theme:"Freelance",header3:"Взять заказы",link:"https://www.freelancer.com.ru/",name:"freelancer.com.ru"},{id:8,theme:"Freelance",header3:"Взять заказы",link:"https://freten.ru/",name:"freten.ru"},{id:9,theme:"Freelance",header3:"Взять заказы",link:"https://kwork.ru/",name:"kwork.ru"},{id:10,theme:"Freelance",header3:"Взять заказы",link:"https://pchel.net/",name:"pchel.net"},{id:11,theme:"Freelance",header3:"Взять заказы",link:"https://rubrain.com/",name:"rubrain.com"},{id:12,theme:"Freelance",header3:"Взять заказы",link:"https://www.weblancer.net/",name:"weblancer.net"},{id:13,theme:"Freelance",header3:"Взять заказы",link:"https://workspace.ru/freelance/",name:"workspace.ru"},{id:14,theme:"Freelance",header3:"Взять заказы",link:"https://work-zilla.com/",name:"work-zilla.com"},{id:15,theme:"Freelance",header3:"Взять заказы",link:"https://www.upwork.com/",name:"upwork.com"},{id:16,theme:"Freelance",header3:"Взять заказы",link:"https://youdo.com/",name:"youdo.com"},{}],[{id:1,theme:"CV",header2:"Примеры CV в интернете"},{id:2,theme:"CV",header3:"Взять заказы",link:"https://www.fl.ru/",name:"fl.ru"},{id:3,theme:"CV",header3:"Взять заказы",link:"https://freelance.ru/",name:"freelance.ru"},{}]];function Tr(e){for(var t=[],r=function(r){if(!e[r].link&&!e[r].text&&!e[r].details)return"continue";var i=document.createElement("li"),a="";e[r].link&&e[r].name&&(a='<a href="'.concat(e[r].link,'">').concat(e[r].name,"</a>"));var o="";e[r].text&&(o=a?"<div>".concat(e[r].text,"</div>"):"".concat(e[r].text));var l="";e[r].details&&e[r].summary&&(l="<details><summary>".concat(e[r].summary,"</summary>").concat(e[r].details,"</details>")),i.innerHTML=a+o+l,t.push(i)},i=0;i<e.length;i++)r(i);var a=document.createElement("ol");return a.append.apply(a,t),a}function _r(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return Cr(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Cr(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var i=0,a=function(){};return{s:a,n:function(){return i>=e.length?{done:!0}:{done:!1,value:e[i++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,l=!0,n=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return l=e.done,e},e:function(e){n=!0,o=e},f:function(){try{l||null==r.return||r.return()}finally{if(n)throw o}}}}function Cr(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,i=new Array(t);r<t;r++)i[r]=e[r];return i}var Vr=function(){var e,t=(e=[]).concat.apply(e,xr),r={};return t.forEach((function(e){e.theme&&!(e.theme in r)&&(r[e.theme]=[]),e.header2&&!(e.header2 in r[e.theme])&&(r[e.theme][e.header2]=[]),e.header3&&!(e.header3 in r[e.theme])&&(r[e.theme][e.header3]=[]),e.theme&&e.header3&&r[e.theme][e.header3].push(e)})),r}(),jr=["Postcross","Interview"];r(317);var Nr,Pr=(Nr=[]).concat.apply(Nr,[[{id:1,year:2014,date:"",category:"code",theme:"html css",title:"HTML PRO. Профессиональная вёрстка",author:"Андрей Алехин",name:"",numberLessons:"8 уроков",time_h_m:[16,0],size:"2.7 gb",isLearned:!1,dateLearned:""},{id:2,year:2015,date:"",category:"code",theme:"html css",title:"HTML_CSS. Основы создания сайтов",author:"Юрий Жаворонок",name:"GeekBrains",numberLessons:"8 уроков",time_h_m:[19,42],size:"1.2 gb",isLearned:!0,dateLearned:"2021-05-20 чт"},{id:3,year:2015,date:"",category:"code",theme:"html css",title:"Видео курс HTML CSS",author:"Александр Петрик",name:"ITVDN",numberLessons:"8 уроков",time_h_m:[9,30],size:"6.4 gb",isLearned:!0,dateLearned:"2021-06-05 сб"},{id:4,year:2015,date:"",category:"code",theme:"html css",title:"HOW TO HTML&CSS",author:"Сергей",name:"ITVDN",numberLessons:"",time_h_m:[1,43],size:"411 mb",isLearned:!1,dateLearned:""},{id:5,year:2015,date:"",category:"code",theme:"html css",title:"HTML5 Структура, Синтаксис, и Семантика",author:"James Williamson",name:"Lynda.com",numberLessons:"",time_h_m:[3,34],size:"0.5 gb",isLearned:!1,dateLearned:""},{id:6,year:2015,date:"",category:"code",theme:"html css",title:"HTML&CSS",author:"",name:"WebForMySelf",numberLessons:"19 курсов",time_h_m:[0,0],size:"9 gb",isLearned:!0,dateLearned:"2021-07-01 чт"},{id:7,year:2015,date:"",category:"code",theme:"html css",title:"HTML-верстка Инструменты и приемы профессиональной front-end разработки",author:"",name:"Нетология",numberLessons:"22 видео",time_h_m:[37,25],size:"13.7 gb",isLearned:!0,dateLearned:"2021-07-01 чт"},{id:8,year:2016,date:"",category:"code",theme:"html css",title:"Базовый HTML и CSS",author:"",name:"HTML Academy",numberLessons:"",time_h_m:[18,37],size:"9.7 gb",isLearned:!0,dateLearned:"2021-11-22 пн"},{id:9,year:2016,date:"",category:"code",theme:"html css",title:"Продвинутый HTML и CSS",author:"",name:"HTML Academy",numberLessons:"",time_h_m:[18,0],size:"8.5 gb",isLearned:!1,dateLearned:""},{id:10,year:2016,date:"",category:"code",theme:"html css",title:"HTML5 Веб компоненты",author:"Дмитрий Охрименко",name:"ITVDN",numberLessons:"",time_h_m:[2,11],size:"0.6 gb",isLearned:!1,dateLearned:""},{id:11,year:2016,date:"",category:"code",theme:"html css",title:"HTML5 и CSS3 с Нуля до Профи",author:"Андрей Бернацкий",name:"WebForMyself",numberLessons:"",time_h_m:[9,9],size:"5 gb",isLearned:!1,dateLearned:""},{id:12,year:2017,date:"",category:"code",theme:"html css",title:"Практический курс по верстке лендинга",author:"Сергей Рубец",name:"ITVDN",numberLessons:"",time_h_m:[8,14],size:"3.7 gb",isLearned:!1,dateLearned:""},{id:13,year:2018,date:"2018.06.09",category:"code",theme:"html css",title:"Создание сайта на html. Часть 1",author:"",name:"Evgen's Gang",numberLessons:"Евгений Николаев",time_h_m:[0,20],size:"46 mb",isLearned:!0,dateLearned:"2023.07.25 вт"},{id:13,year:2018,date:"2018.06.14",category:"code",theme:"html css",title:"Создание сайта на html. Часть 2",author:"Евгений Николаев",name:"Evgen's Gang",numberLessons:"",time_h_m:[0,22],size:"75 mb",isLearned:!0,dateLearned:"2023.07.25 вт"},{id:13,year:2018,date:"",category:"code",theme:"html css",title:"Профессиональный HTML и CSS Уровень 1",author:"",name:"HTML Academy",numberLessons:"",time_h_m:[30,59],size:"11.6 gb",isLearned:!1,dateLearned:""},{id:14,year:2018,date:"",category:"code",theme:"html css",title:"Профессиональный HTML и CSS Уровень 2",author:"",name:"HTML Academy",numberLessons:"",time_h_m:[26,44],size:"14.1 gb",isLearned:!1,dateLearned:""},{id:15,year:2018,date:"",category:"code",theme:"html css",title:"Практический HTML",author:"Александр Лущенко",name:"itgid",numberLessons:"",time_h_m:[17,20],size:"4 gb",isLearned:!1,dateLearned:""},{id:16,year:2018,date:"",category:"code",theme:"html css",title:"HTML5 И CSS3 STARTER",author:"Владимир Виноградов",name:"ITVDN",numberLessons:"",time_h_m:[8,0],size:"2 gb",isLearned:!1,dateLearned:""},{id:17,year:2018,date:"",category:"code",theme:"html css",title:"HTML5 и CSS3 Essential",author:"Дмитрий Охрименко",name:"ITVDN",numberLessons:"",time_h_m:[11,49],size:"2.9 gb",isLearned:!1,dateLearned:""},{id:18,year:2018,date:"",category:"code",theme:"html css",title:"HTML5 & CSS3 Advanced",author:"Сергей Патёха",name:"ITVDN",numberLessons:"",time_h_m:[7,45],size:"1.6 gb",isLearned:!1,dateLearned:""},{id:19,year:2018,date:"",category:"code",theme:"html css",title:"CSS GRID",author:"Владимир Сабанцев",name:"loftschool",numberLessons:"",time_h_m:[1,16],size:"534 mb",isLearned:!1,dateLearned:""},{id:20,year:2018,date:"",category:"code",theme:"html css",title:"Курс по CSS3",author:"Денис Булыга",name:"WebForMySelf",numberLessons:"",time_h_m:[4,58],size:"1.3 gb",isLearned:!1,dateLearned:""},{id:21,year:2018,date:"",category:"code",theme:"html css",title:"Познавая вёрстку HTML, CSS и кое что ещё",author:"Глеб Чубаренко",name:"Udemy",numberLessons:"",time_h_m:[17,55],size:"9.6 gb",isLearned:!1,dateLearned:""},{id:22,year:2018,date:"",category:"code",theme:"html css",title:"Изучите HTML и CSS за несколько часов",author:"Сергей Никонов",name:"Udemy",numberLessons:"",time_h_m:[4,0],size:"2.3 gb",isLearned:!1,dateLearned:""},{id:24,year:2019,date:"",category:"code",theme:"html css",title:"Базовый и Продвинутый курс для верстальщиков",author:"Анна Блок",name:"Типичный верстальщик",numberLessons:"",time_h_m:[14,30],size:"2.4 gb",isLearned:!1,dateLearned:""},{id:23,year:2019,date:"",category:"code",theme:"html css",title:"HTML и CSS для начинающих 01. Основы HTML и CSS",author:"Дмитрий Валак",name:"Brainscloud",numberLessons:"43 урока",time_h_m:[10,20],size:"3.5 gb",isLearned:!0,dateLearned:"2021-05-04 вт"},{id:24,year:2019,date:"",category:"code",theme:"html css",title:"HTML и CSS для начинающих 02. Верстка адаптивного сайта с нуля",author:"Дмитрий Валак",name:"Brainscloud",numberLessons:"16 уроков",time_h_m:[2,49],size:"0.9 gb",isLearned:!0,dateLearned:"2021-05-22 сб"},{id:25,year:2019,date:"",category:"code",theme:"html css",title:"Быстрая и комфортная верстка сайтов",author:"Дмитрий Валак",name:"Brainscloud",numberLessons:"6 уроков",time_h_m:[7,35],size:"2 gb",isLearned:!0,dateLearned:"2021-10-14 чт"},{id:26,year:2019,date:"",category:"code",theme:"html css",title:"Верстка - быстрый старт",author:"Владимир Сабанцев",name:"loftschool",numberLessons:"",time_h_m:[13,5],size:"20 gb",isLearned:!1,dateLearned:""},{id:26,year:2019,date:"2019-11-04",category:"code",theme:"html css",title:"CSS Grid. Полный курс",author:"Евгений Ковальчук",name:"webDev",numberLessons:"",time_h_m:[0,57],size:"82 mb",isLearned:!0,dateLearned:"2023-08-19 сб"},{id:27,year:2019,date:"",category:"code",theme:"html css",title:"Технология CSS Grid",author:"Денис Булыга",name:"WebForMySelf",numberLessons:"",time_h_m:[13,5],size:"20 gb",isLearned:!1,dateLearned:""},{id:28,year:2019,date:"",category:"code",theme:"html css",title:"Марафон Flexbox CSS",author:"Анна Блок",name:"",numberLessons:"",time_h_m:[0,0],size:"180 mb",isLearned:!1,dateLearned:""},{id:29,year:2019,date:"",category:"code",theme:"html css",title:"Продвинутая вёрстка",author:"Дмитрий Лаврик",name:"",numberLessons:"",time_h_m:[13,15],size:"3.1 gb",isLearned:!1,dateLearned:""},{id:30,year:2019,date:"",category:"code",theme:"html css",title:"HTML5, CSS3, FlexBox верстка сайтов с нуля",author:"Кирил Друцко",name:"",numberLessons:"45 уроков",time_h_m:[7,46],size:"4.6 gb",isLearned:!1,dateLearned:""},{id:31,year:2019,date:"",category:"code",theme:"html css",title:"Введение в HTML5 и CSS3",author:"Никита Шультайс",name:"",numberLessons:"",time_h_m:[6,26],size:"6.2 gb",isLearned:!1,dateLearned:""},{id:32,year:2019,date:"",category:"code",theme:"html css",title:"CSS Как анимировать интерфейсы",author:"Роман Трухтанов",name:"",numberLessons:"",time_h_m:[0,0],size:"957 mb",isLearned:!1,dateLearned:""},{id:33,year:2020,date:"",category:"code",theme:"html css",title:"Профессиональный HTML и CSS Уровень 1",author:"",name:"HTML Academy",numberLessons:"",time_h_m:[23,47],size:"11.1 gb",isLearned:!1,dateLearned:""},{id:33,year:2020,date:"2020-09-10",category:"code",theme:"html css",title:"Основы HTML5. Полный курс",author:"Евгений Ковальчук",name:"webDev",numberLessons:"",time_h_m:[1,58],size:"200 mb",isLearned:!0,dateLearned:"2023-08-16 ср"},{id:27,year:2020,date:"",category:"code",theme:"html css",title:"Компетенция Верстальщик",author:"Михаил Непомнящий",name:"Udemy",numberLessons:"",time_h_m:[20,58],size:"10.2 gb",isLearned:!1,dateLearned:""},{id:34,year:2020,date:"",category:"code",theme:"html css",title:"Верстка сайта на FlexBox CSS",author:"Виталий Мазер",name:"ITVDN",numberLessons:"",time_h_m:[1,30],size:"793 mb",isLearned:!1,dateLearned:""},{id:35,year:2020,date:"",category:"code",theme:"html css",title:"Видеокурс CSS GRID от Loftschool",author:"",name:"loftschool",numberLessons:"11 уроков",time_h_m:[1,16],size:"534 mb",isLearned:!0,dateLearned:"2022-12-22 чт"},{id:36,year:2020,date:"",category:"code",theme:"html css",title:"HTML + CSS",author:"",name:"selfedu",numberLessons:"10 уроков",time_h_m:[2,25],size:"357 mb",isLearned:!0,dateLearned:"2022-12-22 чт"},{id:37,year:2020,date:"",category:"code",theme:"html css",title:"Верстка сайта транспортной компании",author:"Дмитрий Валак",name:"BrainsCloud",numberLessons:"",time_h_m:[12,0],size:"5.7 gb",isLearned:!1,dateLearned:""},{id:37,year:2020,date:"2020-12-04",category:"code",theme:"html css",title:"HTML с нуля за 15 минут",author:"Валерий Стрелец",name:"",numberLessons:"",time_h_m:[0,20],size:"120 mb",isLearned:!0,dateLearned:"2023.07.25 вт"},{id:37,year:2020,date:"2020-06-07",category:"code",theme:"html css",title:"HTML для начинающих за 33 минуты",author:"Дмитрий Колотильщиков",name:"",numberLessons:"",time_h_m:[0,33],size:"115 mb",isLearned:!0,dateLearned:"2023.07.25 вт"},{id:37,year:2020,date:"2020-06-19",category:"code",theme:"html css",title:"CSS для начинающих + практика за 24 минуты",author:"Дмитрий Колотильщиков",name:"",numberLessons:"",time_h_m:[0,24],size:"91 mb",isLearned:!0,dateLearned:"2023.07.25 вт"},{id:38,year:2021,date:"",category:"code",theme:"html css",title:"Профессиональный HTML и CSS, уровень 1",author:"",name:"HTML_Academy",numberLessons:"11 уроков",time_h_m:[0,0],size:"10.3 gb",isLearned:!1,dateLearned:""},{id:39,year:2021,date:"",category:"code",theme:"html css",title:"HTML для JavaScript разработчиков",author:"",name:"ItGid",numberLessons:"",time_h_m:[6,20],size:"1.1 gb",isLearned:!1,dateLearned:""},{id:40,year:2021,date:"",category:"code",theme:"html css",title:"Лучший курс для изучения Html+Css с нуля до профи",author:"Данил",name:"Skills Factory",numberLessons:"",time_h_m:[0,0],size:"2.6 gb",isLearned:!1,dateLearned:""},{id:40,year:2021,date:"2021-09-16",category:"code",theme:"html css",title:"Основы CSS3. Полный курс",author:"Евгений Ковальчук",name:"webDev",numberLessons:"",time_h_m:[3,20],size:"390 mb",isLearned:!0,dateLearned:"2023-08-18 пт"},{id:40,year:2021,date:"2021-09-23",category:"code",theme:"html css",title:"CSS Flexbox. Полный курс",author:"Евгений Ковальчук",name:"webDev",numberLessons:"",time_h_m:[0,59],size:"84 mb",isLearned:!0,dateLearned:"2023-08-20 вс"},{id:41,year:2021,date:"",category:"code",theme:"html css",title:"Идеальная вёрстка под Google",author:"Дмитрий Лаврик",name:"",numberLessons:"4 урока",time_h_m:[9,16],size:"2.6 gb",isLearned:!1,dateLearned:""},{id:42,year:2021,date:"",category:"code",theme:"html css",title:"Классическая вёрстка",author:"Дмитрий Лаврик",name:"",numberLessons:"8 уроков",time_h_m:[0,0],size:"5.4 gb",isLearned:!1,dateLearned:""},{id:43,year:2021,date:"",category:"code",theme:"html css",title:"Курс по верстке",author:"Евгений Андриканич",name:"",numberLessons:"",time_h_m:[0,0],size:"38 gb",isLearned:!1,dateLearned:""},{id:44,year:2021,date:"",category:"code",theme:"html css",title:"WM-VIDEO Основы верстки сайта",author:"Владимир Языков",name:"Нетология",numberLessons:"",time_h_m:[0,0],size:"5.8 gb",isLearned:!1,dateLearned:""},{id:37,year:2021,date:"2021-01-04",category:"code",theme:"html css",title:"CSS с нуля за 30 минут",author:"Валерий Стрелец",name:"",numberLessons:"",time_h_m:[0,33],size:"136 mb",isLearned:!0,dateLearned:"2023.07.25 вт"},{id:45,year:2022,date:"",category:"code",theme:"html css",title:"Верстка и создание веб сайтов с нуля до результата",author:"",name:"Udemy",numberLessons:"9 уроков",time_h_m:[0,0],size:"4.3 gb",isLearned:!1,dateLearned:""},{id:46,year:2022,date:"",category:"code",theme:"html css",title:"Компетенция Верстальщик HTML, CSS, JavaScript",author:"",name:"Udemy",numberLessons:"10 уроков",time_h_m:[0,0],size:"13.5 gb",isLearned:!1,dateLearned:""},{id:47,year:2022,date:"",category:"code",theme:"html css",title:"Эффективный курс по HTML и CSS",author:"Самвел Погосов",name:"",numberLessons:"",time_h_m:[0,0],size:"9.4 gb",isLearned:!1,dateLearned:""},{id:48,year:2022,date:"",category:"code",theme:"html css",title:"Верстка и создание веб сайтов - Продвинутый уровень",author:"",name:"",numberLessons:"",time_h_m:[0,0],size:"11 gb",isLearned:!1,dateLearned:""},{id:49,year:2023,date:"",category:"code",theme:"html css",title:"HTML & CSS Full Course - Beginner to Pro",author:"Simon",name:"SuperSimpleDev",numberLessons:"",time_h_m:[6,31],size:"795 mb",isLearned:!1,dateLearned:"2023-06-19 пн"},{id:50,year:2023,date:"2023-01-10",category:"code",theme:"html css",title:"TailwindCSS. Полный курс",author:"Евгений Ковальчук",name:"webDev",numberLessons:"",time_h_m:[1,55],size:"368 mb",isLearned:!0,dateLearned:"2023-08-29 вт"},{}],[{id:1,year:2013,date:"",category:"code",theme:"javascript",title:"Язык программирования JavaScript",author:"Рахим Давлеткалиев",name:"Hexlet",numberLessons:"7 уроков",time_h_m:[4,42],size:"1.9 gb",isLearned:!0,dateLearned:"2021-05-27 чт"},{id:2,year:2015,date:"",category:"code",theme:"javascript",title:"JavaScript Базовый курс",author:"Дмитрий Охрименко",name:"ITVDN",numberLessons:"5 уроков",time_h_m:[7,22],size:"1.7 gb",isLearned:!0,dateLearned:"2023-12-04 пн"},{id:3,year:2015,date:"",category:"code",theme:"javascript",title:"JavaScript Шаблоны",author:"Дмитрий Охрименко",name:"ITVDN",numberLessons:"5 уроков",time_h_m:[5,0],size:"1.155 gb",isLearned:!0,dateLearned:"2023-12-05 вт"},{id:4,year:2016,date:"",category:"code",theme:"javascript",title:"ECMAScript6",author:"",name:"CodeDojo",numberLessons:"18 уроков",time_h_m:[4,28],size:"0.5 gb",isLearned:!0,dateLearned:"2022-09-16 пт"},{id:5,year:2016,date:"",category:"code",theme:"javascript",title:"JavaScript-разработка. Создаем интерактивные веб-страницы",author:"",name:"Нетология",numberLessons:"",time_h_m:[32,55],size:"10.6 gb",isLearned:!1,dateLearned:""},{id:6,year:2016,date:"",category:"code",theme:"javascript",title:"How to JavaScript",author:"Валерия",name:"ITVDN",numberLessons:"41 урок",time_h_m:[2,55],size:"0.5 gb",isLearned:!0,dateLearned:"2022-09-24 сб"},{id:7,year:2016,date:"",category:"code",theme:"javascript",title:"Комплексное обучение JavaScript",author:"Сергей Мелюков",name:"LoftSchool",numberLessons:"",time_h_m:[38,0],size:"6.8 gb",isLearned:!0,dateLearned:"2022-06-09 чт"},{id:8,year:2016,date:"",category:"code",theme:"javascript",title:"Пoнятный JavaScript",author:"Евгений Калюжный",name:"jsexpert",numberLessons:"",time_h_m:[31,9],size:"3.9 gb",isLearned:!0,dateLearned:"2022-11-25 пт"},{id:9,year:2017,date:"",category:"code",theme:"javascript",title:"ECMAScript 6",author:"Сергей Рубец",name:"ITVDN",numberLessons:"9 уроков",time_h_m:[6,15],size:"2.1 gb",isLearned:!0,dateLearned:"2022-10-09 вс"},{id:10,year:2017,date:"",category:"code",theme:"javascript",title:"Курс JavaScript DOM интерфейсы",author:"Илья Кантор",name:"javascript.ru",numberLessons:"",time_h_m:[40,0],size:"7.3 gb",isLearned:!0,dateLearned:"2023-05-26 пт"},{id:11,year:2017,date:"",category:"code",theme:"javascript",title:"JavaScript",author:"Евгений Ковальчук",name:"webDev",numberLessons:"15",time_h_m:[1,15],size:"525 mb",isLearned:!0,dateLearned:"2023-08-25 пт"},{id:11,year:2017,date:"",category:"code",theme:"javascript",title:"JavaScript",author:"",name:"WebForMySelf",numberLessons:"",time_h_m:[0,0],size:"13 gb",isLearned:!1,dateLearned:""},{id:12,year:2017,date:"",category:"code",theme:"javascript",title:"JavaScript. Интенсивный курс для верстальщиков",author:"Дмитрий Лаврик",name:"",numberLessons:"",time_h_m:[16,30],size:"3.1 gb",isLearned:!0,dateLearned:"2023-10-30 пн"},{id:13,year:2017,date:"",category:"code",theme:"javascript",title:"Javascript. Только для участников основного курса",author:"Дмитрий Лаврик",name:"",numberLessons:"4 урока",time_h_m:[8,37],size:"1.2 gb",isLearned:!0,dateLearned:"2023-11-15 ср"},{id:14,year:2017,date:"",category:"code",theme:"javascript",title:"Понятный JavaScript (Beginner)",author:"Евгений Калюжный",name:"jsexpert",numberLessons:"10 уроков",time_h_m:[9,9],size:"2.8 gb",isLearned:!0,dateLearned:"2023-05-29 пн"},{id:15,year:2018,date:"",category:"code",theme:"javascript",title:"Профессиональный JavaScript уровень 1",author:"Игорь Алексеенко",name:"HTML Academy",numberLessons:"10",time_h_m:[22,48],size:"10 gb",isLearned:!0,dateLearned:"2023-11-29 ср"},{id:16,year:2018,date:"",category:"code",theme:"javascript",title:"Профессиональный JavaScript уровень 2",author:"",name:"HTML Academy",numberLessons:"",time_h_m:[18,21],size:"7 gb",isLearned:!0,dateLearned:"2023-12-28 чт"},{id:16,year:2018,date:"",category:"code",theme:"javascript",title:"Javascript для профессионалов (Advanced)",author:"Дмитрий Охрименко",name:"ITVDN",numberLessons:"10 уроков",time_h_m:[12,2],size:"3 gb",isLearned:!0,dateLearned:"2023-12-12 вт"},{id:16,year:2018,date:"",category:"code",theme:"javascript",title:"JavaScript Расширенные возможности",author:"Сергей Патеха",name:"ITVDN",numberLessons:"8 уроков",time_h_m:[6,46],size:"1.9 gb",isLearned:!0,dateLearned:"2023-12-22 пт"},{id:17,year:2018,date:"",category:"code",theme:"javascript",title:"Понятный JavaScript (Advanced)",author:"Евгений Калюжный",name:"jsexpert",numberLessons:"",time_h_m:[12,27],size:"3.5 gb",isLearned:!0,dateLearned:"2023-07-21 пт"},{id:18,year:2018,date:"",category:"code",theme:"javascript",title:"Понятный JavaScript (Middle)",author:"Евгений Калюжный",name:"jsexpert",numberLessons:"",time_h_m:[14,29],size:"3.7 gb",isLearned:!0,dateLearned:"2023-07-12 ср"},{id:19,year:2018,date:"",category:"code",theme:"javascript",title:"Комплексное обучение JavaScript",author:"",name:"loftschool",numberLessons:"",time_h_m:[38,0],size:"5.7 gb",isLearned:!1,dateLearned:""},{id:20,year:2018,date:"",category:"code",theme:"javascript",title:"Javascript. Интенсивный курс для программистов",author:"Дмитрий Лаврик",name:"",numberLessons:"",time_h_m:[21,54],size:"4.4 gb",isLearned:!1,dateLearned:""},{id:21,year:2018,date:"",category:"code",theme:"javascript",title:"Уроки EcmaScript 6",author:"Михаил Непомнящий",name:"Udemy",numberLessons:"15 уроков",time_h_m:[1,55],size:"360 mb",isLearned:!0,dateLearned:"2022-01-24 пн"},{id:22,year:2018,date:"2018-04-10",category:"code",theme:"javascript",title:"Изучаем JavaScript за 90 минут",author:"Александр Пауков",name:"",numberLessons:"1 урок",time_h_m:[1,25],size:"109 mb",isLearned:!0,dateLearned:"2022-12-20 вт"},{id:23,year:2019,date:"",category:"code",theme:"javascript",title:"Профессиональный JavaScript Уровень 3",author:"",name:"HTML Academy",numberLessons:"",time_h_m:[18,46],size:"9.6 gb",isLearned:!1,dateLearned:""},{id:24,year:2019,date:"",category:"code",theme:"javascript",title:"Практический JavaScript",author:"Александр Лущенко",name:"itgid",numberLessons:"",time_h_m:[19,12],size:"10 gb",isLearned:!1,dateLearned:""},{id:25,year:2019,date:"",category:"code",theme:"javascript",title:"Введение в веб-разработку JavaScript",author:"",name:"Lectrum",numberLessons:"",time_h_m:[17,5],size:"2.2 gb",isLearned:!1,dateLearned:""},{id:26,year:2019,date:"",category:"code",theme:"javascript",title:"JavaScript для начинающих программистов",author:"Иван Афонченко",name:"OTUS",numberLessons:"",time_h_m:[6,27],size:"3.2 gb",isLearned:!1,dateLearned:""},{id:27,year:2019,date:"",category:"code",theme:"javascript",title:"Создание HTML5 игр на JavaScript и Canvas",author:"Александр Болотников",name:"Udemy",numberLessons:"",time_h_m:[8,54],size:"4.4 gb",isLearned:!1,dateLearned:""},{id:28,year:2019,date:"",category:"code",theme:"javascript",title:"Современный JavaScript с нуля на реальных проектах",author:"Денис Мещеряков",name:"Udemy",numberLessons:"",time_h_m:[31,42],size:"7.7 gb",isLearned:!1,dateLearned:""},{id:29,year:2019,date:"",category:"code",theme:"javascript",title:"JavaScript. Полное руководство",author:"Владилен Минин",name:"WebForMySelf",numberLessons:"",time_h_m:[32,13],size:"8.2 gb",isLearned:!0,dateLearned:"2022-03-05 сб"},{id:30,year:2019,date:"",category:"code",theme:"javascript",title:"Премиум курс по EcmaScript 6",author:"Владилен Минин",name:"",numberLessons:"17 уроков",time_h_m:[3,9],size:"382 mb",isLearned:!0,dateLearned:"2022-10-29 сб"},{id:31,year:2020,date:"",category:"code",theme:"javascript",title:"JavaScript. Архитектура клиентских приложений Уровень 2",author:"",name:"HTML Academy",numberLessons:"",time_h_m:[18,42],size:"10.9 gb",isLearned:!1,dateLearned:""},{id:32,year:2020,date:"",category:"code",theme:"javascript",title:"JavaScript Developer. Basic",author:"Василий Ванчук",name:"otus",numberLessons:"",time_h_m:[20,0],size:"4.3 gb",isLearned:!1,dateLearned:""},{id:33,year:2020,date:"",category:"code",theme:"javascript",title:"Азбука JavaScript",author:"Алексей Неуймин",name:"Udemy",numberLessons:"",time_h_m:[6,37],size:"1.9 gb",isLearned:!1,dateLearned:""},{id:34,year:2020,date:"",category:"code",theme:"javascript",title:"Практический JavaScript",author:"Иван Петриченко",name:"Udemy",numberLessons:"",time_h_m:[22,42],size:"11.7 gb",isLearned:!1,dateLearned:""},{id:35,year:2020,date:"2020-05-05",category:"code",theme:"javascript",title:"JavaScript Основы для Начинающих - Полный Курс за 6 часов",author:"Владилен Минин",name:"",numberLessons:"",time_h_m:[5,47],size:"618 mb",isLearned:!0,dateLearned:"2021-09-21 вт"},{id:36,year:2020,date:"",category:"code",theme:"javascript",title:"JavaScript. Стань Senior Frontend",author:"Владилен Минин",name:"Udemy",numberLessons:"",time_h_m:[20,0],size:"15.3 gb",isLearned:!1,dateLearned:""},{id:37,year:2020,date:"",category:"code",theme:"javascript",title:"Сложный JavaScript простым языком",author:"Владилен Минин",name:"",numberLessons:"17 уроков",time_h_m:[5,55],size:"635 mb",isLearned:!0,dateLearned:"2022-11-01 вт"},{id:37,year:2020,date:"2020-12-15",category:"code",theme:"javascript",title:"Алгоритмы и структуры данных ПОЛНЫЙ КУРС на JAVASCRIPT",author:"",name:"Ulbi TV",numberLessons:"",time_h_m:[1,0],size:"132 mb",isLearned:!0,dateLearned:"2023-09-05 вт"},{id:11,year:2020,date:"",category:"code",theme:"javascript",title:"JavaScript Паттерны. Полный курс (22 паттерна в 1 видео)",author:"Евгений Ковальчук",name:"webDev",numberLessons:"",time_h_m:[1,42],size:"141 mb",isLearned:!0,dateLearned:"2023-08-26 сб"},{id:11,year:2020,date:"2020-07-16",category:"code",theme:"javascript",title:"ECMAScript 2016-2019. Полный курс (ES7, ES8, ES9)",author:"Евгений Ковальчук",name:"webDev",numberLessons:"",time_h_m:[0,49],size:"97 mb",isLearned:!0,dateLearned:"2023-08-28 пн"},{id:38,year:2021,date:"",category:"code",theme:"javascript",title:"JavaScript работа с DOM",author:"",name:"selfedu",numberLessons:"22 урока",time_h_m:[3,28],size:"452 mb",isLearned:!0,dateLearned:"2022-12-27 вт"},{id:39,year:2021,date:"",category:"code",theme:"javascript",title:"Programming and Children",author:"",name:"Programming and Children",numberLessons:"73 урока",time_h_m:[11,52],size:"1.3 gb",isLearned:!0,dateLearned:"2023-02-09 чт"},{id:40,year:2021,date:"",category:"code",theme:"javascript",title:"Уроки JavaScript - объекты и классы (ООП)",author:"",name:"selfedu",numberLessons:"9 уроков",time_h_m:[1,50],size:"219 mb",isLearned:!0,dateLearned:"2022-03-11 пт"},{id:11,year:2021,date:"",category:"code",theme:"javascript",title:"ECMAScript 2015. Полный курс (ES6)",author:"Евгений Ковальчук",name:"webDev",numberLessons:"",time_h_m:[2,8],size:"160 mb",isLearned:!0,dateLearned:"2023-08-24 чт"},{id:41,year:2021,date:"",category:"code",theme:"javascript",title:"JavaScript на коленке",author:"Александр Дегтярев",name:"",numberLessons:"",time_h_m:[0,0],size:"7.1 gb",isLearned:!1,dateLearned:""},{id:42,year:2021,date:"",category:"code",theme:"javascript",title:"ES6",author:"Василий Муравьев",name:"",numberLessons:"13 уроков",time_h_m:[2,49],size:"377 mb",isLearned:!0,dateLearned:"2022-10-26 ср"},{id:43,year:2021,date:"",category:"code",theme:"javascript",title:"Уроки Javascript",author:"Василий Муравьев",name:"",numberLessons:"12 уроков",time_h_m:[3,17],size:"471 mb",isLearned:!0,dateLearned:"2022-10-28 пт"},{id:44,year:2021,date:"",category:"code",theme:"javascript",title:"Ускоренный курс по современному Javascript",author:"Юра Аллахвердов",name:"Udemy",numberLessons:"",time_h_m:[10,0],size:"1.1 gb",isLearned:!1,dateLearned:""},{id:45,year:2023,date:"",category:"code",theme:"javascript",title:"JavaScript Full Course - Beginner to Pro - Part 1 Lessons 1-12",author:"Simon",name:"SuperSimpleDev",numberLessons:"12",time_h_m:[11,57],size:"1.5 gb",isLearned:!0,dateLearned:"2023-06-08 чт"},{id:46,year:2023,date:"",category:"code",theme:"javascript",title:"JavaScript Full Course - Beginner to Pro - Part 2 Lesson 13",author:"Simon",name:"SuperSimpleDev",numberLessons:"",time_h_m:[1,28],size:"172 mb",isLearned:!0,dateLearned:"2023-06-13 вт"},{id:46,year:2023,date:"2023-02-13",category:"code",theme:"javascript",title:"Event Loop от А до Я. Архитектура браузера и Node JS. Движки и рендер. Самое подробное видео",author:"",name:"Ulbi TV",numberLessons:"",time_h_m:[1,14],size:"90 mb",isLearned:!0,dateLearned:"2023-09-05 вт"},{id:47,year:2023,date:"2023-06-27",category:"code",theme:"javascript",title:"JavaScript c Нуля - Курс для начинающих с практикой",author:"Владилен Минин",name:"",numberLessons:"",time_h_m:[6,55],size:"612 mb",isLearned:!0,dateLearned:"2023-07-24 пн"},{}],[{id:1,year:2017,date:"",category:"code",theme:"typescript",title:"TypeScript - типизированный JavaScript и его применение в Angular 2",author:"",name:"LuxoftTrainingCenter",numberLessons:"",time_h_m:[1,33],size:"227 mb",isLearned:!0,dateLearned:"2023-08-31 чт"},{id:2,year:2018,date:"",category:"code",theme:"typescript",title:"Эволюция TypeScript_ всё чудесатее и чудесатее",author:"Андрей Старовойт",name:"HolyJS",numberLessons:"",time_h_m:[0,58],size:"177 mb",isLearned:!0,dateLearned:"2023-09-01 пт"},{id:3,year:2019,date:"2019-09-05",category:"code",theme:"typescript",title:"TypeScript - Быстрый Курс за 70 минут [2020]",author:"Владилен Минин",name:"",numberLessons:"",time_h_m:[1,7],size:"109 mb",isLearned:!0,dateLearned:"2023-08-31 чт"},{id:4,year:2019,date:"2019-12-12",category:"code",theme:"typescript",title:"Продвинутый TypeScript. Декораторы, Компилятор, Generic Types, Namespaces",author:"Владилен Минин",name:"",numberLessons:"",time_h_m:[2,14],size:"240 mb",isLearned:!0,dateLearned:"2023-08-31 чт"},{id:5,year:2020,date:"",category:"code",theme:"typescript",title:"TypeScript",author:"",name:"codeBurger",numberLessons:"20",time_h_m:[4,22],size:"623 mb",isLearned:!0,dateLearned:"2023-09-06 ср"},{id:6,year:2020,date:"",category:"code",theme:"typescript",title:"Продвинутый TypeScript _ Михаил Башуров (Syncro)",author:"Михаил Башуров",name:"Frontend Channel",numberLessons:"",time_h_m:[0,54],size:"276 mb",isLearned:!0,dateLearned:"2023-09-04 пн"},{id:7,year:2020,date:"",category:"code",theme:"typescript",title:"TypeScript Fundamentals Updated",author:"Дмитрий Охрименко",name:"ITVDN",numberLessons:"4",time_h_m:[5,17],size:"1.1 gb",isLearned:!0,dateLearned:"2023-09-12 вт"},{id:8,year:2020,date:"2020-02-09",category:"code",theme:"typescript",title:"03 - React + TypeScript за 30 минут_ React JS - Путь Самурая 2.0",author:"Дмитрий Кузюбердин",name:"it-kamasutra",numberLessons:"",time_h_m:[0,40],size:"93 mb",isLearned:!0,dateLearned:"2023-08-29 вт"},{id:9,year:2020,date:"",category:"code",theme:"typescript",title:"Интенсив по TypeScript",author:"Игорь Непипенко",name:"javascript.ru",numberLessons:"",time_h_m:[10,36],size:"853 mb",isLearned:!0,dateLearned:"2023-09-13 ср"},{id:10,year:2020,date:"",category:"code",theme:"typescript",title:"TypeScript",author:"",name:"Kamil Abzalov",numberLessons:"",time_h_m:[2,37],size:"304 mb",isLearned:!0,dateLearned:"2023-09-18 пн"},{id:10,year:2020,date:"",category:"code",theme:"typescript",title:"Видеокурс по TypeScript",author:"",name:"Lectrum",numberLessons:"",time_h_m:[13,45],size:"2.1 gb",isLearned:!0,dateLearned:"2023-09-26 вт"},{id:11,year:2020,date:"2020-11-04",category:"code",theme:"typescript",title:"TypeScript. Полный курс",author:"Евгений Ковальчук",name:"webDev",numberLessons:"",time_h_m:[1,20],size:"206 mb",isLearned:!0,dateLearned:"2023-08-31 чт"},{id:11,year:2020,date:"2020-11-11",category:"code",theme:"typescript",title:"TypeScript & React. Полный курс",author:"Евгений Ковальчук",name:"webDev",numberLessons:"",time_h_m:[1,13],size:"170 mb",isLearned:!0,dateLearned:"2023-09-07 чт"},{id:11,year:2020,date:"",category:"code",theme:"typescript",title:"TypeScript",author:"Максим Гром",name:"Максим Гром",numberLessons:"9",time_h_m:[2,29],size:"357 mb",isLearned:!0,dateLearned:"2023-09-27 ср"},{id:12,year:2021,date:"",category:"code",theme:"typescript",title:"TypeScript за 70 минут  типы данных, интерфейсы, дженерики",author:"",name:"htmllab",numberLessons:"",time_h_m:[1,10],size:"203 mb",isLearned:!0,dateLearned:"2023-09-01 пт"},{id:13,year:2021,date:"2021-10-17",category:"code",theme:"typescript",title:"TypeScript основы. Вводный урок",author:"",name:"itRelax",numberLessons:"",time_h_m:[0,24],size:"30 mb",isLearned:!0,dateLearned:"2023-08-29 вт"},{id:14,year:2021,date:"",category:"code",theme:"typescript",title:"TypeScript _ главное для веб-разработчика в 2021 году",author:"Михаил Исаев",name:"loftblog",numberLessons:"",time_h_m:[0,20],size:"34 mb",isLearned:!0,dateLearned:"2023-09-04 пн"},{id:15,year:2021,date:"",category:"code",theme:"typescript",title:"КУРС ПО TYPESCRIPT. ПЛЮС ПРАКТИКА.",author:"",name:"Shchepotin",numberLessons:"",time_h_m:[0,29],size:"68 mb",isLearned:!0,dateLearned:"2023-09-01 пт"},{id:16,year:2021,date:"",category:"code",theme:"typescript",title:"TypeScript - полное руководство разработчика",author:"Юра Аллахвердов",name:"Udemy",numberLessons:"",time_h_m:[14,18],size:"7.1 gb",isLearned:!1,dateLearned:""},{id:17,year:2021,date:"",category:"code",theme:"typescript",title:"Дженерики в TypeScript с нуля_ Generic, Extends, Дефолтные Параметры + Примеры Использования.",author:"",name:"wise.js",numberLessons:"",time_h_m:[0,26],size:"51 mb",isLearned:!0,dateLearned:"2023-09-04 пн"},{id:18,year:2022,date:"2022-06-08",category:"code",theme:"typescript",title:"#20_ 🍕 React Pizza v2 — Что такое TypeScript и зачем он нужен_",author:"",name:"archakov blog",numberLessons:"",time_h_m:[1,4],size:"120 mb",isLearned:!0,dateLearned:"2023-08-31 чт"},{id:19,year:2022,date:"2022-11-16",category:"code",theme:"typescript",title:"Весь TypeScript за 35 мин",author:"",name:"Джаваскриптизеры",numberLessons:"",time_h_m:[0,35],size:"67 mb",isLearned:!0,dateLearned:"2023-08-30 ср"},{id:20,year:2022,date:"2022-09-06",category:"code",theme:"typescript",title:"TypeScript от А до Я — часть 1_ primitives, objects, array, types, enums, interfaces",author:"Елена Литвинова",name:"Елена Литвинова",numberLessons:"",time_h_m:[0,44],size:"168 mb",isLearned:!0,dateLearned:"2023-08-30 ср"},{id:21,year:2022,date:"2022-09-11",category:"code",theme:"typescript",title:"TypeScript от А до Я — часть 2_ classes, extends, implements, generics, utility types",author:"Елена Литвинова",name:"Елена Литвинова",numberLessons:"",time_h_m:[0,58],size:"180 mb",isLearned:!0,dateLearned:"2023-08-31 чт"},{id:22,year:2022,date:"2022-11-08",category:"code",theme:"typescript",title:"Изучаем TSconfig, TypeScript Config. Часть 1.",author:"Елена Литвинова",name:"Елена Литвинова",numberLessons:"",time_h_m:[0,32],size:"136 mb",isLearned:!0,dateLearned:"2023-09-04 пн"},{id:23,year:2023,date:"2023-04-22",category:"code",theme:"typescript",title:"Полный курс TypeScript за час _ Тайпскрипт для начинающих",author:"Макс",name:"Red Group",numberLessons:"",time_h_m:[1,6],size:"141 mb",isLearned:!0,dateLearned:"2023-08-30 ср"},{id:24,year:2023,date:"2023-03-08",category:"code",theme:"typescript",title:"Изучаем TSconfig, TypeScript Config. Часть 2. — compilerOptions — modules",author:"Елена Литвинова",name:"Елена Литвинова",numberLessons:"",time_h_m:[0,22],size:"120 mb",isLearned:!0,dateLearned:"2023-09-05 вт"},{}],[{id:1,year:2013,date:"",category:"code",theme:"c# .net",title:"Основы программирования на С# 3.0 ядро языка",author:"Владимир Биллиг",name:"ИНТУИТ",numberLessons:"13",time_h_m:[15,56],size:"3.8 gb",isLearned:!0,dateLearned:"2023.10.24 вт"},{id:1,year:2018,date:"",category:"code",theme:"c# .net",title:"Программирование на C# для школьников",author:"Владимир Биллиг",name:"ИНТУИТ",numberLessons:"8",time_h_m:[2,52],size:"1 gb",isLearned:!0,dateLearned:"2023.10.10 вт"},{id:1,year:2018,date:"",category:"code",theme:"c# .net",title:"Фундаментальный курс по основам C# .NET",author:"Юрий Золотарев",name:"",numberLessons:"8",time_h_m:[5,8],size:"2.7 gb",isLearned:!0,dateLearned:"2023.10.21 сб"},{id:2,year:2021,date:"",category:"code",theme:"c# .net",title:"Изучение C# для начинающих",author:"Гоша Дударь",name:"Школа itProger",numberLessons:"26",time_h_m:[6,22],size:"758 mb",isLearned:!0,dateLearned:"2023.10.12 чт"},{id:3,year:2023,date:"",category:"code",theme:"c# .net",title:"Основы C#",author:"",name:"Нуб Кодер",numberLessons:"15",time_h_m:[6,52],size:"736 mb",isLearned:!0,dateLearned:"2023.10.13 пт"},{id:4,year:2023,date:"",category:"code",theme:"c# .net",title:"C# с нуля до профи",author:"Роман Сакутин",name:"Роман Сакутин - GameDev",numberLessons:"",time_h_m:[9,19],size:"1.3 gb",isLearned:!0,dateLearned:"2023.10.17 вт"},{}],[{id:1,year:2017,date:"2017-01-05",category:"code",theme:"pascal",title:"Учим Pascal за 1 час !",author:"",name:"David Hit",numberLessons:"",time_h_m:[1,3],size:"94 mb",isLearned:!0,dateLearned:"2024-02-05 пн"},{}],[{id:1,year:2015,date:"2015-03-23",category:"code",theme:"pug",title:"Jade _ Pug html Шаблонизатор Обзор",author:"",name:"Ros",numberLessons:"1 урок",time_h_m:[1,44],size:"171 mb",isLearned:!0,dateLearned:"2021-11-25 чт"},{id:2,year:2017,date:"2017-05-19",category:"code",theme:"pug",title:"Практический курс по верстке лендинга. Урок 2. Препроцессор PUG",author:"Сергей Рубец",name:"ITVDN",numberLessons:"1 урок",time_h_m:[0,10],size:"16 mb",isLearned:!0,dateLearned:"2021-12-03 пт"},{id:3,year:2019,date:"",category:"code",theme:"pug",title:"Шаблонизатор Pug_jade - современный ускоритель для HTML",author:"Михаил Непомнящий",name:"Udemy",numberLessons:"6 уроков",time_h_m:[1,58],size:"1 gb",isLearned:!0,dateLearned:"2021-11-30 вт"},{id:4,year:2019,date:"2019-03-31",category:"code",theme:"pug",title:"Pug tutorial. Ускорь свою верстку",author:"",name:"FrontCoder",numberLessons:"1 урок",time_h_m:[0,39],size:"60 mb",isLearned:!0,dateLearned:"2021-11-19 пт"},{id:5,year:2019,date:"2019-06-19",category:"code",theme:"pug",title:"Webpack 4 - Полная настройка pug",author:"",name:"Jack Coder",numberLessons:"1 урок",time_h_m:[0,27],size:"47 mb",isLearned:!0,dateLearned:"2021-11-19 пт"},{id:6,year:2019,date:"2019-08-01",category:"code",theme:"pug",title:"Препроцессор html (jade_pug)",author:"Вадим Прокопчук",name:"от 0 до 1",numberLessons:"1 урок",time_h_m:[0,36],size:"93 mb",isLearned:!0,dateLearned:"2021-11-19 пт"},{id:7,year:2019,date:"2019-08-02",category:"code",theme:"pug",title:"HTML шаблонизатор PUG",author:"",name:"Glo Academy",numberLessons:"5 уроков",time_h_m:[0,21],size:"46 mb",isLearned:!0,dateLearned:"2021-12-03 пт"},{id:8,year:2020,date:"2020-10-24",category:"code",theme:"pug",title:"Препроцессор PUG",author:"",name:"MaxGraph",numberLessons:"4 урока",time_h_m:[0,32],size:"72 mb",isLearned:!0,dateLearned:"2021-12-03 пт"},{id:9,year:2021,date:"2021-03-22",category:"code",theme:"pug",title:"HTML БОЛЬШЕ НЕ НУЖЕН! Pug. Полный курс. Часть 1",author:"Петр Радько",name:"",numberLessons:"1 урок",time_h_m:[1,21],size:"145 mb",isLearned:!0,dateLearned:"2021-11-14 вс"},{id:10,year:2021,date:"2021-03-29",category:"code",theme:"pug",title:"HTML БОЛЬШЕ НЕ НУЖЕН! Pug. Полный курс. Часть 2",author:"Петр Радько",name:"",numberLessons:"1 урок",time_h_m:[1,22],size:"182 mb",isLearned:!0,dateLearned:"2021-11-14 вс"},{id:11,year:2021,date:"2021-05-10",category:"code",theme:"pug",title:"УСКОРЬ ВЕРСТКУ сайта в 2 РАЗА Pug",author:"",name:"RED Group",numberLessons:"1 урок",time_h_m:[0,26],size:"88 mb",isLearned:!0,dateLearned:"2021-11-19 пт"},{id:12,year:2021,date:"2021-09-28",category:"code",theme:"pug",title:"Шаблонизатор PUG_JADE для HTML",author:"",name:"beONmax",numberLessons:"7 уроков",time_h_m:[0,45],size:"118 mb",isLearned:!0,dateLearned:"2021-12-03 пт"},{id:13,year:2021,date:"2021-12-26",category:"code",theme:"pug",title:"Шаблонизатор Pug (Jade) — подробное руководство для новичков от А до Я",author:"Заур Магомедов",name:"beONmax",numberLessons:"1 урок",time_h_m:[1,7],size:"162 mb",isLearned:!0,dateLearned:"2022-01-11 пн"},{}],[{id:1,year:2017,date:"",category:"code",theme:"sass",title:"Препроцессоры Sass и Less",author:"Владилен Минин",name:"WebForMySelf",numberLessons:"",time_h_m:[35,0],size:"2.1 gb",isLearned:!1,dateLearned:""},{}],[{id:1,year:2015,date:"",category:"основы",theme:"Программирование",title:"Основы программирования",author:"",name:"CS50 Harvard",numberLessons:"23 урока",time_h_m:[20,42],size:"7.4 gb",isLearned:!0,dateLearned:"2021-06-10 чт"},{id:2,year:2018,date:"",category:"основы",theme:"Программирование",title:"Ликбез будущего программиста",author:"Альберт Степанцев",name:"ProfIT",numberLessons:"6",time_h_m:[7,29],size:"2.3 gb",isLearned:!0,dateLearned:"2023-12-01 пт"},{id:3,year:2022,date:"2022.10.27",category:"основы",theme:"Программирование",title:"Курс компьютерной грамотности для чайников",author:"Елена Бредова",name:"Geek Brains",numberLessons:"",time_h_m:[6,46],size:"1.3 gb",isLearned:!0,dateLearned:"2023-12-06 ср"},{}],[{id:1,year:2012,date:"",category:"основы",theme:"Алгоритмы",title:"Алгоритмы и структуры данных",author:"Александр Куликов",name:"lectorium.tv",numberLessons:"25",time_h_m:[46,50],size:"24 gb",link:"1",isLearned:!1,dateLearned:""},{id:1,year:2013,date:"",category:"основы",theme:"Алгоритмы",title:"Введение в алгоритмы",author:"Иванников",name:"ИНТУИТ",numberLessons:"13",time_h_m:[16,29],size:"2 gb",isLearned:!0,dateLearned:"2023.10.30 пн"},{id:1,year:2019,date:"",category:"основы",theme:"Алгоритмы",title:"Оценка сложности алгоритмов. Нотация Big O",author:"Юрий Петранков",name:"Udemy",numberLessons:"16",time_h_m:[1,56],size:"600 mb",isLearned:!0,dateLearned:"2023.11.01 ср"},{id:1,year:2019,date:"",category:"основы",theme:"Алгоритмы",title:"Бинарное дерево поиска",author:"Юрий Петранков",name:"Udemy",numberLessons:"7",time_h_m:[0,50],size:"295 mb",isLearned:!0,dateLearned:"2023.11.03 пт"},{id:1,year:2020,date:"2020.04.24",category:"основы",theme:"Алгоритмы",title:"08. Алгоритмы – Илья Волков",author:"Илья Волков",name:"YfD",numberLessons:"",time_h_m:[2,10],size:"0 mb",link:'<a href="https://www.youtube.com/watch?v=ECOZDHS5DfE">08. Алгоритмы – Илья Волков</a>',isLearned:!1,dateLearned:""},{id:1,year:2024,date:"2024.01.07",category:"основы",theme:"Алгоритмы",title:"Алгоритмы. База для собесов и жизни",author:"Михаил Киселев",name:"",numberLessons:"",time_h_m:[0,41],size:"98 mb",link:'<a href="https://www.youtube.com/watch?v=_o8DXIRZdCY">Алгоритмы. База для собесов и жизни</a>',isLearned:!0,dateLearned:"2024.01.10 ср"},{}],[{id:1,year:2017,date:"",category:"framework",theme:"angular",title:"Видеокурс по Angular",author:"Евгений Попов",name:"Eugene Popov",numberLessons:"5 уроков",time_h_m:[1,13],size:"146 mb",isLearned:!0,dateLearned:"2022-03-19 сб"},{id:2,year:2017,date:"",category:"framework",theme:"angular",title:"1 Angular CLI",author:"Дмитрий Охрименко",name:"ITVDN",numberLessons:"5 уроков",time_h_m:[1,31],size:"327 mb",isLearned:!0,dateLearned:"2022-03-19 сб"},{id:3,year:2017,date:"",category:"framework",theme:"angular",title:"2 Angular 2 Essential",author:"Дмитрий Охрименко",name:"ITVDN",numberLessons:"7 уроков",time_h_m:[9,46],size:"2.6 gb",isLearned:!1,dateLearned:""},{id:4,year:2017,date:"",category:"framework",theme:"angular",title:"3 Angular 2 Advanced",author:"Дмитрий Охрименко",name:"ITVDN",numberLessons:"5 уроков",time_h_m:[5,9],size:"1.3 gb",isLearned:!1,dateLearned:""},{id:5,year:2017,date:"",category:"framework",theme:"angular",title:"Angular 4 с Нуля до Профи",author:"Владилен Минин",name:"WebForMySelf",numberLessons:"",time_h_m:[30,0],size:"5 gb",isLearned:!1,dateLearned:""},{id:6,year:2018,date:"",category:"framework",theme:"angular",title:"Уроки Angular для начинающих",author:"Гоша Дударь",name:"",numberLessons:"7 уроков",time_h_m:[1,21],size:"156 mb",isLearned:!0,dateLearned:"2022-03-19 сб"},{id:7,year:2018,date:"",category:"framework",theme:"angular",title:"Angular 5",author:"Дмитрий Кузюбердин",name:"",numberLessons:"2 урока",time_h_m:[1,19],size:"235 mb",isLearned:!0,dateLearned:"2022-03-19 сб"},{id:8,year:2018,date:"",category:"framework",theme:"angular",title:"Продвинутый курс по Angular",author:"Степан Суворов",name:"javascript.ru",numberLessons:"",time_h_m:[13,29],size:"4.1 gb",isLearned:!1,dateLearned:""},{id:9,year:2018,date:"",category:"framework",theme:"angular",title:"Angular Component Interaction Tutorial",author:"",name:"Codevolution",numberLessons:"12 уроков",time_h_m:[0,52],size:"97 mb",isLearned:!1,dateLearned:""},{id:10,year:2018,date:"",category:"framework",theme:"angular",title:"Angular",author:"Максим Коноплин",name:"Easy Web",numberLessons:"10 уроков",time_h_m:[1,25],size:"456 mb",isLearned:!1,dateLearned:""},{id:11,year:2018,date:"",category:"framework",theme:"angular",title:"Пятиминутка Angular",author:"Алексей Охрименко",name:"",numberLessons:"13 уроков",time_h_m:[2,8],size:"523 mb",isLearned:!1,dateLearned:""},{id:12,year:2018,date:"",category:"framework",theme:"angular",title:"Введение в Angular. Часть 1 Angular 5",author:"",name:"Как Стать Хорошим Программистом",numberLessons:"13 уроков",time_h_m:[1,28],size:"547 mb",isLearned:!0,dateLearned:"2022-03-28 пн"},{id:13,year:2018,date:"",category:"framework",theme:"angular",title:"Введение в Angular. Часть 2 Angular 6",author:"",name:"Как Стать Хорошим Программистом",numberLessons:"6 уроков",time_h_m:[2,23],size:"850 mb",isLearned:!1,dateLearned:""},{id:14,year:2018,date:"2018-07-02",category:"framework",theme:"angular",title:"Dependency Injection в Angular",author:"",name:"OTUS",numberLessons:"1 урок",time_h_m:[1,29],size:"126 mb",isLearned:!1,dateLearned:""},{id:15,year:2019,date:"",category:"framework",theme:"angular",title:"4 Создание адаптивного SPA с Angular",author:"Сергей Патеха",name:"ITVDN",numberLessons:"7 уроков",time_h_m:[6,10],size:"1.3 gb",isLearned:!1,dateLearned:""},{id:16,year:2019,date:"",category:"framework",theme:"angular",title:"Интенсив по на Angular",author:"Степан Суворов",name:"javascript.ru",numberLessons:"",time_h_m:[8,35],size:"1 gb",isLearned:!1,dateLearned:""},{id:17,year:2019,date:"",category:"framework",theme:"angular",title:"Angular 7 c Нуля до Профи",author:"Владилен Минин",name:"Udemy",numberLessons:"",time_h_m:[39,0],size:"20 gb",isLearned:!1,dateLearned:""},{id:18,year:2019,date:"2019-11-17",category:"framework",theme:"angular",title:"Angular NGRX за час",author:"Максим Гром",name:"",numberLessons:"1 урок",time_h_m:[1,2],size:"162 mb",isLearned:!1,dateLearned:""},{id:19,year:2020,date:"",category:"framework",theme:"angular",title:"Фреймворк Angular",author:"Виктор Гавриленко",name:"WebForMySelf",numberLessons:"2 урока",time_h_m:[1,19],size:"173 mb",isLearned:!0,dateLearned:"2022-07-25 пн"},{id:20,year:2020,date:"",category:"framework",theme:"angular",title:"Божественный курс по Angular",author:"",name:"Фронтенд Паштет",numberLessons:"5 уроков",time_h_m:[1,16],size:"173 mb",isLearned:!0,dateLearned:"2022-07-25 пн"},{id:21,year:2020,date:"",category:"framework",theme:"angular",title:"Angular для начинающих",author:"Михаил Павлов",name:"D2D",numberLessons:"10 уроков",time_h_m:[8,36],size:"1.7 gb",isLearned:!1,dateLearned:""},{id:22,year:2020,date:"",category:"framework",theme:"angular",title:"Курс по Angular",author:"Игорь Непипенко",name:"javascript.ru",numberLessons:"11 уроков",time_h_m:[21,0],size:"1.9 gb",isLearned:!1,dateLearned:""},{id:23,year:2020,date:"",category:"framework",theme:"angular",title:"Angular",author:"",name:"Tartem School",numberLessons:"20 уроков",time_h_m:[3,21],size:"454 mb",isLearned:!1,dateLearned:""},{id:24,year:2020,date:"",category:"framework",theme:"angular",title:"Angular 9. Интернет Магазин",author:"Доминик Кузьмицкий",name:"Udemy",numberLessons:"",time_h_m:[3,47],size:"3.7 gb",isLearned:!1,dateLearned:""},{id:25,year:2020,date:"",category:"framework",theme:"angular",title:"Angular 9. Теория и Практика",author:"Владилен Минин",name:"Udemy",numberLessons:"",time_h_m:[17,34],size:"8.2 gb",isLearned:!1,dateLearned:""},{id:26,year:2020,date:"",category:"framework",theme:"angular",title:"Angular для начинающих",author:"Тимур Батыршинов",name:"Udemy",numberLessons:"",time_h_m:[15,30],size:"12 gb",isLearned:!1,dateLearned:""},{id:27,year:2020,date:"",category:"framework",theme:"angular",title:"Angular и NgRx",author:"",name:"Udemy",numberLessons:"47 уроков",time_h_m:[4,30],size:"5.3 gb",isLearned:!1,dateLearned:""},{id:28,year:2021,date:"",category:"framework",theme:"angular",title:"Angular",author:"Алексей Соловей",name:"N-code",numberLessons:"7 уроков",time_h_m:[6,6],size:"1 gb",isLearned:!0,dateLearned:"2022-04-13 ср"},{id:29,year:2021,date:"",category:"framework",theme:"angular",title:"Advanced Angular",author:"Михаил Павлов",name:"D2D",numberLessons:"2 урока",time_h_m:[1,54],size:"438 mb",isLearned:!1,dateLearned:""},{id:30,year:2021,date:"",category:"framework",theme:"angular",title:"Angular",author:"",name:"ngRuAir",numberLessons:"20 уроков",time_h_m:[24,0],size:"7.8 gb",isLearned:!1,dateLearned:""},{id:31,year:2021,date:"",category:"framework",theme:"angular",title:"RS School Angular Basics",author:"Антон Белый",name:"",numberLessons:"11 уроков",time_h_m:[1,43],size:"184 mb",isLearned:!1,dateLearned:""},{id:32,year:2021,date:"",category:"framework",theme:"angular",title:"Техническое собеседование на front-end разработчика (Angular)",author:"",name:"IT свитчер",numberLessons:"1 урок",time_h_m:[0,52],size:"328 mb",isLearned:!1,dateLearned:""},{id:33,year:2021,date:"",category:"framework",theme:"angular",title:"Собеседование JUNIOR FRONTEND ANGULAR разработчика. Александр 53 года",author:"",name:"wise.js",numberLessons:"1 урок",time_h_m:[1,33],size:"221 mb",isLearned:!1,dateLearned:""},{id:34,year:2021,date:"",category:"framework",theme:"angular",title:"ANGULAR - САМЫЙ ПОПУЛЯРНЫЙ JS-фреймворк _ Бета-разработчик _ Интервью с Глебом М",author:"Алексей Картынник",name:"АйТиБорода",numberLessons:"1 урок",time_h_m:[1,53],size:"1.1 gb",isLearned:!1,dateLearned:""},{id:35,year:2021,date:"",category:"framework",theme:"angular",title:"Почему Angular",author:"Александр Желнин",name:"",numberLessons:"1 урок",time_h_m:[0,18],size:"44 mb",isLearned:!1,dateLearned:""},{}],[{id:1,year:2017,date:"",category:"framework",theme:"react",title:"React.JS Advanced",author:"Влад Фенинец",name:"ITVDN",numberLessons:"",time_h_m:[5,56],size:"2.5 gb",isLearned:!1,dateLearned:""},{id:2,year:2017,date:"",category:"framework",theme:"react",title:"Полный курс по React.JS",author:"Роман Якобчук",name:"javascript.ru",numberLessons:"",time_h_m:[15,0],size:"4.7 gb",isLearned:!1,dateLearned:""},{id:3,year:2017,date:"",category:"framework",theme:"react",title:"React.js. Разработка веб-приложений",author:"Артём Самофалов",name:"loftschool",numberLessons:"",time_h_m:[35,11],size:"17.4 gb",isLearned:!1,dateLearned:""},{id:4,year:2018,date:"",category:"framework",theme:"react",title:"Курс по React.JS",author:"Роман Якобчук",name:"javascript.ru",numberLessons:"",time_h_m:[12,49],size:"3.8 gb",isLearned:!1,dateLearned:""},{id:5,year:2018,date:"",category:"framework",theme:"react",title:"React.js. Разработка веб-приложений",author:"",name:"loftschool",numberLessons:"",time_h_m:[28,0],size:"12.9 gb",isLearned:!1,dateLearned:""},{id:6,year:2019,date:"",category:"framework",theme:"react",title:"React. Lite Level",author:"Александр Лущенко",name:"itgid",numberLessons:"",time_h_m:[8,23],size:"1.6 gb",isLearned:!1,dateLearned:""},{id:7,year:2019,date:"",category:"framework",theme:"react",title:"React Hooks - Пишем Реальный Проект",author:"Александр Кочергин",name:"Udemy",numberLessons:"",time_h_m:[7,8],size:"2.8 gb",isLearned:!1,dateLearned:""},{id:8,year:2019,date:"",category:"framework",theme:"react",title:"Разработка интернет-магазина на ReactRedux",author:"Александр Кочергин",name:"Udemy",numberLessons:"",time_h_m:[3,32],size:"1.8 gb",isLearned:!1,dateLearned:""},{id:9,year:2019,date:"",category:"framework",theme:"react",title:"React JS c Нуля до Профи",author:"Владилен Минин",name:"Udemy",numberLessons:"",time_h_m:[39,22],size:"10 gb",isLearned:!1,dateLearned:""},{id:10,year:2019,date:"",category:"framework",theme:"react",title:"React Native. Мобильная разработка на JavaScript и React JS",author:"Владилен Минин",name:"Udemy",numberLessons:"",time_h_m:[13,10],size:"5.8 gb",isLearned:!1,dateLearned:""},{id:11,year:2019,date:"",category:"framework",theme:"react",title:"Изучаем React.js 16.7 & Redux",author:"Константин Голиченков",name:"Udemy",numberLessons:"",time_h_m:[5,52],size:"2.3 gb",isLearned:!1,dateLearned:""},{id:12,year:2019,date:"",category:"framework",theme:"react",title:"React + Redux - Профессиональная Разработка",author:"Юрий Бура",name:"Udemy",numberLessons:"",time_h_m:[21,58],size:"11.3 gb",isLearned:!1,dateLearned:""},{id:13,year:2019,date:"",category:"framework",theme:"react",title:"React Интенсивный курс для программистов",author:"Дмитрий Лаврик",name:"",numberLessons:"",time_h_m:[27,31],size:"5.6 gb",isLearned:!1,dateLearned:""},{id:14,year:2019,date:"",category:"framework",theme:"react",title:"Курс по React.js",author:"Иван Петриченко",name:"",numberLessons:"",time_h_m:[0,0],size:"3.2 gb",isLearned:!1,dateLearned:""},{id:15,year:2020,date:"",category:"framework",theme:"react",title:"Полный курс по JavaScript + React",author:"Иван Петриченко",name:"Udemy",numberLessons:"",time_h_m:[55,55],size:"27.3 gb",isLearned:!1,dateLearned:""},{id:16,year:2021,date:"",category:"framework",theme:"react",title:"React Next.js - с нуля. TypeScript, Hooks, SSR и CSS Grid",author:"Антон Ларичев",name:"Udemy",numberLessons:"",time_h_m:[19,0],size:"8.5 gb",isLearned:!1,dateLearned:""},{id:17,year:2021,date:"2021-08-09",category:"framework",theme:"react",title:"React JS фундаментальный курс от А до Я",author:"",name:"Ulbi TV",numberLessons:"",time_h_m:[3,1],size:"284 mb",isLearned:!0,dateLearned:"2023-09-08 пт"},{id:18,year:2021,date:"2021-09-06",category:"framework",theme:"react",title:"React JS ПРОДВИНУТЫЙ КУРС",author:"",name:"Ulbi TV",numberLessons:"",time_h_m:[1,31],size:"150 mb",isLearned:!0,dateLearned:"2023-09-15 пт"},{id:19,year:2022,date:"",category:"framework",theme:"react",title:"Полный курс по React",author:"Богдан Стащук",name:"",numberLessons:"",time_h_m:[30,0],size:"9.4 gb",isLearned:!0,dateLearned:"2023-10-06 пт"},{}],[{id:1,year:2017,date:"",category:"framework",theme:"vue",title:"Vue.js",author:"Дмитрий Лаврик",name:"",numberLessons:"",time_h_m:[19,55],size:"3.7 gb",isLearned:!1,dateLearned:""},{id:2,year:2018,date:"",category:"framework",theme:"vue",title:"Создаем сайт на Vue.JS",author:"Константин Кокорин",name:"Udemy",numberLessons:"",time_h_m:[8,24],size:"3.4 gb",isLearned:!1,dateLearned:""},{id:3,year:2018,date:"",category:"framework",theme:"vue",title:"Фреймворк Vue.js",author:"Владилен Минин",name:"WebForMySelf",numberLessons:"",time_h_m:[43,31],size:"5.6 gb",isLearned:!1,dateLearned:""},{id:4,year:2019,date:"",category:"framework",theme:"vue",title:"Курс по vue.js - с нуля до про",author:"",name:"To code",numberLessons:"",time_h_m:[26,41],size:"4.8 gb",isLearned:!1,dateLearned:""},{id:5,year:2020,date:"",category:"framework",theme:"vue",title:"Vue JS и Vuex - пишем реальный проект с нуля",author:"Александр Кочергин",name:"Udemy",numberLessons:"",time_h_m:[10,0],size:"6.1 gb",isLearned:!1,dateLearned:""},{id:6,year:2020,date:"",category:"framework",theme:"vue",title:"Современный JavaScript + Vue",author:"Денис Мешариков",name:"Udemy",numberLessons:"",time_h_m:[44,20],size:"20 gb",isLearned:!1,dateLearned:""},{id:7,year:2021,date:"",category:"framework",theme:"vue",title:"Vue.js 3",author:"Владилен Минин",name:"",numberLessons:"",time_h_m:[26,0],size:"16 gb",isLearned:!1,dateLearned:""},{}],[{id:1,year:2019,date:"2019.07.16",category:"framework",theme:"node",title:"Node JS - Быстрый Курс за 1 час",author:"Владилен Минин",name:"Владилен Минин",numberLessons:"1",time_h_m:[1,1],size:"129 mb",isLearned:!0,dateLearned:"2024.01.17 ср"},{id:2,year:2022,date:"",category:"framework",theme:"node",title:"Уроки Node JS для начинающих. Изучение Node JS и Express JS",author:"Гоша Дударь",name:"Школа itProger Программирование",numberLessons:"13",time_h_m:[2,31],size:"351 mb",isLearned:!0,dateLearned:"2024.01.16 вт"},{id:3,year:2022,date:"2022.04.26",category:"framework",theme:"node",title:"NodeJS. Полный курс",author:"Евгений Ковальчук",name:"webDev",numberLessons:"1",time_h_m:[2,43],size:"253 mb",isLearned:!0,dateLearned:"2024.01.17 ср"},{id:4,year:2022,date:"2022.10.10",category:"framework",theme:"node",title:"Основы Node.js  часть первая",author:"",name:"Coder way",numberLessons:"1",time_h_m:[1,41],size:"209 mb",isLearned:!0,dateLearned:"2024.01.17 ср"},{id:5,year:2023,date:"2023.04.24",category:"framework",theme:"node",title:"Курс по Node.js для Начинающих",author:"Богдан Стащук",name:"",numberLessons:"1",time_h_m:[6,6],size:"1 gb",isLearned:!0,dateLearned:"2024.02.01 чт"},{}],[{id:1,year:2019,date:"2019-03-23",category:"framework",theme:"electron",title:"Создание ПК программы на JavaScript  за 20 минут! Библиотека Electron JS",author:"Гоша Дударь",name:"",numberLessons:"",time_h_m:[0,22],size:"33 mb",isLearned:!0,dateLearned:"2023-01-20 пт"},{id:2,year:2021,date:"2021-03-18",category:"framework",theme:"electron",title:"Electron. Как работает самый современный desktop framework",author:"Алексей Голубев",name:"itvdn",numberLessons:"",time_h_m:[1,19],size:"175 mb",isLearned:!0,dateLearned:"2023-01-27 пт"},{about:"The Electron framework lets you write cross-platform desktop applications using JavaScript, HTML and CSS. It is based on Node.js and Chromium and is used by the Atom editor and many other apps."}],[{id:1,year:2014,date:"",category:"framework",theme:"bootstrap",title:"Bootstrap 3 Добавь интерактивности на свой сайт",author:"Jen Kramer",name:"Lynda.com",numberLessons:"5 уроков",time_h_m:[1,56],size:"0.4 gb",isLearned:!0,dateLearned:"2021-07-19 пн"},{id:2,year:2015,date:"",category:"framework",theme:"bootstrap",title:"Курс Bootstrap",author:"Сергей Никонов",name:"wh-db.com",numberLessons:"8 уроков",time_h_m:[3,31],size:"1.2 gb",isLearned:!0,dateLearned:"2021-08-14 сб"},{id:3,year:2016,date:"",category:"framework",theme:"bootstrap",title:"Фреймворк Bootstrap от А до Я",author:"Андрей Кудлай",name:"WebForMyself",numberLessons:"",time_h_m:[24,44],size:"6 gb",isLearned:!1,dateLearned:""},{}],[{id:1,year:2019,date:"",category:"framework",theme:"nuxt",title:"Фреймворк NuxtJS. Full-Stack",author:"Владилен Минин",name:"WebForMySelf",numberLessons:"",time_h_m:[10,57],size:"5.7 gb",isLearned:!1,dateLearned:""},{}],[{id:1,year:2017,date:"",category:"framework",theme:"redux",title:"Основы Redux",author:"",name:"CodeDojo",numberLessons:"",time_h_m:[2,30],size:"0.5 gb",isLearned:!1,dateLearned:""},{id:2,year:2019,date:"",category:"framework",theme:"redux",title:"Продвинутый видеокурс по Redux",author:"",name:"Lectrum",numberLessons:"",time_h_m:[27,51],size:"7.1 gb",isLearned:!1,dateLearned:""},{id:3,year:2019,date:"",category:"framework",theme:"redux",title:"Продвинутый видеокурс по Redis",author:"",name:"Lectrum",numberLessons:"",time_h_m:[9,6],size:"1.3 gb",isLearned:!1,dateLearned:""},{}],[{id:1,year:2020,date:"",category:"framework",theme:"yii2",title:"Фреймворк Yii2",author:"Андрей Кудлай",name:"WebForMySelf",numberLessons:"",time_h_m:[22,28],size:"9.5 gb",isLearned:!1,dateLearned:""},{}],[{id:1,year:2013,date:"",category:"cms",theme:"1cbitrix",title:"Создание сайта на 1С Битрикс с нуля",author:"Михаил Базаров",name:"camouf.ru",numberLessons:"14 уроков",time_h_m:[6,23],size:"4.8 gb",isLearned:!0,dateLearned:"2021-06-11 пт"},{id:2,year:2018,date:"",category:"cms",theme:"1cbitrix",title:"1С-Битрикс",author:"Андрей Кудлай",name:"WebForMySelf",numberLessons:"",time_h_m:[38,38],size:"8.2 gb",isLearned:!1,dateLearned:""},{}],[{id:1,year:2017,date:"",category:"cms",theme:"drupal",title:"Drupal Основы",author:"Виктор Гавриленко",name:"WebForMySelf",numberLessons:"",time_h_m:[6,30],size:"0.8 gb",isLearned:!1,dateLearned:""},{}],[{id:1,year:2015,date:"",category:"cms",theme:"joomla",title:"Joomla-Профессионал",author:"Виктор Гавриленко",name:"WebForMySelf",numberLessons:"",time_h_m:[77,25],size:"13.2 gb",isLearned:!1,dateLearned:""},{}],[{id:1,year:2017,date:"",category:"cms",theme:"opencart",title:"OpenCart - Создание интернет-магазина от А до Я",author:"",name:"webdesign-master",numberLessons:"",time_h_m:[11,54],size:"10.3 gb",isLearned:!1,dateLearned:""},{}],[{id:1,year:2020,date:"",category:"cms",theme:"tilda",title:"Дизайнер сайтов на Tilda",author:"",name:"Skillbox",numberLessons:"",time_h_m:[20,0],size:"12.49 gb",isLearned:!1,dateLearned:""},{id:2,year:2020,date:"",category:"cms",theme:"tilda",title:"Tilda Start",author:"Максим Ширко",name:"",numberLessons:"",time_h_m:[20,0],size:"12.2 gb",isLearned:!1,dateLearned:""},{id:3,year:2020,date:"",category:"cms",theme:"tilda",title:"Тильда-мастер 2.0",author:"Сергей Харюков",name:"",numberLessons:"",time_h_m:[6,50],size:"7.1 gb",isLearned:!1,dateLearned:""},{}],[{id:1,year:2011,date:"",category:"cms",theme:"wordpress",title:"Мини-курс сайта с нуля на WordPress",author:"Андрей Бернацкий",name:"WebForMySelf",numberLessons:"8 уроков",time_h_m:[7,39],size:"1.3 gb",isLearned:!0,dateLearned:"2021-08-17 вт"},{id:2,year:2015,date:"",category:"cms",theme:"wordpress",title:"Создание сайта на WordPress",author:"Борис Заболоцких",name:"",numberLessons:"",time_h_m:[2,54],size:"1.3 gb",isLearned:!1,dateLearned:""},{id:3,year:2018,date:"",category:"cms",theme:"wordpress",title:"Создание сайтов без программирования на WordPress",author:"Михаил Непомнящий",name:"Udemy",numberLessons:"",time_h_m:[14,21],size:"11.1 gb",isLearned:!1,dateLearned:""},{id:4,year:2018,date:"",category:"cms",theme:"wordpress",title:"Разработка тем для WordPress",author:"Андрей Кудлай",name:"WebForMySelf",numberLessons:"",time_h_m:[41,27],size:"8.5 gb",isLearned:!1,dateLearned:""},{id:5,year:2018,date:"",category:"cms",theme:"wordpress",title:"Разработка интернет магазина WP",author:"Артем Исламов",name:"Академия верстки",numberLessons:"",time_h_m:[11,25],size:"3.4 gb",isLearned:!1,dateLearned:""},{id:6,year:2019,date:"",category:"cms",theme:"wordpress",title:"WordPress с нуля до профессионала",author:"Анатолий Карев",name:"Udemy",numberLessons:"",time_h_m:[8,45],size:"5.4 gb",isLearned:!1,dateLearned:""},{id:7,year:2019,date:"",category:"cms",theme:"wordpress",title:"Посадка верстки на CMS WordPress",author:"Иван Петриченко",name:"Udemy",numberLessons:"",time_h_m:[6,14],size:"3.8 gb",isLearned:!1,dateLearned:""},{}],[{id:1,year:2019,date:"",category:"tools",theme:"docker",title:"Продвинутый видеокурс по Docker",author:"",name:"Lectrum",numberLessons:"",time_h_m:[12,50],size:"2.3 gb",isLearned:!1,dateLearned:""},{}],[{id:1,year:2012,date:"",category:"tools",theme:"git",title:"Git обучение основам",author:"Kevin Skoglund",name:"Lynda.com",numberLessons:"14 уроков",time_h_m:[6,26],size:"1 gb",isLearned:!0,dateLearned:"2021-08-18 ср"},{id:2,year:2016,date:"",category:"tools",theme:"git",title:"Основы использования Git",author:"Александр Пономаренко",name:"ITVDN",numberLessons:"",time_h_m:[1,2],size:"0.2 gb",isLearned:!0,dateLearned:"2021-12-28 вт"},{id:3,year:2019,date:"",category:"tools",theme:"git",title:"Курс по GIT",author:"Максим Гузив",name:"Udemy",numberLessons:"",time_h_m:[3,59],size:"2.2 gb",isLearned:!0,dateLearned:"2021-12-28 вт"},{id:4,year:2019,date:"",category:"tools",theme:"git",title:"Git. Полный курс для начинающих",author:"Наиль Алишев",name:"Udemy",numberLessons:"6 уроков",time_h_m:[4,47],size:"2 gb",isLearned:!0,dateLearned:"2021-12-24 пт"},{id:5,year:2020,date:"",category:"tools",theme:"git",title:"Основы использования Git",author:"Анна Маргина",name:"ITVDN",numberLessons:"6 уроков",time_h_m:[2,13],size:"0.5 gb",isLearned:!0,dateLearned:"2021-12-20 пн"},{id:6,year:2021,date:"",category:"tools",theme:"git",title:"Курс Git",author:"Илья Кантор",name:"javascript.ru",numberLessons:"",time_h_m:[14,0],size:"0.4 gb",isLearned:!1,dateLearned:""},{}],[{id:1,year:2016,date:"2016-03-10",category:"tools",theme:"gulp",title:"Gulp для самых маленьких - подробное руководство",author:"",name:"WebDesign Master",numberLessons:"1 урок",time_h_m:[1,42],size:"481 mb",isLearned:!0,dateLearned:"2021-12-28 вт"},{id:2,year:2017,date:"",category:"tools",theme:"gulp",title:"Собери свою сборку на Gulp 4",author:"Анатолий Саламатин",name:"FrontCoder",numberLessons:"10 уроков",time_h_m:[1,44],size:"385 mb",isLearned:!0,dateLearned:"2022-01-31 пн"},{id:3,year:2017,date:"2017-09-30",category:"tools",theme:"gulp",title:"СТРИМ. Gulp для верстальщика",author:"Артеи Исламов",name:"FrontCoder",numberLessons:"1 урок",time_h_m:[1,1],size:"119 mb",isLearned:!0,dateLearned:"2021-12-28 вт"},{id:4,year:2018,category:"tools",date:"",theme:"gulp",title:"Gulp Сборка",author:"Юриий Ключевский",name:"Webcademy",numberLessons:"",time_h_m:[6,14],size:"6 gb",isLearned:!0,dateLearned:"2022-01-19 ср"},{id:5,year:2018,date:"2018-10-18",category:"tools",theme:"gulp",title:"Gulp 4 - простая сборка проекта для вёрстки и javascript",author:"Дмитрий Лаврик",name:"",numberLessons:"1 урок",time_h_m:[1,47],size:"208 mb",isLearned:!0,dateLearned:"2021-12-28 вт"},{id:6,year:2018,date:"2018-11-20",category:"tools",theme:"gulp",title:"Стартовый шаблон для верстки. Gulp4 + Pug + Sass + BrowserSync",author:"",name:"FrontCoder",numberLessons:"1 урок",time_h_m:[0,22],size:"36 mb",isLearned:!0,dateLearned:"2021-12-28 вт"},{id:7,year:2019,date:"",category:"tools",theme:"gulp",title:"Сборка Gulp 4",author:"Юрий Ключевский",name:"Webcademy",numberLessons:"",time_h_m:[6,24],size:"2 gb",isLearned:!1,dateLearned:""},{id:8,year:2019,date:"2019-02-04",category:"tools",theme:"gulp",title:"Компиляция SASS и SCSS через Gulp сборщик",author:"",name:"ITDoctor",numberLessons:"1 урок",time_h_m:[0,20],size:"68 mb",isLearned:!0,dateLearned:"2021-12-28 вт"},{id:9,year:2019,date:"2019-03-01",category:"tools",theme:"gulp",title:"Сборка проекта на Gulp 4, Подробный видео урок по сборщику Gulp",author:"",name:"ITDoctor",numberLessons:"1 урок",time_h_m:[1,22],size:"153 mb",isLearned:!0,dateLearned:"2021-12-28 вт"},{id:10,year:2019,date:"2019-03-20",category:"tools",theme:"gulp",title:"Что такое Taskrunner и Bundler_  Что такое gulp и зачем он нужен. Установка Gulp 4",author:"",name:"Просто разработка",numberLessons:"1 урок",time_h_m:[0,31],size:"106 mb",isLearned:!0,dateLearned:"2021-12-28 вт"},{id:11,year:2019,date:"2019-04-12",category:"tools",theme:"gulp",title:"Gulp за 30 минут",author:"Владилен Минин",name:"",numberLessons:"1 урок",time_h_m:[0,30],size:"94 mb",isLearned:!0,dateLearned:"2021-12-28 вт"},{id:12,year:2019,date:"2019-05-16",category:"tools",theme:"gulp",title:"Изучение Gulp.JS",author:"Гоша Дударь",name:"itproger",numberLessons:"5 уроков",time_h_m:[1,22],size:"129 mb",isLearned:!0,dateLearned:"2021-12-28 вт"},{id:13,year:2019,date:"2019-05-18",category:"tools",theme:"gulp",title:"Gulp 4",author:"Вадим Прокопчук",name:"От 0 до 1",numberLessons:"1 урок",time_h_m:[1,52],size:"229 mb",isLearned:!0,dateLearned:"2022-01-19 ср"},{id:14,year:2020,date:"2020-05-04",category:"tools",theme:"gulp",title:"Gulp настройка установка плагины",author:"Женя Андриканич",name:"Фрилансер по жизни",numberLessons:"1 урок",time_h_m:[1,17],size:"142 mb",isLearned:!0,dateLearned:"2022-01-28 пт"},{id:15,year:2020,date:"2020-06-15",category:"tools",theme:"gulp",title:"Gulp 4 - Актуальное и исчерпывающее руководство для самых маленьких",author:"",name:"WebDesign Master",numberLessons:"1 урок",time_h_m:[1,39],size:"140 mb",isLearned:!0,dateLearned:"2022-01-31 пн"},{id:16,year:2020,date:"2020-07-16",category:"tools",theme:"gulp",title:"Готовим Gulp для проекта",author:"Алекс Лущенко",name:"itGid",numberLessons:"1 урок",time_h_m:[0,24],size:"34 mb",isLearned:!0,dateLearned:"2022-01-31 пн"},{id:17,year:2020,date:"2020-07-20",category:"tools",theme:"gulp",title:"Gulp 4. Полное руководство и настройка своей собственной сборки",author:"",name:"MaxGraph",numberLessons:"1 урок",time_h_m:[1,38],size:"261 mb",isLearned:!0,dateLearned:"2022-02-01 вт"},{id:18,year:2020,date:"2020-07-20",category:"tools",theme:"gulp",title:"Gulp сборка с нуля, современный синтаксис",author:"Вадим Прокопчук",name:"От 0 до 1",numberLessons:"1 урок",time_h_m:[2,6],size:"203 mb",isLearned:!0,dateLearned:"2022-01-28 пт"},{id:19,year:2021,date:"2021-02-23",category:"tools",theme:"gulp",title:"Node.JS и Gulp для верстальщика с нуля_ делаем магию",author:"",name:"wayup",numberLessons:"1 урок",time_h_m:[1,8],size:"202 mb",isLearned:!0,dateLearned:"2022-02-07 пн"},{id:20,year:2021,date:"2021-03-15",category:"tools",theme:"gulp",title:"Gulp сборка проекта",author:"Дмитрий Бердников",name:"",numberLessons:"8 уроков",time_h_m:[2,42],size:"530 mb",isLearned:!1,dateLearned:""},{id:21,year:2021,date:"2021-07-28",category:"tools",theme:"gulp",title:"Gulp vs webpack, сравнение, что использовать для верстки",author:"Вадим Прокопчук",name:"от 0 до 1",numberLessons:"1 урок",time_h_m:[0,13],size:"215 mb",isLearned:!1,dateLearned:""},{id:22,year:2021,date:"2021-10-11",category:"tools",theme:"gulp",title:"Моя сборка для верстки_ Gulp + Webpack. Инструмент для ускорения работы верстальщика",author:"Заур Магомедов",name:"",numberLessons:"1 урок",time_h_m:[0,55],size:"154 mb",isLearned:!0,dateLearned:"2022-01-28 пт"},{id:23,year:2021,date:"2021-11-17",category:"tools",theme:"gulp",title:"Gulp сборка с нуля Установка настройка и запуск",author:"",name:"CodeQuest",numberLessons:"1 урок",time_h_m:[2,3],size:"286 mb",isLearned:!1,dateLearned:""},{id:24,year:2021,date:"2021-12-22",category:"tools",theme:"gulp",title:"GULP установка настройка плагины",author:"Женя Андриканич",name:"Фрилансер по жизни",numberLessons:"1 урок",time_h_m:[1,46],size:"161 mb",isLearned:!1,dateLearned:""},{}],[{id:1,year:2018,date:"2018-04-06",category:"tools",theme:"webpack",title:"Webpack 4 - простая сборка проекта",author:"Дмитрий Лаврик",name:"",numberLessons:"1 урок",time_h_m:[1,45],size:"583 mb",isLearned:!0,dateLearned:"2022-12-09 пт"},{id:2,year:2019,date:"",category:"tools",theme:"webpack",title:"Продвинутый видеокурс по Webpack v4",author:"",name:"Lectrum",numberLessons:"",time_h_m:[17,3],size:"2.9 gb",isLearned:!1,dateLearned:""},{id:3,year:2019,date:"2019-03-29",category:"tools",theme:"webpack",title:"Глубокое погружение в webpack",author:"Стас Курилов",name:"",numberLessons:"1 урок",time_h_m:[0,59],size:"115 mb",isLearned:!0,dateLearned:"2022-12-09 пт"},{id:4,year:2019,date:"2019-10-19",category:"tools",theme:"webpack",title:"Настройка Webpack 5 для начинающих. Описание принципа работы webpack. Html, css, scss, pug, jQuery",author:"",name:"GrandpaJS",numberLessons:"1 урок",time_h_m:[0,41],size:"94 mb",isLearned:!0,dateLearned:"2022-12-09 пт"},{id:5,year:2020,date:"2020-01-16",category:"tools",theme:"webpack",title:"Webpack - Полный курс за 3 часа",author:"Владилен Минин",name:"",numberLessons:"1 урок",time_h_m:[2,51],size:"340 mb",isLearned:!0,dateLearned:"2022-12-09 пт"},{id:6,year:2020,date:"2020-02-05",category:"tools",theme:"webpack",title:"React Intro. Webpack",author:"",name:"RS School",numberLessons:"1 урок",time_h_m:[1,47],size:"278 mb",isLearned:!0,dateLearned:"2022-12-09 пт"},{id:7,year:2020,date:"2020-04-27",category:"tools",theme:"webpack",title:"Что такое WEBPACK, его настройка и основные концепции",author:"Илья",name:"",numberLessons:"1 урок",time_h_m:[0,29],size:"91 mb",isLearned:!0,dateLearned:"2022-12-09 пт"},{id:8,year:2020,date:"2020-05-23",category:"tools",theme:"webpack",title:"Webpack для начинающих",author:"Антон Окулов",name:"",numberLessons:"1 урок",time_h_m:[0,41],size:"287 mb",isLearned:!0,dateLearned:"2022-12-09 пт"},{id:9,year:2020,date:"2020-07-28",category:"tools",theme:"webpack",title:"React Webpack",author:"",name:"RS School",numberLessons:"1 урок",time_h_m:[1,34],size:"217 mb",isLearned:!0,dateLearned:"2022-12-09 пт"},{id:10,year:2020,date:"2020-11-23",category:"tools",theme:"webpack",title:"Webpack. Базовая сборка проекта",author:"Максим",name:"",numberLessons:"1 урок",time_h_m:[1,19],size:"445 mb",isLearned:!0,dateLearned:"2022-12-09 пт"},{id:11,year:2021,date:"2021-02-01",category:"tools",theme:"webpack",title:"Webpack 5 Full Project Setup",author:"",name:"Swashbuckling with Code",numberLessons:"1 урок",time_h_m:[1,58],size:"395 mb",isLearned:!0,dateLearned:"2022-12-14 ср"},{id:12,year:2021,date:"2021-02-15",category:"tools",theme:"webpack",title:"React Webpack",author:"",name:"RS School",numberLessons:"1 урок",time_h_m:[1,1],size:"254 mb",isLearned:!0,dateLearned:"2022-12-09 пт"},{id:13,year:2021,date:"2021-02-18",category:"tools",theme:"webpack",title:"Webpack 5 - минимальный переход c 4 версии",author:"Дмитрий Лаврик",name:"",numberLessons:"1 урок",time_h_m:[1,11],size:"441 mb",isLearned:!0,dateLearned:"2022-12-09 пт"},{id:14,year:2021,date:"2021-02-22",category:"tools",theme:"webpack",title:"Простая сборка webpack 5 для react",author:"Дмитрий Лаврик",name:"",numberLessons:"1 урок",time_h_m:[1,7],size:"161 mb",isLearned:!0,dateLearned:"2022-12-16 пт"},{id:15,year:2021,date:"2021-05-05",category:"tools",theme:"webpack",title:"Webpack",author:"",name:"RS School",numberLessons:"1 урок",time_h_m:[1,52],size:"392 mb",isLearned:!0,dateLearned:"2022-12-09 пт"},{id:16,year:2021,date:"2021-10-21",category:"tools",theme:"webpack",title:"Webpack and Preprocessors",author:"",name:"RS School",numberLessons:"1 урок",time_h_m:[1,52],size:"270 mb",isLearned:!0,dateLearned:"2022-12-09 пт"},{id:17,year:2022,date:"",category:"tools",theme:"webpack",title:"Webpack 5",author:"",name:"Easy IT",numberLessons:"6 уроков",time_h_m:[1,12],size:"163 mb",isLearned:!1,dateLearned:""},{id:18,year:2022,date:"2022-02-02",category:"tools",theme:"webpack",title:"Webpack — Аня Володькова",author:"Аня Володькова",name:"Paralect",numberLessons:"1 урок",time_h_m:[0,30],size:"211 mb",isLearned:!0,dateLearned:"2022-12-09 пт"},{id:19,year:2022,date:"2022-02-04",category:"tools",theme:"webpack",title:"Webpack. Сборка веб-приложений",author:"Антон Цаплюк",name:"",numberLessons:"1 урок",time_h_m:[2,12],size:"480 mb",isLearned:!0,dateLearned:"2022-12-19 пн"},{id:20,year:2022,date:"2022-03-22",category:"tools",theme:"webpack",title:"Webpack 5 Crash Course _ Frontend Development Setup",author:"",name:"",numberLessons:"1 урок",time_h_m:[0,41],size:"61 mb",isLearned:!1,dateLearned:""},{id:21,year:2022,date:"2022-04-04",category:"tools",theme:"webpack",title:"Webpack Course - Intro To Webpack",author:"",name:"",numberLessons:"1 урок",time_h_m:[0,26],size:"89 mb",isLearned:!1,dateLearned:""},{id:22,year:2022,date:"2022-04-14",category:"tools",theme:"webpack",title:"Webpack Course - Loading Images And Text Using Webpack",author:"",name:"",numberLessons:"1 урок",time_h_m:[0,24],size:"97 mb",isLearned:!1,dateLearned:""},{id:23,year:2022,date:"2022-04-30",category:"tools",theme:"webpack",title:"Webpack. Base configuration. Part 1",author:"",name:"",numberLessons:"1 урок",time_h_m:[0,36],size:"97 mb",isLearned:!1,dateLearned:""},{id:24,year:2022,date:"2022-04-30",category:"tools",theme:"webpack",title:"Webpack. Base configuration. Part 2",author:"",name:"",numberLessons:"1 урок",time_h_m:[0,39],size:"122 mb",isLearned:!1,dateLearned:""},{id:25,year:2022,date:"2022-06-02",category:"tools",theme:"webpack",title:"Изучение WEBPACK за час в одном видео! Настройка и работа с Webpack",author:"Гоша Дударь",name:"",numberLessons:"1 урок",time_h_m:[0,48],size:"111 mb",isLearned:!0,dateLearned:"2022-12-09 пт"},{id:26,year:2022,date:"2022-06-25",category:"tools",theme:"webpack",title:"Webpack 5 Full Course (Babel, PostCSS, npx, Node.js & npm)",author:"",name:"",numberLessons:"1 урок",time_h_m:[1,28],size:"176 mb",isLearned:!1,dateLearned:""},{id:27,year:2022,date:"2022-06-30",category:"tools",theme:"webpack",title:"Webpack 5 — Полный курс для начинающих. Обработка html, css, scss, js, image compress.",author:"Максим",name:"",numberLessons:"1 урок",time_h_m:[1,10],size:"161 mb",isLearned:!0,dateLearned:"2022-12-09 пт"},{id:28,year:2022,date:"2022-07-08",category:"tools",theme:"webpack",title:"Webpack - Anna Volodkova",author:"Анна Володькова",name:"Paralect",numberLessons:"1 урок",time_h_m:[1,29],size:"168 mb",isLearned:!0,dateLearned:"2022-12-09 пт"},{id:29,year:2022,date:"2022-11-19",category:"tools",theme:"webpack",title:"A Beginner's Guide to Webpack",author:"",name:"",numberLessons:"1 урок",time_h_m:[0,30],size:"75 mb",isLearned:!0,dateLearned:"2022-12-09 пт"},{}],[{id:1,year:2015,date:"",category:"theme",theme:"frontend",title:"Онлайн курсы HTML CSS JavaScript",author:"",name:"GoIT",numberLessons:"",time_h_m:[110,0],size:"25.3 gb",isLearned:!1,dateLearned:""},{id:2,year:2015,date:"",category:"theme",theme:"frontend",title:"2 семестр Фронтенд",author:"Егор Дыдыкин",name:"mail.ru",numberLessons:"",time_h_m:[8,40],size:"4.5 gb",isLearned:!1,dateLearned:""},{id:3,year:2016,date:"",category:"theme",theme:"frontend",title:"Frontend. HTML CSS JavaScript",author:"",name:"GoIT",numberLessons:"",time_h_m:[110,0],size:"24.7 gb",isLearned:!1,dateLearned:""},{id:4,year:2016,date:"",category:"theme",theme:"frontend",title:"Инструменты Front-End разработчика",author:"Андрей Бернацкий",name:"WebForMyself",numberLessons:"",time_h_m:[0,0],size:"1.6 gb",isLearned:!1,dateLearned:""},{id:5,year:2017,date:"",category:"theme",theme:"frontend",title:"2 семестр Фронтенд",author:"Анатолий Остапенко",name:"mail.ru",numberLessons:"",time_h_m:[24,28],size:"5.1 gb",isLearned:!1,dateLearned:""},{}],[{id:1,year:2014,date:"",category:"theme",theme:"web",title:"Обучение WEB Программированию",author:"",name:"LoftBlog",numberLessons:"",time_h_m:[43,0],size:"27.4 gb",isLearned:!1,dateLearned:""},{id:3,year:2015,date:"",category:"theme",theme:"web",title:"Школа Вебмастеров",author:"",name:"Яндекс-Академия",numberLessons:"",time_h_m:[22,0],size:"9 gb",isLearned:!0,dateLearned:"2021-10-26 вт"},{id:4,year:2015,date:"",category:"theme",theme:"web",title:"Четвертая Вебмастерская",author:"",name:"Яндекс-Академия",numberLessons:"",time_h_m:[4,49],size:"1.6 gb",isLearned:!0,dateLearned:"2021-11-02 вт"},{id:5,year:2016,date:"",category:"theme",theme:"web",title:"Web-разработка для начинающих",author:"",name:"LoftSchool",numberLessons:"",time_h_m:[66,36],size:"25.3 gb",isLearned:!1,dateLearned:""},{id:6,year:2016,date:"",category:"theme",theme:"web",title:"Пятая Вебмастерская",author:"",name:"Яндекс-Академия",numberLessons:"",time_h_m:[7,16],size:"3.4 gb",isLearned:!1,dateLearned:""},{id:7,year:2016,date:"",category:"theme",theme:"web",title:"Шестая Вебмастерская",author:"",name:"Яндекс-Академия",numberLessons:"",time_h_m:[12,34],size:"4.6 gb",isLearned:!1,dateLearned:""},{id:8,year:2017,date:"",category:"theme",theme:"web",title:"WEB-программирование для школьников",author:"",name:"Foxford",numberLessons:"",time_h_m:[64,0],size:"18.3 gb",isLearned:!1,dateLearned:""},{id:9,year:2017,date:"",category:"theme",theme:"web",title:"Создание сайта от А до Я. Комплексный курс",author:"",name:"webdesign-master",numberLessons:"",time_h_m:[18,0],size:"6.6 gb",isLearned:!1,dateLearned:""},{id:10,year:2017,date:"",category:"theme",theme:"web",title:"Эффекты Parallax",author:"Андрей Кудлай",name:"WebForMySelf",numberLessons:"",time_h_m:[3,42],size:"1 gb",isLearned:!1,dateLearned:""},{id:11,year:2017,date:"",category:"theme",theme:"web",title:"Седьмая Вебмастерская",author:"",name:"Яндекс-Академия",numberLessons:"",time_h_m:[3,17],size:"1 gb",isLearned:!1,dateLearned:""},{id:12,year:2018,date:"",category:"theme",theme:"web",title:"Web-дизайн с 0 до PRO",author:"",name:"SkillBox",numberLessons:"",time_h_m:[80,24],size:"6.3 gb",isLearned:!1,dateLearned:""},{id:13,year:2018,date:"",category:"theme",theme:"web",title:"Веб-разработчик 12.0",author:"Артем Исламов",name:"Академия верстки",numberLessons:"",time_h_m:[40,57],size:"11.1 gb",isLearned:!1,dateLearned:""},{id:14,year:2018,date:"",category:"theme",theme:"web",title:"Восьмая Вебмастерская",author:"",name:"Яндекс-Академия",numberLessons:"",time_h_m:[5,33],size:"2.2 gb",isLearned:!1,dateLearned:""},{id:15,year:2019,date:"",category:"theme",theme:"web",title:"Веб-дизайн 2.0",author:"",name:"Highlights",numberLessons:"",time_h_m:[15,0],size:"40 gb",isLearned:!1,dateLearned:""},{id:16,year:2019,date:"",category:"theme",theme:"web",title:"Web-разработчик",author:"Иван Петриченко",name:"Udemy",numberLessons:"",time_h_m:[22,40],size:"14.1 gb",isLearned:!1,dateLearned:""},{id:17,year:2019,date:"",category:"theme",theme:"web",title:"Полный Курс Веб-Разработчика 2.0",author:"",name:"Udemy",numberLessons:"",time_h_m:[0,0],size:"15.8 gb",isLearned:!1,dateLearned:""},{id:18,year:2019,date:"",category:"theme",theme:"web",title:"Премиум-уроки",author:"",name:"WebForMySelf",numberLessons:"",time_h_m:[392,0],size:"60 gb",isLearned:!1,dateLearned:""},{id:19,year:2019,date:"",category:"theme",theme:"web",title:"Восьмая Вебмастерская",author:"",name:"Яндекс-Академия",numberLessons:"",time_h_m:[4,37],size:"1.3 gb",isLearned:!1,dateLearned:""},{id:20,year:2020,date:"",category:"theme",theme:"web",title:"Geek University веб-разработки",author:"",name:"GeekBrains",numberLessons:"",time_h_m:[230,0],size:"52 gb",isLearned:!1,dateLearned:""},{id:21,year:2020,date:"",category:"theme",theme:"web",title:"Онлайн-марафон по Веб-дизайну",author:"",name:"Highlights",numberLessons:"",time_h_m:[4,0],size:"12.4 gb",isLearned:!1,dateLearned:""},{id:22,year:2020,date:"",category:"theme",theme:"web",title:"Платные видеокурсы",author:"",name:"loftschool",numberLessons:"",time_h_m:[16,54],size:"5.2 gb",isLearned:!1,dateLearned:""},{id:23,year:2021,date:"",category:"theme",theme:"web",title:"WEB-разработчик",author:"Антон Ларичев",name:"Udemy",numberLessons:"",time_h_m:[33,31],size:"19.3 gb",isLearned:!1,dateLearned:""},{id:24,year:2021,date:"",category:"theme",theme:"web",title:"Восьмая Вебмастерская",author:"",name:"Яндекс-Академия",numberLessons:"",time_h_m:[24,36],size:"6.2 gb",isLearned:!1,dateLearned:""},{}],[{id:1,year:2016,date:"",category:"theme",theme:"freelance",title:"Доходный фриланс на upwork",author:"Игорь Петрунин",name:"",numberLessons:"",time_h_m:[0,0],size:"1.9 gb",isLearned:!1,dateLearned:""},{id:2,year:2017,date:"",category:"theme",theme:"freelance",title:"Я - фрилансер! Базовый курс для начинающих",author:"",name:"webdesign-master",numberLessons:"",time_h_m:[1,14],size:"1.3 gb",isLearned:!1,dateLearned:""},{id:3,year:2019,date:"",category:"theme",theme:"freelance",title:"Трудоустройство",author:"",name:"Академия верстки",numberLessons:"",time_h_m:[7,51],size:"3.2 gb",isLearned:!1,dateLearned:""},{id:4,year:2019,date:"",category:"theme",theme:"freelance",title:"Руководство по выживанию на фрилансе",author:"Тимур Константинов",name:"",numberLessons:"",time_h_m:[1,35],size:"2 gb",isLearned:!1,dateLearned:""},{id:5,year:2020,date:"",category:"theme",theme:"freelance",title:"Фриланс - Мастер",author:"Евгений Сериков",name:"WebForMySelf",numberLessons:"",time_h_m:[8,22],size:"2 gb",isLearned:!1,dateLearned:""},{}],[{id:1,year:2016,date:"",category:"other",theme:"bem",title:"БЭМ-платформа",author:"Владимир Гриненко",name:"frontend-science",numberLessons:"",time_h_m:[5,50],size:"1.7 gb",isLearned:!1,dateLearned:""},{}],[{id:1,year:2019,date:"",category:"other",theme:"figma",title:"Figma 3.0 для дизайнера",author:"Антон Рыбаков",name:"Skillbox",numberLessons:"",time_h_m:[13,40],size:"6 gb",isLearned:!0,dateLearned:"2021-11-23 вт"},{}],[{id:1,year:2023,date:"2023-06-08",category:"other",theme:"interview",title:"Собеседование мобильных разработчиков в Яндекс в рамках Weekend Offer",author:"Рустам и Дима Поляков",name:"YFD",numberLessons:"",time_h_m:[1,27],size:"249 mb",isLearned:!0,dateLearned:"2023-09-19 вт"},{id:2,year:2023,date:"2023-08-29",category:"other",theme:"interview",title:"Стажировка в Яндексе Полное прохождение [влог]",author:"Глеб",name:"Яндекс",numberLessons:"",time_h_m:[0,41],size:"197 mb",isLearned:!0,dateLearned:"2023-09-19 пн"},{id:3,year:2023,date:"2023-08-31",category:"other",theme:"interview",title:"Собеседование frontend стажера",author:"Семен",name:"FRONTENDIYA - Веб разработка",numberLessons:"",time_h_m:[0,52],size:"166 mb",isLearned:!0,dateLearned:"2023-09-20 ср"},{}],[{id:1,year:2019,date:"2019-05-06",category:"other",theme:"json",title:"Зачем нужен JSON Тип данных, работа с JSON на JavaScript метод JSON.parse() и метод JSON.stingify()",author:"",name:"ITDoctor",numberLessons:"1 урок",time_h_m:[0,21],size:"48 mb",isLearned:!0,dateLearned:"2022-02-09 ср"},{id:2,year:2019,date:"2019-08-21",category:"other",theme:"json",title:"JavaScript для блондинок – Получение данных с сервера (Fetch)",author:"Михаил Протасевич",name:"AreaWeb - веб-разработка для блондинок",numberLessons:"1 урок",time_h_m:[0,17],size:"60 mb",isLearned:!0,dateLearned:"2022-02-09 ср"},{id:3,year:2019,date:"2019-09-01",category:"other",theme:"json",title:"Что такое JSON",author:"Дмитрий Ченгаев",name:"Веб-программист. Дмитрий Ченгаев",numberLessons:"1 урок",time_h_m:[0,7],size:"11 mb",isLearned:!0,dateLearned:"2022-02-09 ср"},{id:4,year:2020,date:"2020-04-13",category:"other",theme:"json",title:"Полный курс по JSON для начинающих",author:"",name:"Аве кодер",numberLessons:"1 урок",time_h_m:[0,18],size:"54 mb",isLearned:!0,dateLearned:"2022-02-09 ср"},{id:5,year:2020,date:"2020-05-24",category:"other",theme:"json",title:"Знакомство с REST API и форматом JSON",author:"Михаил Непомнящий",name:"",numberLessons:"1 урок",time_h_m:[0,27],size:"188 mb",isLearned:!0,dateLearned:"2022-02-09 ср"},{id:6,year:2020,date:"2020-07-31",category:"other",theme:"json",title:"Как получить данные с сервера_ Учим Fetch API за 10 минут",author:"Влад Калачев",name:"",numberLessons:"1 урок",time_h_m:[0,9],size:"15 mb",isLearned:!0,dateLearned:"2022-02-09 ср"},{id:7,year:2020,date:"2020-09-13",category:"other",theme:"json",title:"Зачем нужен JSON, Часть 2 - Практика c шаблонизатором EJS",author:"",name:"ITDoctor",numberLessons:"1 урок",time_h_m:[0,38],size:"89 mb",isLearned:!0,dateLearned:"2022-02-09 ср"},{id:8,year:2021,date:"2021-02-12",category:"other",theme:"json",title:"Чтение и запись файла на JavaScript, работа с FileReader на JavaScript",author:"",name:"ITDoctor",numberLessons:"1 урок",time_h_m:[0,7],size:"14 mb",isLearned:!0,dateLearned:"2022-02-09 ср"},{id:9,year:2021,date:"2021-04-21",category:"other",theme:"json",title:"4. Что такое JSON",author:"",name:"Frontend разработка SPA",numberLessons:"1 урок",time_h_m:[0,11],size:"20 mb",isLearned:!0,dateLearned:"2022-02-09 ср"},{}],[{id:1,year:2018,date:"2018-09-03",category:"other",theme:"vscode",title:"VS Code – обзор редактора кода",author:"",name:"Glo Academy",numberLessons:"1 урок",time_h_m:[0,9],size:"33 mb",isLearned:!0,dateLearned:"2021-07-22 чт"},{id:2,year:2019,date:"2019-04-26",category:"other",theme:"vscode",title:"Как настроить FTP в VS Code _ Плагин SFTP Visual Studio Code",author:"Артем Исламов",name:"Glo Academy",numberLessons:"1 урок",time_h_m:[0,9],size:"17 mb",isLearned:!0,dateLearned:"2022-01-20 чт"},{id:3,year:2019,date:"2019-09-01",category:"other",theme:"vscode",title:"JavaScript v2.0. Настраиваем VSCode для работы",author:"Алекс Лущенко",name:"WebDev с нуля",numberLessons:"1 урок",time_h_m:[0,13],size:"27 mb",isLearned:!0,dateLearned:"2022-01-20 чт"},{id:4,year:2019,date:"2019-09-23",category:"other",theme:"vscode",title:"VS Code топ-10 плагины которые обязательно нужны. LiveServer, Html css support",author:"",name:"Web Developer Blog",numberLessons:"1 урок",time_h_m:[0,10],size:"19 mb",isLearned:!0,dateLearned:"2022-01-20 чт"},{id:5,year:2019,date:"2019-10-19",category:"other",theme:"vscode",title:"Top 10 Best VS Code Extensions",author:"",name:"codeSTACKr",numberLessons:"1 урок",time_h_m:[0,17],size:"29 mb",isLearned:!0,dateLearned:"2022-01-20 чт"},{id:6,year:2019,date:"2019-12-05",category:"other",theme:"vscode",title:"Установка git bash в терминал VS Code для Windows",author:"Александр Семенов",name:"",numberLessons:"1 урок",time_h_m:[0,17],size:"40 mb",isLearned:!0,dateLearned:"2022-01-19 ср"},{id:7,year:2020,date:"2020-02-27",category:"other",theme:"vscode",title:"ТОП-10 плагинов VS Code для верстальщика",author:"Артем Исламов",name:"Glo Academy",numberLessons:"1 урок",time_h_m:[0,13],size:"28 mb",isLearned:!0,dateLearned:"2022-01-20 чт"},{id:8,year:2020,date:"2020-02-28",category:"other",theme:"vscode",title:"VS Code настройка установка плагины",author:"Женя Андриканич",name:"Фрилансер по жизни",numberLessons:"1 урок",time_h_m:[1,5],size:"169 mb",isLearned:!0,dateLearned:"2022-01-20 чт"},{id:9,year:2020,date:"2020-04-19",category:"other",theme:"vscode",title:"Мои плагины для VS Code. Самое важное и нужное",author:"",name:"MaxGraph",numberLessons:"1 урок",time_h_m:[0,9],size:"33 mb",isLearned:!0,dateLearned:"2022-01-20 чт"},{id:10,year:2020,date:"2020-05-19",category:"other",theme:"vscode",title:"ТОП-16 Плагинов для VS Code в 2020",author:"Евгений Ковальчук",name:"webDev",numberLessons:"1 урок",time_h_m:[0,12],size:"22 mb",isLearned:!0,dateLearned:"2022-01-20 чт"},{id:11,year:2020,date:"2020-10-19",category:"other",theme:"vscode",title:"VS Code Полный Курс для JavaScript разработчиков",author:"Владилен Минин",name:"",numberLessons:"1 урок",time_h_m:[1,32],size:"137 mb",isLearned:!0,dateLearned:"2022-01-21 пт"},{id:12,year:2020,date:"2020-11-22",category:"other",theme:"vscode",title:"ЛУЧШИЙ РЕДАКТОР КОДА для Javascript разработчика 2021",author:"Валерий Стрелец",name:"",numberLessons:"1 урок",time_h_m:[0,20],size:"110 mb",isLearned:!0,dateLearned:"2021-07-29 чт"},{id:13,year:2020,date:"2020-12-01",category:"other",theme:"vscode",title:"Упрощаем верстку_ сниппеты в VSCode",author:"",name:"Glo Academy",numberLessons:"1 урок",time_h_m:[0,49],size:"209 mb",isLearned:!0,dateLearned:"2022-01-21 пт"},{id:14,year:2020,date:"2020-12-21",category:"other",theme:"vscode",title:"VS Code – установка и настройка. ТОП 5 плагинов. Редактор кода Visual Studio Code",author:"Юрий Ключевский",name:"ВебКадеми",numberLessons:"1 урок",time_h_m:[0,14],size:"37 mb",isLearned:!0,dateLearned:"2022-01-24 пн"},{id:15,year:2021,date:"2021-01-04",category:"other",theme:"vscode",title:"Настройка Visual Studio Code для разработчика",author:"Макс",name:"Red Group",numberLessons:"1 урок",time_h_m:[0,16],size:"54 mb",isLearned:!0,dateLearned:"2022-01-24 пн"},{id:16,year:2021,date:"2021-02-04",category:"other",theme:"vscode",title:"Prettier - лучший форматер кода Vs Code __ Настройка опытного разработчика",author:"Макс",name:"Red Group",numberLessons:"1 урок",time_h_m:[0,7],size:"26 mb",isLearned:!0,dateLearned:"2022-01-24 пн"},{id:17,year:2021,date:"2021-02-28",category:"other",theme:"vscode",title:"VS Code — настройка, установка, плагины",author:"Анна Блок",name:"",numberLessons:"1 урок",time_h_m:[0,28],size:"69 mb",isLearned:!0,dateLearned:"2022-01-24 пн"},{id:18,year:2021,date:"2021-05-26",category:"other",theme:"vscode",title:"Мой VS Code Светлая тема, удобный поиск, полезные расширения и настройки",author:"Вадим Макеев",name:"Vadim Makeev",numberLessons:"1 урок",time_h_m:[0,28],size:"55 mb",isLearned:!0,dateLearned:"2022-01-24 пн"},{id:19,year:2021,date:"2021-10-18",category:"other",theme:"vscode",title:"Настройка VS Code для верстки",author:"",name:"WebDesignMaster",numberLessons:"1 урок",time_h_m:[0,34],size:"65 mb",isLearned:!0,dateLearned:"2022-01-24 пн"},{}]]),Mr=['<article class="article"> <div id="link-to-va" class="btn-back">назад</div> <h1>Александр Куликов - Алгоритмы и структуры данных</h1> <strong>https://terabox.com/</strong> </article> <article class="article"> <a href="https://terabox.com/s/1Nw_2851YuKLpMHQjj95qbg">Семестр 1 Лекция 01 (flv, 1ч11м, 622mb)</a> <br><a href="https://terabox.com/s/1cMYIi_qbta4BfwKwTXwDWw">Семестр 1 Лекция 02 (flv, 1ч11м, 620mb)</a> <br><a href="https://terabox.com/s/1kMwWaVCMIGgkeN2-9X0VcQ">Семестр 1 Лекция 03 (flv, 1ч25м, 747mb)</a> <br><a href="https://terabox.com/s/1w1GeM1ZIMRwiTXIpUiRlcA">Семестр 1 Лекция 04 (flv, 1ч15м, 657mb)</a> <br><a href="https://terabox.com/s/1026pZBZo3VG9adTS8NLUBA">Семестр 1 Лекция 05 (flv, 1ч20м, 700mb)</a> <br><a href="https://terabox.com/s/1b8Ujm56K3wG8K4IIzFKhkQ">Семестр 1 Лекция 06 (flv, 1ч27м, 759mb)</a> <br><a href="https://terabox.com/s/1tVT9Vf8mujE0JiXPSoscUg">Семестр 1 Лекция 07 (flv, 1ч20м, 700mb)</a> <br><a href="https://terabox.com/s/1m14CO_JIFbbf1AW5JmJLgA">Семестр 1 Лекция 08 (flv, 1ч10м, 613mb)</a> <br><a href="https://terabox.com/s/12RWC4yGeH6WHjKM3mZl-XA">Семестр 1 Лекция 09 (flv, 1ч37м, 847mb)</a> <br><a href="https://terabox.com/s/1IoiyKElPJlYMW_u8qWKInw">Семестр 1 Лекция 10 (flv, 1ч43м, 898mb)</a> <br><a href="https://terabox.com/s/1PLCohlrLkVCz_eiDVif7cQ">Семестр 1 Лекция 11 (flv, 59м, 513mb)</a> <br><a href="https://terabox.com/s/1JuKorv3MCOYtjV5t2cY-jw">Семестр 1 Лекция 12 (flv, 1ч2м, 547mb)</a> <br><a href="https://terabox.com/s/1Sezy8FeZw--GeU901l9L0g">Семестр 1 Лекция 13 (flv, 1ч23м, 728mb)</a> <br><a href="https://terabox.com/s/1v9kOfuOtvbXBZnYKBqFUrw">Семестр 2 Лекция 01 (flv, 1ч27м, 762mb)</a> <br><a href="https://terabox.com/s/1f1YmNTyzFVzhuJWgulgkug">Семестр 2 Лекция 02 (flv, 36м, 315mb)</a> <br><a href="https://terabox.com/s/1mC75-fuAH9G_PkLvJhSp4A">Семестр 2 Лекция 03 (flv, 1ч19м, 669mb)</a> <br><a href="https://terabox.com/s/1OUNXJgEYzLyGtr_IDKD4Sg">Семестр 2 Лекция 04 (flv, 1ч19м, 669mb)</a> <br><a href="https://terabox.com/s/1bcYxWNsos0tUJsB6JGiREg">Семестр 2 Лекция 05 (flv, 1ч30м, 768mb)</a> <br><a href="https://terabox.com/s/1oyPnjc4g2ErnHQRRIvVJyw">Семестр 2 Лекция 06 (flv, 56м, 476mb)</a> <br><a href="https://terabox.com/s/1aoC2cGt__qRJJM1nu7ZqAA">Семестр 2 Лекция 07 (flv, 1ч19м, 674mb)</a> <br><a href="https://terabox.com/s/1z0jbXcIOvR3TCkAJlf97vw">Семестр 2 Лекция 08 (flv, 1ч25м, 826mb)</a> <br><a href="https://terabox.com/s/16BxZjJMwzqJd3AhPE11HBw">Семестр 2 Лекция 09 (flv, 1ч20м, 778mb)</a> <br><a href="https://terabox.com/s/1S8KWX38x11gBr4j_uSZX8Q">Семестр 2 Лекция 10 (flv, 1ч29м, 867mb)</a> <br><a href="https://terabox.com/s/11OkSnaiJB54FY0G84YyoOA">Семестр 2 Лекция 11 (flv, 1ч21м, 782mb)</a> <br><a href="https://terabox.com/s/1OOv_dAKiNosBcpB8ygrC4g">Семестр 2 Лекция 12 (flv, 1ч27м, 840mb)</a> <br><a href="https://terabox.com/s/158mB8g5bzSIC-3QuDBzKeg">Семестр 2 Семинар к лекции 02 часть 1 (flv, 1ч21м, 690mb)</a> <br><a href="https://terabox.com/s/1qoHeNhobhIfsvKVNHPQy_A">Семестр 2 Семинар к лекции 02 часть 2 (flv, 50м, 430mb)</a> <br><a href="https://terabox.com/s/1vbaKeZ40Cd5w9E1GgOejGQ">Семестр 2 Семинар к лекции 03 (flv, 1ч18м, 665mb)</a> <br><a href="https://terabox.com/s/12wfuTImpqT-xXCWaoQXgKQ">Семестр 2 Семинар к лекции 04 (flv, 1ч16м, 642mb)</a> <br><a href="https://terabox.com/s/1HjSJx1kZuljI0JU6E_VweQ">Семестр 2 Семинар к лекции 05 (flv, 1ч13м, 622mb)</a> <br><a href="https://terabox.com/s/1Oso3t0LDuqvOTQI8Y8ywXQ">Семестр 2 Семинар к лекции 06 (flv, 1ч13м, 617mb)</a> <br><a href="https://terabox.com/s/1FLhwaxIZWEPvObqbuRooHA">Семестр 2 Семинар к лекции 07 (flv, 1ч4м, 541mb)</a> <br><a href="https://terabox.com/s/1nSczs-0WkM0bWOoi8Q0c4Q">Семестр 2 Семинар к лекции 08 (flv, 1ч11м, 694mb)</a> <br><a href="https://terabox.com/s/1A_A_7o6DvxA9woj5HDQDJA">Семестр 2 Семинар к лекции 09 (flv, 1ч6м, 637mb)</a> <br><a href="https://terabox.com/s/1Cn7peOxq81Rr3wZ7J6-_9A">Семестр 2 Семинар к лекции 10 (flv, 1ч6м, 637mb)</a> <br><a href="https://terabox.com/s/1hZ0agF79Z0lbfM49gS-RAA">Семестр 2 Семинар к лекции 11 (flv, 1ч24м, 811mb)</a> <br><a href="https://terabox.com/s/10rNsWAcPsV7PycqWUO9rlQ">Семестр 2 Семинар к лекции 12 (flv, 1ч1м, 591mb)</a> </article>'];function Er(){console.log("vaLinks");var e=document.querySelector("#video"),t=document.querySelectorAll(".video-algorithm");if(t)for(var r=function(r){t[r].addEventListener("click",(function(t){t.preventDefault(),Mr[r]&&(e.innerHTML=Mr[r],function(){var e=document.querySelector("#video"),t=document.getElementById("link-to-va");t&&t.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML="htmlEduQuiz",Er()}))}())}))},i=0;i<t.length;i++)r(i)}function Dr(e){return function(e){if(Array.isArray(e))return Fr(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Ar(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ar(e,t){if(e){if("string"==typeof e)return Fr(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Fr(e,t):void 0}}function Fr(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,i=new Array(t);r<t;r++)i[r]=e[r];return i}function Or(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,i=new Array(t);r<t;r++)i[r]=e[r];return i}var Ir={};Ir.input=Pr,Ir.category=function(e){var t={result:{},learned:[]};return e.forEach((function(e){e.category&&!(e.category in t.result)&&(t.result[e.category]={}),e.theme&&!(e.theme in t.result[e.category])&&(t.result[e.category][e.theme]=[]),e.category&&e.theme&&t.result[e.category][e.theme].push(e),!0===e.isLearned&&t.learned.push(e)})),t}(Ir.input),Ir.elements=function(e){var t=document.createElement("aside");t.className="aside";var r=document.createElement("main");r.className="list",r.id="video";var i=document.createElement("h2"),a=document.createElement("ol");a.id="books";var o={},l=[],n=function(r){var o=document.createElement("a");o.href="#",o.innerHTML=r,l.push(o);var n=[],s=function(o){var l=document.createElement("a");l.href="#",l.innerHTML=o,n.push(l);var s,d=[],h=function(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=Ar(e))){r&&(e=r);var i=0,a=function(){};return{s:a,n:function(){return i>=e.length?{done:!0}:{done:!1,value:e[i++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,l=!0,n=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return l=e.done,e},e:function(e){n=!0,o=e},f:function(){try{l||null==r.return||r.return()}finally{if(n)throw o}}}}(e.result[r][o]);try{for(h.s();!(s=h.n()).done;){var p=s.value;d.push(p)}}catch(e){h.e(e)}finally{h.f()}var u=function(e){var t;(t=e).sort((function(e,t){return e.year===t.year?e.author===t.author?e.title.localeCompare(t.title,"en"):e.author.localeCompare(t.title,"en"):e.year-t.year})),e=t;for(var r=[],i=function(t){var i=document.createElement("li");i.addEventListener("mouseover",(function(){i.classList.add("over")})),i.addEventListener("mouseout",(function(){i.classList.remove("over")}));var a={};e[t].time_h_m?a.time="Время ".concat(e[t].time_h_m[0]?"".concat(e[t].time_h_m[0],"ч"):""," ").concat(e[t].time_h_m[1]?"".concat(e[t].time_h_m[1],"м"):""):a.time="Время ".concat(e[t].time),e[t].link?a.link='<a href="1.html" class="video-algorithm">открыть</a>':a.link="",i.innerHTML="\n    <strong>[".concat(e[t].year,"] ").concat(e[t].title,"</strong>\n    <div>").concat(e[t].author," ").concat(e[t].name,"</div>\n    <div>").concat(e[t].numberLessons," видео. ").concat(a.time," Размер ").concat(e[t].size,"</div>\n    <div>").concat(a.link,"</div>\n    <div>Изучено ").concat(e[t].isLearned,"</div>"),r.push(i)},a=0;a<e.length;a++)i(a);return r}(d);l.addEventListener("click",(function(e){e.preventDefault(),c(n,l),i.innerHTML=o,t.classList.remove("none"),a.innerHTML="",a.append.apply(a,Dr(u)),Er()}))};for(var d in e.result[r])s(d);o.addEventListener("click",(function(e){e.preventDefault(),c(l,o),t.innerHTML="",t.append.apply(t,n);var r=new Event("click");n[0].dispatchEvent(r)}))};for(var s in e.result)n(s);function c(e,t){e.forEach((function(e){e.classList.remove("active")})),t.classList.add("active")}return function(){var r=document.createElement("a");r.href="#",r.innerHTML="learned",l.push(r);var o=function(e){e.sort((function(e,t){return e.dateLearned.replace(/[^0-9]/gi,"")-t.dateLearned.replace(/[^0-9]/gi,"")}));for(var t=[],r=function(r){var i=document.createElement("li");i.addEventListener("mouseover",(function(){i.classList.add("over")})),i.addEventListener("mouseout",(function(){i.classList.remove("over")}));var a={};e[r].time_h_m?a.time="Время ".concat(e[r].time_h_m[0]?"".concat(e[r].time_h_m[0],"ч"):""," ").concat(e[r].time_h_m[1]?"".concat(e[r].time_h_m[1],"м"):""):a.time="Время ".concat(e[r].time),i.innerHTML="\n    <span>".concat(e[r].dateLearned,"</span>\n    <div><strong>[").concat(e[r].year,"] ").concat(e[r].title,"</strong></div>\n    <div><em>").concat(e[r].author," ").concat(e[r].name,"</em></div>\n    <div>").concat(e[r].numberLessons," Время ").concat(a.time," Размер ").concat(e[r].size,"</div>\n    <div>Изучено ").concat(e[r].isLearned,"</div>"),t.push(i)},i=0;i<e.length;i++)r(i);return t}(e.learned);r.addEventListener("click",(function(e){e.preventDefault(),c(l,r),i.innerHTML="Изученные видеокурсы по frontend разработке",t.classList.add("none"),a.innerHTML="",a.append.apply(a,Dr(o))}))}(),r.append(i,a),o.navDiv=l,o.aside=t,o.main=r,o}(Ir.category),Ir.mainNav=function(e){var t,r=document.createElement("nav");r.className="nav",r.id="main-nav",r.append.apply(r,function(e){if(Array.isArray(e))return Or(e)}(t=e.navDiv)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||function(e,t){if(e){if("string"==typeof e)return Or(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Or(e,t):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}());var i=new Event("click");return e.navDiv[0].dispatchEvent(i),r}(Ir.elements),Ir.elemSection=function(e){var t=document.createElement("section");return t.className="main__aside",t.append(e.aside,e.main),t}(Ir.elements),r(213);var Wr,Rr=(Wr=[]).concat.apply(Wr,[[{id:1,theme:"frontend",title:"OTUS Онлайн - образование",author:"Александр Шевчук, Дмитрий Охрименко, Александр Бабич",city:"Москва",country:"Россия",link:"https://www.youtube.com/@otus_education/videos",site:"https://otus.ru/",dateFirstVideo:"2017.05.29",dateLastVideo:"2022.11.08",amountVideos:3500},{id:2,theme:"frontend",title:"ITVDN",author:"Александр Шевчук, Дмитрий Охрименко, Александр Бабич",city:"Киев",country:"Украина",link:"https://www.youtube.com/@ITVDN/videos",site:"https://itvdn.com/ru",dateFirstVideo:"2013.05.03",dateLastVideo:"2022.10.25",amountVideos:2140},{id:3,theme:"frontend",title:"Skillbox Программирование",author:"Максим Шачков",city:"Москва",country:"Россия",link:"https://www.youtube.com/@skillboxprogramming/videos",site:"https://skillbox.ru/",dateFirstVideo:"2016.06.23",dateLastVideo:"2022.11.08",amountVideos:1749},{id:4,theme:"frontend",title:"loftblog",author:"Дмитрий Ковальчук",city:"Санкт Петербург",country:"Россия",link:"https://www.youtube.com/@loftblog/videos",site:"https://loftblog.ru/",dateFirstVideo:"2013.04.01",dateLastVideo:"2022.11.07",amountVideos:1703},{id:5,theme:"frontend",title:"VK Team",author:"",city:"Москва",country:"Россия",link:"https://www.youtube.com/@vkteamchannel/videos",site:"https://vk.company/ru/",dateFirstVideo:"2013.10.17",dateLastVideo:"2022.05.26",amountVideos:1500},{id:6,theme:"frontend",title:"Аматор DED",author:"",city:"",country:"Польша",link:"https://www.youtube.com/@amatorDed/videos",site:"",dateFirstVideo:"2021.05.03",dateLastVideo:"2022.11.08",amountVideos:1400},{id:7,theme:"frontend",title:"Гоша Дударь",author:"Гоша Дударь",city:"Киев",country:"Украина",link:"https://www.youtube.com/@gosha_dudar/videos",site:"https://itproger.com/",dateFirstVideo:"2014.12.23",dateLastVideo:"2022.11.08",amountVideos:1209},{id:8,theme:"frontend",title:"WebForMySelf",author:"Андрей Бернацкий, Андрей Кудлай, Алексей Суворов",city:"Москва",country:"Россия",link:"https://www.youtube.com/@webformyself/videos",site:"https://webformyself.com/",dateFirstVideo:"2012.02.12",dateLastVideo:"2022.11.02",amountVideos:1107},{id:9,theme:"frontend",title:"YFD",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@YandexforDevelopers/videos",site:"",dateFirstVideo:"2014.11.14",dateLastVideo:"2023.09.16",amountVideos:1100},{id:10,theme:"frontend",title:"selfedu",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@selfedu_rus/videos",site:"https://proproprogs.ru/",dateFirstVideo:"2015.04.21",dateLastVideo:"2022.11.08",amountVideos:1e3},{id:11,theme:"frontend",title:"Viktor Bogutskii",author:"Виктор Богутский",city:"",country:"США",link:"https://www.youtube.com/@ViktorBogutskii/videos",site:"https://pasv.us/",dateFirstVideo:"2018.05.30",dateLastVideo:"2022.11.04",amountVideos:1e3},{id:12,theme:"frontend",title:"ITDoctor",author:"Исмаил Усеинов",city:"Новочеркасск",country:"Россия",link:"https://www.youtube.com/@ITDoctor/videos",site:"https://itdoctor.ru/",dateFirstVideo:"2018.02.12",dateLastVideo:"2022.11.05",amountVideos:977},{id:13,theme:"frontend",title:"Hillel IT School",author:"Вадим Друмов",city:"Киев",country:"Украина",link:"https://www.youtube.com/@HillelITSchool/videos",site:"https://ithillel.ua/",dateFirstVideo:"2016.03.02",dateLastVideo:"2022.11.05",amountVideos:887},{id:14,theme:"frontend",title:"Миша Ларченко",author:"Миша Ларченко",city:"Амстердам",country:"Нидерланды",link:"https://www.youtube.com/@larchanka/videos",site:"https://www.mobila.name/",dateFirstVideo:"2008.09.17",dateLastVideo:"2022.11.08",amountVideos:830},{id:15,theme:"frontend",title:"OTUS Трансляции 2",author:"",city:"Москва",country:"Россия",link:"https://www.youtube.com/@otus2630/videos",site:"https://otus.ru/",dateFirstVideo:"2017.11.19",dateLastVideo:"2022.11.08",amountVideos:792},{id:16,theme:"frontend",title:"Rolling Scopes School",author:"",city:"Минск",country:"Беларусь",link:"https://www.youtube.com/@RollingScopesSchool/videos",site:"https://rs.school/",dateFirstVideo:"2019.08.25",dateLastVideo:"2022.11.04",amountVideos:792},{id:17,theme:"frontend",title:"WebDev с нуля. Канал Алекса Лущенко",author:"Александр Лущенко",city:"Киев",country:"Украина",link:"https://www.youtube.com/@itgid/videos",site:"https://itgid.info/",dateFirstVideo:"2015.08.10",dateLastVideo:"2022.08.11",amountVideos:780},{id:18,theme:"frontend",title:"Академия разработки MediaSoft",author:"Максим Суханкин",city:"Ульяновск",country:"Россия",link:"https://www.youtube.com/@MediaSoft_academy/videos",site:"https://academy.mediasoft.team/",dateFirstVideo:"2021.09.08",dateLastVideo:"2022.11.08",amountVideos:771},{id:19,theme:"frontend",title:"Web-dizain",author:"",city:"",country:"Украина",link:"https://www.youtube.com/@WebdizUa/videos",site:"",dateFirstVideo:"2016.06.26",dateLastVideo:"2024.01.07",amountVideos:752},{id:20,theme:"frontend",title:"Хекслет",author:"Кирилл Мокевнин",city:"Москва",country:"Россия",link:"https://www.youtube.com/@HexletOrg/videos",site:"https://ru.hexlet.io/",dateFirstVideo:"2012.10.23",dateLastVideo:"2022.10.13",amountVideos:693},{id:21,theme:"frontend",title:"Кирилл Макаров (Программирование)",author:"",city:"",country:"",link:"https://www.youtube.com/@makarov.1996/videos",site:"",dateFirstVideo:"2020.03.12",dateLastVideo:"2023.09.07",amountVideos:690},{id:22,theme:"frontend",title:"Игорь Бабко",author:"Игорь Бабко",city:"",country:"Украина",link:"https://www.youtube.com/@igorbabko/videos",site:"",dateFirstVideo:"2021.03.10",dateLastVideo:"2022.11.08",amountVideos:662},{id:23,theme:"frontend",title:"Yandex for Frontend",author:"",city:"Москва",country:"Россия",link:"https://www.youtube.com/@YandexforFrontend/videos",site:"https://events.yandex.ru/",dateFirstVideo:"2014.11.05",dateLastVideo:"2022.09.01",amountVideos:626},{id:24,theme:"frontend",title:"Glo Academy",author:"Артем Исламов",city:"Казань",country:"Россия",link:"https://www.youtube.com/@Glo_Academy/videos",site:"https://glo.academy/",dateFirstVideo:"2016.03.12",dateLastVideo:"2022.09.12",amountVideos:605},{id:25,theme:"frontend",title:"Максат Биримкулов",author:"Максат Биримкулов",city:"Бишкек",country:"Киргизия",link:"https://www.youtube.com/@user-zw7tl7ic4k/videos",site:"",dateFirstVideo:"2020.12.09",dateLastVideo:"2022.11.08",amountVideos:603},{id:26,theme:"frontend",title:"WAYUP & Андрей Гаврилов",author:"Андрей Гаврилов",city:"Одесса",country:"Украина",link:"https://www.youtube.com/@WAYUPIN/videos",site:"https://wayup.in/",dateFirstVideo:"2015.05.23",dateLastVideo:"2022.11.04",amountVideos:601},{id:27,theme:"frontend",title:"IT-KAMASUTRA",author:"Дмитрий Кузюбердин",city:"Минск",country:"Беларусь",link:"https://www.youtube.com/@ITKAMASUTRA/videos",site:"https://it-incubator.io/",dateFirstVideo:"2018.09.10",dateLastVideo:"2022.11.08",amountVideos:577},{id:28,theme:"frontend",title:"Веб-программист Дмитрий Ченгаев",author:"Дмитрий Ченгаев",city:"Усть-Каменогорск",country:"Казахстан",link:"https://www.youtube.com/@-..9609/videos",site:"https://webkyrs.info/",dateFirstVideo:"2016.06.24",dateLastVideo:"2022.10.14",amountVideos:576},{id:29,theme:"frontend",title:"webDev",author:"Евгений Ковальчук",city:"Минск",country:"Беларусь",link:"https://www.youtube.com/@YauhenKavalchuk/videos",site:"",dateFirstVideo:"2017.03.30",dateLastVideo:"2022.11.08",amountVideos:572},{id:30,theme:"frontend",title:"Web Developer Blog",author:"Алексей Супрун",city:"Харьков",country:"Украина",link:"https://www.youtube.com/@SuprunAlexey/videos",site:"",dateFirstVideo:"2015.11.21",dateLastVideo:"2022.05.13",amountVideos:554},{id:31,theme:"frontend",title:"Bogdan Stashchuk",author:"Богдан Стащук",city:"Киев",country:"Украина",link:"https://www.youtube.com/@Bogdan_Stashchuk/videos",site:"https://pro.stashchuk.com/",dateFirstVideo:"2018.05.02",dateLastVideo:"2022.09.08",amountVideos:552},{id:32,theme:"frontend",title:"OTUS Трансляции 3",author:"",city:"Москва",country:"Россия",link:"https://www.youtube.com/@otus3868/videos",site:"https://otus.ru/",dateFirstVideo:"2018.05.15",dateLastVideo:"2022.11.07",amountVideos:547},{id:33,theme:"frontend",title:"Веб-стандарты",author:"Никита Дубко, Андрей Мелихов, Вадим Макеев, Юля Миоцен",city:"Москва",country:"Россия",link:"https://www.youtube.com/@webstandards_ru/videos",site:"https://web-standards.ru/",dateFirstVideo:"2013.09.18",dateLastVideo:"2022.11.07",amountVideos:545},{id:34,theme:"frontend",title:"HolyJS",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@HolyJS/videos",site:"",dateFirstVideo:"2016.08.23",dateLastVideo:"2023.11.30",amountVideos:527},{id:35,theme:"frontend",title:"Loftschool",author:"Дмитрий Ковальчук",city:"Санкт Петербург",country:"Россия",link:"https://www.youtube.com/@LoftschoolVideo/videos",site:"https://loftschool.com/",dateFirstVideo:"2014.10.11",dateLastVideo:"2022.08.12",amountVideos:521},{id:36,theme:"frontend",title:"CodingWithTopchiy",author:"",city:"",country:"",link:"https://www.youtube.com/@codingwithtopchiy/videos",site:"",dateFirstVideo:"2022.06.09",dateLastVideo:"2022.11.14",amountVideos:516},{id:37,theme:"frontend",title:"The Rolling Scopes",author:"",city:"Минск",country:"Беларусь",link:"https://www.youtube.com/@therollingscopes/videos",site:"https://rs.school/",dateFirstVideo:"2013.08.02",dateLastVideo:"2021.08.04",amountVideos:512},{id:38,theme:"frontend",title:"Финты WordPress",author:"Артем Абрамович",city:"Балаково",country:"Россия",link:"https://www.youtube.com/@wpruse/videos",site:"https://wpruse.ru/",dateFirstVideo:"2013.08.02",dateLastVideo:"2021.12.30",amountVideos:506},{id:39,theme:"frontend",title:"JavaScript.Ninja",author:"Илья Климов",city:"Харьков",country:"Украина",link:"https://www.youtube.com/@JavaScriptNinja/videos",site:"https://javascript.ninja/",dateFirstVideo:"2015.10.18",dateLastVideo:"2022.10.15",amountVideos:498},{id:40,theme:"frontend",title:"Joomla WFMS",author:"Виктор Гавриленко",city:"Москва",country:"Россия",link:"https://www.youtube.com/@joomlawfms5471/videos",site:"https://webformyself.com/",dateFirstVideo:"2018.08.11",dateLastVideo:"2022.10.14",amountVideos:487},{id:41,theme:"frontend",title:"RED Group",author:"Максим Шушвал",city:"Москва",country:"Россия",link:"https://www.youtube.com/@REDGroup/videos",site:"https://htmllessons.ru/",dateFirstVideo:"2017.11.11",dateLastVideo:"2022.11.07",amountVideos:461},{id:42,theme:"frontend",title:"Яндекс Образование",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@Education_Yandex",site:"",dateFirstVideo:"2014.11.10",dateLastVideo:"2023.09.01",amountVideos:460},{id:43,theme:"frontend",title:"Михаил Базаров",author:"Михаил Базаров",city:"Санкт Петербург",country:"Россия",link:"https://www.youtube.com/@bazarov/videos",site:"https://bazarow.ru/",dateFirstVideo:"2011.10.30",dateLastVideo:"2022.08.14",amountVideos:441},{id:44,theme:"frontend",title:"IT-INCUBATOR",author:"Дмитрий Кузюбердин",city:"Минск",country:"Беларусь",link:"https://www.youtube.com/@ITINCUBATOR/videos",site:"https://it-incubator.io/",dateFirstVideo:"2019.03.21",dateLastVideo:"2023.06.26",amountVideos:424},{id:45,theme:"frontend",title:"ToyBattle | Бесплатные курсы Программирования",author:"",city:"Воронеж",country:"Россия",link:"https://www.youtube.com/@toybattle/videos",site:"https://fkn.ktu10.com/",dateFirstVideo:"2012.12.22",dateLastVideo:"2024.01.21",amountVideos:423},{id:46,theme:"frontend",title:"EPAM RUSSIA нет уже",author:"",city:"",country:"Россия",link:"https://www.youtube.com/channel/UCo1fCtyXhdTrGnGUgoCHuCQ/videos",site:"",dateFirstVideo:"2015.10.12",dateLastVideo:"2022.01.17",amountVideos:417},{id:47,theme:"frontend",title:"Кубанычбек Назаралиев",author:"Кубанычбек Назаралиев",city:"",country:"",link:"https://www.youtube.com/@kuba_duishobaevich/videos",site:"",dateFirstVideo:"2011.10.13",dateLastVideo:"2022.10.18",amountVideos:414},{id:48,theme:"frontend",title:"SACRED DEVELOPER",author:"",city:"",country:"Украина",link:"https://www.youtube.com/@SACREDDEVELOPER/videos",site:"",dateFirstVideo:"2022.04.11",dateLastVideo:"2022.10.27",amountVideos:412},{id:49,theme:"frontend",title:"Дмитрий Трепачёв",author:"Дмитрий Трепачёв",city:"Минск",country:"Беларусь",link:"https://www.youtube.com/@user-zc1cv5ie1t/videos",site:"https://code.mu/ru/",dateFirstVideo:"2014.03.03",dateLastVideo:"2022.07.07",amountVideos:409},{id:50,theme:"frontend",title:"uwebdesign",author:"Александр Гончаров, Никита Тарасов",city:"Челябинск",country:"Россия",link:"https://www.youtube.com/@uwebdesign/videos",site:"https://uwebdesign.ru/",dateFirstVideo:"2014.03.03",dateLastVideo:"2022.07.07",amountVideos:403},{id:51,theme:"frontend",title:"Frontend Channel",author:"",city:"Москва",country:"Россия",link:"https://www.youtube.com/@FrontendChannel/videos",site:"https://frontendconf.ru/",dateFirstVideo:"2017.12.24",dateLastVideo:"2021.09.10",amountVideos:401},{id:52,theme:"frontend",title:"АйТиБорода",author:"Алексей Картынник",city:"Минск",country:"Беларусь",link:"https://www.youtube.com/@itbeard/videos",site:"https://itbeard.com/",dateFirstVideo:"2018.05.13",dateLastVideo:"2022.10.14",amountVideos:397},{id:53,theme:"frontend",title:"YouRa Allakhverdov",author:"Юра Аллахвердов",city:"",country:"Украина",link:"https://www.youtube.com/@YouRaAllakhverdov/videos",site:"https://masters-of-code.com/",dateFirstVideo:"2019.01.12",dateLastVideo:"2022.11.06",amountVideos:392},{id:54,theme:"frontend",title:"JS Camp - Разработка React Native приложений",author:"",city:"",country:"",link:"https://www.youtube.com/@JavaScriptCampRU/videos",site:"",dateFirstVideo:"2018.07.30",dateLastVideo:"2023.06.11",amountVideos:371},{id:55,theme:"frontend",title:"MaxGraph - cайты как страсть",author:"Максим Васянович",city:"Санкт Петербург",country:"Россия",link:"https://www.youtube.com/@maxgraph/videos",site:"https://maxgraph.ru/",dateFirstVideo:"2017.08.27",dateLastVideo:"2022.11.03",amountVideos:361},{id:56,theme:"frontend",title:"Otus Трансляции 4",author:"",city:"Москва",country:"Россия",link:"https://www.youtube.com/@otus4247/streams",site:"https://otus.ru/",dateFirstVideo:"2020.06.01",dateLastVideo:"2022.11.09",amountVideos:343},{id:57,theme:"frontend",title:"FrontCoder",author:"Анатолий Саламатин",city:"Москва",country:"Россия",link:"https://www.youtube.com/@Frontcoder/videos",site:"https://asalamatin.ru/",dateFirstVideo:"2016.10.18",dateLastVideo:"2021.08.05",amountVideos:338},{id:58,theme:"frontend",title:"Timur Shemsedinov",author:"Тимур Шемсединов",city:"Киев",country:"Украина",link:"https://www.youtube.com/@TimurShemsedinov/videos",site:"",dateFirstVideo:"2012.08.12",dateLastVideo:"2022.10.25",amountVideos:334},{id:59,theme:"frontend",title:"Evrone Development",author:"",city:"",country:"",link:"https://www.youtube.com/@EvroneDevelopment/videos",site:"",dateFirstVideo:"2018.06.28",dateLastVideo:"2023.06.21",amountVideos:331},{id:60,theme:"frontend",title:"EDUCAT.courses",author:"",city:"",country:"",link:"https://www.youtube.com/@EDUCATcourses/videos",site:"https://educat.courses/courses",dateFirstVideo:"2020.05.02",dateLastVideo:"2023.02.27",amountVideos:330},{id:61,theme:"frontend",title:"Solid Academy",author:"",city:"",country:"",link:"https://www.youtube.com/@solidacademy9880/videos",site:"",dateFirstVideo:"2022.01.05",dateLastVideo:"2022.11.15",amountVideos:318},{id:62,theme:"frontend",title:"Евгений Попов",author:"Евгений Попов",city:"Екатеринбург",country:"Россия",link:"https://www.youtube.com/@evgeniypopovDOTcom/videos",site:"https://ruseller.com/",dateFirstVideo:"2011.11.16",dateLastVideo:"2020.04.25",amountVideos:316},{id:63,theme:"frontend",title:"Анна Блок",author:"Анна Блок",city:"Екатеринбург",country:"Россия",link:"https://www.youtube.com/@annblok_webdev/videos",site:"https://tpverstak.ru/",dateFirstVideo:"2017.09.10",dateLastVideo:"2022.11.07",amountVideos:314},{id:64,theme:"frontend",title:"htmllab",author:"Алексей Тарасов",city:"",country:"Россия",link:"https://www.youtube.com/@HtmllabRu/videos",site:"",dateFirstVideo:"2016.06.10",dateLastVideo:"2023.04.25",amountVideos:313},{id:65,theme:"frontend",title:"IT is me",author:"",city:"",country:"",link:"https://www.youtube.com/@ITisme-cl7sq/videos",site:"",dateFirstVideo:"2019.06.30",dateLastVideo:"2023.07.23",amountVideos:309},{id:66,theme:"frontend",title:"Андрей Андриевский",author:"Андрей Андриевский",city:"",country:"Украина",link:"https://www.youtube.com/@andrievskii/videos",site:"",dateFirstVideo:"2015.01.24",dateLastVideo:"2021.05.29",amountVideos:306},{id:67,theme:"frontend",title:"Школа itProger / Программирование",author:"Гоша Дударь",city:"Киев",country:"Украина",link:"https://www.youtube.com/@itproger/videos",site:"https://itproger.com/",dateFirstVideo:"2020.09.01",dateLastVideo:"2022.11.06",amountVideos:303},{id:68,theme:"frontend",title:"Быть Программистом",author:"Александр Сокирка",city:"Кишинев",country:"Молдова",link:"https://www.youtube.com/@bedeveloper/videos",site:"https://geniuscourses.com/",dateFirstVideo:"2015.08.31",dateLastVideo:"2022.10.22",amountVideos:300},{id:69,theme:"frontend",title:"ART PROGRAMS",author:"Артур Хмелярский",city:"Брест",country:"Беларусь",link:"https://www.youtube.com/@ARTPROGRAMS/videos",site:"https://art-programs.ru/",dateFirstVideo:"2019.09.22",dateLastVideo:"2022.11.07",amountVideos:297},{id:70,theme:"frontend",title:"Laravel Creative",author:"",city:"",country:"",link:"https://www.youtube.com/@laravelcreative/videos",site:"",dateFirstVideo:"2021.02.18",dateLastVideo:"2023.05.27",amountVideos:296},{id:71,theme:"frontend",title:"MaximumJavascript (6Seniors)",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@6seniors/videos",site:"",dateFirstVideo:"2021.11.27",dateLastVideo:"2022.11.19",amountVideos:295},{id:72,theme:"frontend",title:"English Practice 4 Every1",author:"",city:"",country:"",link:"https://www.youtube.com/@englishpractice4every1/videos",site:"",dateFirstVideo:"2023.03.26",dateLastVideo:"2023.08.11",amountVideos:294},{id:73,theme:"frontend",title:"Сергей Дмитриевский",author:"Сергей Дмитриевский",city:"Москва",country:"Россия",link:"https://www.youtube.com/@sergeydmitrievsky/videos",site:"",dateFirstVideo:"2021.01.25",dateLastVideo:"2022.11.13",amountVideos:294},{id:74,theme:"frontend",title:"frontend one",author:"",city:"",country:"",link:"https://www.youtube.com/@frontendone8587/streams",site:"",dateFirstVideo:"2022.04.07",dateLastVideo:"2022.11.19",amountVideos:290},{id:75,theme:"frontend",title:"Школа Вебмастеров",author:"",city:"Москва",country:"Россия",link:"https://www.youtube.com/@user-vk5bu7vc7s/videos",site:"https://academy.yandex.ru/",dateFirstVideo:"2015.09.01",dateLastVideo:"2022.02.17",amountVideos:289},{id:76,theme:"frontend",title:"Владилен Минин",author:"Владилен Минин",city:"Санкт Петербург",country:"Россия",link:"https://www.youtube.com/@VladilenMinin/videos",site:"https://vladilen.ru/vue",dateFirstVideo:"2019.03.05",dateLastVideo:"2022.11.05",amountVideos:286},{id:77,theme:"frontend",title:"Vel Wild",author:"Валя Дикая",city:"Покровск",country:"Украина",link:"https://www.youtube.com/@VelWild/videos",site:"https://vel-wild.pro/",dateFirstVideo:"2019.06.23",dateLastVideo:"2022.05.24",amountVideos:285},{id:78,theme:"frontend",title:"JavaScript.ru",author:"Илья Кантор",city:"Москва",country:"Россия",link:"https://www.youtube.com/@JavaScriptru-videos/videos",site:"https://learn.javascript.ru/",dateFirstVideo:"2012.01.13",dateLastVideo:"2021.05.11",amountVideos:276},{id:79,theme:"frontend",title:"Kostia Bazrov-WORK",author:"Костя Базров",city:"Москва",country:"Россия",link:"https://www.youtube.com/@KostiaBazrov/videos",site:"",dateFirstVideo:"2011.08.08",dateLastVideo:"2022.05.05",amountVideos:273},{id:80,theme:"frontend",title:"Daniil Loban",author:"",city:"",country:"",link:"https://www.youtube.com/@daniilloban7511/videos",site:"",dateFirstVideo:"2022.01.19",dateLastVideo:"2023.08.09",amountVideos:264},{id:81,theme:"frontend",title:"Victor Stork нет уже",author:"Виктор Сторк",city:"Курск",country:"Россия",link:"https://www.youtube.com/c/VictorStork/videos",site:"",dateFirstVideo:"2018.08.25",dateLastVideo:"2021.07.20",amountVideos:254},{id:82,theme:"frontend",title:"Denis Timoshitskiy",author:"Денис Тимошитский",city:"Санкт Петербург",country:"Россия",link:"https://www.youtube.com/@DenisTimoshitskiy/videos",site:"https://d-e-n.info/",dateFirstVideo:"2019.01.09",dateLastVideo:"2022.11.07",amountVideos:252},{id:83,theme:"frontend",title:"ItShell",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@ITSHELL-WEB/videos",site:"",dateFirstVideo:"2021.04.17",dateLastVideo:"2022.11.06",amountVideos:251},{id:84,theme:"frontend",title:"Фрилансер по жизни",author:"Женя Андриканич",city:"Ужгород",country:"Украина",link:"https://www.youtube.com/@FreelancerLifeStyle/videos",site:"https://fls.guru/",dateFirstVideo:"2019.05.08",dateLastVideo:"2022.10.31",amountVideos:251},{id:85,theme:"frontend",title:"Beknur Zheenkulov",author:"",city:"",country:"",link:"https://www.youtube.com/@callzencallzen5738/videos",site:"",dateFirstVideo:"2022.12.05",dateLastVideo:"2023.06.20",amountVideos:249},{id:86,theme:"frontend",title:"Kamil Abzalov",author:"Камиль Абзалов",city:"",country:"Кипр",link:"https://www.youtube.com/@Kamil-abzalovRu/videos",site:"http://kamil-abzalov.ru/",dateFirstVideo:"2014.06.29",dateLastVideo:"2021.10.16",amountVideos:248},{id:87,theme:"frontend",title:"Алибек Саринжиев",author:"Алибек Саринжиев",city:"",country:"",link:"https://www.youtube.com/@user-cw4ju6qe5n/videos",site:"",dateFirstVideo:"2022.06.22",dateLastVideo:"2022.11.22",amountVideos:248},{id:88,theme:"frontend",title:"Дмитрий Герасимов",author:"Дмитрий Герасимов",city:"",country:"Россия",link:"https://www.youtube.com/@dmitrii_gerasimov/videos",site:"",dateFirstVideo:"2020.07.22",dateLastVideo:"2022.11.09",amountVideos:248},{id:89,theme:"frontend",title:"Code==Poetry",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@code-is-poetry/videos",site:"",dateFirstVideo:"2018.01.11",dateLastVideo:"2024.01.18",amountVideos:244},{id:90,theme:"frontend",title:"Ilnur Ryazhapov",author:"",city:"",country:"",link:"https://www.youtube.com/@ilnurryazhapov9377/videos",site:"",dateFirstVideo:"2021.04.29",dateLastVideo:"2024.01.09",amountVideos:234},{id:91,theme:"frontend",title:"Эльбрус Буткемп: школа программирования",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@ElbrusBootcamp/videos",site:"",dateFirstVideo:"2019.07.30",dateLastVideo:"2023.05.27",amountVideos:233},{id:92,theme:"frontend",title:"WEB Coding",author:"",city:"",country:"",link:"https://www.youtube.com/@WEBCreator-sl9vk/videos",site:"",dateFirstVideo:"2023.05.25",dateLastVideo:"2023.08.11",amountVideos:232},{id:93,theme:"frontend",title:"HTML Academy",author:"",city:"Санкт Петербург",country:"Россия",link:"https://www.youtube.com/@HTMLAcademyRUS/videos",site:"https://htmlacademy.ru/",dateFirstVideo:"2014.01.22",dateLastVideo:"2022.11.09",amountVideos:229},{id:94,theme:"frontend",title:"Какие-то уроки",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@kakieToYroki/videos",site:"",dateFirstVideo:"2020.12.04",dateLastVideo:"2022.11.05",amountVideos:227},{id:95,theme:"frontend",title:"Splincode TV",author:"",city:"",country:"",link:"https://www.youtube.com/@splincodewd/videos",site:"",dateFirstVideo:"2015.03.20",dateLastVideo:"2022.01.30",amountVideos:221},{id:96,theme:"frontend",title:"GoToCode",author:"",city:"",country:"",link:"https://www.youtube.com/@vi6Dim/videos",site:"",dateFirstVideo:"2023.09.27",dateLastVideo:"2024.01.08",amountVideos:219},{id:97,theme:"frontend",title:"Техноманьяк",author:"",city:"",country:"",link:"https://www.youtube.com/@tehno.maniak/videos",site:"",dateFirstVideo:"2021.06.14",dateLastVideo:"2023.08.03",amountVideos:213},{id:98,theme:"frontend",title:"Web Programming",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@webprogramming5048/videos",site:"",dateFirstVideo:"2019.02.20",dateLastVideo:"2022.11.03",amountVideos:208},{id:99,theme:"frontend",title:"Useful Web",author:"Владимир Языков",city:"",country:"Россия",link:"https://www.youtube.com/@UsefulWeb/videos",site:"",dateFirstVideo:"2015.11.21",dateLastVideo:"2022.09.08",amountVideos:208},{id:100,theme:"frontend",title:"Онлайн-школа METHED",author:"Максим",city:"",country:"Россия",link:"https://www.youtube.com/@my.methed/videos",site:"https://methed.ru/",dateFirstVideo:"2021.08.10",dateLastVideo:"2022.11.08",amountVideos:203},{id:101,theme:"frontend",title:"Максим Гром",author:"Максим Гром",city:"",country:"Украина",link:"https://www.youtube.com/@grommaks/videos",site:"",dateFirstVideo:"2019.06.30",dateLastVideo:"2022.05.01",amountVideos:202},{id:102,theme:"frontend",title:"OTUS Трансляции 5",author:"",city:"Москва",country:"Россия",link:"https://www.youtube.com/@otus5157/streams",site:"https://otus.ru/",dateFirstVideo:"2021.02.16",dateLastVideo:"2022.10.27",amountVideos:196},{id:103,theme:"frontend",title:"Amantay Suranaliev",author:"Амантай Сураналиев",city:"",country:"Киргизия",link:"https://www.youtube.com/@amantaysuranaliev/videos",site:"",dateFirstVideo:"2021.05.26",dateLastVideo:"2022.04.26",amountVideos:194},{id:104,theme:"frontend",title:"Do work that matters",author:"Катя",city:"",country:"Украина",link:"https://www.youtube.com/@KateLev/videos",site:"",dateFirstVideo:"2015.05.13",dateLastVideo:"2022.06.21",amountVideos:194},{id:105,theme:"frontend",title:"Илья Ландар WEB РАЗРАБОТКА",author:"Илья Ландар",city:"",country:"",link:"https://www.youtube.com/@Illya.Landar/videos",site:"",dateFirstVideo:"2020.03.12",dateLastVideo:"2023.05.25",amountVideos:192},{id:106,theme:"frontend",title:"kirjs",author:"",city:"",country:"США",link:"https://www.youtube.com/@kirjs/streams",site:"https://codelab.fun/",dateFirstVideo:"2021.02.08",dateLastVideo:"2022.10.26",amountVideos:190},{id:107,theme:"frontend",title:"MakeWeb.me",author:"Никита Красник",city:"",country:"Россия",link:"https://www.youtube.com/@MakewebMeOfficial/videos",site:"https://makeweb.me/",dateFirstVideo:"2015.09.19",dateLastVideo:"2022.09.19",amountVideos:190},{id:108,theme:"frontend",title:"PurpleSchool Anton Larichev",author:"Антон Ларичев",city:"",country:"Россия",link:"https://www.youtube.com/@PurpleSchool/videos",site:"",dateFirstVideo:"2022.05.04",dateLastVideo:"2022.11.16",amountVideos:190},{id:109,theme:"frontend",title:"Михаил Непомнящий",author:"Михаил Непомнящий",city:"",country:"Россия",link:"https://www.youtube.com/@mishanep/videos",site:"https://www.mishanep.com/",dateFirstVideo:"2018.09.13",dateLastVideo:"2022.11.09",amountVideos:189},{id:110,theme:"frontend",title:"FRONTENDIYA - Веб разработка",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@frontendiya/videos",site:"",dateFirstVideo:"2023.04.13",dateLastVideo:"2023.06.02",amountVideos:188},{id:111,theme:"frontend",title:"Archakov Blog",author:"Денис Арчаков",city:"",country:"Россия",link:"https://www.youtube.com/@ArchakovBlog/videos",site:"https://archakov.im/",dateFirstVideo:"2016.05.12",dateLastVideo:"2022.08.15",amountVideos:187},{id:112,theme:"frontend",title:"WebStork",author:"Виктор Сторк",city:"Курск",country:"Россия",link:"https://www.youtube.com/@webstork2311/videos",site:"",dateFirstVideo:"2021.06.09",dateLastVideo:"2022.08.16",amountVideos:184},{id:113,theme:"frontend",title:"От 0 до 1",author:"Вадим Прокопчук",city:"Харьков",country:"Украина",link:"https://www.youtube.com/@vadymprokopchuk/videos",site:"https://from0to1.com.ua/",dateFirstVideo:"2017.06.04",dateLastVideo:"2022.09.11",amountVideos:184},{id:114,theme:"frontend",title:"geektech front03",author:"",city:"",country:"",link:"https://www.youtube.com/@geektechfront0325/streams",site:"",dateFirstVideo:"2022.09.17",dateLastVideo:"2023.07.08",amountVideos:182},{id:115,theme:"frontend",title:"Alex Monad Вязание кода",author:"Александр Дегтярёв",city:"",country:"Россия",link:"https://www.youtube.com/@AlexMonad/videos",site:"",dateFirstVideo:"2021.03.04",dateLastVideo:"2022.09.02",amountVideos:179},{id:116,theme:"frontend",title:"Простыми словами",author:"",city:"",country:"",link:"https://www.youtube.com/@prostimi-slovami/videos",site:"",dateFirstVideo:"2020.12.20",dateLastVideo:"2023.08.13",amountVideos:179},{id:117,theme:"frontend",title:"Петр Радько [CMTV]",author:"Петр Радько",city:"Балашиха",country:"Россия",link:"https://www.youtube.com/@CMTV_official/videos",site:"https://radkopeter.ru/",dateFirstVideo:"2012.07.04",dateLastVideo:"2021.05.04",amountVideos:176},{id:118,theme:"frontend",title:"Artem Dimitrov",author:"",city:"",country:"",link:"https://www.youtube.com/@ArtemDimitrov/videos",site:"",dateFirstVideo:"2019.01.22",dateLastVideo:"2023.08.29",amountVideos:175},{id:119,theme:"frontend",title:"SIBERIA CAN CODE Frontend",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@siberiacancode/videos",site:"",dateFirstVideo:"2022.02.23",dateLastVideo:"2022.11.17",amountVideos:174},{id:120,theme:"frontend",title:"Программист86",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@861/videos",site:"",dateFirstVideo:"2019.12.16",dateLastVideo:"2022.03.14",amountVideos:174},{id:121,theme:"frontend",title:"Макс из codereview",author:"",city:"",country:"",link:"https://www.youtube.com/@yourcodereview/videos",site:"",dateFirstVideo:"2021.11.02",dateLastVideo:"2024.02.19",amountVideos:167},{id:122,theme:"frontend",title:"CodexWeb",author:"Сергей Михалевич",city:"",country:"Беларусь",link:"https://www.youtube.com/@CodexWeb/videos",site:"",dateFirstVideo:"2010.11.23",dateLastVideo:"2017.01.16",amountVideos:166},{id:123,theme:"frontend",title:"Abanking Education",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@abankingeducation6518/videos",site:"https://abanking.ru/",dateFirstVideo:"2021.02.15",dateLastVideo:"2022.11.12",amountVideos:164},{id:124,theme:"frontend",title:"KharkivJS Community",author:"",city:"",country:"Украина",link:"https://www.youtube.com/@KharkivJSCommunity/videos",site:"",dateFirstVideo:"2015.11.30",dateLastVideo:"2020.01.03",amountVideos:160},{id:125,theme:"frontend",title:"Академия сайтов Программирование",author:"",city:"",country:"",link:"https://www.youtube.com/@academy_site/videos",site:"",dateFirstVideo:"2023.01.05",dateLastVideo:"2024.01.02",amountVideos:160},{id:126,theme:"frontend",title:"Дмитрий Лаврик",author:"Дмитрий Лаврик",city:"Москва",country:"Россия",link:"https://www.youtube.com/@dmitrylavrik/videos",site:"https://dmitrylavrik.ru/",dateFirstVideo:"2015.02.04",dateLastVideo:"2022.08.25",amountVideos:159},{id:127,theme:"frontend",title:"Aldia",author:"",city:"",country:"",link:"https://www.youtube.com/@aldia6994/videos",site:"",dateFirstVideo:"2022.05.26",dateLastVideo:"2022.11.18",amountVideos:158},{id:128,theme:"frontend",title:"Ulbi TV",author:"Тимур Ульби",city:"",country:"Россия",link:"https://www.youtube.com/@UlbiTV/videos",site:"",dateFirstVideo:"2020.07.12",dateLastVideo:"2022.11.04",amountVideos:158},{id:129,theme:"frontend",title:"Архитектор ПО. Александр Желнин",author:"Александр Желнин",city:"",country:"",link:"https://www.youtube.com/@Kulibins1/videos",site:"",dateFirstVideo:"2021.05.12",dateLastVideo:"2022.11.09",amountVideos:158},{id:130,theme:"frontend",title:"MoscowJS",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@moscowjs/videos",site:"https://moscowjs.org/",dateFirstVideo:"2013.09.07",dateLastVideo:"2023.06.29",amountVideos:156},{id:131,theme:"frontend",title:"Solvery",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@Solvery/videos",site:"",dateFirstVideo:"2020.04.09",dateLastVideo:"2022.11.16",amountVideos:155},{id:132,theme:"frontend",title:"Костылев Дмитрий А. тех.эксперт, СГХТ 155",author:"Дмитрий Костылев",city:"",country:"Россия",link:"https://www.youtube.com/@user-ut6or3lm9g/videos",site:"",dateFirstVideo:"2022.06.08",dateLastVideo:"2024.03.05",amountVideos:155},{id:133,theme:"frontend",title:"Vlad Neverov",author:"Влад Неверов",city:"Киев",country:"Украина",link:"https://www.youtube.com/@neverov_music/videos",site:"",dateFirstVideo:"2017.07.26",dateLastVideo:"2022.06.18",amountVideos:153},{id:134,theme:"frontend",title:"JS React",author:"",city:"",country:"",link:"https://www.youtube.com/@jsreact2728/videos",site:"",dateFirstVideo:"2019.08.05",dateLastVideo:"2019.08.06",amountVideos:152},{id:135,theme:"frontend",title:"WebDesign Master",author:"Алексей Климанов",city:"Сочи",country:"Россия",link:"https://www.youtube.com/@wdm/videos",site:"https://webdesign-master.ru/",dateFirstVideo:"2013.12.03",dateLastVideo:"2022.09.16",amountVideos:151},{id:136,theme:"frontend",title:"Уголок фронтендера",author:"",city:"",country:"",link:"https://www.youtube.com/@frontend_corner_ru/videos",site:"",dateFirstVideo:"2023.08.15",dateLastVideo:"2024.01.02",amountVideos:150},{id:137,theme:"frontend",title:"EasyCode",author:"Светлана Мещерякова, Денис Мещеряков",city:"Киев",country:"Украина",link:"https://www.youtube.com/@EasyCodeSchool/videos",site:"https://www.easycode.school/",dateFirstVideo:"2017.03.13",dateLastVideo:"2020.06.21",amountVideos:149},{id:138,theme:"frontend",title:"Zar Zakharov UI Developer (Severenit)",author:"Зар Захаров",city:"",country:"Россия",link:"https://www.youtube.com/@Severenit/videos",site:"",dateFirstVideo:"2020.07.02",dateLastVideo:"2024.01.17",amountVideos:149},{id:139,theme:"frontend",title:"DKA-DEVELOP",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@DKADEVELOP/videos",site:"https://dka-develop.ru/",dateFirstVideo:"2016.04.01",dateLastVideo:"2021.03.20",amountVideos:148},{id:140,theme:"frontend",title:"EngineerSpock - IT & программирование",author:"",city:"",country:"",link:"https://www.youtube.com/@EngineerSpock/videos",site:"",dateFirstVideo:"2021.05.20",dateLastVideo:"2023.09.06",amountVideos:148},{id:141,theme:"frontend",title:"Brainoteka Light",author:"Александр Сажин",city:"",country:"Россия",link:"https://www.youtube.com/@BrainotekaLight/videos",site:"https://brainoteka.com/",dateFirstVideo:"2015.06.18",dateLastVideo:"2019.11.04",amountVideos:147},{id:142,theme:"frontend",title:"Лёша Корепанов",author:"Лёша Корепанов",city:"",country:"Нидерланды",link:"https://www.youtube.com/@aocore/videos",site:"",dateFirstVideo:"2020.09.06",dateLastVideo:"2022.06.01",amountVideos:145},{id:143,theme:"frontend",title:"Front-end Science",author:"Сергей Пузанков",city:"",country:"Украина",link:"https://www.youtube.com/@frontendscience/videos",site:"",dateFirstVideo:"2015.09.06",dateLastVideo:"2021.12.31",amountVideos:142},{id:144,theme:"frontend",title:"Kottans",author:"",city:"",country:"Украина",link:"https://www.youtube.com/@Kottans_dev/videos",site:"https://kottans.org/",dateFirstVideo:"2019.02.02",dateLastVideo:"2021.08.03",amountVideos:141},{id:145,theme:"frontend",title:"BrainsCloud",author:"Дмитрий Валак",city:"Даугавпилс",country:"Латвия",link:"https://www.youtube.com/@BrainsCloud/videos",site:"https://brainscloud.ru/",dateFirstVideo:"2017.09.14",dateLastVideo:"2022.02.05",amountVideos:138},{id:146,theme:"frontend",title:"Александр Дудукало",author:"Александр Дудукало",city:"",country:"Россия",link:"https://www.youtube.com/@alex_dudukalo/videos",site:"",dateFirstVideo:"2016.10.31",dateLastVideo:"2019.10.27",amountVideos:138},{id:147,theme:"frontend",title:"Обучение HTML, CSS, JavaScript",author:"Анатолий Ивашов",city:"",country:"Россия",link:"https://www.youtube.com/@ivashov/videos",site:"",dateFirstVideo:"2021.05.12",dateLastVideo:"2022.11.13",amountVideos:138},{id:148,theme:"frontend",title:"PiterJS",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@PiterJS/videos",site:"",dateFirstVideo:"2016.02.10",dateLastVideo:"2023.08.17",amountVideos:137},{id:149,theme:"frontend",title:"InSimpleWords",author:"",city:"",country:"Украина",link:"https://www.youtube.com/@InSimpleWords_WebDev/videos",site:"",dateFirstVideo:"2018.01.25",dateLastVideo:"2019.12.01",amountVideos:137},{id:150,theme:"frontend",title:"WebUpBlog - Уроки веб разработки",author:"Слава Шевченко",city:"",country:"Украина",link:"https://www.youtube.com/@WebupblogRu/videos",site:"https://webupblog.ru/",dateFirstVideo:"2015.09.19",dateLastVideo:"2021.04.22",amountVideos:136},{id:151,theme:"frontend",title:"As For JS",author:"",city:"",country:"Украина",link:"https://www.youtube.com/@AsForJS/videos",site:"",dateFirstVideo:"2021.04.11",dateLastVideo:"2023.07.10",amountVideos:134},{id:152,theme:"frontend",title:"FrontSpot",author:"",city:"",country:"",link:"https://www.youtube.com/@FrontSpot/videos",site:"",dateFirstVideo:"2019.01.21",dateLastVideo:"2023.12.05",amountVideos:134},{id:153,theme:"frontend",title:"Paralect Workshop",author:"",city:"",country:"Беларусь",link:"https://www.youtube.com/@ParalectWorkshop/videos",site:"",dateFirstVideo:"2019.01.09",dateLastVideo:"2022.10.13",amountVideos:134},{id:154,theme:"frontend",title:"Математика, DS, ML, продукты",author:"",city:"",country:"",link:"https://www.youtube.com/@MathematicsDSMLProducts/videos",site:"",dateFirstVideo:"2022.02.14",dateLastVideo:"2023.07.06",amountVideos:134},{id:155,theme:"frontend",title:"Mario Magomedov",author:"Марио Магомедов",city:"",country:"Россия",link:"https://www.youtube.com/@MarioDev/videos",site:"",dateFirstVideo:"2019.07.21",dateLastVideo:"2021.06.14",amountVideos:133},{id:156,theme:"frontend",title:"Denis Gorelov",author:"Денис Горелов",city:"Краснодар",country:"Россия",link:"https://www.youtube.com/@denisgorelov3236/videos",site:"https://dwstroy.ru/video/",dateFirstVideo:"2019.07.21",dateLastVideo:"2021.06.14",amountVideos:132},{id:157,theme:"frontend",title:"Веб-разработка - DevMagazine",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@DevMagazineChannel/videos",site:"",dateFirstVideo:"2020.03.21",dateLastVideo:"2022.02.24",amountVideos:132},{id:158,theme:"frontend",title:"Люди и код by Skillbox Media",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@byskillboxmedia7275/videos",site:"",dateFirstVideo:"2022.01.19",dateLastVideo:"2022.11.11",amountVideos:131},{id:159,theme:"frontend",title:"Maksim Zhashkevych о разработке и ІТ",author:"Максим Жашкевич",city:"Киев",country:"Украина",link:"https://www.youtube.com/@MaksimZhashkevych/videos",site:"https://www.zhashkevych.com/",dateFirstVideo:"2020.09.27",dateLastVideo:"2022.02.13",amountVideos:130},{id:160,theme:"frontend",title:"Записки Верстальщика",author:"Александр",city:"",country:"Россия",link:"https://www.youtube.com/@zapiski_verstalshika/videos",site:"http://uzinok.ru/",dateFirstVideo:"2019.05.31",dateLastVideo:"2022.11.09",amountVideos:128},{id:161,theme:"frontend",title:"Magisters Обучение современным профессиям",author:"Владислав Гриценко",city:"Белгород",country:"Россия",link:"https://www.youtube.com/@webmagistersru/videos",site:"http://www.magisters.org/",dateFirstVideo:"2011.06.12",dateLastVideo:"2021.02.06",amountVideos:127},{id:162,theme:"frontend",title:"ВебКадеми - веб-разработка, программирование и IT",author:"Юрий Ключевский",city:"",country:"Россия",link:"https://www.youtube.com/@WebCademy/videos",site:"https://webcademy.ru/",dateFirstVideo:"2020.12.01",dateLastVideo:"2022.11.14",amountVideos:125},{id:163,theme:"frontend",title:"LN Master",author:"Никита Лукашов",city:"",country:"Украина",link:"https://www.youtube.com/@LNMaster_/videos",site:"",dateFirstVideo:"2020.03.31",dateLastVideo:"2022.08.03",amountVideos:122},{id:164,theme:"frontend",title:"Алексей Кальсин. Создаем сайт на CMS WordPress",author:"Алексей Кальсин",city:"",country:"Россия",link:"https://www.youtube.com/@maestroSt1/videos",site:"https://delay.site/",dateFirstVideo:"2012.04.20",dateLastVideo:"2023.04.20",amountVideos:121},{id:165,theme:"frontend",title:"Создаём сайты самостоятельно",author:"Александр Соловьев",city:"",country:"Россия",link:"https://www.youtube.com/@alexporsch/videos",site:"",dateFirstVideo:"2011.10.09",dateLastVideo:"2020.04.14",amountVideos:120},{id:166,theme:"frontend",title:"maxwell coding",author:"Мавлюдин",city:"",country:"Россия",link:"https://www.youtube.com/@maxwellcoding/videos",site:"",dateFirstVideo:"2020.02.25",dateLastVideo:"2022.11.04",amountVideos:119},{id:167,theme:"frontend",title:"Young&&Yandex",author:"",city:"",country:"",link:"https://www.youtube.com/@Young_and_Yandex/streams",site:"",dateFirstVideo:"2023.06.06",dateLastVideo:"2023.06.26",amountVideos:119},{id:168,theme:"frontend",title:"ДЖАВАСКРИПТИЗЕРЫ",author:"Кирилл Поздняков",city:"",country:"",link:"https://www.youtube.com/@jswrl/videos",site:"",dateFirstVideo:"2022.09.04",dateLastVideo:"2022.11.16",amountVideos:118},{id:169,theme:"frontend",title:"Андрій Кльон",author:"Андрій Кльон",city:"",country:"Украина",link:"https://www.youtube.com/@AndrijKlyon/videos",site:"",dateFirstVideo:"2022.06.20",dateLastVideo:"2024.01.08",amountVideos:117},{id:170,theme:"frontend",title:"Best Lessons",author:"",city:"",country:"",link:"https://www.youtube.com/@BestLessons/videos",site:"",dateFirstVideo:"2016.02.13",dateLastVideo:"2020.09.13",amountVideos:116},{id:171,theme:"frontend",title:"ДЕН - подорожую та програмую",author:"Ден",city:"",country:"Украина",link:"https://www.youtube.com/@htmlbookpro/videos",site:"",dateFirstVideo:"2018.10.15",dateLastVideo:"2022.03.08",amountVideos:116},{id:172,theme:"frontend",title:"Александр, айти-наставник",author:"Александр",city:"",country:"",link:"https://www.youtube.com/@BurmAlex/videos",site:"",dateFirstVideo:"2023.05.11",dateLastVideo:"2024.03.06",amountVideos:115},{id:173,theme:"frontend",title:"Vladimir Shaitan",author:"",city:"",country:"",link:"https://www.youtube.com/@VladimirShaitan/videos",site:"",dateFirstVideo:"2020.12.19",dateLastVideo:"2022.09.13",amountVideos:114},{id:174,theme:"frontend",title:"Sorax",author:"Артем Гринберг",city:"",country:"",link:"https://www.youtube.com/@artsorax/videos",site:"",dateFirstVideo:"2011.08.12",dateLastVideo:"2016.10.30",amountVideos:112},{id:175,theme:"frontend",title:"Екатерина Федякина",author:"Екатерина Федякина",city:"",country:"",link:"https://www.youtube.com/@__katyusya__/videos",site:"",dateFirstVideo:"2023.01.10",dateLastVideo:"2023.04.15",amountVideos:111},{id:176,theme:"frontend",title:"Дмитрий Ко",author:"Дмитрий Колотильщиков",city:"",country:"Беларусь",link:"https://www.youtube.com/@dmitry_kolotilshikov/videos",site:"",dateFirstVideo:"2020.06.07",dateLastVideo:"2021.02.07",amountVideos:110},{id:177,theme:"frontend",title:"ITшник",author:"",city:"",country:"",link:"https://www.youtube.com/@it-education/videos",site:"",dateFirstVideo:"2022.08.31",dateLastVideo:"2023.12.16",amountVideos:108},{id:178,theme:"frontend",title:"Lectoria. Обучение веб-разработке",author:"Артем Зернов",city:"",country:"",link:"https://www.youtube.com/@lectoria/videos",site:"",dateFirstVideo:"2015.02.13",dateLastVideo:"2023.06.11",amountVideos:108},{id:179,theme:"frontend",title:"Monsterlessons",author:"",city:"",country:"",link:"https://www.youtube.com/@Monsterlessons/videos",site:"https://monsterlessons.com/",dateFirstVideo:"2015.01.21",dateLastVideo:"2022.01.16",amountVideos:108},{id:180,theme:"frontend",title:"Tech Javascript",author:"",city:"",country:"Украина",link:"https://www.youtube.com/@techjavascript/videos",site:"",dateFirstVideo:"2022.09.21",dateLastVideo:"2022.11.17",amountVideos:108},{id:181,theme:"frontend",title:"tutortop",author:"",city:"",country:"",link:"https://www.youtube.com/@tutortop/videos",site:"",dateFirstVideo:"2022.06.14",dateLastVideo:"2023.06.30",amountVideos:108},{id:182,theme:"frontend",title:"Заур Магомедов",author:"Заур Магомедов",city:"",country:"Россия",link:"https://www.youtube.com/@ZaurmagRu/videos",site:"https://zaurmag.ru/",dateFirstVideo:"2015.09.11",dateLastVideo:"2021.12.26",amountVideos:107},{id:183,theme:"frontend",title:"Моя Айти Школа",author:"",city:"",country:"Беларусь",link:"https://www.youtube.com/@myitschoolby/videos",site:"https://myitschool.by/",dateFirstVideo:"2020.01.26",dateLastVideo:"2022.10.19",amountVideos:106},{id:184,theme:"frontend",title:"(WordPress) Art Bashlykov",author:"Артем Башлыков",city:"Санкт-Петербург",country:"Россия",link:"https://www.youtube.com/@ArtBashlykov/videos",site:"https://artbashlykov.ru/",dateFirstVideo:"2019.10.01",dateLastVideo:"2023.05.05",amountVideos:105},{id:185,theme:"frontend",title:"Арокен.ру",author:"Макс",city:"",country:"Россия",link:"https://www.youtube.com/@arokenru/videos",site:"",dateFirstVideo:"2022.03.18",dateLastVideo:"2022.10.24",amountVideos:105},{id:186,theme:"frontend",title:"Елена Литвинова — Искусство веб-разработки",author:"Елена Литвинова",city:"Лондон",country:"Великобритания",link:"https://www.youtube.com/@webelart/videos",site:"",dateFirstVideo:"2020.07.09",dateLastVideo:"2022.11.13",amountVideos:105},{id:187,theme:"frontend",title:"Anywhere Club на русском",author:"Алексей Картынник",city:"",country:"Беларусь",link:"https://www.youtube.com/@anywhereclub-ru/videos",site:"",dateFirstVideo:"2022.05.10",dateLastVideo:"2022.11.03",amountVideos:104},{id:188,theme:"frontend",title:"devschacht",author:"",city:"",country:"",link:"https://www.youtube.com/@devschacht/videos",site:"",dateFirstVideo:"2017.12.24",dateLastVideo:"2021.09.02",amountVideos:103},{id:189,theme:"frontend",title:"Easy IT",author:"",city:"",country:"Украина",link:"https://www.youtube.com/@EasyITChannel/videos",site:"",dateFirstVideo:"2020.12.23",dateLastVideo:"2022.11.05",amountVideos:102},{id:190,theme:"frontend",title:"IT Public 503",author:"",city:"",country:"",link:"https://www.youtube.com/@ITPublic503/videos",site:"",dateFirstVideo:"2022.03.31",dateLastVideo:"2023.12.02",amountVideos:102},{id:191,theme:"frontend",title:"Ateros",author:"",city:"",country:"Украина",link:"https://www.youtube.com/@_ateros/videos",site:"",dateFirstVideo:"2022.06.07",dateLastVideo:"2022.11.12",amountVideos:101},{id:192,theme:"frontend",title:"Василий Муравьев",author:"Василий Муравьев",city:"",country:"Россия",link:"https://www.youtube.com/@stackdev/videos",site:"https://stackdev.ru/",dateFirstVideo:"2020.01.11",dateLastVideo:"2022.09.17",amountVideos:100},{id:193,theme:"frontend",title:"Евгений Паромов Front-end",author:"Евгений Паромов",city:"",country:"",link:"https://www.youtube.com/@paromovevg/videos",site:"",dateFirstVideo:"2023.03.25",dateLastVideo:"2023.07.01",amountVideos:100},{id:194,theme:"frontend",title:"CSSSR",author:"",city:"Дзержижнский",country:"Россия",link:"https://www.youtube.com/@CSSSR_dev/videos",site:"https://csssr.com/ru",dateFirstVideo:"2017.07.16",dateLastVideo:"2022.02.02",amountVideos:99},{id:195,theme:"frontend",title:"OB Web Dev",author:"",city:"",country:"Украина",link:"https://www.youtube.com/@obwebdev/videos",site:"",dateFirstVideo:"2022.07.21",dateLastVideo:"2023.04.09",amountVideos:98},{id:196,theme:"frontend",title:"Sergey Nikitanov",author:"Сергей Никитанов",city:"",country:"Россия",link:"https://www.youtube.com/@SergeyValeryevitch/videos",site:"",dateFirstVideo:"2014.01.31",dateLastVideo:"2019.02.20",amountVideos:98},{id:197,theme:"frontend",title:"Ayub Begimkulov",author:"Айюб Бегимкулов",city:"",country:"Россия",link:"https://www.youtube.com/@ayub_begimkulov/videos",site:"",dateFirstVideo:"2020.10.10",dateLastVideo:"2022.11.12",amountVideos:97},{id:198,theme:"frontend",title:"LiveCoder",author:"",city:"",country:"",link:"https://www.youtube.com/@live_coder/videos",site:"",dateFirstVideo:"2021.01.27",dateLastVideo:"2021.02.11",amountVideos:97},{id:199,theme:"frontend",title:"Ефрейтор",author:"",city:"",country:"",link:"https://www.youtube.com/@hannibal9668/videos",site:"",dateFirstVideo:"2023.06.23",dateLastVideo:"2023.07.16",amountVideos:97},{id:200,theme:"frontend",title:"Vender Aleksandr",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@venderaleksandr500/videos",site:"",dateFirstVideo:"2019.06.26",dateLastVideo:"2022.08.01",amountVideos:96},{id:201,theme:"frontend",title:"Let's Code",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@LetsCodeDev/videos",site:"",dateFirstVideo:"2018.01.26",dateLastVideo:"2022.09.17",amountVideos:95},{id:202,theme:"frontend",title:"Давай Попробуем JavaScript",author:"",city:"",country:"Украина",link:"https://www.youtube.com/@lets_try_js/videos",site:"",dateFirstVideo:"2019.10.10",dateLastVideo:"2022.09.20",amountVideos:94},{id:203,theme:"frontend",title:"Ефим Рябов",author:"Ефим Рябов",city:"",country:"Россия",link:"https://www.youtube.com/@user-go4tz2dj8n/videos",site:"https://efim360.ru/",dateFirstVideo:"2020.11.22",dateLastVideo:"2022.11.12",amountVideos:94},{id:204,theme:"frontend",title:"Prog-Time",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@ProgTime/videos",site:"https://prog-time.ru/",dateFirstVideo:"2017.09.02",dateLastVideo:"2022.10.17",amountVideos:91},{id:205,theme:"frontend",title:"Стримы Glo Academy",author:"Артем Исламов",city:"Казань",country:"Россия",link:"https://www.youtube.com/@gloacademy7005/videos",site:"https://glo.academy/",dateFirstVideo:"2018.09.27",dateLastVideo:"2021.02.23",amountVideos:90},{id:206,theme:"frontend",title:"Dmitriy Pavlichenko",author:"Дмитрий Павличенко",city:"",country:"Россия",link:"https://www.youtube.com/@dmitriypavlichenko3379/videos",site:"",dateFirstVideo:"2020.06.16",dateLastVideo:"2022.02.19",amountVideos:88},{id:207,theme:"frontend",title:"LectorWeb. Frontend, создание сайтов",author:"Алексей Перепелка",city:"",country:"Украина",link:"https://www.youtube.com/@LectorWeb/videos",site:"",dateFirstVideo:"2019.11.28",dateLastVideo:"2021.12.10",amountVideos:88},{id:208,theme:"frontend",title:"Wannabe School (Валерий Стрелец)",author:"Валерий Стрелец",city:"",country:"Украина",link:"https://www.youtube.com/@WannabeSchool/videos",site:"",dateFirstVideo:"2020.11.22",dateLastVideo:"2021.04.29",amountVideos:87},{id:209,theme:"frontend",title:"Разрабы",author:"",city:"",country:"",link:"https://www.youtube.com/@razrabs/videos",site:"",dateFirstVideo:"2022.02.02",dateLastVideo:"2022.11.18",amountVideos:87},{id:210,theme:"frontend",title:"Dev Pandaren нет уже",author:"",city:"",country:"",link:"https://www.youtube.com/c/LetsCodeDev/videos",site:"",dateFirstVideo:"2018.01.26",dateLastVideo:"2021.06.13",amountVideos:85},{id:211,theme:"frontend",title:"Medvedev School",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@medvedevschool/videos",site:"",dateFirstVideo:"2019.07.20",dateLastVideo:"2022.09.23",amountVideos:85},{id:212,theme:"frontend",title:"Vitaliy html",author:"",city:"",country:"",link:"https://www.youtube.com/@vitaliyhtml/videos",site:"",dateFirstVideo:"2021.04.24",dateLastVideo:"2023.06.18",amountVideos:85},{id:213,theme:"frontend",title:"codeBurger",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@codeBurger/videos",site:"",dateFirstVideo:"2018.08.06",dateLastVideo:"2021.03.19",amountVideos:84},{id:214,theme:"frontend",title:"Типичный веб разработчик",author:"Дмитрий",city:"",country:"",link:"https://www.youtube.com/@DmitriyShkredov/videos",site:"",dateFirstVideo:"2013.05.17",dateLastVideo:"2023.06.30",amountVideos:84},{id:215,theme:"frontend",title:"Neoflex",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@Neoflexvideo/videos",site:"",dateFirstVideo:"2018.11.20",dateLastVideo:"2023.08.31",amountVideos:83},{id:216,theme:"frontend",title:"Просто разработка",author:"Виталий Киренков",city:"Москва",country:"Россия",link:"https://www.youtube.com/@user-bm1pl3wu8o/videos",site:"https://prosto-razrabotka.ru/",dateFirstVideo:"2019.01.11",dateLastVideo:"2021.04.28",amountVideos:83},{id:217,theme:"frontend",title:"СЭЙЛОР",author:"",city:"",country:"",link:"https://www.youtube.com/@sa1lordev/streams",site:"",dateFirstVideo:"2023.08.17",dateLastVideo:"2023.09.25",amountVideos:83},{id:218,theme:"frontend",title:"Yes! Do IT",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@yesdoit9914/videos",site:"",dateFirstVideo:"2023.05.20",dateLastVideo:"2023.08.11",amountVideos:82},{id:219,theme:"frontend",title:"easydev",author:"",city:"",country:"Грузия",link:"https://www.youtube.com/@easydev1205/videos",site:"",dateFirstVideo:"2022.01.08",dateLastVideo:"2022.07.25",amountVideos:81},{id:220,theme:"frontend",title:"Programming and Children",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@programmingandchildren8227/videos",site:"",dateFirstVideo:"2020.10.20",dateLastVideo:"2021.12.22",amountVideos:81},{id:221,theme:"frontend",title:"Александр Дергунов",author:"Александр Дергунов",city:"Владимир",country:"Россия",link:"https://www.youtube.com/@sanekdr/videos",site:"https://dergunov.com/",dateFirstVideo:"2011.04.19",dateLastVideo:"2022.08.13",amountVideos:81},{id:222,theme:"frontend",title:"Nursultan Sarazhiev",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@nursultansarazhiev9821/videos",site:"",dateFirstVideo:"2020.01.08",dateLastVideo:"2022.09.16",amountVideos:79},{id:223,theme:"frontend",title:"#JS Code",author:"",city:"",country:"Украина",link:"https://www.youtube.com/@JSCode-by-AlexK/videos",site:"",dateFirstVideo:"2018.05.13",dateLastVideo:"2022.05.09",amountVideos:78},{id:224,theme:"frontend",title:"LessonWeb",author:"",city:"",country:"",link:"https://www.youtube.com/@LessonWeb/videos",site:"",dateFirstVideo:"2017.04.15",dateLastVideo:"2018.08.06",amountVideos:78},{id:225,theme:"frontend",title:"EduCatter — Канал о Веб-Программировании",author:"Илья",city:"",country:"Россия",link:"https://www.youtube.com/@EduCatterOfficial/videos",site:"",dateFirstVideo:"2021.09.26",dateLastVideo:"2022.10.15",amountVideos:77},{id:226,theme:"frontend",title:"Natali",author:"Натали",city:"",country:"Россия",link:"https://www.youtube.com/@natali8796/videos",site:"",dateFirstVideo:"2021.11.11",dateLastVideo:"2022.11.10",amountVideos:77},{id:227,theme:"frontend",title:"Александр Ламков — Friendly Frontend",author:"Александр Ламков",city:"",country:"",link:"https://www.youtube.com/@AleksanderLamkov/videos",site:"",dateFirstVideo:"2023.06.29",dateLastVideo:"2023.07.13",amountVideos:77},{id:228,theme:"frontend",title:"Как Стать Хорошим Программистом",author:"",city:"",country:"Беларусь",link:"https://www.youtube.com/@JohnnySvarog/videos",site:"",dateFirstVideo:"2013.02.04",dateLastVideo:"2020.05.18",amountVideos:77},{id:229,theme:"frontend",title:"FructCode",author:"Сергей Никонов",city:"Самара",country:"Россия",link:"https://www.youtube.com/@fructcode/videos",site:"https://fructcode.com/ru/",dateFirstVideo:"2017.06.09",dateLastVideo:"2021.08.15",amountVideos:75},{id:230,theme:"frontend",title:"JSExpert",author:"Евгений Калюжный",city:"",country:"",link:"https://www.youtube.com/@JSExpert/videos",site:"https://www.jsexpert.net/",dateFirstVideo:"2016.03.09",dateLastVideo:"2020.08.10",amountVideos:75},{id:231,theme:"frontend",title:"АйТи Синяк",author:"",city:"Минск",country:"Беларусь",link:"https://www.youtube.com/@it-sin9k/videos",site:"",dateFirstVideo:"2019.11.26",dateLastVideo:"2023.08.15",amountVideos:75},{id:232,theme:"frontend",title:"Андрей Попов",author:"Андрей Попов",city:"",country:"Россия",link:"https://www.youtube.com/@andrey_planeta/videos",site:"",dateFirstVideo:"2016.10.04",dateLastVideo:"2021.04.27",amountVideos:75},{id:233,theme:"frontend",title:"Школа web-программирования Constcode",author:"Алексей Данчин",city:"",country:"Россия",link:"https://www.youtube.com/@web-constcode6252/videos",site:"",dateFirstVideo:"2020.04.28",dateLastVideo:"2022.10.28",amountVideos:75},{id:234,theme:"frontend",title:"Frontend Tests",author:"",city:"",country:"",link:"https://www.youtube.com/@FrontendTests/shorts",site:"",dateFirstVideo:"2023.07.20",dateLastVideo:"2023.09.13",amountVideos:74},{id:235,theme:"frontend",title:"Result.School",author:"Владилен Минин",city:"",country:"Россия",link:"https://www.youtube.com/@ResultSchool/videos",site:"",dateFirstVideo:"2021.08.24",dateLastVideo:"2022.10.08",amountVideos:74},{id:236,theme:"frontend",title:"Улук Бек",author:"",city:"",country:"",link:"https://www.youtube.com/@ulukbeko/videos",site:"",dateFirstVideo:"2023.02.01",dateLastVideo:"2023.08.18",amountVideos:74},{id:237,theme:"frontend",title:"AVIS TV",author:"Эмиль Рахматуллин",city:"",country:"Россия",link:"https://www.youtube.com/@AVISTV/videos",site:"",dateFirstVideo:"2020.12.21",dateLastVideo:"2022.09.25",amountVideos:72},{id:238,theme:"frontend",title:"Fraktal Inc. Team (нет уже)",author:"",city:"",country:"",link:"https://www.youtube.com/channel/UCjCQSEgi49fZyDx5VpxYnOA/videos",site:"",dateFirstVideo:"2021.01.02",dateLastVideo:"2021.10.10",amountVideos:72},{id:239,theme:"frontend",title:"Timeweb Cloud: всё про облако, технологии и IT",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@timeweb/videos",site:"https://timeweb.com/ru/",dateFirstVideo:"2018.08.06",dateLastVideo:"2022.09.16",amountVideos:72},{id:240,theme:"frontend",title:"VIMP dev — верстка сайтов",author:"",city:"",country:"",link:"https://www.youtube.com/@VIMPdev/videos",site:"",dateFirstVideo:"2020.08.14",dateLastVideo:"2022.11.20",amountVideos:72},{id:241,theme:"frontend",title:"DEV NSK",author:"",city:"",country:"",link:"https://www.youtube.com/@devnsk6906/videos",site:"",dateFirstVideo:"2018.02.03",dateLastVideo:"2021.10.20",amountVideos:71},{id:242,theme:"frontend",title:"school-php.com",author:"Станислав Усков",city:"",country:"",link:"https://www.youtube.com/@Schoolphpcom/videos",site:"https://school-php.com/",dateFirstVideo:"2013.01.24",dateLastVideo:"2018.09.29",amountVideos:71},{id:243,theme:"frontend",title:"Alex Four",author:"",city:"",country:"",link:"https://www.youtube.com/@AlexFour/videos",site:"",dateFirstVideo:"2021.06.20",dateLastVideo:"2023.03.25",amountVideos:70},{id:244,theme:"frontend",title:"One Code",author:"Максим Орлов",city:"",country:"",link:"https://www.youtube.com/@onecode_blog/videos",site:"",dateFirstVideo:"2020.02.25",dateLastVideo:"2021.10.11",amountVideos:70},{id:245,theme:"frontend",title:"Learnium",author:"",city:"",country:"",link:"https://www.youtube.com/@learnium/videos",site:"",dateFirstVideo:"2019.07.26",dateLastVideo:"2022.12.21",amountVideos:69},{id:246,theme:"frontend",title:"Уроки верстки",author:"",city:"",country:"",link:"https://www.youtube.com/@uroki-verstki/videos",site:"",dateFirstVideo:"2023.04.15",dateLastVideo:"2023.07.11",amountVideos:68},{id:247,theme:"frontend",title:"Школа TeaСoder / Программирование",author:"",city:"",country:"",link:"https://www.youtube.com/@TeaCoder/videos",site:"",dateFirstVideo:"2023.10.07",dateLastVideo:"2023.12.29",amountVideos:68},{id:248,theme:"frontend",title:"CLOWNdsnt",author:"Сергей Пузанков",city:"",country:"",link:"https://www.youtube.com/@CLOWNdsnt/videos",site:"",dateFirstVideo:"2021.10.17",dateLastVideo:"2021.10.28",amountVideos:67},{id:249,theme:"frontend",title:"Я — зерокодер",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@0qode/videos",site:"",dateFirstVideo:"2020.03.26",dateLastVideo:"2023.06.21",amountVideos:67},{id:250,theme:"frontend",title:"Vectree",author:"",city:"",country:"",link:"https://www.youtube.com/@Vectree/videos",site:"",dateFirstVideo:"2017.09.04",dateLastVideo:"2020.06.23",amountVideos:66},{id:251,theme:"frontend",title:"Lavrik Roman",author:"",city:"",country:"",link:"https://www.youtube.com/@lavrikroman1560/videos",site:"",dateFirstVideo:"2020.09.26",dateLastVideo:"2022.12.04",amountVideos:64},{id:252,theme:"frontend",title:"Максим Арокен (AROKEN)",author:"Максим",city:"",country:"Россия",link:"https://www.youtube.com/@AROKENEZ/videos",site:"",dateFirstVideo:"2018.12.27",dateLastVideo:"2022.10.26",amountVideos:64},{id:253,theme:"frontend",title:"Тони Емельянов | Продуктовый дизайнер (UX UI)",author:"Тони Емельянов",city:"",country:"Израиль",link:"https://www.youtube.com/@yemdigital/videos",site:"",dateFirstVideo:"2019.05.07",dateLastVideo:"2022.06.21",amountVideos:64},{id:254,theme:"frontend",title:"David Dobryakov",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@dobryakov/videos",site:"",dateFirstVideo:"2020.04.30",dateLastVideo:"2022.10.26",amountVideos:63},{id:255,theme:"frontend",title:"Odesa Frontend Community",author:"",city:"",country:"Украина",link:"https://www.youtube.com/@OdesaFrontend/videos",site:"",dateFirstVideo:"2017.10.28",dateLastVideo:"2022.01.05",amountVideos:63},{id:256,theme:"frontend",title:"WEB STAR",author:"Виталик Ерёменко",city:"",country:"Латвия",link:"https://www.youtube.com/@webstar9241/videos",site:"",dateFirstVideo:"2022.06.07",dateLastVideo:"2022.05.26",amountVideos:62},{id:257,theme:"frontend",title:"Developer In US",author:"",city:"",country:"США",link:"https://www.youtube.com/@DeveloperInUS/videos",site:"",dateFirstVideo:"2021.04.26",dateLastVideo:"2022.05.29",amountVideos:61},{id:258,theme:"frontend",title:"Don't Dive Too Deep",author:"",city:"",country:"",link:"https://www.youtube.com/@DontDiveTooDeep/videos",site:"",dateFirstVideo:"2017.06.27",dateLastVideo:"2023.07.09",amountVideos:60},{id:259,theme:"frontend",title:"DSR Corporation RU",author:"",city:"Воронеж",country:"Россия",link:"https://www.youtube.com/@dsrcorporationru/videos",site:"",dateFirstVideo:"2019.11.08",dateLastVideo:"2023.04.14",amountVideos:60},{id:260,theme:"frontend",title:"IT курсы (нет уже)",author:"Павел Тарасов",city:"Москва",country:"Россия",link:"https://www.youtube.com/c/WebInterview/videos",site:"",dateFirstVideo:"2020.06.08",dateLastVideo:"2021.07.14",amountVideos:60},{id:261,theme:"frontend",title:"Web Interview",author:"Павел Тарасов",city:"Москва",country:"Россия",link:"https://www.youtube.com/@WebInterview/videos",site:"",dateFirstVideo:"2020.06.08",dateLastVideo:"2021.07.14",amountVideos:60},{id:262,theme:"frontend",title:"Denis Latushkin",author:"Денис Латушкин",city:"",country:"",link:"https://www.youtube.com/@denislatushkin8112/videos",site:"",dateFirstVideo:"2016.06.30",dateLastVideo:"2021.02.04",amountVideos:59},{id:263,theme:"frontend",title:"EPAM Moscow ITsubbotnik",author:"",city:"Москва",country:"Россия",link:"https://www.youtube.com/@epammoscowitsubbotnik5379/videos",site:"",dateFirstVideo:"2018.07.09",dateLastVideo:"2019.12.03",amountVideos:59},{id:264,theme:"frontend",title:"GreenComet",author:"",city:"",country:"Украина",link:"https://www.youtube.com/@GreenComet/videos",site:"",dateFirstVideo:"2018.09.30",dateLastVideo:"2021.08.08",amountVideos:59},{id:265,theme:"frontend",title:"OTUS Трансляции 6",author:"",city:"Москва",country:"Россия",link:"https://www.youtube.com/@otus6190/streams",site:"https://otus.ru/",dateFirstVideo:"2021.08.04",dateLastVideo:"2022.06.14",amountVideos:59},{id:266,theme:"frontend",title:"Учимся программировать",author:"",city:"",country:"",link:"https://www.youtube.com/@prog_learn/videos",site:"",dateFirstVideo:"2023.10.14",dateLastVideo:"2024.01.02",amountVideos:59},{id:267,theme:"frontend",title:"HTML Practice",author:"",city:"",country:"",link:"https://www.youtube.com/@htmlpractice9419/videos",site:"",dateFirstVideo:"2023.01.16",dateLastVideo:"2023.08.08",amountVideos:57},{id:268,theme:"frontend",title:"SPB Frontend",author:"",city:"Санкт-Петербург",country:"Россия",link:"https://www.youtube.com/@spb_frontend/videos",site:"",dateFirstVideo:"2014.04.06",dateLastVideo:"2024.01.08",amountVideos:57},{id:269,theme:"frontend",title:"temofart",author:"Артем Олейниченко",city:"Харьков",country:"Украина",link:"https://www.youtube.com/@temofart/videos",site:"",dateFirstVideo:"2019.05.18",dateLastVideo:"2021.01.28",amountVideos:57},{id:270,theme:"frontend",title:"Юрий Карачевцев",author:"Юрий Карачевцев",city:"",country:"Россия",link:"https://www.youtube.com/@user-sd1sm8hc1c/videos",site:"",dateFirstVideo:"2020.05.18",dateLastVideo:"2022.11.05",amountVideos:57},{id:271,theme:"frontend",title:"Meta/conf Voronezh нет уже",author:"",city:"Воронеж",country:"Россия",link:"https://www.youtube.com/@MetaconfVoronezh/videos",site:"",dateFirstVideo:"2019.04.30",dateLastVideo:"2020.11.23",amountVideos:56},{id:272,theme:"frontend",title:"Saint Code Bootcamp",author:"Евгений Гриценко",city:"Санкт Петербург",country:"Россия",link:"https://www.youtube.com/@saintcodebootcamp8766/videos",site:"https://saintcode.ru/",dateFirstVideo:"2020.07.13",dateLastVideo:"2022.10.11",amountVideos:56},{id:273,theme:"frontend",title:"Учим Вместе",author:"",city:"",country:"",link:"https://www.youtube.com/@UchimVmeste./videos",site:"",dateFirstVideo:"2023.02.17",dateLastVideo:"2023.06.01",amountVideos:56},{id:274,theme:"frontend",title:"All4site",author:"Кирилл Лозовский",city:"Киев",country:"Украина",link:"https://www.youtube.com/@all4site544/videos",site:"http://all4site.com.ua/",dateFirstVideo:"2018.01.23",dateLastVideo:"2021.08.18",amountVideos:55},{id:275,theme:"frontend",title:"Deep Foundation",author:"",city:"",country:"",link:"https://www.youtube.com/@deepfoundation4605/videos",site:"",dateFirstVideo:"2021.08.25",dateLastVideo:"2023.06.29",amountVideos:55},{id:276,theme:"frontend",title:"KARPOV.COURSES DEV",author:"Карпов",city:"Москва",country:"Россия",link:"https://www.youtube.com/@KarpovCoursesDEV/videos",site:"https://karpov.courses/dev",dateFirstVideo:"2021.09.20",dateLastVideo:"2022.11.15",amountVideos:55},{id:277,theme:"frontend",title:"Репетитор JavaScript, Java, С НУЛЯ",author:"",city:"",country:"Швеция",link:"https://www.youtube.com/@javascriptjava4859/videos",site:"",dateFirstVideo:"2020.07.08",dateLastVideo:"2022.02.10",amountVideos:55},{id:278,theme:"frontend",title:"Помогите, я джун",author:"",city:"",country:"",link:"https://www.youtube.com/@helpMeImJunior/videos",site:"",dateFirstVideo:"2023.07.26",dateLastVideo:"2023.11.18",amountVideos:53},{id:279,theme:"frontend",title:"Святослав Хусамов",author:"",city:"",country:"",link:"https://www.youtube.com/@khusamov/videos",site:"",dateFirstVideo:"2015.11.17",dateLastVideo:"2022.11.04",amountVideos:53},{id:280,theme:"frontend",title:"Gi про JS",author:"",city:"",country:"",link:"https://www.youtube.com/@gi-pro-js/videos",site:"",dateFirstVideo:"2023.06.17",dateLastVideo:"2023.08.05",amountVideos:52},{id:281,theme:"frontend",title:"Real Programmer",author:"",city:"",country:"",link:"https://www.youtube.com/@realprogrammer1113/videos",site:"",dateFirstVideo:"2021.08.11",dateLastVideo:"2023.08.30",amountVideos:52},{id:282,theme:"frontend",title:"WEB PRO - Школа веб-разработки, создание сайтов",author:"Никита Щегольков",city:"",country:"Россия",link:"https://www.youtube.com/@WebProSchool/videos",site:"",dateFirstVideo:"2022.04.28",dateLastVideo:"2022.07.21",amountVideos:51},{id:283,theme:"frontend",title:"Алексей Соловей (N-code)",author:"Алексей Соловей",city:"",country:"Украина",link:"https://www.youtube.com/@AlexeiSolovei/videos",site:"",dateFirstVideo:"2021.05.15",dateLastVideo:"2022.10.26",amountVideos:51},{id:284,theme:"frontend",title:"Boring Front End",author:"Илья Литвинов",city:"",country:"Украина",link:"https://www.youtube.com/@boringfrontend9037/videos",site:"",dateFirstVideo:"2019.11.15",dateLastVideo:"2022.01.06",amountVideos:50},{id:285,theme:"frontend",title:"CodeMel",author:"",city:"",country:"",link:"https://www.youtube.com/@codemel/videos",site:"",dateFirstVideo:"2022.12.04",dateLastVideo:"2023.02.18",amountVideos:50},{id:286,theme:"frontend",title:"student programmer",author:"Рома",city:"",country:"",link:"https://www.youtube.com/@studentprogrammer233/videos",site:"",dateFirstVideo:"2022.07.05",dateLastVideo:"2023.08.22",amountVideos:50},{id:287,theme:"frontend",title:"Артём - dozen web",author:"Артем",city:"",country:"",link:"https://www.youtube.com/@dozen-web/videos",site:"",dateFirstVideo:"2021.08.05",dateLastVideo:"2022.11.15",amountVideos:50},{id:288,theme:"frontend",title:"Федор Алексеев",author:"Федор Алексеев",city:"",country:"",link:"https://www.youtube.com/@atlzgamer/streams",site:"",dateFirstVideo:"2023.09.17",dateLastVideo:"2023.09.25",amountVideos:50},{id:289,theme:"frontend",title:"IT на диване",author:"Антон Воропаев",city:"Харьков",country:"Украина",link:"https://www.youtube.com/@itnadivane/videos",site:"",dateFirstVideo:"2019.09.08",dateLastVideo:"2022.09.22",amountVideos:49},{id:290,theme:"frontend",title:"Ivan Petrychenko",author:"Иван Петриченко",city:"Харьков",country:"Украина",link:"https://www.youtube.com/@IvanPetrychenkoDev/videos",site:"",dateFirstVideo:"2018.09.30",dateLastVideo:"2021.11.28",amountVideos:49},{id:291,theme:"frontend",title:"Rusurano",author:"",city:"",country:"",link:"https://www.youtube.com/@Rusurano/videos",site:"",dateFirstVideo:"2023.04.20",dateLastVideo:"2023.07.21",amountVideos:49},{id:292,theme:"frontend",title:"Step to Web",author:"",city:"",country:"Беларусь",link:"https://www.youtube.com/@steptoweb503/videos",site:"",dateFirstVideo:"2018.01.15",dateLastVideo:"2021.02.14",amountVideos:49},{id:293,theme:"frontend",title:"The Frontend нет уже",author:"",city:"",country:"Казахстан",link:"https://www.youtube.com/@thefrontend4388/videos",site:"",dateFirstVideo:"2022.02.01",dateLastVideo:"2022.10.25",amountVideos:49},{id:294,theme:"frontend",title:"Alek OS",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@AlekOS/videos",site:"",dateFirstVideo:"2021.03.08",dateLastVideo:"2023.08.18",amountVideos:48},{id:295,theme:"frontend",title:"Makhabat Abdisattarova",author:"",city:"",country:"",link:"https://www.youtube.com/@developerkg/videos",site:"",dateFirstVideo:"2023.01.18",dateLastVideo:"2023.08.16",amountVideos:48},{id:296,theme:"frontend",title:"Oldest Junior",author:"Нурбал",city:"",country:"Казахстан",link:"https://www.youtube.com/@OldestJunior/videos",site:"",dateFirstVideo:"2020.12.11",dateLastVideo:"2022.07.17",amountVideos:48},{id:297,theme:"frontend",title:"Ararat Martirossyan",author:"Арарат Мартиросян",city:"",country:"",link:"https://www.youtube.com/@araratmartirossyan/videos",site:"",dateFirstVideo:"2020.08.28",dateLastVideo:"2022.11.12",amountVideos:47},{id:298,theme:"frontend",title:"StudioProWeb - школа программирования",author:"",city:"",country:"",link:"https://www.youtube.com/@studioproweb/videos",site:"",dateFirstVideo:"2021.07.28",dateLastVideo:"2022.11.26",amountVideos:47},{id:299,theme:"frontend",title:"Для чайников на пальцах",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@user-bv6te2pw3n/videos",site:"",dateFirstVideo:"2021.02.25",dateLastVideo:"2022.02.14",amountVideos:47},{id:300,theme:"frontend",title:"IT Papa",author:"",city:"",country:"",link:"https://www.youtube.com/@itpapa-courses/videos",site:"",dateFirstVideo:"2019.10.08",dateLastVideo:"2023.04.23",amountVideos:46},{id:301,theme:"frontend",title:"Aleksandr Sugak",author:"Александр",city:"",country:"Украина",link:"https://www.youtube.com/@AleksandrSugak/videos",site:"",dateFirstVideo:"2021.10.29",dateLastVideo:"2022.11.21",amountVideos:47},{id:302,theme:"frontend",title:"IT BEAR",author:"",city:"Москва",country:"Россия",link:"https://www.youtube.com/@itbear5698/videos",site:"",dateFirstVideo:"2022.03.20",dateLastVideo:"2023.11.29",amountVideos:46},{id:303,theme:"frontend",title:"ProBelDev",author:"",city:"Минск",country:"Беларусь",link:"https://www.youtube.com/@ProBelDev/videos",site:"",dateFirstVideo:"2021.07.02",dateLastVideo:"2023.07.03",amountVideos:46},{id:304,theme:"frontend",title:"Denis Tokarev",author:"",city:"",country:"",link:"https://www.youtube.com/@tokarev_de/videos",site:"",dateFirstVideo:"2020.03.01",dateLastVideo:"2020.04.18",amountVideos:45},{id:305,theme:"frontend",title:"Webpacman",author:"",city:"",country:"",link:"https://www.youtube.com/@webpacman/videos",site:"",dateFirstVideo:"2019.05.10",dateLastVideo:"2023.07.07",amountVideos:44},{id:306,theme:"frontend",title:"Программирование с нуля нет уже",author:"",city:"",country:"Украина",link:"https://www.youtube.com/@user-it1en9gn8m/videos",site:"",dateFirstVideo:"2022.06.18",dateLastVideo:"2022.11.06",amountVideos:44},{id:307,theme:"frontend",title:"Программистом в 40",author:"Максим",city:"Ставрополь",country:"Россия",link:"https://www.youtube.com/@user-gh6tc1bf9h/videos",site:"",dateFirstVideo:"2019.11.21",dateLastVideo:"2022.07.31",amountVideos:44},{id:308,theme:"frontend",title:"ArtistJS - обучение html, css, js",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@artistjs/videos",site:"",dateFirstVideo:"2022.08.16",dateLastVideo:"2023.07.10",amountVideos:43},{id:309,theme:"frontend",title:"CODE LAB - Уроки по программированию",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@toni_wheel/videos",site:"",dateFirstVideo:"2021.03.29",dateLastVideo:"2022.11.02",amountVideos:43},{id:310,theme:"frontend",title:"Dev Surge",author:"",city:"",country:"",link:"https://www.youtube.com/@devsurge-official/videos",site:"",dateFirstVideo:"2023.04.18",dateLastVideo:"2023.06.24",amountVideos:43},{id:311,theme:"frontend",title:"Pa Dam Tuts",author:"",city:"",country:"",link:"https://www.youtube.com/@PaDamTuts/videos",site:"",dateFirstVideo:"2016.04.02",dateLastVideo:"2020.10.04",amountVideos:43},{id:312,theme:"frontend",title:"Dmitry Kanaev",author:"",city:"",country:"",link:"https://www.youtube.com/@dmitrykanaev8315/streams",site:"",dateFirstVideo:"2019.05.25",dateLastVideo:"2022.08.06",amountVideos:42},{id:313,theme:"frontend",title:"Prog Blog",author:"Саша",city:"",country:"",link:"https://www.youtube.com/@progblog2390/videos",site:"",dateFirstVideo:"2017.06.23",dateLastVideo:"2018.11.06",amountVideos:42},{id:314,theme:"frontend",title:"WEB Головоломки",author:"Владимир Самойлов",city:"",country:"Украина",link:"https://www.youtube.com/@webgolovolomki/videos",site:"",dateFirstVideo:"2020.02.12",dateLastVideo:"2022.01.17",amountVideos:42},{id:315,theme:"frontend",title:"Александр Пауков",author:"Александр Пауков",city:"",country:"",link:"https://www.youtube.com/@alexanderpaukov/videos",site:"",dateFirstVideo:"2013.11.14",dateLastVideo:"2018.04.10",amountVideos:42},{id:316,theme:"frontend",title:"Первый файл комом",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@first-file-comom/videos",site:"",dateFirstVideo:"2023.01.26",dateLastVideo:"2023.07.15",amountVideos:42},{id:317,theme:"frontend",title:"Front-End разработка. HTML, CSS, jQuery",author:"",city:"",country:"Украна",link:"https://www.youtube.com/@front-end.htmlcssjquery1900/videos",site:"",dateFirstVideo:"2018.01.23",dateLastVideo:"2018.01.23",amountVideos:41},{id:318,theme:"frontend",title:"METATECH",author:"Тимур Шемсединов",city:"Киев",country:"Украина",link:"https://www.youtube.com/@MetatechEducation/videos",site:"",dateFirstVideo:"2022.05.26",dateLastVideo:"2022.09.14",amountVideos:41},{id:319,theme:"frontend",title:"Oleg Lustenko",author:"Олег Лустенко",city:"",country:"Украина",link:"https://www.youtube.com/@oleglustenko/videos",site:"",dateFirstVideo:"2021.08.25",dateLastVideo:"2023.12.27",amountVideos:41},{id:320,theme:"frontend",title:"Simple WEB",author:"",city:"",country:"",link:"https://www.youtube.com/@SimpleWEB1327/videos",site:"",dateFirstVideo:"2023.09.20",dateLastVideo:"2024.01.05",amountVideos:41},{id:321,theme:"frontend",title:"веб 2^8",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@user-gm8iv4lw4v/videos",site:"",dateFirstVideo:"2021.03.26",dateLastVideo:"2021.08.14",amountVideos:41},{id:322,theme:"frontend",title:"Евгений Фронтендер нет уже",author:"Евгений",city:"",country:"",link:"https://www.youtube.com/@user-dz5et3rd8s/videos",site:"",dateFirstVideo:"2022.09.04",dateLastVideo:"2022.11.08",amountVideos:41},{id:323,theme:"frontend",title:"Gizmo Developer",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@gizmodeveloper/videos",site:"",dateFirstVideo:"2022.10.10",dateLastVideo:"2023.05.05",amountVideos:40},{id:324,theme:"frontend",title:"WebGo",author:"",city:"",country:"",link:"https://www.youtube.com/@webgo4567/videos",site:"",dateFirstVideo:"2017.12.13",dateLastVideo:"2019.06.09",amountVideos:40},{id:325,theme:"frontend",title:"БЫДЛОКОД",author:"",city:"",country:"",link:"https://www.youtube.com/@bidlocode/videos",site:"",dateFirstVideo:"2023.06.16",dateLastVideo:"2023.12.24",amountVideos:40},{id:326,theme:"frontend",title:"Виктор Рябков",author:"Виктор Рябков",city:"",country:"",link:"https://www.youtube.com/@viktor.riabkov/videos",site:"",dateFirstVideo:"2023.05.10",dateLastVideo:"2023.06.15",amountVideos:40},{id:327,theme:"frontend",title:"Degreet",author:"",city:"",country:"",link:"https://www.youtube.com/@Degreet/videos",site:"",dateFirstVideo:"2020.06.23",dateLastVideo:"2022.07.27",amountVideos:39},{id:328,theme:"frontend",title:"KozhinDev",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@KozhinDev/videos",site:"",dateFirstVideo:"2021.02.11",dateLastVideo:"2021.11.26",amountVideos:39},{id:329,theme:"frontend",title:"Ninja DEV",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@NinjaFrontend/videos",site:"",dateFirstVideo:"2016.05.28",dateLastVideo:"2017.01.24",amountVideos:39},{id:330,theme:"frontend",title:"Жизнь программиста (Разработка на WordPress)",author:"Леонид",city:"",country:"Россия",link:"https://www.youtube.com/@tushov/videos",site:"https://tushov.online/",dateFirstVideo:"2018.07.18",dateLastVideo:"2021.12.15",amountVideos:39},{id:331,theme:"frontend",title:"Фронтенд от Палыча",author:"Павел Гарский",city:"",country:"Россия",link:"https://www.youtube.com/@user-pj8cc8tw1u/videos",site:"",dateFirstVideo:"2021.03.20",dateLastVideo:"2021.12.20",amountVideos:39},{id:332,theme:"frontend",title:"FrontEnd tricks",author:"Александр",city:"",country:"Латвия",link:"https://www.youtube.com/@FrontEndtricks/videos",site:"",dateFirstVideo:"2021.07.15",dateLastVideo:"2022.05.26",amountVideos:38},{id:333,theme:"frontend",title:"TGrey - Обучение Программированию",author:"Максим",city:"",country:"",link:"https://www.youtube.com/@_TGrey_/videos",site:"",dateFirstVideo:"2019.02.09",dateLastVideo:"2022.05.06",amountVideos:38},{id:334,theme:"frontend",title:"Илья Стоянов - Верстка Сайта",author:"Илья Стоянов",city:"",country:"Украина",link:"https://www.youtube.com/@ilyastoyanov-html-css-js-react/videos",site:"",dateFirstVideo:"2022.05.30",dateLastVideo:"2022.11.21",amountVideos:38},{id:335,theme:"frontend",title:"Онлайн-школа на Wordpress самостоятельно",author:"Марина Клюшун",city:"",country:"Беларусь",link:"https://www.youtube.com/@wpshkola/videos",site:"",dateFirstVideo:"2019.12.07",dateLastVideo:"2022.10.25",amountVideos:38},{id:336,theme:"frontend",title:"Эмоциональный робот",author:"",city:"",country:"",link:"https://www.youtube.com/@user-ms6dy8nh3i/videos",site:"",dateFirstVideo:"2020.03.10",dateLastVideo:"2020.10.21",amountVideos:38},{id:337,theme:"frontend",title:"Reactify",author:"",city:"",country:"",link:"https://www.youtube.com/@reactify-it/videos",site:"",dateFirstVideo:"2023.03.29",dateLastVideo:"2023.07.09",amountVideos:37},{id:338,theme:"frontend",title:"Веб Разработчик",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@user-wy6ol7gu3e/videos",site:"",dateFirstVideo:"2021.11.16",dateLastVideo:"2022.06.30",amountVideos:37},{id:339,theme:"frontend",title:"Angular - митапы и события",author:"",city:"",country:"",link:"https://www.youtube.com/@angular-6052/videos",site:"",dateFirstVideo:"2017.05.29",dateLastVideo:"2019.11.28",amountVideos:36},{id:340,theme:"frontend",title:"Antonina Listopadova",author:"Антонина Листопадова",city:"Москва",country:"Россия",link:"https://www.youtube.com/@AntoninaListopadova/videos",site:"",dateFirstVideo:"2019.12.07",dateLastVideo:"2022.02.06",amountVideos:36},{id:341,theme:"frontend",title:"FrontHub",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@frontendsu/videos",site:"",dateFirstVideo:"2014.04.07",dateLastVideo:"2019.11.23",amountVideos:36},{id:342,theme:"frontend",title:"videoBro",author:"",city:"Минск",country:"Беларусь",link:"https://www.youtube.com/@videobro5309/videos",site:"",dateFirstVideo:"2016.10.31",dateLastVideo:"2019.10.27",amountVideos:36},{id:343,theme:"frontend",title:"Чулков Андрей (React JS)",author:"Андрей Чулков",city:"",country:"",link:"https://www.youtube.com/@letmedie7390/videos",site:"",dateFirstVideo:"2023.08.29",dateLastVideo:"2023.09.12",amountVideos:36},{id:344,theme:"frontend",title:"About IT",author:"Андрей",city:"",country:"Украина",link:"https://www.youtube.com/@aboutit6516/videos",site:"",dateFirstVideo:"2020.01.03",dateLastVideo:"2019.10.27",amountVideos:35},{id:345,theme:"frontend",title:"IT это просто",author:"",city:"",country:"",link:"https://www.youtube.com/@IT-fr5ni/videos",site:"",dateFirstVideo:"2019.11.21",dateLastVideo:"2020.08.11",amountVideos:35},{id:346,theme:"frontend",title:"Roman Mamedov",author:"Роман Мамедов",city:"",country:"",link:"https://www.youtube.com/@RomanMamedov333/videos",site:"",dateFirstVideo:"2019.02.16",dateLastVideo:"2020.10.19",amountVideos:35},{id:347,theme:"frontend",title:"Юрий Симонов",author:"Юрий Симонов",city:"",country:"Россия",link:"https://www.youtube.com/@Yuri_Simonov/videos",site:"",dateFirstVideo:"2021.09.06",dateLastVideo:"2022.11.07",amountVideos:35},{id:348,theme:"frontend",title:"CodeQuest",author:"Сергей Миков",city:"",country:"Россия",link:"https://www.youtube.com/@CodeQuestRu/videos",site:"",dateFirstVideo:"2020.10.12",dateLastVideo:"2022.02.03",amountVideos:34},{id:349,theme:"frontend",title:"DreyLiky Dev. ua",author:"",city:"",country:"Украина",link:"https://www.youtube.com/@DreyLikyDev/videos",site:"",dateFirstVideo:"2021.07.22",dateLastVideo:"2022.11.20",amountVideos:34},{id:350,theme:"frontend",title:"Frontend Sensei",author:"",city:"",country:"Украина",link:"https://www.youtube.com/@FrontendSensei/videos",site:"",dateFirstVideo:"2020.05.06",dateLastVideo:"2022.07.26",amountVideos:34},{id:351,theme:"frontend",title:"MinskJS",author:"",city:"Минск",country:"Беларусь",link:"https://www.youtube.com/@MinskJS/videos",site:"",dateFirstVideo:"2017.03.02",dateLastVideo:"2020.02.24",amountVideos:34},{id:352,theme:"frontend",title:"Pavel Druzhinin (dpv.school)",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@dpv.school1236/videos",site:"",dateFirstVideo:"2018.04.26",dateLastVideo:"2022.10.31",amountVideos:34},{id:353,theme:"frontend",title:"ProgerBoll",author:"",city:"",country:"Казахстан",link:"https://www.youtube.com/@progerboll6818/videos",site:"",dateFirstVideo:"2023.06.07",dateLastVideo:"2023.06.28",amountVideos:34},{id:354,theme:"frontend",title:"Skill Blog Веб-разработка",author:"",city:"",country:"",link:"https://www.youtube.com/@skillblog-web/videos",site:"",dateFirstVideo:"2021.03.18",dateLastVideo:"2022.10.20",amountVideos:34},{id:355,theme:"frontend",title:"An D (Anatoly Ostrovsky)",author:"",city:"",country:"",link:"https://www.youtube.com/@anatolyostrovsky/videos",site:"",dateFirstVideo:"2021.10.18",dateLastVideo:"2021.12.05",amountVideos:33},{id:356,theme:"frontend",title:"Flex Web Studio",author:"",city:"",country:"",link:"https://www.youtube.com/@flexWebStudio/videos",site:"",dateFirstVideo:"2022.08.24",dateLastVideo:"2023.02.16",amountVideos:33},{id:357,theme:"frontend",title:"Frontend Skills",author:"Александр Белькевич",city:"",country:"",link:"https://www.youtube.com/@frontend-skills/videos",site:"",dateFirstVideo:"2022.07.01",dateLastVideo:"2023.06.16",amountVideos:33},{id:358,theme:"frontend",title:"frontend interviews",author:"",city:"",country:"",link:"https://www.youtube.com/@interviews.reduce/videos",site:"",dateFirstVideo:"2022.09.04",dateLastVideo:"2023.09.16",amountVideos:32},{id:359,theme:"frontend",title:"Max Roslow",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@maximroslow/videos",site:"",dateFirstVideo:"2021.07.06",dateLastVideo:"2022.09.27",amountVideos:32},{id:360,theme:"frontend",title:"Pomazkov JS",author:"",city:"",country:"",link:"https://www.youtube.com/@pomazkovjs/videos",site:"",dateFirstVideo:"2022.12.14",dateLastVideo:"2023.06.13",amountVideos:32},{id:361,theme:"frontend",title:"Turing bootcamp",author:"",city:"",country:"",link:"https://www.youtube.com/@turingbootcamp2603/videos",site:"",dateFirstVideo:"2021.04.21",dateLastVideo:"2022.04.21",amountVideos:32},{id:362,theme:"frontend",title:"Виталий Малагловец",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@malaglovets/videos",site:"",dateFirstVideo:"2023.02.07",dateLastVideo:"2023.08.27",amountVideos:32},{id:363,theme:"frontend",title:"CodeArt School",author:"",city:"",country:"",link:"https://www.youtube.com/@code-art-school/videos",site:"",dateFirstVideo:"2023.06.09",dateLastVideo:"2024.03.06",amountVideos:31},{id:364,theme:"frontend",title:"Frontend кейс",author:"",city:"",country:"",link:"https://www.youtube.com/@frontend_case/videos",site:"",dateFirstVideo:"2022.10.23",dateLastVideo:"2023.07.31",amountVideos:31},{id:365,theme:"frontend",title:"Виталий Зыбайло",author:"Виталий Зыбайло",city:"",country:"",link:"https://www.youtube.com/@zybailo/videos",site:"",dateFirstVideo:"2018.02.26",dateLastVideo:"2023.02.02",amountVideos:31},{id:366,theme:"frontend",title:"Anna Blok — Frontend Tutorial",author:"Анна Блок",city:"Екатеринбург",country:"Россия",link:"https://www.youtube.com/@AnnaBlok/videos",site:"https://tpverstak.ru/",dateFirstVideo:"2018.09.05",dateLastVideo:"2022.04.04",amountVideos:30},{id:367,theme:"frontend",title:"WebStack - Frontend",author:"",city:"",country:"",link:"https://www.youtube.com/@webstack-frontend1697/videos",site:"",dateFirstVideo:"2022.08.14",dateLastVideo:"2022.11.20",amountVideos:30},{id:368,theme:"frontend",title:"Игорь Антонов — про JavaScript и разработку",author:"Игорь Антонов",city:"",country:"Россия",link:"https://www.youtube.com/@antonovjs/videos",site:"",dateFirstVideo:"2023.02.18",dateLastVideo:"2023.06.27",amountVideos:30},{id:369,theme:"frontend",title:"Antony Boltnev (Go Frontend)",author:"",city:"Москва",country:"Россия",link:"https://www.youtube.com/@gofrontend2220/videos",site:"",dateFirstVideo:"2020.01.12",dateLastVideo:"2020.05.18",amountVideos:29},{id:370,theme:"frontend",title:"Iaroslav Silkin",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@TheMaxfri/videos",site:"",dateFirstVideo:"2023.11.17",dateLastVideo:"2024.01.12",amountVideos:29},{id:371,theme:"frontend",title:"KamaDeva",author:"",city:"",country:"Украина",link:"https://www.youtube.com/@KamaDeva/videos",site:"",dateFirstVideo:"2020.06.26",dateLastVideo:"2021.12.19",amountVideos:29},{id:372,theme:"frontend",title:"wise.js",author:"",city:"",country:"Украина",link:"https://www.youtube.com/@wisejs/videos",site:"",dateFirstVideo:"2020.08.30",dateLastVideo:"2022.02.22",amountVideos:29},{id:373,theme:"frontend",title:"Артем Башлыков Курс по созданию сайта с нуля",author:"Артем Башлыков",city:"Санкт-Петербург",country:"Россия",link:"https://www.youtube.com/@user-gl4ro6ji8u/videos",site:"https://artbashlykov.ru/",dateFirstVideo:"2021.07.26",dateLastVideo:"2021.10.15",amountVideos:29},{id:374,theme:"frontend",title:"Гайд по IT",author:"",city:"",country:"",link:"https://www.youtube.com/@guidebyit/videos",site:"",dateFirstVideo:"2022.07.11",dateLastVideo:"2023.04.26",amountVideos:29},{id:375,theme:"frontend",title:"Даже и не стараюсь",author:"",city:"",country:"",link:"https://www.youtube.com/@dins-the-proger/videos",site:"",dateFirstVideo:"2023.10.13",dateLastVideo:"2024.01.21",amountVideos:29},{id:376,theme:"frontend",title:"Дамир Веб-разработка",author:"",city:"",country:"",link:"https://www.youtube.com/@expand_code/videos",site:"",dateFirstVideo:"2023.12.14",dateLastVideo:"2024.01.12",amountVideos:29},{id:377,theme:"frontend",title:"Создавалкин (нет уже)",author:"",city:"",country:"Россия",link:"https://www.youtube.com/channel/UCKV7CBRyL8bAjA57GUNVPuQ/videos",site:"",dateFirstVideo:"2018.03.11",dateLastVideo:"2019.01.17",amountVideos:29},{id:378,theme:"frontend",title:"Alexander Shleyko",author:"",city:"",country:"",link:"https://www.youtube.com/@dusty-frontend-school/videos",site:"",dateFirstVideo:"2023.03.08",dateLastVideo:"2024.01.04",amountVideos:28},{id:379,theme:"frontend",title:"Sasha Novik",author:"Саша Новик",city:"",country:"Украина",link:"https://www.youtube.com/@sashanovik8466/streams",site:"",dateFirstVideo:"2016.10.28",dateLastVideo:"2017.01.24",amountVideos:28},{id:380,theme:"frontend",title:"ThreePixDroid",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@ThreePixDroid/videos",site:"",dateFirstVideo:"2019.02.26",dateLastVideo:"2021.10.07",amountVideos:28},{id:381,theme:"frontend",title:"almaz joldowbekov",author:"",city:"",country:"",link:"https://www.youtube.com/@almazjoldowbekov7761/videos",site:"",dateFirstVideo:"2015.06.17",dateLastVideo:"2022.09.11",amountVideos:27},{id:382,theme:"frontend",title:"Coder way",author:"",city:"",country:"",link:"https://www.youtube.com/@coderway5617/videos",site:"",dateFirstVideo:"2021.02.27",dateLastVideo:"2022.11.22",amountVideos:27},{id:383,theme:"frontend",title:"easyDevelopment",author:"",city:"",country:"",link:"https://www.youtube.com/@easyDevelopmentWebProgramming/videos",site:"",dateFirstVideo:"2023.10.26",dateLastVideo:"2023.12.28",amountVideos:27},{id:384,theme:"frontend",title:"Hi Pro!",author:"Тимур",city:"",country:"",link:"https://www.youtube.com/@HiProTeam/videos",site:"",dateFirstVideo:"2020.02.24",dateLastVideo:"2021.12.11",amountVideos:27},{id:385,theme:"frontend",title:"Игорь Самарцев - React-Js",author:"Игорь Самарцев",city:"",country:"Россия",link:"https://www.youtube.com/@igorsamartsev5516/videos",site:"",dateFirstVideo:"2019.02.12",dateLastVideo:"2021.10.16",amountVideos:27},{id:386,theme:"frontend",title:"Успеху Идук",author:"Антон",city:"Белгород",country:"Россия",link:"https://www.youtube.com/@user-sc8he2kq3d/videos",site:"",dateFirstVideo:"2020.07.25",dateLastVideo:"2022.03.18",amountVideos:27},{id:387,theme:"frontend",title:"It Road",author:"Сергей",city:"",country:"",link:"https://www.youtube.com/@itroad9085/videos",site:"",dateFirstVideo:"2020.02.12",dateLastVideo:"2020.05.21",amountVideos:26},{id:388,theme:"frontend",title:"Kharkiv Frontend",author:"",city:"Харьков",country:"Украина",link:"https://www.youtube.com/@KharkivFrontend/videos",site:"",dateFirstVideo:"2018.01.08",dateLastVideo:"2018.11.26",amountVideos:26},{id:389,theme:"frontend",title:"Oleksandr Kyianovskyi",author:"Александр",city:"",country:"Украина",link:"https://www.youtube.com/@Urethrify/videos",site:"",dateFirstVideo:"2017.03.26",dateLastVideo:"2018.12.15",amountVideos:26},{id:390,theme:"frontend",title:"udod (JediCSS)",author:"",city:"",country:"Украина",link:"https://www.youtube.com/@JediCSS/videos",site:"https://jedicss.com/",dateFirstVideo:"2018.04.05",dateLastVideo:"2020.05.14",amountVideos:26},{id:391,theme:"frontend",title:"Легкий способ стать программистом",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@user-jv9el2rn5v/videos",site:"",dateFirstVideo:"2019.06.10",dateLastVideo:"2021.04.29",amountVideos:26},{id:392,theme:"frontend",title:"Отсобеседование",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@otsobes/videos",site:"",dateFirstVideo:"2021.02.05",dateLastVideo:"2021.11.19",amountVideos:26},{id:393,theme:"frontend",title:"Сергей Константинов",author:"",city:"",country:"",link:"https://www.youtube.com/@deeamtee/videos",site:"",dateFirstVideo:"2022.12.25",dateLastVideo:"2023.06.25",amountVideos:26},{id:394,theme:"frontend",title:"Anton Bely",author:"Антон Белый",city:"",country:"",link:"https://www.youtube.com/@antonbely5204/videos",site:"",dateFirstVideo:"2021.03.19",dateLastVideo:"2021.10.13",amountVideos:25},{id:395,theme:"frontend",title:"CODEMENTOR",author:"",city:"",country:"",link:"https://www.youtube.com/@coderMentor/videos",site:"",dateFirstVideo:"2023.05.02",dateLastVideo:"2023.06.30",amountVideos:25},{id:396,theme:"frontend",title:"IT village",author:"",city:"",country:"",link:"https://www.youtube.com/@IT_village/videos",site:"",dateFirstVideo:"2023.12.20",dateLastVideo:"2024.02.10",amountVideos:25},{id:397,theme:"frontend",title:"Pro Web",author:"Роман",city:"",country:"",link:"https://www.youtube.com/@tutproweb/videos",site:"",dateFirstVideo:"2022.05.12",dateLastVideo:"2023.12.31",amountVideos:25},{id:398,theme:"frontend",title:"Sergei Chernov (IT - Science)",author:"",city:"",country:"",link:"https://www.youtube.com/@IT-Science/videos",site:"",dateFirstVideo:"2020.08.23",dateLastVideo:"2023.11.12",amountVideos:25},{id:399,theme:"frontend",title:"Верстач",author:"Владислав Белецкий",city:"",country:"Россия",link:"https://www.youtube.com/@verstach/videos",site:"",dateFirstVideo:"2019.06.17",dateLastVideo:"2022.04.05",amountVideos:25},{id:400,theme:"frontend",title:"Виктор Шкода",author:"Виктор Шкода",city:"",country:"Казахстан",link:"https://www.youtube.com/@victorshkoda/videos",site:"",dateFirstVideo:"2011.05.31",dateLastVideo:"2022.03.08",amountVideos:25},{id:401,theme:"frontend",title:"Онлайн-школа Юнак",author:"",city:"",country:"",link:"https://www.youtube.com/@junac_edu/videos",site:"",dateFirstVideo:"2023.01.04",dateLastVideo:"2023.09.06",amountVideos:25},{id:402,theme:"frontend",title:"Frontend News",author:"",city:"",country:"",link:"https://www.youtube.com/@frontendnews3203/videos",site:"",dateFirstVideo:"2021.04.17",dateLastVideo:"2022.11.18",amountVideos:24},{id:403,theme:"frontend",title:"Max Frontend",author:"Максим Пацианский",city:"",country:"Россия",link:"https://www.youtube.com/@maxfrontend8750/videos",site:"",dateFirstVideo:"2018.03.10",dateLastVideo:"2020.06.21",amountVideos:24},{id:404,theme:"frontend",title:"Tocode",author:"Евгений",city:"",country:"Россия",link:"https://www.youtube.com/@tocode/videos",site:"",dateFirstVideo:"2018.09.24",dateLastVideo:"2022.03.18",amountVideos:24},{id:405,theme:"frontend",title:"Фронтендер",author:"Дмитрий Бердников",city:"",country:"",link:"https://www.youtube.com/@user-up6es3nr6s/videos",site:"",dateFirstVideo:"2020.01.03",dateLastVideo:"2021.03.15",amountVideos:24},{id:406,theme:"frontend",title:"Andrey Chuprin",author:"",city:"",country:"",link:"https://www.youtube.com/@AndreyChuprin0101/videos",site:"",dateFirstVideo:"2022.12.16",dateLastVideo:"2023.06.17",amountVideos:23},{id:407,theme:"frontend",title:"IT Rocket Star",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@ITRocketStar/videos",site:"",dateFirstVideo:"2023.03.06",dateLastVideo:"2023.07.11",amountVideos:23},{id:408,theme:"frontend",title:"CodeNinja",author:"",city:"",country:"",link:"https://www.youtube.com/@Code__Ninja/videos",site:"",dateFirstVideo:"2024.01.24",dateLastVideo:"2024.01.20",amountVideos:22},{id:409,theme:"frontend",title:"gabdr0",author:"Дамир Габдрахимов",city:"",country:"Россия",link:"https://www.youtube.com/@gabdr0/videos",site:"https://gabdrahimov.ru/",dateFirstVideo:"2019.02.10",dateLastVideo:"2019.06.26",amountVideos:22},{id:410,theme:"frontend",title:"Kirill Zaitsev",author:"",city:"",country:"",link:"https://www.youtube.com/@kirillzaytsev8583/videos",site:"",dateFirstVideo:"2023.07.24",dateLastVideo:"2023.08.09",amountVideos:22},{id:411,theme:"frontend",title:"Story IT by Igosheva",author:"Настя",city:"",country:"Россия",link:"https://www.youtube.com/@storyitbyigosheva3564/videos",site:"",dateFirstVideo:"2019.05.30",dateLastVideo:"2021.11.03",amountVideos:22},{id:412,theme:"frontend",title:"WolfCode",author:"",city:"",country:"",link:"https://www.youtube.com/@wolf_code/videos",site:"",dateFirstVideo:"2021.06.18",dateLastVideo:"2022.12.08",amountVideos:22},{id:413,theme:"frontend",title:"ZlobaJS",author:"",city:"",country:"",link:"https://www.youtube.com/@zlobajs/videos",site:"",dateFirstVideo:"2023.02.26",dateLastVideo:"2023.09.20",amountVideos:22},{id:414,theme:"frontend",title:"Viacheslav",author:"Вячеслав",city:"",country:"",link:"https://www.youtube.com/@ViacheslavTheDeveloper/videos",site:"",dateFirstVideo:"2023.11.04",dateLastVideo:"2023.12.24",amountVideos:22},{id:415,theme:"frontend",title:"ITVOPLOTI",author:"",city:"",country:"",link:"https://www.youtube.com/@ITVOPLOTI/videos",site:"",dateFirstVideo:"2022.02.05",dateLastVideo:"2024.01.07",amountVideos:21},{id:416,theme:"frontend",title:"Kyzinatra",author:"Данил",city:"",country:"",link:"https://www.youtube.com/@kyzinatra6391/videos",site:"",dateFirstVideo:"2022.10.18",dateLastVideo:"2022.11.20",amountVideos:21},{id:417,theme:"frontend",title:"Lawful Evil Frontend",author:"",city:"",country:"",link:"https://www.youtube.com/@LawfulEvilFrontend/videos",site:"",dateFirstVideo:"2023.05.14",dateLastVideo:"2023.07.11",amountVideos:21},{id:418,theme:"frontend",title:"Web Dev Tips",author:"",city:"",country:"Украина",link:"https://www.youtube.com/@WebDevTips/videos",site:"",dateFirstVideo:"2022.03.03",dateLastVideo:"2021.10.05",amountVideos:21},{id:419,theme:"frontend",title:"Алексей Соловьев",author:"Алексей Соловьев",city:"",country:"",link:"https://www.youtube.com/@lyohaplotinka/videos",site:"",dateFirstVideo:"2020.07.21",dateLastVideo:"2022.11.10",amountVideos:21},{id:420,theme:"frontend",title:"Влад Калачев - JavaScript уроки",author:"Владислав Калачев",city:"",country:"Россия",link:"https://www.youtube.com/@-javascript2665/videos",site:"",dateFirstVideo:"2020.07.15",dateLastVideo:"2021.01.31",amountVideos:21},{id:421,theme:"frontend",title:"Сегень Александр",author:"Александр Сегень",city:"",country:"Беларусь",link:"https://www.youtube.com/@SegenAlexander/videos",site:"",dateFirstVideo:"2016.10.27",dateLastVideo:"2022.11.08",amountVideos:21},{id:422,theme:"frontend",title:"ngRuAir",author:"",city:"Москва",country:"Россия",link:"https://www.youtube.com/@ngRuAir/streams",site:"",dateFirstVideo:"2019.02.17",dateLastVideo:"2021.11.25",amountVideos:20},{id:423,theme:"frontend",title:"OneByteSite в IT после 30-ти",author:"Алексей",city:"",country:"Россия",link:"https://www.youtube.com/@onebytesiteit30-75/videos",site:"",dateFirstVideo:"2020.05.11",dateLastVideo:"2020.11.08",amountVideos:20},{id:424,theme:"frontend",title:"road to front-end",author:"",city:"",country:"",link:"https://www.youtube.com/@roadtofront-end8782/videos",site:"",dateFirstVideo:"2022.06.01",dateLastVideo:"2022.07.19",amountVideos:20},{id:425,theme:"frontend",title:"TARTEM SCHOOL",author:"",city:"",country:"",link:"https://www.youtube.com/@tartemschool321/videos",site:"",dateFirstVideo:"2020.04.13",dateLastVideo:"2020.04.15",amountVideos:20},{id:426,theme:"frontend",title:"AlixHatsu",author:"",city:"",country:"",link:"https://www.youtube.com/@alixhatsu/videos",site:"",dateFirstVideo:"2023.12.05",dateLastVideo:"2023.12.29",amountVideos:19},{id:427,theme:"frontend",title:"AstralFrontend",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@astralfrontend2493/videos",site:"",dateFirstVideo:"2022.11.24",dateLastVideo:"2023.11.29",amountVideos:19},{id:428,theme:"frontend",title:"Marat Interactive",author:"",city:"",country:"",link:"https://www.youtube.com/@maratinteractive/videos",site:"",dateFirstVideo:"2023.05.28",dateLastVideo:"2023.07.03",amountVideos:19},{id:429,theme:"frontend",title:"Young&&Yandex фронтенд-разработка",author:"",city:"",country:"",link:"https://www.youtube.com/@YY_frontend/streams",site:"",dateFirstVideo:"2023.06.07",dateLastVideo:"2023.06.28",amountVideos:19},{id:430,theme:"frontend",title:"Игорь Филимонов",author:"Игорь Филимонов",city:"",country:"Россия",link:"https://www.youtube.com/@i.expert/streams",site:"",dateFirstVideo:"2017.06.28",dateLastVideo:"2017.09.18",amountVideos:19},{id:431,theme:"frontend",title:"CordeN",author:"",city:"",country:"",link:"https://www.youtube.com/@CordeN/videos",site:"",dateFirstVideo:"2022.12.17",dateLastVideo:"2023.08.12",amountVideos:18},{id:432,theme:"frontend",title:"IT Отец",author:"",city:"",country:"",link:"https://www.youtube.com/@it-father/videos",site:"",dateFirstVideo:"2023.10.17",dateLastVideo:"2024.01.17",amountVideos:18},{id:433,theme:"frontend",title:"JS ACADEMY – Влад Грибенников",author:"Влад Грибенников",city:"",country:"Украина",link:"https://www.youtube.com/@jsacademy772/videos",site:"",dateFirstVideo:"2017.08.09",dateLastVideo:"2021.03.14",amountVideos:18},{id:434,theme:"frontend",title:"Tomkovich - Frontend Development",author:"Яна Томкович",city:"Минск",country:"Беларусь",link:"https://www.youtube.com/@Tomkovich/videos",site:"",dateFirstVideo:"2019.04.09",dateLastVideo:"2022.11.09",amountVideos:18},{id:435,theme:"frontend",title:"Как стать программистом",author:"Адам Балкоев",city:"",country:"Россия",link:"https://www.youtube.com/@balkoev/videos",site:"",dateFirstVideo:"2020.02.08",dateLastVideo:"2021.09.11",amountVideos:18},{id:436,theme:"frontend",title:"Дока",author:"",city:"",country:"",link:"https://www.youtube.com/@doka-guide/videos",site:"",dateFirstVideo:"2022.01.19",dateLastVideo:"2023.12.27",amountVideos:18},{id:437,theme:"frontend",title:"Фронтенд простыми словами (Имрон Фронтенд)",author:"",city:"",country:"США",link:"https://www.youtube.com/@frontendinsimplewords/videos",site:"",dateFirstVideo:"2022.08.28",dateLastVideo:"2022.11.09",amountVideos:18},{id:438,theme:"frontend",title:"DevPostnov",author:"Даниил Постнов",city:"",country:"Россия",link:"https://www.youtube.com/@daniilpostnov/videos",site:"",dateFirstVideo:"2018.11.18",dateLastVideo:"2021.07.07",amountVideos:17},{id:439,theme:"frontend",title:"JAVA И SКРИПТЫ",author:"Данил Чушко",city:"",country:"Россия",link:"https://www.youtube.com/@javas9164/videos",site:"",dateFirstVideo:"2020.05.01",dateLastVideo:"2020.09.15",amountVideos:17},{id:440,theme:"frontend",title:"Technomagic (JavaScript 2022 С нуля до профи)",author:"",city:"",country:"Украина",link:"https://www.youtube.com/@x-leader/videos",site:"",dateFirstVideo:"2022.02.03",dateLastVideo:"2023.04.21",amountVideos:17},{id:441,theme:"frontend",title:"TrofikBoss IT - Web Разработка",author:"",city:"",country:"Казахстан",link:"https://www.youtube.com/@TrofikBossIT/videos",site:"",dateFirstVideo:"2023.07.15",dateLastVideo:"2023.08.03",amountVideos:17},{id:442,theme:"frontend",title:"webcoderofficial",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@webcoderofficial5886/videos",site:"",dateFirstVideo:"2021.07.01",dateLastVideo:"2022.11.15",amountVideos:17},{id:443,theme:"frontend",title:"Войти в IT к 30",author:"Владислав",city:"",country:"Россия",link:"https://www.youtube.com/@enterIT30/videos",site:"",dateFirstVideo:"2020.11.24",dateLastVideo:"2022.08.29",amountVideos:17},{id:444,theme:"frontend",title:"CosyFrontend",author:"Настя",city:"",country:"Россия",link:"https://www.youtube.com/@CosyFrontendNastia/videos",site:"",dateFirstVideo:"2023.03.20",dateLastVideo:"2023.06.08",amountVideos:16},{id:445,theme:"frontend",title:"ВебСтудио",author:"",city:"",country:"",link:"https://www.youtube.com/@webstudio1/videos",site:"",dateFirstVideo:"2023.12.11",dateLastVideo:"2023.12.22",amountVideos:16},{id:446,theme:"frontend",title:"bem.info",author:"",city:"",country:"",link:"https://www.youtube.com/@beminfo-th4tm/videos",site:"",dateFirstVideo:"2015.12.20",dateLastVideo:"2019.02.26",amountVideos:15},{id:447,theme:"frontend",title:"codefocus",author:"Наташа Жиркова",city:"",country:"Россия",link:"https://www.youtube.com/@codefocus9933/videos",site:"",dateFirstVideo:"2018.12.02",dateLastVideo:"2020.01.22",amountVideos:15},{id:448,theme:"frontend",title:"JSON",author:"",city:"",country:"",link:"https://www.youtube.com/@yatytbidlo/videos",site:"",dateFirstVideo:"2023.01.31",dateLastVideo:"2023.07.09",amountVideos:15},{id:449,theme:"frontend",title:"knowcity",author:"",city:"",country:"",link:"https://www.youtube.com/@ecroFeGushKa/videos",site:"",dateFirstVideo:"2010.08.21",dateLastVideo:"2021.11.23",amountVideos:15},{id:450,theme:"frontend",title:"uWebCode",author:"Алексей",city:"Минск",country:"Беларусь",link:"https://www.youtube.com/@uWebCode/videos",site:"",dateFirstVideo:"2019.12.30",dateLastVideo:"2021.11.12",amountVideos:15},{id:451,theme:"frontend",title:"WebReference",author:"Влад Мержевич",city:"",country:"Россия",link:"https://www.youtube.com/@webreference6069/videos",site:"",dateFirstVideo:"2019.11.29",dateLastVideo:"2020.06.22",amountVideos:15},{id:452,theme:"frontend",title:"Вадим Гребенщиков",author:"Вадим Гребенщиков",city:"",country:"Россия",link:"https://www.youtube.com/@user-op1br7zs7c/videos",site:"http://htmlboss.ru/beginner",dateFirstVideo:"2015.03.21",dateLastVideo:"2015.09.09",amountVideos:15},{id:453,theme:"frontend",title:"BAD FRONTEND (Alexandra Bochenina)",author:"",city:"",country:"",link:"https://www.youtube.com/@BAD-FRONTEND/videos",site:"",dateFirstVideo:"2023.10.20",dateLastVideo:"2023.10.20",amountVideos:14},{id:454,theme:"frontend",title:"Gleb.proger",author:"",city:"",country:"",link:"https://www.youtube.com/@Gleb.proger/videos",site:"",dateFirstVideo:"2023.08.02",dateLastVideo:"2023.08.07",amountVideos:14},{id:455,theme:"frontend",title:"GramsCode",author:"",city:"",country:"",link:"https://www.youtube.com/@GramsCode/videos",site:"",dateFirstVideo:"2023.07.31",dateLastVideo:"2023.08.07",amountVideos:14},{id:456,theme:"frontend",title:"LISA WEBGIRL",author:"Лиза",city:"",country:"Россия",link:"https://www.youtube.com/@LISAWEBGIRL/videos",site:"",dateFirstVideo:"2020.12.21",dateLastVideo:"2022.07.25",amountVideos:14},{id:457,theme:"frontend",title:"makecsx",author:"Лом-Али (Лев) Гуржиханов",city:"",country:"",link:"https://www.youtube.com/@makecsx/videos",site:"",dateFirstVideo:"2018.02.15",dateLastVideo:"2022.05.21",amountVideos:14},{id:458,theme:"frontend",title:"techno future",author:"Роман Шевченко",city:"",country:"",link:"https://www.youtube.com/@Shevchenko-Roman/videos",site:"",dateFirstVideo:"2022.06.07",dateLastVideo:"2022.11.13",amountVideos:14},{id:459,theme:"frontend",title:"Vladislav Griga",author:"",city:"",country:"",link:"https://www.youtube.com/@vladislavgriga1903/videos",site:"",dateFirstVideo:"2018.04.13",dateLastVideo:"2019.04.15",amountVideos:14},{id:460,theme:"frontend",title:"Александр Лукин",author:"",city:"",country:"",link:"https://www.youtube.com/@sashalukin/videos",site:"",dateFirstVideo:"2020.06.08",dateLastVideo:"2023.07.22",amountVideos:14},{id:461,theme:"frontend",title:"Верзилов Алексей",author:"Алексей Верзилов",city:"",country:"",link:"https://www.youtube.com/@uassuas/videos",site:"",dateFirstVideo:"2022.01.07",dateLastVideo:"2022.07.31",amountVideos:14},{id:462,theme:"frontend",title:"Роман Шайнуров",author:"",city:"",country:"",link:"https://www.youtube.com/@RomanShainurov/videos",site:"",dateFirstVideo:"2023.04.17",dateLastVideo:"2023.11.07",amountVideos:14},{id:463,theme:"frontend",title:"Саня об IT",author:"",city:"",country:"",link:"https://www.youtube.com/@sanya-it/videos",site:"",dateFirstVideo:"2023.05.29",dateLastVideo:"2023.12.27",amountVideos:14},{id:464,theme:"frontend",title:"Сергей Володин",author:"Сергей Володин",city:"",country:"",link:"https://www.youtube.com/@sergei_volodin/videos",site:"",dateFirstVideo:"2022.09.12",dateLastVideo:"2023.04.23",amountVideos:14},{id:465,theme:"frontend",title:"frontendgirl",author:"Таня",city:"Москва",country:"Россия",link:"https://www.youtube.com/@frontendgirl8865/videos",site:"",dateFirstVideo:"2019.02.17",dateLastVideo:"2020.06.22",amountVideos:13},{id:466,theme:"frontend",title:"JSNavigator",author:"",city:"",country:"",link:"https://www.youtube.com/@jsnavigator/videos",site:"",dateFirstVideo:"2023.01.09",dateLastVideo:"2023.03.24",amountVideos:13},{id:467,theme:"frontend",title:"Merrick",author:"",city:"",country:"",link:"https://www.youtube.com/@Merrick_web/videos",site:"",dateFirstVideo:"2016.03.10",dateLastVideo:"2017.02.16",amountVideos:13},{id:468,theme:"frontend",title:"Northern Lights",author:"",city:"",country:"",link:"https://www.youtube.com/@northernlights1368/videos",site:"",dateFirstVideo:"2021.09.09",dateLastVideo:"2023.03.31",amountVideos:13},{id:469,theme:"frontend",title:"Ros",author:"",city:"",country:"",link:"https://www.youtube.com/@RosIvanov/videos",site:"",dateFirstVideo:"2015.03.23",dateLastVideo:"2015.09.03",amountVideos:13},{id:470,theme:"frontend",title:"sazonov-dev",author:"",city:"",country:"",link:"https://www.youtube.com/@sazonov-dev/videos",site:"",dateFirstVideo:"2024.01.07",dateLastVideo:"2024.01.14",amountVideos:13},{id:471,theme:"frontend",title:"Денис Игнатенко",author:"Денис Игнатенко",city:"Москва",country:"Россия",link:"https://www.youtube.com/@midlifecode/videos",site:"",dateFirstVideo:"2023.11.19",dateLastVideo:"2023.12.30",amountVideos:13},{id:472,theme:"frontend",title:"Пятиминутка Angular",author:"",city:"",country:"",link:"https://www.youtube.com/@angular768/videos",site:"",dateFirstVideo:"2017.08.12",dateLastVideo:"2018.12.29",amountVideos:13},{id:473,theme:"frontend",title:"C ноги в АйТи - сменить профессию за год",author:"",city:"",country:"",link:"https://www.youtube.com/@vovka_squid/videos",site:"",dateFirstVideo:"2021.07.02",dateLastVideo:"2022.02.07",amountVideos:12},{id:474,theme:"frontend",title:"Dmitry Bondarchuk",author:"Дмитрий Бондарчук",city:"",country:"Россия",link:"https://www.youtube.com/@dmitrybondarchuk3683/videos",site:"",dateFirstVideo:"2018.04.15",dateLastVideo:"2021.04.07",amountVideos:12},{id:475,theme:"frontend",title:"Helena's diaries",author:"",city:"",country:"Украина",link:"https://www.youtube.com/@helenasdiaries515/videos",site:"",dateFirstVideo:"2021.10.05",dateLastVideo:"2022.07.30",amountVideos:12},{id:476,theme:"frontend",title:"HTMLsCOOL",author:"",city:"",country:"",link:"https://www.youtube.com/@htmlscool6791/videos",site:"",dateFirstVideo:"2017.09.01",dateLastVideo:"2020.01.08",amountVideos:12},{id:477,theme:"frontend",title:"Maksim Akhmerov - full stack developer",author:"",city:"",country:"",link:"https://www.youtube.com/@maximakhmerov-fullstackdev5824/videos",site:"",dateFirstVideo:"2023.10.19",dateLastVideo:"2024.01.02",amountVideos:12},{id:478,theme:"frontend",title:"OkuJava",author:"",city:"",country:"",link:"https://www.youtube.com/@okujava3678/videos",site:"",dateFirstVideo:"2022.04.22",dateLastVideo:"2024.01.02",amountVideos:12},{id:479,theme:"frontend",title:"Данил Чушко",author:"Данил Чушко",city:"",country:"",link:"https://www.youtube.com/@danil_chushko/videos",site:"",dateFirstVideo:"2023.09.09",dateLastVideo:"2023.12.29",amountVideos:12},{id:480,theme:"frontend",title:"Дмитрий Sun Developer",author:"Дмитрий Полянин",city:"",country:"",link:"https://www.youtube.com/@sundeveloper7686/videos",site:"",dateFirstVideo:"2020.01.22",dateLastVideo:"2022.06.27",amountVideos:12},{id:481,theme:"frontend",title:"Front Fri End",author:"Александр Пауэрс",city:"",country:"Россия",link:"https://www.youtube.com/@FrontFriEnd/videos",site:"",dateFirstVideo:"2018.10.28",dateLastVideo:"2021.12.25",amountVideos:11},{id:482,theme:"frontend",title:"Ilya Frontender",author:"Илья Колесников",city:"",country:"",link:"https://www.youtube.com/@liquidbobr/videos",site:"",dateFirstVideo:"2016.08.10",dateLastVideo:"2019.07.10",amountVideos:11},{id:483,theme:"frontend",title:"quebitech",author:"Максим",city:"",country:"",link:"https://www.youtube.com/@quebitech/videos",site:"",dateFirstVideo:"2023.07.21",dateLastVideo:"2023.08.06",amountVideos:11},{id:484,theme:"frontend",title:"Softonix",author:"",city:"",country:"Украина",link:"https://www.youtube.com/@softonix4851/videos",site:"",dateFirstVideo:"2022.10.14",dateLastVideo:"2022.11.19",amountVideos:11},{id:485,theme:"frontend",title:"welcome to IT",author:"",city:"",country:"Украина",link:"https://www.youtube.com/@welcometoit7875/videos",site:"",dateFirstVideo:"2020.03.22",dateLastVideo:"2020.06.08",amountVideos:11},{id:486,theme:"frontend",title:"Тьюринг — Школа программирования",author:"",city:"",country:"",link:"https://www.youtube.com/@turing_pro/videos",site:"",dateFirstVideo:"2022.11.01",dateLastVideo:"2023.02.28",amountVideos:11},{id:487,theme:"frontend",title:"Aleksandr Chernov IT",author:"",city:"",country:"",link:"https://www.youtube.com/@AleksandrChernovIT/videos",site:"",dateFirstVideo:"2023.07.11",dateLastVideo:"2023.12.27",amountVideos:10},{id:488,theme:"frontend",title:"Aslanbek Kaipaev",author:"",city:"",country:"Турция",link:"https://www.youtube.com/@aslanbekkaipaev9148/videos",site:"",dateFirstVideo:"2022.06.11",dateLastVideo:"2022.09.09",amountVideos:10},{id:489,theme:"frontend",title:"Easy Web",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@easyweb4497/videos",site:"",dateFirstVideo:"2018.02.05",dateLastVideo:"2018.03.22",amountVideos:10},{id:490,theme:"frontend",title:"Helio",author:"",city:"",country:"",link:"https://www.youtube.com/@helio404/videos",site:"",dateFirstVideo:"2022.09.14",dateLastVideo:"2023.01.07",amountVideos:10},{id:491,theme:"frontend",title:"Joy Stack",author:"",city:"",country:"",link:"https://www.youtube.com/@joyStackk/videos",site:"",dateFirstVideo:"2023.03.22",dateLastVideo:"2023.06.12",amountVideos:10},{id:492,theme:"frontend",title:"Logica",author:"",city:"",country:"",link:"https://www.youtube.com/@logica1046/videos",site:"",dateFirstVideo:"2022.01.08",dateLastVideo:"2022.04.15",amountVideos:10},{id:493,theme:"frontend",title:"Maxim Filanovich",author:"Максим",city:"",country:"Беларусь",link:"https://www.youtube.com/@MaximFilanovich/videos",site:"",dateFirstVideo:"2021.03.25",dateLastVideo:"2021.10.22",amountVideos:10},{id:494,theme:"frontend",title:"sentiero",author:"",city:"",country:"",link:"https://www.youtube.com/@sentieroJsDev/videos",site:"",dateFirstVideo:"2023.08.04",dateLastVideo:"2023.12.09",amountVideos:10},{id:495,theme:"frontend",title:"Кодерские собесы",author:"",city:"",country:"",link:"https://www.youtube.com/@coder-interviews/videos",site:"",dateFirstVideo:"2023.10.14",dateLastVideo:"2023.11.06",amountVideos:10},{id:496,theme:"frontend",title:"Лукьянов Артём",author:"Артем Лукьянов",city:"",country:"Россия",link:"https://www.youtube.com/@user-bc2nc5lt5p/videos",site:"",dateFirstVideo:"2019.04.24",dateLastVideo:"2020.10.10",amountVideos:10},{id:497,theme:"frontend",title:"Мастерская разработчика",author:"Сергей Миртов",city:"",country:"Россия",link:"https://www.youtube.com/@dev-workshop/videos",site:"",dateFirstVideo:"2022.05.14",dateLastVideo:"2022.08.02",amountVideos:10},{id:498,theme:"frontend",title:"Протасевич",author:"Миша Протасевич",city:"",country:"",link:"https://www.youtube.com/@m.protasevich/videos",site:"",dateFirstVideo:"2019.08.10",dateLastVideo:"2021.08.29",amountVideos:10},{id:499,theme:"frontend",title:"Роберт Панкратов",author:"Роберт Панкратов",city:"",country:"",link:"https://www.youtube.com/@robert.pankratov/videos",site:"",dateFirstVideo:"2023.12.29",dateLastVideo:"2024.01.05",amountVideos:10},{id:500,theme:"frontend",title:"IT Fast",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@itfast9170/videos",site:"",dateFirstVideo:"2019.07.23",dateLastVideo:"2020.05.16",amountVideos:9},{id:501,theme:"frontend",title:"ITshechka",author:"",city:"",country:"",link:"https://www.youtube.com/@itshechka/videos",site:"",dateFirstVideo:"2023.01.29",dateLastVideo:"2023.06.03",amountVideos:9},{id:502,theme:"frontend",title:"The Code - Всё о коде, если это Javascript",author:"",city:"",country:"",link:"https://www.youtube.com/@AboutTheCode/videos",site:"",dateFirstVideo:"2022.01.02",dateLastVideo:"2022.04.01",amountVideos:9},{id:503,theme:"frontend",title:"Yuriy Bogomolov",author:"",city:"",country:"",link:"https://www.youtube.com/@ybogomolov/videos",site:"",dateFirstVideo:"2019.03.17",dateLastVideo:"2021.10.21",amountVideos:9},{id:504,theme:"frontend",title:"Алексей Вавилов",author:"",city:"",country:"",link:"https://www.youtube.com/@Aleksei_Vavilov/videos",site:"",dateFirstVideo:"2016.02.08",dateLastVideo:"2017.10.19",amountVideos:9},{id:505,theme:"frontend",title:"Аня Coding Girl",author:"Аня",city:"",country:"Франция",link:"https://www.youtube.com/@annacodinggirl/videos",site:"",dateFirstVideo:"2022.11.23",dateLastVideo:"2023.05.10",amountVideos:9},{id:506,theme:"frontend",title:"Записки фронтендера",author:"Максим",city:"",country:"Украина",link:"https://www.youtube.com/@user-cv2nm5em2g/videos",site:"",dateFirstVideo:"2019.04.27",dateLastVideo:"2020.04.08",amountVideos:9},{id:507,theme:"frontend",title:"Максим Фатин",author:"Максим Фатин",city:"",country:"",link:"https://www.youtube.com/@fatin.maksim/videos",site:"",dateFirstVideo:"2023.08.19",dateLastVideo:"2023.09.20",amountVideos:9},{id:508,theme:"frontend",title:"Anton Okulov - About Code",author:"Антон Окулов",city:"",country:"Россия",link:"https://www.youtube.com/@about-code/videos",site:"",dateFirstVideo:"2022.05.23",dateLastVideo:"2023.01.08",amountVideos:8},{id:509,theme:"frontend",title:"Artem Kozorezov",author:"Артем",city:"",country:"",link:"https://www.youtube.com/@public_frontend/videos",site:"",dateFirstVideo:"2024.01.08",dateLastVideo:"2024.02.06",amountVideos:8},{id:510,theme:"frontend",title:"Egor Repnikov",author:"",city:"",country:"",link:"https://www.youtube.com/@egorguru/videos",site:"",dateFirstVideo:"2019.09.21",dateLastVideo:"2024.02.06",amountVideos:8},{id:511,theme:"frontend",title:"FrontendDays",author:"Богдан",city:"",country:"",link:"https://www.youtube.com/@FrontendDays/videos",site:"",dateFirstVideo:"2023.09.20",dateLastVideo:"2023.12.31",amountVideos:8},{id:512,theme:"frontend",title:"Frontend не для всех",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@frontend-not-for-everyone/videos",site:"",dateFirstVideo:"2020.07.17",dateLastVideo:"2021.09.12",amountVideos:8},{id:513,theme:"frontend",title:"Inikon Electrix",author:"",city:"",country:"",link:"https://www.youtube.com/@inikonelectrix2349/videos",site:"",dateFirstVideo:"2020.07.19",dateLastVideo:"2021.10.05",amountVideos:8},{id:514,theme:"frontend",title:"IT-войди",author:"",city:"",country:"",link:"https://www.youtube.com/@it-4821/videos",site:"",dateFirstVideo:"2022.02.28",dateLastVideo:"2023.09.22",amountVideos:8},{id:515,theme:"frontend",title:"Mikhail Zhitin",author:"Михаил Житин",city:"",country:"",link:"https://www.youtube.com/@mikhailzhitin42/videos",site:"",dateFirstVideo:"2017.05.12",dateLastVideo:"2017.06.07",amountVideos:8},{id:516,theme:"frontend",title:"Прокашев Даниил",author:"Даниил Прокашев",city:"",country:"",link:"https://www.youtube.com/@user-yd1tk2ix6f/videos",site:"",dateFirstVideo:"2022.03.30",dateLastVideo:"2022.08.01",amountVideos:8},{id:517,theme:"frontend",title:"Dmitrii Fokeev",author:"Дмитрий Фокеев",city:"",country:"",link:"https://www.youtube.com/@DmitriiFokeev/videos",site:"",dateFirstVideo:"2022.02.07",dateLastVideo:"2023.05.27",amountVideos:7},{id:518,theme:"frontend",title:"Frontend JS",author:"",city:"",country:"",link:"https://www.youtube.com/@frontendjs/videos",site:"",dateFirstVideo:"2023.01.13",dateLastVideo:"2023.04.11",amountVideos:7},{id:519,theme:"frontend",title:"ITscapism",author:"",city:"",country:"",link:"https://www.youtube.com/@itscapism/videos",site:"",dateFirstVideo:"2023.04.08",dateLastVideo:"2023.08.21",amountVideos:7},{id:520,theme:"frontend",title:"Vanguard Coding",author:"",city:"",country:"",link:"https://www.youtube.com/@vanguardcoding829/videos",site:"",dateFirstVideo:"2017.12.01",dateLastVideo:"2018.03.29",amountVideos:7},{id:521,theme:"frontend",title:"WebbeW",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@webbewdev/videos",site:"",dateFirstVideo:"2020.02.24",dateLastVideo:"2022.05.15",amountVideos:7},{id:522,theme:"frontend",title:"Руслан Гильмуллин",author:"Руслан Гильмуллин",city:"",country:"",link:"https://www.youtube.com/@Mellonis14/videos",site:"",dateFirstVideo:"2019.10.12",dateLastVideo:"2020.07.18",amountVideos:7},{id:523,theme:"frontend",title:"Aiba TV",author:"Айбол",city:"",country:"Россия",link:"https://www.youtube.com/@aibatv7676/videos",site:"",dateFirstVideo:"2022.01.16",dateLastVideo:"2022.08.12",amountVideos:6},{id:524,theme:"frontend",title:"Alexey Shaykov",author:"Алексей Шайков",city:"",country:"",link:"https://www.youtube.com/@alexeyshaykov/videos",site:"",dateFirstVideo:"2022.10.24",dateLastVideo:"2023.01.04",amountVideos:6},{id:525,theme:"frontend",title:"Andrey Kudinov",author:"",city:"",country:"",link:"https://www.youtube.com/@AndreyKudinov/videos",site:"",dateFirstVideo:"2023.03.13",dateLastVideo:"2023.05.14",amountVideos:6},{id:526,theme:"frontend",title:"EPAM Training Center",author:"",city:"",country:"Беларусь",link:"https://www.youtube.com/@EPAMTrainingCenter/videos",site:"",dateFirstVideo:"2018.12.14",dateLastVideo:"2022.09.28",amountVideos:6},{id:527,theme:"frontend",title:"itt - Архитектура для Профессионалов",author:"",city:"",country:"Украина",link:"https://www.youtube.com/@itt-7658/videos",site:"",dateFirstVideo:"2022.01.02",dateLastVideo:"2022.02.24",amountVideos:6},{id:528,theme:"frontend",title:"jsCoding",author:"",city:"",country:"",link:"https://www.youtube.com/@jscoding6586/videos",site:"",dateFirstVideo:"2018.06.06",dateLastVideo:"2018.06.15",amountVideos:6},{id:529,theme:"frontend",title:"Mikail Aziev",author:"Михаил Азиев",city:"",country:"",link:"https://www.youtube.com/@MikailAziev/videos",site:"",dateFirstVideo:"2021.01.15",dateLastVideo:"2021.12.10",amountVideos:6},{id:530,theme:"frontend",title:"Pushtuk",author:"",city:"",country:"",link:"https://www.youtube.com/@BigXil/videos",site:"",dateFirstVideo:"2020.07.26",dateLastVideo:"2023.10.20",amountVideos:6},{id:531,theme:"frontend",title:"Rutina dev",author:"",city:"",country:"",link:"https://www.youtube.com/@rutinadev/videos",site:"",dateFirstVideo:"2021.11.21",dateLastVideo:"2023.01.07",amountVideos:6},{id:532,theme:"frontend",title:"Think JS",author:"",city:"",country:"",link:"https://www.youtube.com/@thinkjs6058/videos",site:"",dateFirstVideo:"2019.05.24",dateLastVideo:"2021.01.22",amountVideos:6},{id:533,theme:"frontend",title:"ULTIMA team",author:"",city:"",country:"Казахстан",link:"https://www.youtube.com/@ultimateam4685/videos",site:"",dateFirstVideo:"2022.03.16",dateLastVideo:"2022.07.30",amountVideos:6},{id:534,theme:"frontend",title:"Евгений Ращупкин",author:"",city:"",country:"",link:"https://www.youtube.com/@eugenern_dev/videos",site:"",dateFirstVideo:"2023.12.20",dateLastVideo:"2024.01.14",amountVideos:6},{id:535,theme:"frontend",title:"Мультипарадигмал",author:"Артем",city:"",country:"",link:"https://www.youtube.com/@user-hj2jk2qz1d/videos",site:"",dateFirstVideo:"2021.08.22",dateLastVideo:"2022.06.02",amountVideos:6},{id:536,theme:"frontend",title:"Полина про Frontend",author:"",city:"",country:"",link:"https://www.youtube.com/@an4morph/videos",site:"",dateFirstVideo:"2023.03.28",dateLastVideo:"2023.08.08",amountVideos:6},{id:537,theme:"frontend",title:"Сергей на фрилансе",author:"Сергей Жарков",city:"",country:"",link:"https://www.youtube.com/@user-dh4nu5ti6d/videos",site:"",dateFirstVideo:"2015.05.31",dateLastVideo:"2020.05.15",amountVideos:6},{id:538,theme:"frontend",title:"Codovolomka",author:"",city:"",country:"",link:"https://www.youtube.com/@codovolomka9259/videos",site:"",dateFirstVideo:"2019.07.01",dateLastVideo:"2019.07.18",amountVideos:5},{id:539,theme:"frontend",title:"Dmitriy Zubkov",author:"Дмитрий Зубков",city:"",country:"",link:"https://www.youtube.com/@ezweb560/streams",site:"",dateFirstVideo:"2020.11.05",dateLastVideo:"2021.08.12",amountVideos:5},{id:540,theme:"frontend",title:"fenq Dev",author:"",city:"",country:"",link:"https://www.youtube.com/@fenqdev2965/videos",site:"",dateFirstVideo:"2021.09.18",dateLastVideo:"2022.07.01",amountVideos:5},{id:541,theme:"frontend",title:"FrontEndCourse",author:"",city:"",country:"",link:"https://www.youtube.com/@frontendcourse5754/videos",site:"",dateFirstVideo:"2021.07.18",dateLastVideo:"2023.06.18",amountVideos:5},{id:542,theme:"frontend",title:"Koakoalla",author:"",city:"",country:"",link:"https://www.youtube.com/@koakoalla/videos",site:"",dateFirstVideo:"2023.02.05",dateLastVideo:"2023.08.31",amountVideos:5},{id:543,theme:"frontend",title:"myStoryLoft",author:"",city:"",country:"",link:"https://www.youtube.com/@mystoryloft991/videos",site:"",dateFirstVideo:"2021.04.01",dateLastVideo:"2021.06.14",amountVideos:5},{id:544,theme:"frontend",title:"OkoloJS",author:"",city:"",country:"",link:"https://www.youtube.com/@OkoloJS/videos",site:"",dateFirstVideo:"2023.10.22",dateLastVideo:"2024.01.02",amountVideos:5},{id:545,theme:"frontend",title:"ridiculous inc",author:"",city:"",country:"",link:"https://www.youtube.com/@ridiculousinc1/videos",site:"",dateFirstVideo:"2023.08.16",dateLastVideo:"2023.09.06",amountVideos:5},{id:546,theme:"frontend",title:"Roman Boiarchuk",author:"",city:"",country:"",link:"https://www.youtube.com/@romanboiarchuk1948/videos",site:"",dateFirstVideo:"2022.01.09",dateLastVideo:"2023.06.29",amountVideos:5},{id:547,theme:"frontend",title:"SNIEDA PROGRAMMING",author:"",city:"",country:"Украина",link:"https://www.youtube.com/@snieda_programming/videos",site:"",dateFirstVideo:"2021.01.10",dateLastVideo:"2022.08.16",amountVideos:5},{id:548,theme:"frontend",title:"TomskJS",author:"",city:"Томск",country:"",link:"https://www.youtube.com/@TomskjsRu/videos",site:"",dateFirstVideo:"2016.09.18",dateLastVideo:"2016.09.18",amountVideos:5},{id:549,theme:"frontend",title:"Абсолютное Зло",author:"",city:"",country:"",link:"https://www.youtube.com/@user-so3jo4bu1o/videos",site:"",dateFirstVideo:"2020.02.08",dateLastVideo:"2020.12.30",amountVideos:5},{id:550,theme:"frontend",title:"КРАСНОГЛАЗ",author:"",city:"",country:"",link:"https://www.youtube.com/@krasnoglaz/videos",site:"",dateFirstVideo:"2022.09.22",dateLastVideo:"2022.11.04",amountVideos:5},{id:551,theme:"frontend",title:"Станислав Агафонов",author:"Станислав Агафонов",city:"",country:"Россия",link:"https://www.youtube.com/@agaf89/videos",site:"",dateFirstVideo:"2023.01.12",dateLastVideo:"2023.01.29",amountVideos:5},{id:552,theme:"frontend",title:"Andrei Auchynnikau",author:"Андрей Овчинников",city:"",country:"",link:"https://www.youtube.com/@andreiauchynnikau6427/videos",site:"",dateFirstVideo:"2021.05.18",dateLastVideo:"2022.06.27",amountVideos:4},{id:553,theme:"frontend",title:"Art Code",author:"",city:"",country:"",link:"https://www.youtube.com/@art_code/videos",site:"",dateFirstVideo:"2021.05.15",dateLastVideo:"2022.01.08",amountVideos:4},{id:554,theme:"frontend",title:"Code'n Fun",author:"",city:"",country:"",link:"https://www.youtube.com/@CodeReactor20/videos",site:"",dateFirstVideo:"2023.12.26",dateLastVideo:"2024.01.01",amountVideos:4},{id:555,theme:"frontend",title:"Cursor Frontend Accademy",author:"",city:"",country:"",link:"https://www.youtube.com/@cursor-school/videos",site:"",dateFirstVideo:"2022.11.23",dateLastVideo:"2023.08.30",amountVideos:4},{id:556,theme:"frontend",title:"frontender",author:"",city:"",country:"",link:"https://www.youtube.com/@frontender/videos",site:"",dateFirstVideo:"2018.10.24",dateLastVideo:"2019.10.14",amountVideos:4},{id:557,theme:"frontend",title:"Juravlik (Alisher)",author:"",city:"",country:"",link:"https://www.youtube.com/@alisher4370/videos",site:"",dateFirstVideo:"2022.07.07",dateLastVideo:"2022.07.15",amountVideos:4},{id:558,theme:"frontend",title:"MATVA",author:"",city:"",country:"",link:"https://www.youtube.com/@matva4777/streams",site:"",dateFirstVideo:"2023.07.19",dateLastVideo:"2023.07.25",amountVideos:4},{id:559,theme:"frontend",title:"Mr. Camelot",author:"",city:"",country:"",link:"https://www.youtube.com/@Camelot1399/videos",site:"",dateFirstVideo:"2021.10.07",dateLastVideo:"2021.10.11",amountVideos:4},{id:560,theme:"frontend",title:"SALTEIN #Scriptus",author:"",city:"",country:"",link:"https://www.youtube.com/@salteinscriptus/videos",site:"",dateFirstVideo:"2023.12.06",dateLastVideo:"2023.12.27",amountVideos:4},{id:561,theme:"frontend",title:"Sergey Cherepanov",author:"Сергей Черепанов",city:"Томск",country:"Россия",link:"https://www.youtube.com/@scherist/videos",site:"",dateFirstVideo:"2018.07.28",dateLastVideo:"2020.01.29",amountVideos:4},{id:562,theme:"frontend",title:"USE WEB",author:"",city:"",country:"",link:"https://www.youtube.com/@useweb7269/videos",site:"",dateFirstVideo:"2017.12.16",dateLastVideo:"2020.05.06",amountVideos:4},{id:563,theme:"frontend",title:"Bulkin Denis",author:"Денис Булкин",city:"",country:"Казахстан",link:"https://www.youtube.com/@denidenx/videos",site:"",dateFirstVideo:"2022.02.24",dateLastVideo:"2022.09.07",amountVideos:3},{id:564,theme:"frontend",title:"dotenv",author:"",city:"",country:"",link:"https://www.youtube.com/@dotenv6952/videos",site:"",dateFirstVideo:"2021.08.14",dateLastVideo:"2021.08.29",amountVideos:3},{id:565,theme:"frontend",title:"itche",author:"",city:"",country:"",link:"https://www.youtube.com/@itche/videos",site:"",dateFirstVideo:"2024.02.03",dateLastVideo:"2024.02.24",amountVideos:3},{id:566,theme:"frontend",title:"Roman Kuzovlev",author:"Роман Кузовлев",city:"",country:"",link:"https://www.youtube.com/@RomanKuzovlev/videos",site:"",dateFirstVideo:"2016.06.06",dateLastVideo:"2016.07.30",amountVideos:3},{id:567,theme:"frontend",title:"Александр Стародубцев",author:"",city:"",country:"",link:"https://www.youtube.com/@AlexStarodubcev/videos",site:"",dateFirstVideo:"2023.06.11",dateLastVideo:"2023.06.11",amountVideos:3},{id:568,theme:"frontend",title:"Алексей Пастушенко",author:"Алексей Пастушенко",city:"",country:"",link:"https://www.youtube.com/@user-hw1rh6wb9o/videos",site:"",dateFirstVideo:"2020.05.01",dateLastVideo:"2020.05.10",amountVideos:3},{id:569,theme:"frontend",title:"Как стать программистом (Андрей)",author:"Андрей",city:"Сочи",country:"Россия",link:"https://www.youtube.com/@user-nx3uq2fe6w/streams",site:"",dateFirstVideo:"2019.05.08",dateLastVideo:"2019.05.13",amountVideos:3},{id:570,theme:"frontend",title:"Кирилл Панюшин",author:"Кирилл Панюшин",city:"Прага",country:"Чехия",link:"https://www.youtube.com/@user-jr2uc5mw1k/videos",site:"",dateFirstVideo:"2022.01.26",dateLastVideo:"2022.02.10",amountVideos:3},{id:571,theme:"frontend",title:"Коля Павельев",author:"Коля Павельев",city:"",country:"",link:"https://www.youtube.com/@user-ti3mg3gk7i/videos",site:"",dateFirstVideo:"2021.04.03",dateLastVideo:"2022.01.30",amountVideos:3},{id:572,theme:"frontend",title:"Максим Синяков",author:"Максим Синяков",city:"",country:"",link:"https://www.youtube.com/@maxsinyakov/videos",site:"https://sinyakov.com/",dateFirstVideo:"2019.11.26",dateLastVideo:"2020.04.25",amountVideos:3},{id:573,theme:"frontend",title:"Однорукий клакёр",author:"",city:"",country:"",link:"https://www.youtube.com/@one_hand_claqueur/videos",site:"",dateFirstVideo:"2021.12.19",dateLastVideo:"2023.05.08",amountVideos:3},{id:574,theme:"frontend",title:"Павел Васильев",author:"Павел Васильев",city:"",country:"",link:"https://www.youtube.com/@lyftzeigen/videos",site:"",dateFirstVideo:"2020.05.15",dateLastVideo:"2022.01.27",amountVideos:3},{id:575,theme:"frontend",title:"Станислав Мартыщенко",author:"Станислав Мартыщенко",city:"",country:"",link:"https://www.youtube.com/@user-ey4pn9qm7v/videos",site:"",dateFirstVideo:"2017.11.27",dateLastVideo:"2017.11.27",amountVideos:3},{id:576,theme:"frontend",title:"ЯваСкрипт",author:"",city:"",country:"",link:"https://www.youtube.com/@yava_script/videos",site:"",dateFirstVideo:"2024.02.08",dateLastVideo:"2024.02.29",amountVideos:3},{id:577,theme:"frontend",title:"crutch and bike",author:"",city:"",country:"",link:"https://www.youtube.com/@crutchandbike2277/videos",site:"",dateFirstVideo:"2018.01.25",dateLastVideo:"2018.01.25",amountVideos:2},{id:578,theme:"frontend",title:"Danil Kasianenko",author:"Данил Касьяненко",city:"",country:"",link:"https://www.youtube.com/@danilkasianenko6069/videos",site:"",dateFirstVideo:"2022.10.12",dateLastVideo:"2022.10.24",amountVideos:2},{id:579,theme:"frontend",title:"Evgen's Gang",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@evgensgang257/videos",site:"",dateFirstVideo:"2018.06.09",dateLastVideo:"2018.06.14",amountVideos:2},{id:580,theme:"frontend",title:"GrandpaJS",author:"",city:"",country:"",link:"https://www.youtube.com/@grandpajs699/videos",site:"",dateFirstVideo:"2021.10.19",dateLastVideo:"2022.02.13",amountVideos:2},{id:581,theme:"frontend",title:"JavaScript с нуля",author:"",city:"",country:"",link:"https://www.youtube.com/@javascript8065/videos",site:"",dateFirstVideo:"2022.05.16",dateLastVideo:"2022.05.19",amountVideos:2},{id:582,theme:"frontend",title:"Pete Pearl",author:"",city:"",country:"",link:"https://www.youtube.com/@petepearl983/videos",site:"",dateFirstVideo:"2018.08.22",dateLastVideo:"2018.08.26",amountVideos:2},{id:583,theme:"frontend",title:"Road to Senior",author:"Леонид",city:"",country:"Россия",link:"https://www.youtube.com/@roadtosenior1943/videos",site:"",dateFirstVideo:"2021.02.11",dateLastVideo:"2021.02.15",amountVideos:2},{id:584,theme:"frontend",title:"Yury Staravoitau",author:"",city:"",country:"",link:"https://www.youtube.com/@MorfinBrood/streams",site:"",dateFirstVideo:"2018.07.03",dateLastVideo:"2018.07.03",amountVideos:2},{id:585,theme:"frontend",title:"Вечный Джуниор",author:"",city:"",country:"",link:"https://www.youtube.com/@user-yf7ds6uo7n/videos",site:"",dateFirstVideo:"2020.08.04",dateLastVideo:"2020.10.23",amountVideos:2},{id:586,theme:"frontend",title:"Крыгин Сергей",author:"",city:"",country:"",link:"https://www.youtube.com/@V_I_D_O/videos",site:"",dateFirstVideo:"2023.02.18",dateLastVideo:"2023.06.18",amountVideos:2},{id:587,theme:"frontend",title:"Павел Борисов",author:"Павел Борисов",city:"",country:"Россия",link:"https://www.youtube.com/@mgfck/videos",site:"",dateFirstVideo:"2023.05.08",dateLastVideo:"2023.06.01",amountVideos:2},{id:588,theme:"frontend",title:"Dev Talk",author:"",city:"",country:"",link:"https://www.youtube.com/@devtalk7603/videos",site:"",dateFirstVideo:"2022.07.14",dateLastVideo:"2022.07.14",amountVideos:1},{id:589,theme:"frontend",title:"itRelax",author:"",city:"",country:"",link:"https://www.youtube.com/@itrelax6261/videos",site:"",dateFirstVideo:"2021.10.17",dateLastVideo:"2021.10.17",amountVideos:1},{id:590,theme:"frontend",title:"Juniors Lab",author:"",city:"",country:"",link:"https://www.youtube.com/@juniorslab1029/videos",site:"",dateFirstVideo:"2023.02.02",dateLastVideo:"2023.02.02",amountVideos:1},{id:591,theme:"frontend",title:"KOVKA",author:"",city:"",country:"",link:"https://www.youtube.com/@WYKOVKA/videos",site:"",dateFirstVideo:"2024.01.01",dateLastVideo:"2024.01.01",amountVideos:1},{id:592,theme:"frontend",title:"Masonyan777",author:"",city:"",country:"",link:"https://www.youtube.com/@masonyan7778/videos",site:"",dateFirstVideo:"2023.03.25",dateLastVideo:"",amountVideos:1},{id:593,theme:"frontend",title:"Maxim Chernykh",author:"",city:"",country:"",link:"https://www.youtube.com/@maximchernykh4679/videos",site:"",dateFirstVideo:"2020.07.02",dateLastVideo:"",amountVideos:1},{id:594,theme:"frontend",title:"nagoraproweb",author:"Виталий",city:"",country:"",link:"https://www.youtube.com/@nagoraproweb8152/videos",site:"",dateFirstVideo:"2022.07.08",dateLastVideo:"2022.07.08",amountVideos:1},{id:595,theme:"frontend",title:"Как стать программистом",author:"Олег",city:"Севастополь",country:"Россия",link:"https://www.youtube.com/@user-fm7dc3oy8b/videos",site:"",dateFirstVideo:"2021.06.09",dateLastVideo:"2021.06.09",amountVideos:1},{id:596,theme:"frontend",title:"Путь разработчика",author:"",city:"",country:"",link:"https://www.youtube.com/@Dev_path/videos",site:"",dateFirstVideo:"2023.06.13",dateLastVideo:"2023.06.13",amountVideos:1},{id:597,theme:"frontend",title:"Точка F",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@user-bd8wu9gs5q/videos",site:"",dateFirstVideo:"2020.08.30",dateLastVideo:"2020.08.30",amountVideos:1},{id:598,theme:"frontend",title:"Фокус (Данила Панарин)",author:"Данила Панарин",city:"",country:"",link:"https://www.youtube.com/@focus12024/featured",site:"",dateFirstVideo:"2022.02.01",dateLastVideo:"2023.03.05",amountVideos:1},{id:599,theme:"frontend",title:"Danil Vinogradov",author:"Данил Виноградов",city:"",country:"Россия",link:"https://www.youtube.com/@DanilVinogradov/videos",site:"",dateFirstVideo:"2021.03.13",dateLastVideo:"2022.06.21",amountVideos:0},{id:600,theme:"frontend",title:"Shchepotin",author:"",city:"",country:"Украина",link:"https://www.youtube.com/@Shchepotin/",site:"",dateFirstVideo:"2019.02.08",dateLastVideo:"2022.05.17",amountVideos:0},{id:601,theme:"frontend",title:"UMNO - JavaScript",author:"Сергей Власов",city:"",country:"Россия",link:"https://www.youtube.com/@umno-javascript2482/",site:"",dateFirstVideo:"2021.03.23",dateLastVideo:"2021.04.07",amountVideos:0},{id:602,theme:"frontend",title:"Web Developer",author:"",city:"",country:"",link:"https://www.youtube.com/@webdeveloper5770/",site:"",dateFirstVideo:"2021.08.27",dateLastVideo:"2022.07.06",amountVideos:0},{id:603,theme:"frontend",title:"Программирование с нуля",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@user-ll2vr1cg3g/videos",site:"",dateFirstVideo:"2021.11.30",dateLastVideo:"2022.01.14",amountVideos:0},{id:604,theme:"frontend",title:"Станислав Курсков",author:"Станислав Курсков",city:"",country:"",link:"https://www.youtube.com/@StanislavKurskov/videos",site:"",dateFirstVideo:"2023.07.03",dateLastVideo:"2023.08.11",amountVideos:0},{}],[{id:1,theme:"frontend eng",title:"Angular University",author:"",city:"",country:"",link:"https://www.youtube.com/@angularuniversity7442/videos",site:"",dateFirstVideo:"2016.05.20",dateLastVideo:"2022.10.21",amountVideos:291},{id:1,theme:"frontend eng",title:"Codevolution",author:"",city:"",country:"",link:"https://www.youtube.com/@Codevolution/videos",site:"",dateFirstVideo:"2015.11.30",dateLastVideo:"2023.08.15",amountVideos:1438},{id:2,theme:"frontend eng",title:"Coding Addict",author:"",city:"",country:"",link:"https://www.youtube.com/@CodingAddict/videos",site:"",dateFirstVideo:"2016.12.16",dateLastVideo:"2022.12.21",amountVideos:639},{id:3,theme:"frontend eng",title:"CSS CODER",author:"",city:"",country:"",link:"https://www.youtube.com/@csscoder8892/videos",site:"",dateFirstVideo:"2019.10.18",dateLastVideo:"2022.08.31",amountVideos:162},{id:4,theme:"frontend eng",title:"Dave Gray",author:"",city:"",country:"",link:"https://www.youtube.com/@DaveGrayTeachesCode/videos",site:"",dateFirstVideo:"2020.07.20",dateLastVideo:"2024.01.12",amountVideos:373},{id:4,theme:"frontend eng",title:"dcode",author:"",city:"",country:"",link:"https://www.youtube.com/@dcode-software/videos",site:"",dateFirstVideo:"2017.08.30",dateLastVideo:"2022.12.20",amountVideos:650},{id:5,theme:"frontend eng",title:"DesignCourse",author:"",city:"",country:"",link:"https://www.youtube.com/@DesignCourse/videos",site:"",dateFirstVideo:"2010.04.04",dateLastVideo:"2023.01.02",amountVideos:1130},{id:6,theme:"frontend eng",title:"Easy Tutorials",author:"",city:"",country:"",link:"https://www.youtube.com/@EasyTutorialsVideo/videos",site:"",dateFirstVideo:"2015.03.29",dateLastVideo:"2023.01.02",amountVideos:528},{id:7,theme:"frontend eng",title:"edureka",author:"",city:"",country:"",link:"https://www.youtube.com/@edurekaIN/videos",site:"",dateFirstVideo:"2012.06.29",dateLastVideo:"2023.01.02",amountVideos:8265},{id:8,theme:"frontend eng",title:"freeCodeCamp.org",author:"",city:"",country:"",link:"https://www.youtube.com/@freecodecamp/videos",site:"",dateFirstVideo:"2015.07.17",dateLastVideo:"2022.12.20",amountVideos:1383},{id:9,theme:"frontend eng",title:"FreeFrontend",author:"",city:"",country:"",link:"https://www.youtube.com/@FreeFrontend/videos",site:"",dateFirstVideo:"2019.07.19",dateLastVideo:"2021.10.08",amountVideos:81},{id:10,theme:"frontend eng",title:"LearnCode.academy",author:"",city:"",country:"",link:"https://www.youtube.com/@learncodeacademy/videos",site:"",dateFirstVideo:"2013.10.20",dateLastVideo:"2022.04.27",amountVideos:168},{id:11,theme:"frontend eng",title:"Nerd's lesson",author:"Nerd",city:"",country:"",link:"https://www.youtube.com/@Nerdslesson/videos",site:"",dateFirstVideo:"2020.06.25",dateLastVideo:"2022.12.18",amountVideos:59},{id:12,theme:"frontend eng",title:"Programming with Mosh",author:"Mosh",city:"",country:"",link:"https://www.youtube.com/@programmingwithmosh/videos",site:"",dateFirstVideo:"2014.10.07",dateLastVideo:"2022.12.20",amountVideos:173},{id:13,theme:"frontend eng",title:"RS School in English",author:"",city:"",country:"",link:"https://www.youtube.com/@RSSchool/videos",site:"",dateFirstVideo:"2022.02.21",dateLastVideo:"2022.12.27",amountVideos:69},{id:14,theme:"frontend eng",title:"ShortBear",author:"",city:"",country:"",link:"https://www.youtube.com/@shortbear110/videos",site:"",dateFirstVideo:"2021.03.06",dateLastVideo:"2023.04.17",amountVideos:377},{id:15,theme:"frontend eng",title:"SuperSimpleDev",author:"Simon",city:"",country:"",link:"https://www.youtube.com/@SuperSimpleDev/videos",site:"",dateFirstVideo:"2020.11.28",dateLastVideo:"2023.05.22",amountVideos:19},{id:16,theme:"frontend eng",title:"The Net Ninja",author:"",city:"",country:"",link:"https://www.youtube.com/@NetNinja/videos",site:"",dateFirstVideo:"2015.04.22",dateLastVideo:"2022.12.30",amountVideos:2022},{id:17,theme:"frontend eng",title:"The WebShala",author:"",city:"",country:"",link:"https://www.youtube.com/@TheWebShala/videos",site:"",dateFirstVideo:"2018.04.06",dateLastVideo:"2022.12.02",amountVideos:169},{id:18,theme:"frontend eng",title:"Web Bos",author:"",city:"",country:"",link:"https://www.youtube.com/@WesBos/videos",site:"",dateFirstVideo:"2011.03.21",dateLastVideo:"2022.12.08",amountVideos:298},{}],[{id:1,theme:"frontend srb",title:"cysecor",author:"",city:"",country:"Сербия",link:"https://www.youtube.com/@cysecor/videos",site:"",dateFirstVideo:"2020.02.19",dateLastVideo:"2022.12.14",amountVideos:116},{id:2,theme:"frontend srb",title:"RIS HUB UE",author:"",city:"",country:"Сербия",link:"https://www.youtube.com/@rishubue/videos",site:"",dateFirstVideo:"2020.10.29",dateLastVideo:"2022.11.03",amountVideos:103},{}],[{id:1,theme:"frontend cze",title:"David Šetek - Hackni svou budoucnost",author:"David Šetek",city:"",country:"Чехия",link:"https://www.youtube.com/@hacknisvoubudoucnost/videos",site:"",dateFirstVideo:"2019.12.15",dateLastVideo:"2023.01.02",amountVideos:1399},{id:2,theme:"frontend cze",title:"ROB WEB s yablkom",author:"ROB",city:"",country:"Чехия",link:"https://www.youtube.com/@RobWebSK/videos",site:"",dateFirstVideo:"2020.06.08",dateLastVideo:"2022.09.23",amountVideos:68},{}],[{id:1,theme:"Основы",title:"ФКН ВШЭ — дистанционные занятия",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@hse-cs-lectures/videos",site:"",dateFirstVideo:"2020.03.18",dateLastVideo:"2023.11.17",amountVideos:1400},{id:1,theme:"Основы",title:"Электротехника и электроника для программистов",author:"Анатолий Глазов",city:"Рыбница",country:"Россия",link:"https://www.youtube.com/user/Zefar91",site:"http://abglazov.rfpgu.ru/",dateFirstVideo:"2011.11.06",dateLastVideo:"2021.06.04",amountVideos:420},{id:12,theme:"Основы",title:"ВМК МГУ",author:"",city:"",country:"",link:"https://www.youtube.com/@CMCMSUMoscow/videos",site:"",dateFirstVideo:"2020.04.16",dateLastVideo:"2023.11.19",amountVideos:341},{id:2,theme:"Основы",title:"Компьютерные курсы Евгения Юртаева",author:"Евгений Юртаев",city:"Пермь",country:"Россия",link:"https://www.youtube.com/channel/UCCYEcYDdem4Xx5O0c0G3wgA",site:"https://urtaev.com/",dateFirstVideo:"2018.01.04",dateLastVideo:"2021.08.02",amountVideos:302},{id:3,theme:"Основы",title:"Тимофей Хирьянов",author:"Тимофей Хирьянов",city:"Москва",country:"Россия",link:"https://www.youtube.com/user/tkhirianov",site:"https://webshake.ru/",dateFirstVideo:"2015.09.08",dateLastVideo:"2021.06.05",amountVideos:279},{id:4,theme:"Основы",title:"Институт программных систем I Йошкар-Ола",author:"",city:"Йошкар-Ола",country:"Россия",link:"https://www.youtube.com/@InstitutPS/videos",site:"",dateFirstVideo:"2013.04.02",dateLastVideo:"2023.02.15",amountVideos:210},{id:4,theme:"Основы",title:"Институт iSpring",author:"",city:"Йошкар-Ола",country:"Россия",link:"https://www.youtube.com/@institute_ispring/videos",site:"",dateFirstVideo:"2022.01.14",dateLastVideo:"2023.09.26",amountVideos:109},{id:5,theme:"Основы",title:"ЖИЗНЬ АНОНИМА (нет уже)",author:"Александр",city:"Ростов-на-Дону",country:"Россия",link:"https://www.youtube.com/@user-bv3cl5pk1y/videos",site:"",dateFirstVideo:"2017.08.31",dateLastVideo:"2022.11.03",amountVideos:103},{id:6,theme:"Основы",title:"Свалка cобеседований",author:"",city:"Ростов-на-Дону",country:"Россия",link:"https://www.youtube.com/channel/UCXwI6MSHWS3AqEax9gqk4lg/videos",site:"",dateFirstVideo:"2021.10.11",dateLastVideo:"2022.11.20",amountVideos:87},{id:7,theme:"Основы",title:"Natasha Samoylenko",author:"Наташа Самойленко",city:"",country:"",link:"https://www.youtube.com/c/PyNEng/videos",site:"https://natenka.github.io/",dateFirstVideo:"2019.02.01",dateLastVideo:"2021.09.09",amountVideos:78},{id:7,theme:"Основы",title:"Pro OS",author:"",city:"",country:"",link:"https://www.youtube.com/@ProOS-1/videos",site:"",dateFirstVideo:"2020.11.10",dateLastVideo:"2023.07.07",amountVideos:67},{id:7,theme:"Основы",title:"MIR Company",author:"",city:"",country:"",link:"https://www.youtube.com/@mircompany3507/videos",site:"",dateFirstVideo:"2020.07.11",dateLastVideo:"2023.10.06",amountVideos:64},{id:7,theme:"Основы",title:"Hacker School",author:"",city:"",country:"",link:"https://www.youtube.com/@hackers666/videos",site:"",dateFirstVideo:"2022.09.29",dateLastVideo:"2023.11.29",amountVideos:61},{id:8,theme:"Основы",title:"Industrial Software Engineering Online",author:"",city:"",country:"",link:"https://www.youtube.com/@industrialsoftwareengineering/videos",site:"",dateFirstVideo:"2015.02.02",dateLastVideo:"2022.08.06",amountVideos:50},{id:8,theme:"Основы",title:"Мультодей",author:"",city:"",country:"",link:"https://www.youtube.com/@multodey/videos",site:"",dateFirstVideo:"2022.02.08",dateLastVideo:"2023.12.27",amountVideos:49},{id:8,theme:"Основы",title:"Менеджмент разработки ПО",author:"Валерий Студенников",city:"",country:"",link:"https://www.youtube.com/@softdevmgmt/videos",site:"",dateFirstVideo:"2022.09.08",dateLastVideo:"2023.12.13",amountVideos:32},{id:9,theme:"Основы",title:"Lo-Fi Собеседования",author:"",city:"Ростов-на-Дону",country:"Россия",link:"https://www.youtube.com/@lo-fi6927/videos",site:"",dateFirstVideo:"2022.01.17",dateLastVideo:"2022.07.25",amountVideos:28},{id:10,theme:"Основы",title:"Yury Uskov",author:"Юрий Усков",city:"Йошкар-Ола",country:"Россия",link:"https://www.youtube.com/@YuryUskov/videos",site:"",dateFirstVideo:"2019.09.24",dateLastVideo:"2021.09.29",amountVideos:26},{id:10,theme:"Основы",title:"Pavel Filonov",author:"",city:"",country:"",link:"https://www.youtube.com/@filonovpv/videos",site:"",dateFirstVideo:"2021.05.10",dateLastVideo:"2021.11.06",amountVideos:20},{id:11,theme:"Основы",title:"ЖИЗНЬ ЖИЗНИ АНОНИМА (нет уже)",author:"",city:"Ростов-на-Дону",country:"Россия",link:"https://www.youtube.com/channel/UCa_O4hRfliKPAMm_LTfU00Q/videos",site:"",dateFirstVideo:"2020.09.22",dateLastVideo:"2021.11.29",amountVideos:6},{id:12,theme:"Основы",title:"Alexander Titov",author:"",city:"",country:"Россия",link:"https://www.youtube.com/@alexandertitov3827/videos",site:"",dateFirstVideo:"2016.04.28",dateLastVideo:"2019.02.22",amountVideos:4},{}],[{id:1,theme:"Алгоритмы",title:"teach-in",author:"Лекции МГУ",city:"",country:"",link:"https://www.youtube.com/@NAUKA0/videos",site:"",dateFirstVideo:"2014.08.14",dateLastVideo:"2023.10.21",amountVideos:9579},{id:2,theme:"Алгоритмы",title:"Лекториум",author:"",city:"",country:"",link:"https://www.youtube.com/@OpenLektorium/videos",site:"",dateFirstVideo:"2013.05.22",dateLastVideo:"2023.10.22",amountVideos:7243},{id:3,theme:"Алгоритмы",title:"Дистанционные занятия МФТИ",author:"",city:"",country:"",link:"https://www.youtube.com/@mipt_study/videos",site:"",dateFirstVideo:"2019.09.22",dateLastVideo:"2023.10.20",amountVideos:6859},{id:4,theme:"Алгоритмы",title:"НОУ ИНТУИТ",author:"",city:"",country:"",link:"https://www.youtube.com/@Intuitube/videos",site:"",dateFirstVideo:"2012.04.17",dateLastVideo:"2020.11.05",amountVideos:4250},{id:5,theme:"Алгоритмы",title:"Лекторий ФПМИ",author:"",city:"",country:"",link:"https://www.youtube.com/@lectory_fpmi/videos",site:"",dateFirstVideo:"2019.02.07",dateLastVideo:"2023.10.21",amountVideos:3423},{id:6,theme:"Алгоритмы",title:"CT Lectures",author:"",city:"",country:"",link:"https://www.youtube.com/@ctlectures/videos",site:"",dateFirstVideo:"2020.03.03",dateLastVideo:"2023.10.21",amountVideos:1507},{id:7,theme:"Алгоритмы",title:"VK Team",author:"",city:"",country:"",link:"https://www.youtube.com/@vkteamchannel/videos",site:"",dateFirstVideo:"2013.10.17",dateLastVideo:"2023.10.16",amountVideos:1494},{id:8,theme:"Алгоритмы",title:"Лекторий ФОПФ",author:"",city:"",country:"",link:"https://www.youtube.com/@dgaplectorium/videos",site:"",dateFirstVideo:"2020.08.05",dateLastVideo:"2023.10.20",amountVideos:1465},{id:9,theme:"Алгоритмы",title:"Computer Science Center",author:"",city:"",country:"",link:"https://www.youtube.com/@CompscicenterRu/videos",site:"",dateFirstVideo:"2015.04.14",dateLastVideo:"2023.10.16",amountVideos:903},{id:10,theme:"Алгоритмы",title:"Компьютерные науки",author:"",city:"",country:"",link:"https://www.youtube.com/@user-th3jq9rw7b/videos",site:"",dateFirstVideo:"2014.10.31",dateLastVideo:"2023.08.21",amountVideos:807},{id:10,theme:"Алгоритмы",title:"3.5 задачи в неделю",author:"",city:"",country:"",link:"https://www.youtube.com/@35zvn/videos",site:"",dateFirstVideo:"2016.04.03",dateLastVideo:"2020.01.06",amountVideos:779},{id:11,theme:"Алгоритмы",title:"Академия Яндекса",author:"",city:"",country:"",link:"https://www.youtube.com/@yandex.academy/videos",site:"",dateFirstVideo:"2014.11.10",dateLastVideo:"2023.10.19",amountVideos:451},{id:13,theme:"Алгоритмы",title:"Кафедра ИВМ МФТИ",author:"",city:"",country:"",link:"https://www.youtube.com/@cs_mipt/videos",site:"",dateFirstVideo:"2019.08.30",dateLastVideo:"2023.04.07",amountVideos:282},{id:14,theme:"Алгоритмы",title:"Pavel Mavrin",author:"",city:"",country:"",link:"https://www.youtube.com/@pavelmavrin/videos",site:"",dateFirstVideo:"2012.04.14",dateLastVideo:"2022.05.22",amountVideos:277},{id:15,theme:"Алгоритмы",title:"Тинькофф Образование",author:"",city:"",country:"",link:"https://www.youtube.com/@fintech.tinkoff/videos",site:"",dateFirstVideo:"2020.10.27",dateLastVideo:"2023.08.25",amountVideos:240},{id:16,theme:"Алгоритмы",title:"alishev",author:"",city:"",country:"",link:"https://www.youtube.com/@alishevN/videos",site:"",dateFirstVideo:"2015.06.30",dateLastVideo:"2022.07.05",amountVideos:153},{id:17,theme:"Алгоритмы",title:"Niyaz Nigmatullin",author:"",city:"",country:"",link:"https://www.youtube.com/@NiyazNigmatullin/videos",site:"",dateFirstVideo:"2020.03.28",dateLastVideo:"2021.04.26",amountVideos:46},{id:18,theme:"Алгоритмы",title:"ACM MIET",author:"",city:"",country:"",link:"https://www.youtube.com/@acmmiet2225/videos",site:"",dateFirstVideo:"2021.11.13",dateLastVideo:"2021.04.26",amountVideos:43},{}],[{id:1,theme:"C#",title:"Роман Сакутин",author:"Роман Сакутин",city:"",country:"",link:"https://www.youtube.com/@rsakutin/videos",site:"",dateFirstVideo:"2012.07.11",dateLastVideo:"2023.10.16",amountVideos:877},{id:2,theme:"C#",title:"SHIFU",author:"",city:"",country:"",link:"https://www.youtube.com/@shifuio/videos",site:"",dateFirstVideo:"2015.01.23",dateLastVideo:"2023.11.20",amountVideos:508},{id:3,theme:"C#",title:"Byte++",author:"",city:"",country:"",link:"https://www.youtube.com/@Bytepp/videos",site:"",dateFirstVideo:"2015.12.04",dateLastVideo:"2022.03.12",amountVideos:433},{id:4,theme:"C#",title:"SimpleCode",author:"",city:"",country:"",link:"https://www.youtube.com/@SimpleCodeIT/videos",site:"",dateFirstVideo:"2017.02.12",dateLastVideo:"2021.08.09",amountVideos:362},{id:5,theme:"C#",title:"learnprofi.online",author:"",city:"",country:"",link:"https://www.youtube.com/@learnprofionline/videos",site:"",dateFirstVideo:"2020.12.14",dateLastVideo:"2023.12.27",amountVideos:253},{id:5,theme:"C#",title:"Паша Львов",author:"",city:"",country:"",link:"https://www.youtube.com/@JinOptimist/streams",site:"",dateFirstVideo:"2020.04.29",dateLastVideo:"2024.01.09",amountVideos:240},{id:6,theme:"C#",title:"XpucT",author:"Хачатур",city:"",country:"",link:"https://www.youtube.com/@XpucT/videos",site:"",dateFirstVideo:"2018.01.25",dateLastVideo:"2023.10.03",amountVideos:226},{id:7,theme:"C#",title:"XpucT",author:"АйтишныйДомосед",city:"",country:"",link:"https://www.youtube.com/@ITHomester/videos",site:"",dateFirstVideo:"2020.12.15",dateLastVideo:"2023.11.06",amountVideos:225},{id:8,theme:"C#",title:"Victor Dudarev",author:"Виктор Дударев",city:"",country:"",link:"https://www.youtube.com/@vicd80/videos",site:"",dateFirstVideo:"2020.10.19",dateLastVideo:"2023.04.27",amountVideos:207},{id:9,theme:"C#",title:"IRON PROGRAMMER",author:"",city:"",country:"",link:"https://www.youtube.com/@IRONPROGRAMMER/videos",site:"",dateFirstVideo:"2020.01.30",dateLastVideo:"2023.09.28",amountVideos:190},{id:10,theme:"C#",title:"Програмысли",author:"Михаил Фленов",city:"",country:"",link:"https://www.youtube.com/@programisli/videos",site:"",dateFirstVideo:"2018.05.21",dateLastVideo:"2023.10.04",amountVideos:164},{id:11,theme:"C#",title:"CODE BLOG",author:"",city:"",country:"",link:"https://www.youtube.com/@CODEBLOG/videos",site:"",dateFirstVideo:"2019.03.27",dateLastVideo:"2021.03.01",amountVideos:160},{id:12,theme:"C#",title:"Abanking Education",author:"",city:"",country:"",link:"https://www.youtube.com/@abankingeducation6518/videos",site:"",dateFirstVideo:"2021.02.15",dateLastVideo:"2023.10.03",amountVideos:153},{id:13,theme:"C#",title:"EngineerSpock - IT & программирование",author:"",city:"",country:"",link:"https://www.youtube.com/@EngineerSpock/videos",site:"",dateFirstVideo:"2021.05.20",dateLastVideo:"2023.09.27",amountVideos:135},{id:14,theme:"C#",title:"Ruslan Shishmarev",author:"",city:"",country:"",link:"https://www.youtube.com/@RuslanShishmarev/videos",site:"",dateFirstVideo:"2019.01.21",dateLastVideo:"2023.12.28",amountVideos:149},{id:15,theme:"C#",title:"Andrey Shyrokoriadov",author:"Андрей Широкорядов",city:"",country:"",link:"https://www.youtube.com/@AndreyShyrokoriadov/videos",site:"",dateFirstVideo:"2020.12.20",dateLastVideo:"2023.07.01",amountVideos:124},{id:16,theme:"C#",title:"TesIa OfficiaI",author:"",city:"",country:"",link:"https://www.youtube.com/@helloxtesIa/videos",site:"",dateFirstVideo:"2018.04.01",dateLastVideo:"2023.04.14",amountVideos:85},{id:17,theme:"C#",title:"Denis Kirin",author:"",city:"",country:"",link:"https://www.youtube.com/@deniskirin6007/videos",site:"",dateFirstVideo:"2013.03.31",dateLastVideo:"2022.04.06",amountVideos:73},{id:18,theme:"C#",title:"Egorozh Coding",author:"",city:"",country:"",link:"https://www.youtube.com/@EgorozhCoding/videos",site:"",dateFirstVideo:"2020.05.08",dateLastVideo:"2023.05.01",amountVideos:70},{id:19,theme:"C#",title:"Platinum DEV",author:"",city:"",country:"",link:"https://www.youtube.com/@PlatinumTechTalks/videos",site:"",dateFirstVideo:"2020.07.06",dateLastVideo:"2022.11.26",amountVideos:68},{id:20,theme:"C#",title:"SBeregovoyRU",author:"",city:"",country:"",link:"https://www.youtube.com/@SBeregovoyRU/videos",site:"",dateFirstVideo:"2020.01.07",dateLastVideo:"2022.01.12",amountVideos:67},{id:21,theme:"C#",title:"Програмысли Видеоуроки",author:"Михаил Фленов",city:"",country:"",link:"https://www.youtube.com/@Dev-lessons/videos",site:"",dateFirstVideo:"2020.11.05",dateLastVideo:"2023.08.03",amountVideos:64},{id:22,theme:"C#",title:"Excalib",author:"",city:"",country:"",link:"https://www.youtube.com/@Excalib/videos",site:"",dateFirstVideo:"2018.02.03",dateLastVideo:"2023.11.14",amountVideos:55},{id:23,theme:"C#",title:"Андрей Старинин",author:"Андрей Старинин",city:"Воронеж",country:"Россия",link:"https://www.youtube.com/@StarininAndrey/videos",site:"https://github.com/anst-foto",dateFirstVideo:"2021.12.12",dateLastVideo:"2023.05.16",amountVideos:52},{id:24,theme:"C#",title:"Путь к Senior-у",author:"Александр",city:"",country:"",link:"https://www.youtube.com/@senior_v_IT/videos",site:"",dateFirstVideo:"2022.11.15",dateLastVideo:"2023.04.13",amountVideos:46},{id:25,theme:"C#",title:"codaza",author:"",city:"",country:"",link:"https://www.youtube.com/@codaza-channel/videos",site:"",dateFirstVideo:"2021.06.06",dateLastVideo:"2022.07.27",amountVideos:39},{id:26,theme:"C#",title:"Семен Алексеев",author:"Семен Алексеев",city:"",country:"",link:"https://www.youtube.com/@alekseev74/videos",site:"",dateFirstVideo:"2012.08.14",dateLastVideo:"2020.08.15",amountVideos:39},{id:27,theme:"C#",title:"Alexander Kryukov",author:"",city:"",country:"",link:"https://www.youtube.com/@ikryukovs/videos",site:"",dateFirstVideo:"2020.04.28",dateLastVideo:"2020.05.01",amountVideos:38},{id:28,theme:"C#",title:"Просто программист",author:"",city:"",country:"",link:"https://www.youtube.com/@RadmirT/videos",site:"",dateFirstVideo:"2022.11.10",dateLastVideo:"2023.10.25",amountVideos:36},{id:29,theme:"C#",title:"Cleannetcode - Roman Trufanov",author:"Роман Труфанов",city:"",country:"Россия",link:"https://www.youtube.com/@Cleannetcode/videos",site:"",dateFirstVideo:"2020.12.12",dateLastVideo:"2022.11.13",amountVideos:28},{id:30,theme:"C#",title:"Нуб Кодер",author:"",city:"",country:"",link:"https://www.youtube.com/@user-kn3jz5es6q/videos",site:"",dateFirstVideo:"2022.03.06",dateLastVideo:"2023.01.22",amountVideos:18},{id:31,theme:"C#",title:"Артур Губайдуллин",author:"",city:"",country:"",link:"https://www.youtube.com/@arthur_gub/videos",site:"",dateFirstVideo:"2023.10.01",dateLastVideo:"2023.11.19",amountVideos:15},{id:32,theme:"C#",title:"Evgeniy Batov",author:"",city:"",country:"",link:"https://www.youtube.com/@evgeniybatov5094/videos",site:"",dateFirstVideo:"2019.02.01",dateLastVideo:"2021.09.20",amountVideos:9},{id:33,theme:"C#",title:"Дмитрий Васильченко",author:"Дмитрий Васильченко",city:"",country:"",link:"https://www.youtube.com/@user-ph4bh4qj8e/videos",site:"",dateFirstVideo:"2023.09.03",dateLastVideo:"2023.10.12",amountVideos:8},{id:34,theme:"C#",title:"DotNet Interview Preparation",author:"",city:"",country:"",link:"https://www.youtube.com/@DotNetInterviewPreparation/videos",site:"",dateFirstVideo:"2023.10.23",dateLastVideo:"2023.11.13",amountVideos:4},{id:35,theme:"C#",title:"Coder C#",author:"",city:"",country:"",link:"https://www.youtube.com/@CoderC-charp/videos",site:"",dateFirstVideo:"2023.11.22",dateLastVideo:"2023.11.22",amountVideos:2},{}],[{id:1,theme:"Pascal",title:"Эдуард Мецкер",author:"Эдуард Мецкер",city:"",country:"",link:"https://www.youtube.com/@German707707/videos",site:"",dateFirstVideo:"2011.01.23",dateLastVideo:"2016.11.02",amountVideos:17},{id:2,theme:"Pascal",title:"Дмитрий Лапко",author:"Дмитрий Лапко",city:"",country:"",link:"https://www.youtube.com/@user-yn1pi7kf7c/videos",site:"",dateFirstVideo:"2015.12.22",dateLastVideo:"2018.12.18",amountVideos:16},{}]]);function Hr(e){e.sort((function(e,t){return e.title.localeCompare(t.title,"en")}));for(var t=[],r=function(r){var i=document.createElement("li");i.addEventListener("mouseover",(function(){i.classList.add("over")})),i.addEventListener("mouseout",(function(){i.classList.remove("over")})),i.innerHTML='\n    <a href="'.concat(e[r].link,'" target="_blank">').concat(e[r].title,"</a>\n    <div>").concat(e[r].author,"</div>\n    <div>").concat(e[r].city,"</div>\n    <div>").concat(e[r].country,'</div>\n    <div><a href ="').concat(e[r].site,'" target="_blank">').concat(e[r].site,"</a></div>\n    <div>").concat(e[r].dateFirstVideo," - ").concat(e[r].dateLastVideo,"</div>\n    <div>").concat(e[r].amountVideos," видео</div>"),t.push(i)},i=0;i<e.length;i++)r(i);return t}function Br(e){return function(e){if(Array.isArray(e))return zr(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return zr(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?zr(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function zr(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,i=new Array(t);r<t;r++)i[r]=e[r];return i}function Jr(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,i=new Array(t);r<t;r++)i[r]=e[r];return i}var Gr={};Gr.input=Rr,Gr.category=function(e){var t=[];return e.forEach((function(e){e.theme&&!(e.theme in t)&&(t[e.theme]=[]),e.theme&&t[e.theme].push(e)})),t}(Gr.input),Gr.elements=function(e){var t=document.createElement("aside");t.className="aside";var r=document.createElement("main");r.className="list";var i=document.createElement("h2"),a=document.createElement("ul");a.innerHTML='\n  <li><a href="https://ru.savefrom.net/">savefrom.net</a> Скачать mp4 видео</li>\n  <li><a href="https://downsub.com/lang/ru">downsub.com</a> Скачать srt субтитры</li>\n  <li><a href="https://mp3y.download/ru/309/mp3-converter">mp3y.download</a> Скачать mp3 аудио</li>\n  ';var o=document.createElement("ol");o.id="youtube";var l={},n=[],s=function(r){var a,l=document.createElement("a");l.href="#",l.innerHTML=r,n.push(l);var s=[],c=document.createElement("a");c.href="#",c.innerHTML="all";var h=(a=[]).concat.apply(a,Br(e[r])),p=Hr(h);c.addEventListener("click",(function(e){e.preventDefault(),d(s,c),o.innerHTML="",o.append.apply(o,Br(p)),i.innerHTML=h[0].theme})),s.push(c);for(var u=[],m=0,g=function(t){u[m]=e[r].slice(t,t+20);var a=document.createElement("a");a.href="#",a.innerHTML="".concat(u[m][0].theme," ").concat(m+1);var l=Hr(u[m]);a.addEventListener("click",(function(e){e.preventDefault(),d(s,a),o.innerHTML="",o.append.apply(o,Br(l)),i.innerHTML=a.innerHTML})),s.push(a),m++},f=0;f<e[r].length;f+=20)g(f);l.addEventListener("click",(function(e){e.preventDefault(),d(n,l),t.innerHTML="",t.append.apply(t,s);var r=new Event("click");s[0].dispatchEvent(r)}))};for(var c in e)s(c);function d(e,t){e.forEach((function(e){e.classList.remove("active")})),t.classList.add("active")}return r.append(a,i,o),l.navDiv=n,l.aside=t,l.main=r,l}(Gr.category),Gr.mainNav=function(e){var t,r=document.createElement("nav");r.className="nav",r.id="main-nav",r.append.apply(r,function(e){if(Array.isArray(e))return Jr(e)}(t=e.navDiv)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||function(e,t){if(e){if("string"==typeof e)return Jr(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Jr(e,t):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}());var i=new Event("click");return e.navDiv[0].dispatchEvent(i),r}(Gr.elements),Gr.elemSection=function(e){var t=document.createElement("section");return t.className="main__aside",t.append(e.aside,e.main),t}(Gr.elements);var Ur,qr,Qr=[{url:"code-html.html",text:"HTML",content:"<code-html></code-html>",act:function(){!function(){var e,t,r=document.querySelector(".aside");r.innerHTML="",r.append.apply(r,Q),e=['<h1>Справочник по HTML тегам</h1> <div class="article"> <div class="anchor" id="contents"></div> <h2>Содержание</h2> </div> <div class="article__contents"> <div> <p><a href="#links">links</a></p> <p><a href="#info">info</a></p> <p><a href="#single">Одиночные</a></p> <p><a href="#semantic">Семантические</a></p> <p><a href="#html5">HTML5</a></p> <p><a href="#block">Блочные</a></p> <p><a href="#inline">Строчные</a></p> <p><a href="#no-standard">Нестандартные</a></p> <p><a href="#obsolete-elements">Осуждаемые</a></p> <br> <p><a href="#doctype">&lt;!DOCTYPE&gt;</a></p> <p><a href="#comment">&lt;!--...--&gt;</a></p> <p><a href="#tag-html">&lt;html&gt;</a></p> <br> <p><a href="#base-elements">Базовые<br>элементы</a> <br><a href="#tag-head">&lt;head&gt;</a> <br><a href="#tag-body">&lt;body&gt;</a></p> <br> <p><a href="#metadata">Метаданные</a> <br><a href="#tag-meta">&lt;meta /&gt;</a> <br><a href="#tag-base">&lt;base /&gt;</a> <br><a href="#tag-link">&lt;link /&gt;</a> <br><a href="#tag-title">&lt;title&gt;</a> <br><a href="#tag-style">&lt;style&gt;</a></p> </div> <div> <p><a href="#section-elements">Секции</a> <br><a href="#tag-header">&lt;header&gt;</a> <br><a href="#tag-nav">&lt;nav&gt;</a> <br><a href="#tag-aside">&lt;aside&gt;</a> <br><a href="#tag-main">&lt;main&gt;</a> <br><a href="#tag-article">&lt;article&gt;</a> <br><a href="#tag-section">&lt;section&gt;</a> <br><a href="#tag-adress">&lt;adress&gt;</a> <br><a href="#tag-footer">&lt;footer&gt;</a></p> <br> <p><a href="#container-elements">Контейнер</a> <br><a href="#tag-div">&lt;div&gt;</a> <br><a href="#tag-span">&lt;span&gt;</a></p> <br> <p><a href="#headings">Заголовки</a> <br><a href="#tag-hgroup">&lt;hgroup&gt;</a> <br><a href="#tag-h1">&lt;h1&gt;</a> <br><a href="#tag-h2">&lt;h2&gt; - &lt;h6&gt;</a></p> </div> <div> <p><a href="#text-elements1">Оформление<br>текста</a> <br><a href="#tag-a">&lt;a&gt;</a> <br><a href="#tag-hr">&lt;hr /&gt;</a> <br><a href="#tag-p">&lt;p&gt;</a> <br><a href="#tag-pre">&lt;pre&gt;</a> <br><a href="#tag-br">&lt;br /&gt;</a> <br><a href="#tag-wbr">&lt;wbr /&gt;</a></p> <br> <p><a href="#text-elements2">Выделение<br>текста</a> <br><a href="#tag-b">&lt;b&gt;</a> <br><a href="#tag-i">&lt;i&gt;</a> <br><a href="#tag-s">&lt;s&gt;</a> <br><a href="#tag-u">&lt;u&gt;</a> <br><a href="#tag-del">&lt;del&gt;</a> <br><a href="#tag-ins">&lt;ins&gt;</a> <br><a href="#tag-mark">&lt;mark&gt;</a> <br><a href="#tag-small">&lt;small&gt;</a> <br><a href="#tag-sup">&lt;sup&gt;</a> <br><a href="#tag-sub">&lt;sub&gt;</a></p> </div> <div> <p><a href="#text-elements3">Значение<br>текста</a> <br><a href="#tag-abbr">&lt;abbr&gt;</a> <br><a href="#tag-code">&lt;code&gt;</a> <br><a href="#tag-data">&lt;data&gt;</a> <br><a href="#tag-dfn">&lt;dfn&gt;</a> <br><a href="#tag-em">&lt;em&gt;</a> <br><a href="#tag-kbd">&lt;kbd&gt;</a> <br><a href="#tag-samp">&lt;samp&gt;</a> <br><a href="#tag-strong">&lt;strong&gt;</a> <br><a href="#tag-time">&lt;time&gt;</a> <br><a href="#tag-var">&lt;var&gt;</a></p> <br> <p><a href="#text-elements4">Цитаты</a> <br><a href="#tag-blockquote">&lt;blockquote&gt;</a> <br><a href="#tag-q">&lt;q&gt;</a> <br><a href="#tag-cite">&lt;cite&gt;</a></p> </div> <div> <p><a href="#text-elements5">Направление<br>текста</a> <br><a href="#tag-bdi">&lt;bdi&gt;</a> <br><a href="#tag-tbdo">&lt;tbdo&gt;</a></p> <br> <p><a href="#text-elements6">Аннотация</a> <br><a href="#tag-ruby">&lt;ruby&gt;</a> <br><a href="#tag-rt">&lt;rt&gt;</a> <br><a href="#tag-rp">&lt;rp&gt;</a></p> <br> <p><a href="#list-elements">Список</a> <br><a href="#tag-ol">&lt;ol&gt;</a> <br><a href="#tag-ul">&lt;ul&gt;</a> <br><a href="#tag-li">&lt;li&gt;</a> <br><a href="#tag-dl">&lt;dl&gt;</a> <br><a href="#tag-dt">&lt;dt&gt;</a> <br><a href="#tag-dd">&lt;dd&gt;</a> <br><a href="#tag-menu">&lt;menu&gt;</a> <br><a href="#tag-command">&lt;command&gt;</a></p> </div> <div> <p><a href="#table-elements">Таблица</a> <br><a href="#tag-table">&lt;table&gt;</a> <br><a href="#tag-caption">&lt;caption&gt;</a> <br><a href="#tag-colgroup">&lt;colgroup&gt;</a> <br><a href="#tag-col">&lt;col&gt;</a> <br><a href="#tag-thead">&lt;thead&gt;</a> <br><a href="#tag-tfoot">&lt;tfoot&gt;</a> <br><a href="#tag-tbody">&lt;tbody&gt;</a> <br><a href="#tag-tr">&lt;tr&gt;</a> <br><a href="#tag-th">&lt;th&gt;</a> <br><a href="#tag-td">&lt;td&gt;</a></p> </div> <div> <p><a href="#form-elements">Форма</a> <br><a href="#tag-form">&lt;form&gt;</a> <br><a href="#tag-fieldset">&lt;fieldset&gt;</a> <br><a href="#tag-legend">&lt;legend&gt;</a> <br><a href="#tag-input">&lt;input&gt;</a> <br><a href="#tag-datalist">&lt;datalist&gt;</a> <br><a href="#tag-label">&lt;label&gt;</a> <br><a href="#tag-textarea">&lt;textarea&gt;</a> <br><a href="#tag-select">&lt;select&gt;</a> <br><a href="#tag-optgroup">&lt;optgroup&gt;</a> <br><a href="#tag-meter">&lt;meter&gt;</a> <br><a href="#tag-progress">&lt;progress&gt;</a> <br><a href="#tag-button">&lt;button&gt;</a></p> </div> <div> <p><a href="#embed-elements">Встраиваемый<br>контент</a> <br><a href="#tag-img">&lt;img /&gt;</a> <br><a href="#tag-area">&lt;area /&gt;</a> <br><a href="#tag-picture">&lt;picture&gt;</a> <br><a href="#tag-source">&lt;source&gt;</a> <br><a href="#tag-figure">&lt;figure&gt;</a> <br><a href="#tag-figcaption">&lt;figcaption&gt;</a> <br><a href="#tag-iframe">&lt;iframe&gt;</a> <br><a href="#tag-embed">&lt;embed&gt;</a> <br><a href="#tag-object">&lt;object&gt;</a> <br><a href="#tag-param">&lt;param&gt;</a> <br><a href="#tag-video">&lt;video&gt;</a> <br><a href="#tag-audio">&lt;audio&gt;</a> <br><a href="#tag-track">&lt;track&gt;</a> <br><a href="#tag-map">&lt;map&gt;</a> <br><a href="#tag-use">&lt;use&gt;</a> <br><a href="#tag-svg">&lt;svg&gt;</a></p> </div> <div> <p><a href="#interactive-elements">Интерактивные<br>элементы</a> <br><a href="#tag-dialog">&lt;dialog&gt;</a> <br><a href="#tag-details">&lt;details&gt;</a> <br><a href="#tag-summary">&lt;summary&gt;</a></p> <br> <p><a href="#script-elements">Скрипты</a> <br><a href="#tag-script">&lt;script&gt;</a> <br><a href="#tag-noscript">&lt;noscript&gt;</a> <br><a href="#tag-canvas">&lt;canvas&gt;</a></p> <br> <p><a href="#web-elements">Веб-компоненты</a> <br><a href="#tag-template">&lt;template&gt;</a> <br><a href="#tag-slot">&lt;slot&gt;</a></p> </div> <div> <p><a href="#obsolete-elements">Устаревшие</a> <br><a href="#tag-acronym">&lt;acronym&gt;</a> <br><a href="#tag-applet">&lt;applet&gt;</a> <br><a href="#tag-basefont">&lt;basefont&gt;</a> <br><a href="#tag-bgsound">&lt;bgsound&gt;</a> <br><a href="#tag-big">&lt;big&gt;</a> <br><a href="#tag-blink">&lt;blink&gt;</a> <br><a href="#tag-center">&lt;center&gt;</a> <br><a href="#tag-content">&lt;content&gt;</a> <br><a href="#tag-dir">&lt;dir&gt;</a> <br><a href="#tag-font">&lt;font&gt;</a> <br><a href="#tag-frame">&lt;frame&gt;</a> <br><a href="#tag-frameset">&lt;frameset&gt;</a> <br><a href="#tag-image">&lt;image&gt;</a> <br><a href="#tag-keygen">&lt;keygen&gt;</a> <br><a href="#tag-marquee">&lt;marquee&gt;</a> <br><a href="#tag-menuitem">&lt;menuitem&gt;</a> <br><a href="#tag-nobr">&lt;nobr&gt;</a> <br><a href="#tag-noembed">&lt;noembed&gt;</a> <br><a href="#tag-noframes">&lt;noframes&gt;</a> <br><a href="#tag-plaintext">&lt;plaintext&gt;</a> <br><a href="#tag-rb">&lt;rb&gt;</a> <br><a href="#tag-rtc">&lt;rtc&gt;</a> <br><a href="#tag-spacer">&lt;spacer&gt;</a> <br><a href="#tag-strike">&lt;strike&gt;</a> <br><a href="#tag-tt">&lt;tt&gt;</a> <br><a href="#tag-xmp">&lt;xmp&gt;</a></p> </div> </div> <article class="article"> <div class="anchor" id="links"></div> <h2>links</h2> <p><a href="https://htmlbook.ru/html">htmlbook.ru/html</a> Справочник по HTML (Влад Мержевич)</p> <p><a href="https://webref.ru/html">webref.ru/html</a> Справочник HTML</p> <p><a href="https://html5css.ru/tags/default.php">html5css.ru/tags</a> HTML Справочник всех тегов онлайн и примеры</p> <p><a href="https://htmlbase.ru/">htmlbase.ru</a> HTMLBASE - самый современный справочник по HTML и CSS</p> <p><a href="https://guruweba.com/html/">guruweba.com/html</a> Справочник тегов HTML</p> <p><a href="https://ru.w3docs.com/uchebnik-html.html">ru.w3docs.com/uchebnik-html.html</a> Учебник HTML</p> <p><a href="https://hcdev.ru/html/">hcdev.ru/html</a> Справочник HTML</p> <p><a href="https://htmlacademy.ru/blog/html-tags/book">htmlacademy.ru/blog/html-tags/book</a> справочник по html</p> <p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference">developer.mozilla.org</a> HTML Reference</p> <p><a href="https://doka.guide/html/">doka.guide/html</a> HTML</p> <p><a href="https://htmlcheatsheet.com/">htmlcheatsheet.com</a> htmlcheatsheet</p> <p><a href="https://www.htmlquick.com/reference/tags.html">htmlquick.com/reference/tags.html</a></p> <p><a href="https://html.spec.whatwg.org/multipage/">html.spec.whatwg.org</a> HTML Living standart</p> <p><a href="https://htmlreference.io/">htmlreference.io</a> HTML Reference</p> </article> <article class="article"> <div class="anchor" id="info"></div> <h2>info</h2> <p>Всего в HTML 110 элементов - 2 без тегов (доктайп, комментарий), 15 с одиночным тегом, 93 с парными тегами. </p> <hr> <p><b>Элемент с одиночным тегом</b> называется пустым (empty element). Он не имеет содержимого и закрывающего тега, а состоит только из открывающего тега.</p> <p><b>Элемент с парными тегами</b> состоит из открывающего тега (start tag), содержимого (content) и закрывающего тега (end tag).</p> </article> <article class="article"> <div class="anchor" id="single"></div> <h2>Элементы с одиночным тегом (15)</h2> <p> <strong>&lt;area /&gt;</strong>&nbsp; <strong>&lt;base /&gt;</strong>&nbsp; <strong>&lt;br /&gt;</strong>&nbsp; <strong>&lt;col /&gt;</strong>&nbsp; <strong>&lt;embed /&gt;</strong>&nbsp; <strong>&lt;hr /&gt;</strong>&nbsp; <strong>&lt;img /&gt;</strong>&nbsp; <strong>&lt;input /&gt;</strong>&nbsp; <strong>&lt;keygen /&gt;</strong>&nbsp; <strong>&lt;link /&gt;</strong>&nbsp; <strong>&lt;meta /&gt;</strong>&nbsp; <strong>&lt;param /&gt;</strong>&nbsp; <strong>&lt;source /&gt;</strong>&nbsp; <strong>&lt;track /&gt;</strong>&nbsp; <strong>&lt;wbr /&gt;</strong> </p> </article> <article class="article"> <div class="anchor" id="semantic"></div> <h2>Семантические теги (15)</h2> <p> <strong>&lt;address&gt;</strong> <strong>&lt;article&gt;</strong> <strong>&lt;aside&gt;</strong> <strong>&lt;bdi&gt;</strong> <strong>&lt;figcaption&gt;</strong> <strong>&lt;figure&gt;</strong> <strong>&lt;footer&gt;</strong> <strong>&lt;header&gt;</strong> <strong>&lt;main&gt;</strong> <strong>&lt;mark&gt;</strong> <strong>&lt;nav&gt;</strong> <strong>&lt;section&gt;</strong> <strong>&lt;time&gt;</strong> <strong>&lt;wbr&gt;</strong> </p> <p>Семантические теги появились в HTML5. До их появления вся разметка веб-страниц строилась при помощи элементов &lt;div&gt;, которым присваивались идентификаторы (id) или классы (class). Они нужны для группировки контента и разметки текстового содержимого. Они четко описывают, какой контент содержат.</p> <p>Элемент <strong>&lt;address&gt;</strong> определяет контактную информацию автора/владельца документа или статьи.</p> <p>Элемент <strong>&lt;article&gt;</strong> определяет независимый блок, в котором группируются записи (статьи, публикации в блоге, комментарии и т.д).</p> <p>Элемент <strong>&lt;aside&gt;</strong> oн определяет раздел, в котором содержится информация, дополняющая основной отдел. Эта информация является факультативной, и если ее удалить, основное содержимое не пострадает. Такой информацией могут быть комментарии, справочная информация, списки терминов, коллекция ссылок и т.д.</p> <p>Элемент <strong>&lt;header&gt;</strong> формирует заголовочный блок или “шапку” документа, используется как контейнер для группировки вводных и навигационных элементов (логотип, навигационное меню, форма поиска и т.д.).</p> <p>Элемент <strong>&lt;bdi&gt;</strong> определяет фрагмент текста двунаправленного форматирования, который должен быть изолирован от остального текста.</p> <p>Элемент <strong>&lt;figcaption&gt;</strong> используется для добавления подписи или пояснений к содержимому тега &lt;figure&gt;.</p> <p>Элемент <strong>&lt;figure&gt;</strong> определяет автономный контент, являющийся самостоятельным элементом основного потока. Используется для добавления кратких аннотаций к иллюстрациям, фотографиям, диаграммам, фрагментам кода и т.д.</p> <p>Элемент <strong>&lt;footer&gt;</strong> формирует нижний колонтитул секции или корневого элемента, в котором находится. Как правило, в нем размещается информация об авторских правах, контактные данные, ссылки для навигации и т.д.</p> <p>Элемент <strong>&lt;main&gt;</strong> формирует основное содержимое документа (содержимое элемента &lt;body&gt;). Содержимое тега должно быть уникальным и не дублировать однотипные блоки, которые повторяются в других документах, таких как шапка сайта (header), нижний колонтитул (footer), меню, форма поиска, информация об авторских правах и т.д.</p> <p>Элемент <strong>&lt;mark&gt;</strong> используется для выделения важного содержимого или ключевых слов. По умолчанию выделяет желтым цветом.</p> <p>Элемент <strong>&lt;nav&gt;</strong> формирует основной блок навигационных ссылок. Обратите внимание, что не все ссылки в HTML документе могут быть помещены внутрь элемента &lt;nav&gt;, он может включать в себя только крупные навигационные блоки.</p> <p>Элемент <strong>&lt;section&gt;</strong> используется для группировки тематического содержимого (оглавление, программа, разделы и т.д.).</p> <p>Элемент <strong>&lt;time&gt;</strong> определяет время (24 часа) или дату по григорианскому календарю с возможным указанием времени и смещения часового пояса.</p> <p>Элемент <strong>&lt;wbr&gt;</strong> указывает браузеру место возможного разрыва длинной строки в случае необходимости.</p> </article> <article class="article"> <div class="anchor" id="html5"></div> <h2>Элементы, которые появились в стандарте HTML5 (30)</h2> <p> <strong>&lt;article&gt;</strong> <strong>&lt;aside&gt;</strong> <strong>&lt;audio&gt;</strong> <strong>&lt;bdi&gt;</strong> <strong>&lt;canvas&gt;</strong> <strong>&lt;command&gt;</strong> <strong>&lt;datalist&gt;</strong> <strong>&lt;details&gt;</strong> <strong>&lt;figcaption&gt;</strong> <strong>&lt;figure&gt;</strong> <strong>&lt;footer&gt;</strong> <strong>&lt;header&gt;</strong> <strong>&lt;hgroup&gt;</strong> <strong>&lt;keygen&gt;</strong> <strong>&lt;main&gt;</strong> <strong>&lt;mark&gt;</strong> <strong>&lt;menu&gt;</strong> <strong>&lt;meter&gt;</strong> <strong>&lt;nav&gt;</strong> <strong>&lt;output&gt;</strong> <strong>&lt;progress&gt;</strong> <strong>&lt;rp&gt;</strong> <strong>&lt;rt&gt;</strong> <strong>&lt;ruby&gt;</strong> <strong>&lt;section&gt;</strong> <strong>&lt;source&gt;</strong> <strong>&lt;summary&gt;</strong> <strong>&lt;time&gt;</strong> <strong>&lt;video&gt;</strong> <strong>&lt;wbr&gt;</strong> </p> </article> <article class="article"> <div class="anchor" id="block"></div> <h2>Block elements (Блочные элементы) (20)</h2> <p> <strong>&lt;address&gt;</strong> <strong>&lt;blockquote&gt;</strong> <strong>&lt;center&gt;</strong> <strong>&lt;div&gt;</strong> <strong>&lt;fieldset&gt;</strong> <strong>&lt;form&gt;</strong> <strong>&lt;h1&gt;</strong> <strong>&lt;h2&gt;</strong> <strong>&lt;h3&gt;</strong> <strong>&lt;h4&gt;</strong> <strong>&lt;h5&gt;</strong> <strong>&lt;h6&gt;</strong> <strong>&lt;hr&gt;</strong> <strong>&lt;isindex&gt;</strong> <strong>&lt;menu&gt;</strong> <strong>&lt;ol&gt;</strong> <strong>&lt;p&gt;</strong> <strong>&lt;pre&gt;</strong> <strong>&lt;table&gt;</strong> <strong>&lt;ul&gt;</strong> </p> <p>Блочные элементы занимают всю доступную ширину, высота элемента определяется его содержимым, и он всегда начинается с новой строки.</p> <p>Тег <strong>&lt;address&gt;</strong> предназначен для хранения информации об авторе</p> <p>Тег <strong>&lt;blockquote&gt;</strong> Предназначен для выделения длинных цитат внутри документа.</p> <p>Тег <strong>&lt;center&gt;</strong> Выравнивает содержимое контейнера по центру относительно родительского элемента.</p> <p>Тег <strong>&lt;div&gt;</strong> Универсальный блочный элемент.</p> <p>Тег <strong>&lt;fieldset&gt;</strong> Предназначен для группирования элементов формы.</p> <p>Тег <strong>&lt;form&gt;</strong> Устанавливает форму на веб-странице.</p> <p>Тег <strong>&lt;h1&gt;</strong> Заголовок первого уровня.</p> <p>Тег <strong>&lt;h2&gt;</strong> Заголовок второго уровня.</p> <p>Тег <strong>&lt;h3&gt;</strong> заголовок третьего уровня.</p> <p>Тег <strong>&lt;h4&gt;</strong> заголовок четвертого уровня.</p> <p>Тег <strong>&lt;h5&gt;</strong> заголовок пятого уровня.</p> <p>Тег <strong>&lt;h6&gt;</strong> заголовок шестого уровня.</p> <p>Тег <strong>&lt;hr&gt;</strong> горизонтальная линия.</p> <p>Тег <strong>&lt;isindex&gt;</strong> Используется для поискового индекса в текущем документе.</p> <p>Тег <strong>&lt;menu&gt;</strong> Отображает список меню.</p> <p>Тег <strong>&lt;ol&gt;</strong> нумерованный список.</p> <p>Тег <strong>&lt;p&gt;</strong> текстовый абзац.</p> <p>Тег <strong>&lt;pre&gt;</strong> Определяет блок предварительно форматированного текста.</p> <p>Тег <strong>&lt;table&gt;</strong> Создает таблицу.</p> <p>Тег <strong>&lt;ul&gt;</strong> маркированный список.</p> </article> <article class="article"> <div class="anchor" id="inline"></div> <h2>Inline elements (Строчные элементы) (31)</h2> <p> <strong>&lt;a&gt;</strong> <strong>&lt;abbr&gt;</strong> <strong>&lt;acronym&gt;</strong> <strong>&lt;b&gt;</strong> <strong>&lt;basefont&gt;</strong> <strong>&lt;bdo&gt;</strong> <strong>&lt;big&gt;</strong> <strong>&lt;br&gt;</strong> <strong>&lt;cite&gt;</strong> <strong>&lt;code&gt;</strong> <strong>&lt;dfn&gt;</strong> <strong>&lt;em&gt;</strong> <strong>&lt;font&gt;</strong> <strong>&lt;i&gt;</strong> <strong>&lt;input&gt;</strong> <strong>&lt;kbd&gt;</strong> <strong>&lt;label&gt;</strong> <strong>&lt;q&gt;</strong> <strong>&lt;s&gt;</strong> <strong>&lt;samp&gt;</strong> <strong>&lt;select&gt;</strong> <strong>&lt;small&gt;</strong> <strong>&lt;strike&gt;</strong> <strong>&lt;strong&gt;</strong> <strong>&lt;span&gt;</strong> <strong>&lt;sub&gt;</strong> <strong>&lt;sup&gt;</strong> <strong>&lt;textarea&gt;</strong> <strong>&lt;tt&gt;</strong> <strong>&lt;u&gt;</strong> <strong>&lt;var&gt;</strong> </p> <p>Строчные элементы являются частью другого элемента, например, текстового абзаца. В основном они используются для изменения вида текста или его логического выделения.</p> <p>Тег <strong>&lt;a&gt;</strong> Является одним из важных элементов HTML и предназначен для создания ссылок.</p> <p>Тег <strong>&lt;abbr&gt;</strong> указывает, что последовательность символов является аббревиатурой.</p> <p>Тег <strong>&lt;acronym&gt;</strong> Сообщает, что текст является акронимом. В отличие от аббревиатуры, акроним — это устоявшееся сокращение, которое применяется как самостоятельное слово.</p> <p>Тег <strong>&lt;b&gt;</strong> Устанавливает жирное начертание шрифта</p> <p>Тег <strong>&lt;basefont&gt;</strong> Предназначен для задания шрифта, размера и цвета текста по умолчанию.</p> <p>Тег <strong>&lt;bdo&gt;</strong> Устанавливает направление вывода текста: слева направо или справа налево.</p> <p>Тег <strong>&lt;big&gt;</strong> Увеличивает размер шрифта на единицу по сравнению с обычным текстом.</p> <p>Тег <strong>&lt;br&gt;</strong> Перенос строки.</p> <p>Тег <strong>&lt;cite&gt;</strong> Помечает текст как цитату или сноску на другой материал.</p> <p>Тег <strong>&lt;code&gt;</strong> Предназначен для отображения текста программного кода.</p> <p>Тег <strong>&lt;dfn&gt;</strong> Выделяет термин в документе.</p> <p>Тег <strong>&lt;em&gt;</strong> Предназначен для акцентирования текста.</p> <p>Тег <strong>&lt;font&gt;</strong> Предназначен для изменения характеристик шрифта, таких как размер, цвет и гарнитура.</p> <p>Тег <strong>&lt;i&gt;</strong> Устанавливает курсивное начертание шрифта.</p> <p>Тег <strong>&lt;input&gt;</strong> Позволяет создавать разные элементы интерфейса.</p> <p>Тег <strong>&lt;kbd&gt;</strong> Используется для обозначения текста, который набирается на клавиатуре или для названия клавиш.</p> <p>Тег <strong>&lt;label&gt;</strong> Устанавливает связь между определенной меткой и элементом формы.</p> <p>Тег <strong>&lt;q&gt;</strong> Используется для выделения в тексте цитат.</p> <p>Тег <strong>&lt;s&gt;</strong> Отображает текст как перечеркнутый.</p> <p>Тег <strong>&lt;samp&gt;</strong> Используется для отображения текста, который является результатом вывода компьютерной программы.</p> <p>Тег <strong>&lt;select&gt;</strong> Создает раскрывающийся список.</p> <p>Тег <strong>&lt;small&gt;</strong> Уменьшает размер шрифта на единицу по сравнению с обычным текстом.</p> <p>Тег <strong>&lt;span&gt;</strong> Универсальный строчный элемент.</p> <p>Тег <strong>&lt;strike&gt;</strong> Отображает текст как перечеркнутый.</p> <p>Тег <strong>&lt;strong&gt;</strong> Акцентирует текст, обычно жирным начертанием.</p> <p>Тег <strong>&lt;sub&gt;</strong> Отображает шрифт в виде нижнего индекса.</p> <p>Тег <strong>&lt;sup&gt;</strong> Отображает шрифт в виде верхнего индекса.</p> <p>Тег <strong>&lt;textarea&gt;</strong> Создает поле для многострочного текста.</p> <p>Тег <strong>&lt;tt&gt;</strong> Отображает текст моноширинным текстом.</p> <p>Тег <strong>&lt;u&gt;</strong> Добавляет подчеркивание к тексту.</p> <p>Тег <strong>&lt;var&gt;</strong> Используется для выделения переменных компьютерных программ.</p> </article> <article class="article"> <div class="anchor" id="no-standard"></div> <h2>Нестандартные теги (9)</h2> <p> <strong>&lt;bgsound&gt;</strong> <strong>&lt;blink&gt;</strong> <strong>&lt;comment&gt;</strong> <strong>&lt;marquee&gt;</strong> <strong>&lt;multicol&gt;</strong> <strong>&lt;nobr&gt;</strong> <strong>&lt;noembed&gt;</strong> <strong>&lt;plaintext&gt;</strong> <strong>&lt;spacer&gt;</strong> </p> <p>Некоторые разработчики браузеров или поисковых систем включают поддержку собственных тегов, которые не входят в спецификацию HTML. Использование этих тегов приводит к невалидному коду, а также поддерживаются не всеми браузерами.</p> <p>Тег <strong>&lt;bgsound&gt;</strong> Определяет музыкальный файл, который будет проигрываться на веб-странице.</p> <p>Тег <strong>&lt;blink&gt;</strong> Устанавливает мигание текста.</p> <p>Тег <strong>&lt;comment&gt;</strong> Добавляет комментарий в код документа.</p> <p>Тег <strong>&lt;marquee&gt;</strong> Создает бегущую строку на странице.</p> <p>Тег <strong>&lt;multicol&gt;</strong> Задает количество колонок, ширину и расстояние между колонками в многоколоночном тексте.</p> <p>Тег <strong>&lt;nobr&gt;</strong> Уведомляет браузер отображать текст без переносов.</p> <p>Тег <strong>&lt;noembed&gt;</strong> предназначен для отображения информации на веб-странице, если браузер не поддерживает работу с плагинами.</p> <p>Тег <strong>&lt;plaintext&gt;</strong> Отображает содержимое контейнера «как есть».</p> <p>Тег <strong>&lt;spacer&gt;</strong> Создает пустое пространство по вертикали или горизонтали.</p> </article> <article class="article"> <div class="anchor" id="doctype"></div> <h2>Тип документа &lt;!DOCTYPE&gt;</h2> <p>Пишется первой строчкой любого html документа. Для страниц стандарта html5 имеет вид <code>&lt;!DOCTYPE html&gt;</code></p> <p>Элемент &lt;!DOCTYPE&gt; предназначен для указания типа текущего документа — DTD (document type definition, описание типа документа). Это необходимо, чтобы браузер понимал, как следует интерпретировать текущую веб-страницу. Поскольку HTML существует в нескольких версиях, существует несколько видов &lt;!DOCTYPE&gt;</p> </article> <article class="article"> <div class="anchor" id="comment"></div> <h2>Комментарий &lt;!--...--&gt;</h2> <p>Браузер игнорирует все что написано внутри. Таким образом можно оставлять комментарий к коду или экранировать фрагменты кода. Вложенные комментарии (один комментарий в другом) не поддерживаются. <code>&lt;!-- какой-то комментарий к коду --&gt;</code></p> <p>Если комментарий расположен внутри тега &lt;title&gt;, он трактуется как текст и будет показан в заголовке страницы. Проще говоря, тег &lt;!-- --&gt; внутри тега &lt;title&gt; не работает.</p> </article> <article class="article"> <div class="anchor" id="tag-html"></div> <h2>Root Element (Корневой элемент) &lt;html&gt;</h2> <p>В документе html может быть только один корневой элемент &lt;html&gt;. Он идет сразу после элемента &lt;doctype&gt; <code>&lt;!DOCTYPE html&gt; <br>&lt;html&gt;&lt;/html&gt;</code></p> </article> <article class="article"> <div class="anchor" id="base-elements"></div> <h2>Базовые элементы (2)</h2> <p><a href="#tag-head">&lt;head&gt;</a> <a href="#tag-body">&lt;body&gt;</a></p> <p>В корневой элемент &lt;html&gt; последовательно вкладывают базовые элементы &lt;head&gt; и &lt;body&gt; <code>&lt;!DOCTYPE html&gt; <br>&lt;html&gt; <br>&nbsp;&nbsp;&lt;head&gt; <br>&nbsp;&nbsp;&lt;/head&gt; <br>&nbsp;&nbsp;&lt;body&gt; <br>&nbsp;&nbsp;&lt;/body&gt; <br>&lt;/html&gt;</code></p> </article> <article class="article"> <div class="anchor" id="tag-head"></div> <h3>&lt;head&gt;</h3> <p>Содержимое тега &lt;head&gt; не отображается напрямую на веб-странице, за исключением тега &lt;title&gt; устанавливающего заголовок окна веб-страницы. Внутри контейнера &lt;head&gt; находятся метатеги, которые используются для хранения информации предназначенной для браузеров и поисковых систем. Внутри контейнера &lt;head&gt; допускается размещать следующие элементы: &lt;base&gt;, &lt;link&gt;, &lt;meta&gt;, &lt;script&gt;, &lt;style&gt;, &lt;title&gt; (устаревшие &lt;basefont&gt;, &lt;bgsound&gt;).</p> </article> <article class="article"> <div class="anchor" id="tag-body"></div> <h3>&lt;body&gt;</h3> <p>В теге &lt;body&gt; находится все содержимое страницы, которое показывается в окне браузера.</p> </article> <article class="article"> <div class="anchor" id="metadata"></div> <h2>Document Metadata (Метаданные) (5)</h2> <p><a href="#tag-meta">&lt;meta /&gt;</a> <a href="#tag-base">&lt;base /&gt;</a> <a href="#tag-link">&lt;link /&gt;</a> <a href="#tag-title">&lt;title&gt;</a> <a href="#tag-style">&lt;style&gt;</a></p> </article> <article class="article"> <div class="anchor" id="tag-meta"></div> <h3>&lt;meta /&gt;</h3> <p>Всегда внутри контейнера &lt;head&gt;. Данные в нем не видны пользователю и предназначены для браузеров и поисковых систем. </p></article> <article class="article"> <div class="anchor" id="tag-base"></div> <h3>&lt;base /&gt;</h3> <p>Всегда внутри контейнера &lt;head&gt;. Сообщает браузеру полный базовый адрес текущего документа. В атрибут href пишут адрес, который должен использоваться для указания полного пути к файлам. &lt;base /&gt; предназначен для документов, в которых используется относительный адрес и эти документы могут переноситься в другую папку или даже на другой компьютер без потери связи.</p> <p>Второе применение элемента </p><base> — задание целевого окна для всех ссылок на текущей странице. В атрибут target пишут имя окна, в котором будут открываться все ссылки.<p></p> <p>Если на странице встречается несколько элементов </p><base>, то берётся значение атрибутов только у первого элемента, остальные игнорируются.<p></p> <code>&lt;!DOCTYPE html&gt; <br>&lt;html&gt; <br>&nbsp;&nbsp;&lt;head&gt; <br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;base href="https://html5css.ru/images/" target="_blank"&gt; <br>&nbsp;&nbsp;&lt;/head&gt; <br>&nbsp;&nbsp;&lt;body&gt; <br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;img src="spiderman.gif" width="50" height="100" alt="Spiderman"&gt; <br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;a href="spiderman.html"&gt;Человек-паук&lt;/a&gt; <br>&nbsp;&nbsp;&lt;/body&gt; <br>&lt;/html&gt;</code> </article> <article class="article"> <div class="anchor" id="tag-link"></div> <h3>&lt;link /&gt;</h3> <p>Всегда внутри контейнера &lt;head&gt;. Устанавливает связь с внешним документом вроде файла со стилями, со шрифтами или favicon.</p> <code>&lt;!DOCTYPE html&gt; <br>&lt;html&gt; <br>&nbsp;&nbsp;&lt;head&gt; <br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;link rel="preload" href="https://htmlacademy.ru/fonts/roboto.woff2" as="font""&gt; <br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;link rel="stylesheet" href="style.css"&gt; <br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;link rel="icon" href="favicon.ico"&gt; <br>&nbsp;&nbsp;&lt;/head&gt; <br>&nbsp;&nbsp;&lt;body&gt; <br>&nbsp;&nbsp;&lt;/body&gt; <br>&lt;/html&gt;</code> <p>Чтобы сделать предзагрузку шрифта на страницу, нужно в теге &lt;head&gt; разместить тег &lt;link /&gt;, в аттрибуте rel прописать значение preload, в аттрибуте href прописать адрес шрифта, в аттрибуте as прописать тип ресурса, в данном случае font.</p> </article> <article class="article"> <div class="anchor" id="tag-title"></div> <h3>&lt;title&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-style"></div> <h3>&lt;style&gt;</h3> </article>  <article class="article"> <div class="anchor" id="section-elements"></div> <h2>Sections (Секции) (8)</h2> <p><a href="#tag-header">&lt;header&gt;</a> <a href="#tag-nav">&lt;nav&gt;</a> <a href="#tag-aside">&lt;aside&gt;</a> <a href="#tag-main">&lt;main&gt;</a> <a href="#tag-article">&lt;article&gt;</a> <a href="#tag-section">&lt;section&gt;</a> <a href="#tag-adress">&lt;adress&gt;</a> <a href="#tag-footer">&lt;footer&gt;</a></p> </article> <article class="article"> <div class="anchor" id="tag-header"></div> <h3>&lt;header&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-nav"></div> <h3>&lt;nav&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-aside"></div> <h3>&lt;aside&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-main"></div> <h3>&lt;main&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-article"></div> <h3>&lt;article&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-section"></div> <h3>&lt;section&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-adress"></div> <h3>&lt;adress&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-footer"></div> <h3>&lt;footer&gt;</h3> </article> <article class="article"> <div class="anchor" id="container-elements"></div> <h2>Container (Контейнер) (2)</h2> <p><a href="#tag-div">&lt;div&gt;</a> <a href="#tag-span">&lt;span&gt;</a></p> </article> <article class="article"> <div class="anchor" id="tag-div"></div> <h3>&lt;div&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-span"></div> <h3>&lt;span&gt;</h3> </article> <article class="article"> <div class="anchor" id="headings"></div> <h2>Headings (Заголовки) (7)</h2> <p><a href="#tag-hgroup">&lt;hgroup&gt;</a> <a href="#tag-h1">&lt;h1&gt;</a> <a href="#tag-h2">&lt;h2&gt; - &lt;h6&gt;</a></p> <p>HTML предлагает шесть заголовков разного уровня, которые показывают относительную важность секции, расположенной после заголовка. &lt;h1&gt; представляет собой наиболее важный заголовок первого уровня. Считается что он должен быть один на странице. Отображается самым крупным шрифтом жирного начертания, заголовки последующего уровня по размеру меньше. Это блочные элементы. Перед заголовком и после него добавляется пустое пространство.</p> </article> <article class="article"> <div class="anchor" id="tag-hgroup"></div> <h3>&lt;hgroup&gt;</h3> <p>Представляет заголовок раздела. Группирует несколько заголовков. Связывает вторичный заголовок или даже теги с основным заголовком без загрязнения структуры документа</p> <code> &lt;hgroup&gt;<br> &nbsp;&nbsp;&lt;h1&gt;Главный заголовок&lt;/h1&gt;<br> &nbsp;&nbsp;&lt;h2&gt;Вторичный заголовок&lt;/h2&gt;<br> &lt;/hgroup&gt; </code> <code> &lt;hgroup id="document-title"&gt;<br> &nbsp;&nbsp;&lt;h1&gt;HTML: Living Standard&lt;/h1&gt;<br> &nbsp;&nbsp;&lt;p&gt;Last Updated 12 July 2022&lt;/p&gt;<br> &lt;/hgroup&gt; </code> </article> <article class="article"> <div class="anchor" id="tag-h1"></div> <h3>&lt;h1&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-h2"></div> <h3>&lt;h2&gt; &lt;h3&gt; &lt;h4&gt; &lt;h5&gt; &lt;h6&gt;</h3> </article> <article class="article"> <div class="anchor" id="text-elements1"></div> <h2>Оформление текста (6)</h2> <p><a href="#tag-a">&lt;a&gt;</a> <a href="#tag-hr">&lt;hr /&gt;</a> <a href="#tag-p">&lt;p&gt;</a> <a href="#tag-pre">&lt;pre&gt;</a> <a href="#tag-br">&lt;br /&gt;</a> <a href="#tag-wbr">&lt;wbr /&gt;</a></p> </article> <article class="article"> <div class="anchor" id="tag-a"></div> <h3>Гиперссылка &lt;a&gt;</h3> <p>Тег a создает ссылку на другую страницу своего или чужого сайта. Адрес ссылки следует писать в атрибуте href. Ссылки по умолчанию подчеркнуты. Отменить подчеркивание можно с помощью CSS свойства text-decoration.</p> <p>Атрибуты</p> <p><strong>href</strong> Адрес страницы, на которую ссылается ссылка</p> <p><strong>target</strong> Указывает ссылке в какой вкладке ей открываться</p> <p>Значения атрибута <strong>target</strong> (Значение по умолчанию: <strong>_self</strong>)</p> <p><strong>_blank</strong> Страница откроется в <strong>новой</strong> вкладке браузера.</p> <p><strong>_self</strong>\tСтраница откроется в <strong>текущей</strong> вкладке браузера.</p> <p><strong>_parent</strong>\tСтраница откроется во <strong>фрейме-родителе.</strong></p> <p><strong>_top</strong> Отменяет все фреймы и загружает страницу в полном окне браузера.</p> </article> <article class="article"> <div class="anchor" id="tag-hr"></div> <h3>Горизонтальная линия &lt;hr /&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-p"></div> <h3>Параграф &lt;p&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-pre"></div> <h3>&lt;pre&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-br"></div> <h3>Конец строки &lt;br /&gt;</h3> <p>(от англ. line break — перенос строки)</p> <code>У лукоморья дуб зелёный;&lt;br&gt; <br>Златая цепь на дубе том</code> </article> <article class="article"> <div class="anchor" id="tag-wbr"></div> <h3>Мягкий перенос строки &lt;wbr /&gt;</h3> <p>Указывает браузеру, что в этом месте можно сделать перенос строки</p> </article> <article class="article"> <div class="anchor" id="text-elements2"></div> <h2>Выделение текста (10)</h2> <p><a href="#tag-b">&lt;b&gt;</a> <a href="#tag-i">&lt;i&gt;</a> <a href="#tag-s">&lt;s&gt;</a> <a href="#tag-u">&lt;u&gt;</a> <a href="#tag-del">&lt;del&gt;</a> <a href="#tag-ins">&lt;ins&gt;</a> <a href="#tag-mark">&lt;mark&gt;</a> <a href="#tag-small">&lt;small&gt;</a> <a href="#tag-sup">&lt;sup&gt;</a> <a href="#tag-sub">&lt;sub&gt;</a></p> </article> <article class="article"> <div class="anchor" id="tag-b"></div> <h3>&lt;b&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-i"></div> <h3>&lt;i&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-s"></div> <h3>&lt;s&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-u"></div> <h3>&lt;u&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-del"></div> <h3>&lt;del&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-ins"></div> <h3>&lt;ins&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-mark"></div> <h3>&lt;mark&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-small"></div> <h3>&lt;small&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-sup"></div> <h3>&lt;sup&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-sub"></div> <h3>&lt;sub&gt;</h3> </article> <article class="article"> <div class="anchor" id="text-elements3"></div> <h2>Значение текста (10)</h2> <p><a href="#tag-abbr">&lt;abbr&gt;</a> <a href="#tag-code">&lt;code&gt;</a> <a href="#tag-data">&lt;data&gt;</a> <a href="#tag-dfn">&lt;dfn&gt;</a> <a href="#tag-em">&lt;em&gt;</a> <a href="#tag-kbd">&lt;kbd&gt;</a> <a href="#tag-samp">&lt;samp&gt;</a> <a href="#tag-strong">&lt;strong&gt;</a> <a href="#tag-time">&lt;time&gt;</a> <a href="#tag-var">&lt;var&gt;</a></p> </article> <article class="article"> <div class="anchor" id="tag-abbr"></div> <h3>&lt;abbr&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-code"></div> <h3>&lt;code&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-data"></div> <h3>&lt;data&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-dfn"></div> <h3>&lt;dfn&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-em"></div> <h3>&lt;em&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-kbd"></div> <h3>&lt;kbd&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-samp"></div> <h3>&lt;samp&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-strong"></div> <h3>&lt;strong&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-time"></div> <h3>&lt;time&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-var"></div> <h3>&lt;var&gt;</h3> </article> <article class="article"> <div class="anchor" id="text-elements4"></div> <h2>Цитаты (3)</h2> <p><a href="#tag-blockquote">&lt;blockquote&gt;</a> <a href="#tag-q">&lt;q&gt;</a> <a href="#tag-cite">&lt;cite&gt;</a></p> </article> <article class="article"> <div class="anchor" id="tag-blockquote"></div> <h3>&lt;blockquote&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-q"></div> <h3>&lt;q&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-cite"></div> <h3>&lt;cite&gt;</h3> </article> <article class="article"> <div class="anchor" id="text-elements5"></div> <h2>Направление текста (2)</h2> <p><a href="#tag-bdi">&lt;bdi&gt;</a> <a href="#tag-tbdo">&lt;tbdo&gt;</a></p> </article> <article class="article"> <div class="anchor" id="tag-bdi"></div> <h3>&lt;bdi&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-tbdo"></div> <h3>&lt;tbdo&gt;</h3> </article> <article class="article"> <div class="anchor" id="text-elements6"></div> <h2>Аннотация к иероглифам (3)</h2> <p><a href="#tag-ruby">&lt;ruby&gt;</a> <a href="#tag-rt">&lt;rt&gt;</a> <a href="#tag-rp">&lt;rp&gt;</a></p> </article> <article class="article"> <div class="anchor" id="tag-ruby"></div> <h3>&lt;ruby&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-rt"></div> <h3>&lt;rt&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-rp"></div> <h3>&lt;rp&gt;</h3> </article> <article class="article"> <div class="anchor" id="list-elements"></div> <h2>List (Список) (8)</h2> <p><a href="#tag-ol">&lt;ol&gt;</a> <a href="#tag-ul">&lt;ul&gt;</a> <a href="#tag-li">&lt;li&gt;</a> <a href="#tag-dl">&lt;dl&gt;</a> <a href="#tag-dt">&lt;dt&gt;</a> <a href="#tag-dd">&lt;dd&gt;</a> <a href="#tag-menu">&lt;menu&gt;</a> <a href="#tag-command">&lt;command&gt;</a></p> </article> <article class="article"> <div class="anchor" id="tag-ol"></div> <h3>&lt;ol&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-ul"></div> <h3>&lt;ul&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-li"></div> <h3>&lt;li&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-dl"></div> <h3>&lt;dl&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-dt"></div> <h3>&lt;dt&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-dd"></div> <h3>&lt;dd&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-menu"></div> <h3>&lt;menu&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-command"></div> <h3>&lt;command&gt;</h3> <div><a href="#page">Содержание</a></div> </article> <article class="article"> <div class="anchor" id="table-elements"></div> <h2>Table (Таблица) (10)</h2> <p><a href="#tag-table">&lt;table&gt;</a> <a href="#tag-caption">&lt;caption&gt;</a> <a href="#tag-colgroup">&lt;colgroup&gt;</a> <a href="#tag-col">&lt;col&gt;</a> <a href="#tag-thead">&lt;thead&gt;</a> <a href="#tag-tfoot">&lt;tfoot&gt;</a> <a href="#tag-tbody">&lt;tbody&gt;</a> <a href="#tag-tr">&lt;tr&gt;</a> <a href="#tag-th">&lt;th&gt;</a> <a href="#tag-td">&lt;td&gt;</a></p> <table class="table"> <caption>Таблица рекордов</caption> <colgroup> <col class="col-1"> <col class="col-2"> <col class="col-3"> </colgroup> <thead> <tr> <th>Место</th> <th>Счет</th> <th>Игрок</th> </tr> </thead> <tfoot> <tr> <th>Текущий счет</th> <th colspan="2">25</th> </tr> </tfoot> <tbody> <tr> <td>1</td> <td>21</td> <td rowspan="2">Вова</td> </tr> <tr> <td>2</td> <td>20</td> </tr> <tr> <td>3</td> <td>15</td> <td>Маша</td> </tr> <tr> <td>4</td> <td>10</td> <td>Варя</td> </tr> </tbody> </table> <pre>&lt;table&gt;\r\n\r\n&lt;caption&gt;Таблица рекордов&lt;/caption&gt;\r\n\r\n&lt;colgroup&gt;\r\n&lt;col class="col-1"&gt;\r\n&lt;col class="col-2"&gt;\r\n&lt;col class="col-3"&gt;\r\n&lt;/colgroup&gt;\r\n\r\n&lt;thead&gt;\r\n&lt;tr&gt;\r\n&lt;th&gt;Место&lt;/th&gt;\r\n&lt;th&gt;Счет&lt;/th&gt;\r\n&lt;th&gt;Игрок&lt;/th&gt;\r\n&lt;/tr&gt;\r\n&lt;/thead&gt;\r\n\r\n&lt;tfoot&gt;\r\n&lt;tr&gt;\r\n&lt;th&gt;Текущий счет&lt;/th&gt;\r\n&lt;th colspan="2"&gt;25&lt;/th&gt;\r\n&lt;/tr&gt;\r\n&lt;/tfoot&gt;\r\n\r\n&lt;tbody&gt;\r\n&lt;tr&gt;\r\n&lt;td&gt;1&lt;/td&gt;\r\n&lt;td&gt;21&lt;/td&gt;\r\n&lt;td rowspan="2"&gt;Вова&lt;/td&gt;\r\n&lt;/tr&gt;\r\n\r\n&lt;tr&gt;\r\n&lt;td&gt;2&lt;/td&gt;\r\n&lt;td&gt;20&lt;/td&gt;\r\n&lt;/tr&gt;\r\n\r\n&lt;tr&gt;\r\n&lt;td&gt;3&lt;/td&gt;\r\n&lt;td&gt;15&lt;/td&gt;\r\n&lt;td&gt;Маша&lt;/td&gt;\r\n&lt;/tr&gt;\r\n\r\n&lt;tr&gt;\r\n&lt;td&gt;4&lt;/td&gt;\r\n&lt;td&gt;10&lt;/td&gt;\r\n&lt;td&gt;Варя&lt;/td&gt;\r\n&lt;/tr&gt;\r\n\r\n&lt;/tbody&gt;\r\n\r\n&lt;/table&gt;\r\n\r\n</pre> </article> <article class="article"> <div class="anchor" id="tag-table"></div> <h3>&lt;table&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-caption"></div> <h3>&lt;caption&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-colgroup"></div> <h3>&lt;colgroup&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-col"></div> <h3>&lt;col&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-thead"></div> <h3>&lt;thead&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-tfoot"></div> <h3>&lt;tfoot&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-tbody"></div> <h3>&lt;tbody&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-tr"></div> <h3>&lt;tr&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-th"></div> <h3>&lt;th&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-td"></div> <h3>&lt;td&gt;</h3> </article> <article class="article"> <div class="anchor" id="form-elements"></div> <h2>Form (Форма) (14)</h2> <p><a href="#tag-form">&lt;form&gt;</a> <a href="#tag-fieldset">&lt;fieldset&gt;</a> <a href="#tag-legend">&lt;legend&gt;</a> <a href="#tag-input">&lt;input&gt;</a> <a href="#tag-datalist">&lt;datalist&gt;</a> <a href="#tag-label">&lt;label&gt;</a> <a href="#tag-textarea">&lt;textarea&gt;</a> <a href="#tag-select">&lt;select&gt;</a> <a href="#tag-optgroup">&lt;optgroup&gt;</a> <a href="#tag-meter">&lt;meter&gt;</a> <a href="#tag-progress">&lt;progress&gt;</a> <a href="#tag-button">&lt;button&gt;</a></p> </article> <article class="article"> <div class="anchor" id="tag-form"></div> <h3>&lt;form&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-fieldset"></div> <h3>&lt;fieldset&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-legend"></div> <h3>&lt;legend&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-input"></div> <h3>&lt;input&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-datalist"></div> <h3>&lt;datalist&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-label"></div> <h3>&lt;label&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-textarea"></div> <h3>&lt;textarea&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-select"></div> <h3>&lt;select&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-optgroup"></div> <h3>&lt;optgroup&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-meter"></div> <h3>&lt;meter&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-progress"></div> <h3>&lt;progress&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-button"></div> <h3>&lt;button&gt;</h3> </article> <article class="article"> <div class="anchor" id="embed-elements"></div> <h2>Embedded content (Встраиваемый контент) (16)</h2> <p><a href="#tag-img">&lt;img /&gt;</a> <a href="#tag-area">&lt;area /&gt;</a> <a href="#tag-picture">&lt;picture&gt;</a> <a href="#tag-source">&lt;source&gt;</a> <a href="#tag-figure">&lt;figure&gt;</a> <a href="#tag-figcaption">&lt;figcaption&gt;</a> <a href="#tag-iframe">&lt;iframe&gt;</a> <a href="#tag-embed">&lt;embed&gt;</a> <a href="#tag-object">&lt;object&gt;</a> <a href="#tag-param">&lt;param&gt;</a> <a href="#tag-video">&lt;video&gt;</a> <a href="#tag-audio">&lt;audio&gt;</a> <a href="#tag-track">&lt;track&gt;</a> <a href="#tag-map">&lt;map&gt;</a> <a href="#tag-use">&lt;use&gt;</a> <a href="#tag-svg">&lt;svg&gt;</a></p> </article> <article class="article"> <div class="anchor" id="tag-img"></div> <h3>&lt;img /&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-area"></div> <h3>&lt;area /&gt;</h3> <p>Определяет активную область на изображении и, при желании, связывает её с гипертекстовой ссылкой. Этот элемент используется только внутри элемента &lt;map&gt;.</p> <code>&lt;map name="planet"&gt; <br>&nbsp;&nbsp;&lt;area shape="rect" coords="0,0,50,50" href="sun.html" alt="sun"&gt; <br>&lt;/map&gt; <br>&lt;img usemap="#planet" src="space.png" alt="space"&gt; </code> </article> <article class="article"> <div class="anchor" id="tag-picture"></div> <h3>&lt;picture&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-source"></div> <h3>&lt;source&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-figure"></div> <h3>&lt;figure&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-figcaption"></div> <h3>&lt;figcaption&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-iframe"></div> <h3>&lt;iframe&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-embed"></div> <h3>&lt;embed&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-object"></div> <h3>&lt;object&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-param"></div> <h3>&lt;param&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-video"></div> <h3>&lt;video&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-audio"></div> <h3>&lt;audio&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-track"></div> <h3>&lt;track&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-map"></div> <h3>&lt;map&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-use"></div> <h3>&lt;use&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-svg"></div> <h3>&lt;svg&gt;</h3> </article> <article class="article"> <div class="anchor" id="interactive-elements"></div> <h2>Interactive elements (Интерактивные элементы) (3)</h2> <p><a href="#tag-dialog">&lt;dialog&gt;</a> <a href="#tag-details">&lt;details&gt;</a> <a href="#tag-summary">&lt;summary&gt;</a></p> </article> <article class="article"> <div class="anchor" id="tag-dialog"></div> <h3>&lt;dialog&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-details"></div> <h3>&lt;details&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-summary"></div> <h3>&lt;summary&gt;</h3> </article> <article class="article"> <div class="anchor" id="script-elements"></div> <h2>Scripting (Скрипты) (2)</h2> <p><a href="#tag-script">&lt;script&gt;</a> <a href="#tag-noscript">&lt;noscript&gt;</a> <a href="#tag-canvas">&lt;canvas&gt;</a></p> </article> <article class="article"> <div class="anchor" id="tag-script"></div> <h3>&lt;script&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-noscript"></div> <h3>&lt;noscript&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-canvas"></div> <h3>&lt;canvas&gt;</h3> </article> <article class="article"> <div class="anchor" id="web-elements"></div> <h2>Web components (Веб-компоненты) (2)</h2> <p><a href="#tag-template">&lt;template&gt;</a> <a href="#tag-slot">&lt;slot&gt;</a></p> </article> <article class="article"> <div class="anchor" id="tag-template"></div> <h3>&lt;template&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-slot"></div> <h3>&lt;slot&gt;</h3> </article> <article class="article"> <div class="anchor" id="obsolete-elements"></div> <h2>Obsolete (Устаревшие) (26)</h2> <p><a href="#tag-acronym">&lt;acronym&gt;</a> <a href="#tag-applet">&lt;applet&gt;</a> <a href="#tag-basefont">&lt;basefont&gt;</a> <a href="#tag-bgsound">&lt;bgsound&gt;</a> <a href="#tag-big">&lt;big&gt;</a> <a href="#tag-blink">&lt;blink&gt;</a> <a href="#tag-center">&lt;center&gt;</a> <a href="#tag-content">&lt;content&gt;</a> <a href="#tag-dir">&lt;dir&gt;</a> <a href="#tag-font">&lt;font&gt;</a> <a href="#tag-frame">&lt;frame&gt;</a> <a href="#tag-frameset">&lt;frameset&gt;</a> <a href="#tag-image">&lt;image&gt;</a> <a href="#tag-keygen">&lt;keygen&gt;</a> <a href="#tag-marquee">&lt;marquee&gt;</a> <a href="#tag-menuitem">&lt;menuitem&gt;</a> <a href="#tag-nobr">&lt;nobr&gt;</a> <a href="#tag-noembed">&lt;noembed&gt;</a> <a href="#tag-noframes">&lt;noframes&gt;</a> <a href="#tag-plaintext">&lt;plaintext&gt;</a> <a href="#tag-rb">&lt;rb&gt;</a> <a href="#tag-rtc">&lt;rtc&gt;</a> <a href="#tag-spacer">&lt;spacer&gt;</a> <a href="#tag-strike">&lt;strike&gt;</a> <a href="#tag-tt">&lt;tt&gt;</a> <a href="#tag-xmp">&lt;xmp&gt;</a></p> <p>Осуждаемыми (устаревние) тегаи удалены из спецификации HTML как морально устаревшие. Вместо них рекомендуется использовать другие теги или стили. Хотя браузеры в большинстве случаев прекрасно понимают осуждаемые теги, код с ними проходит валидацию, только при использовании переходного &lt;!DOCTYPE&gt;.</p> </article> <article class="article"> <div class="anchor" id="tag-acronym"></div> <h3>&lt;acronym&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-applet"></div> <h3>&lt;applet&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-basefont"></div> <h3>&lt;basefont&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-bgsound"></div> <h3>&lt;bgsound&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-big"></div> <h3>&lt;big&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-blink"></div> <h3>&lt;blink&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-center"></div> <h3>&lt;center&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-content"></div> <h3>&lt;content&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-dir"></div> <h3>&lt;dir&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-font"></div> <h3>&lt;font&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-frame"></div> <h3>&lt;frame&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-frameset"></div> <h3>&lt;frameset&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-image"></div> <h3>&lt;image&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-keygen"></div> <h3>&lt;keygen&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-marquee"></div> <h3>&lt;marquee&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-menuitem"></div> <h3>&lt;menuitem&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-nobr"></div> <h3>&lt;nobr&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-noembed"></div> <h3>&lt;noembed&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-noframes"></div> <h3>&lt;noframes&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-plaintext"></div> <h3>&lt;plaintext&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-rb"></div> <h3>&lt;rb&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-rtc"></div> <h3>&lt;rtc&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-spacer"></div> <h3>&lt;spacer&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-strike"></div> <h3>&lt;strike&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-tt"></div> <h3>&lt;tt&gt;</h3> </article> <article class="article"> <div class="anchor" id="tag-xmp"></div> <h3>&lt;xmp&gt;</h3> </article>'],t=document.querySelector("#code"),document.querySelectorAll(".aside a").forEach((function(r,i){!function(r,i){r.addEventListener("click",(function(r){r.preventDefault(),t.innerHTML=e[i]}))}(r,i)}));var i=new Event("click");Q[0].dispatchEvent(i)}()}},{url:"code-css.html",text:"CSS",content:"<code-css></code-css>",act:function(){!function(){var e,t,r=document.querySelector(".aside");r.innerHTML="",r.append.apply(r,Z),e=['<h1>Справочник по CSS свойствам</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#links">links</a></p> <p><a href="#info">info</a></p> <p><a href="#doctype">!important</a></p> <br> <p><a href="#property-font">Шрифт</a></p> <p><a href="#css-font-face">@font-face</a></p> <p><a href="#css-font">font</a></p> <p><a href="#css-font-family">font-family</a></p> <p><a href="#css-font-feature-settings">font-feature-settings</a></p> <p><a href="#css-font-kerning">font-kerning</a></p> <p><a href="#css-font-size">font-size</a></p> <p><a href="#css-font-size-adjust">font-size-adjust</a></p> <p><a href="#css-font-stretch">font-stretch</a></p> <p><a href="#css-font-style">font-style</a></p> <p><a href="#css-font-synthesis">font-synthesis</a></p> <p><a href="#css-font-variant">font-variant</a></p> <p><a href="#css-font-variant-caps">font-variant-caps</a></p> <p><a href="#css-font-variant-east-asian">font-variant-east-asian</a></p> <p><a href="#css-font-variant-ligatures">font-variant-ligatures</a></p> <p><a href="#css-font-variant-numeric">font-variant-numeric</a></p> <p><a href="#css-font-variant-position">font-variant-position</a></p> <p><a href="#css-font-weight">font-weight</a></p> </div> <div> <p><a href="#property-animation">Анимация</a></p> <p><a href="#css-keyframes">@keyframes</a></p> <p><a href="#css-animation">animation</a></p> <p><a href="#css-animation-delay">animation-delay</a></p> <p><a href="#css-animation-direction">animation-direction</a></p> <p><a href="#css-animation-duration">animation-duration</a></p> <p><a href="#css-animation-fill-mode">animation-fill-mode</a></p> <p><a href="#css-font-animation-iteration-count">animation-iteration-count</a></p> <p><a href="#css-animation-name">animation-name</a></p> <p><a href="#css-animation-play-state">animation-play-state</a></p> <p><a href="#css-animation-timing-function">animation-timing-function</a></p> </div> <div> <p><a href="#property-transform">Трансформация</a></p> <p><a href="#css-backface-visibility">backface-visibility</a></p> <p><a href="#css-perspective">perspective</a></p> <p><a href="#css-perspective-origin">perspective-origin</a></p> <p><a href="#css-transform">transform</a></p> <p><a href="#css-transform-origin">transform-origin</a></p> <p><a href="#css-transform-style">transform-style</a></p> <p><a href="#css-transition">transition</a></p> <p><a href="#css-transition-delay">transition-delay</a></p> <p><a href="#css-transition-duration">transition-duration</a></p> <p><a href="#css-transition-property">transition-property</a></p> <p><a href="#css-transition-timing-function">transition-timing-function</a></p> </div> <div> <p><a href="#property-flex">Flex</a></p> <p><a href="#css-align-content">align-content</a></p> <p><a href="#css-align-items">align-items</a></p> <p><a href="#css-align-self">align-self</a></p> <p><a href="#css-flex">flex</a></p> <p><a href="#css-flex-basis">flex-basis</a></p> <p><a href="#css-flex-direction">flex-direction</a></p> <p><a href="#css-flex-flow">flex-flow</a></p> <p><a href="#css-flex-grow">flex-grow</a></p> <p><a href="#css-flex-shrink">flex-shrink</a></p> <p><a href="#css-flex-wrap">flex-wrap</a></p> <p><a href="#css-justify-content">justify-content</a></p> <p><a href="#css-order">order</a></p> </div> <div> <p><a href="#property-background">Фон</a></p> <p><a href="#css-background">background</a></p> <p><a href="#css-background-attachment">background-attachment</a></p> <p><a href="#css-background-blend-mode">background-blend-mode</a></p> <p><a href="#css-background-clip">background-clip</a></p> <p><a href="#css-background-color">background-color</a></p> <p><a href="#css-background-image">background-image</a></p> <p><a href="#css-background-origin">background-origin</a></p> <p><a href="#css-background-position">background-position</a></p> <p><a href="#css-background-repeat">background-repeat</a></p> <p><a href="#css-background-size">background-size</a></p> </div> </div> <article class="article"> <div class="anchor" id="links"></div> <h2>links</h2> <h2>css</h2> <p><a href="https://g-soft.info/notes/1922/npm-sozdanie-paketa-dlya-offlayn-ustanovki/">g-soft.info</a> npm: создание пакета для оффлайн установки</p> <p><a href="https://msiter.ru/references/css-reference">msiter.ru/references/css-reference</a> CSS свойства</p> <p><a href="https://html5book.ru/css-spravochnik.html">html5book.ru/css-spravochnik.html</a> CSS справочник</p> <p><a href="https://htmlbook.ru/css">htmlbook.ru/css</a> Справочник CSS</p> <p><a href="http://www.csszengarden.com/">csszengarden.com</a> The beauty of CSS</p> <h3>Статьи</h3> <p><a href="https://web-standards.ru/articles/position-sticky/">Как на са­мом деле ра­бо­та­ет position: sticky в CSS</a> (ЭЛАД ШЕХТЕР 2019-01-31)</p> <h2>Онлайн игры для обучения CSS</h2> <p><strong>Flexbox Froggy</strong><br><a href="https://flexboxfroggy.com/">flexboxfroggy.com</a><br>Разработчик Thomas Park<br><a href="https://codepip.com/">codepip.com</a></p> <p><strong>Grid Garden</strong><br><a href="https://cssgridgarden.com/">cssgridgarden.com</a><br>Разработчик Thomas Park<br><a href="https://codepip.com/">codepip.com</a></p> <p><strong>Grid Critters</strong><br><a href="https://gridcritters.com/">gridcritters.com</a><br>Разработчик Dave Geddes<br><a href="https://mastery.games/">mastery.games</a></p> <p><strong>Flexbox Zombies</strong><br><a href="https://flexboxzombies.com/">flexboxzombies.com</a><br>Разработчик Dave Geddes<br><a href="https://mastery.games/">mastery.games</a></p> <p><strong>Service Workers</strong><br><a href="https://serviceworkies.com/">serviceworkies.com</a><br>Разработчик Dave Geddes<br><a href="https://gedd.ski/">gedd.ski</a></p> <p><strong>CSS Diner</strong><br><a href="https://flukeout.github.io/">flukeout.github.io</a><br>Разработчик Luke Pacholski<br><a href="https://github.com/flukeout/css-diner">github.com/flukeout</a></p> <p><strong>Flexbox Defense</strong><br><a href="http://www.flexboxdefense.com/">flexboxdefense.com</a><br>Разработчик Channing Allen</p> <p><strong>CSS Battle</strong><br><a href="https://cssbattle.dev/">cssbattle.dev</a><br>Разработчик Kushagra Gour</p> <p><strong>Roadmap (Дорожная карта)</strong><br><a href="http://victordarras.fr/cssgame/">victordarras.fr</a><br>Разработчик Victor Darras</p> </article> <article class="article"> <div class="anchor" id="info"></div> <h2>Синтаксис CSS</h2> <p>CSS правило</p> <code>h1 { background-color: red; }</code> <p>Селектор определяет элемент, к которому применяются стили</p> <code>h1</code> <p>CSS свойство</p> <code>background-color</code> <p>Значение</p> <code>red</code> </article> <article class="article"> <div class="anchor" id="property-font"></div> <h2>Font (Шрифт) (17)</h2> <p><a href="#css-font-face">@font-face</a> <a href="#css-font">font</a> <a href="#css-font-family">font-family</a> <a href="#css-font-feature-settings">font-feature-settings</a> <a href="#css-font-kerning">font-kerning</a> <a href="#css-font-size">font-size</a> <a href="#css-font-size-adjust">font-size-adjust</a> <a href="#css-font-stretch">font-stretch</a> <a href="#css-font-style">font-style</a> <a href="#css-font-synthesis">font-synthesis</a> <a href="#css-font-variant">font-variant</a> <a href="#css-font-variant-caps">font-variant-caps</a> <a href="#css-font-variant-east-asian">font-variant-east-asian</a> <a href="#css-font-variant-ligatures">font-variant-ligatures</a> <a href="#css-font-variant-numeric">font-variant-numeric</a> <a href="#css-font-variant-position">font-variant-position</a> <a href="#css-font-weight">font-weight</a></p> </article> <article class="article"> <div class="anchor" id="css-font-face"></div> <h3>@font-face</h3> <p>Позволяет определить настройки шрифтов, а также загрузить специфичный шрифт на компьютер пользователя</p> </article> <article class="article"> <div class="anchor" id="css-font"></div> <h3>font</h3> <p>Краткая запись свойств шрифта. Позволяет установить все значения свойств шрифта в одном объявлении</p> <code>font: [font-style||font-variant||font-weight] font-size [/line-height] font-family | inherit</code> <p>В качестве обязательных значений свойства font указывается размер шрифта и его семейство. Остальные значения являются опциональными и задаются при желании. Любые не указанные значения сбрасываются до дефолтных. Хотя значения для свойств font-size-adjust и font-kerning не могут быть указаны внутри шортката font, они тоже сбрасываются до дефолтных.</p> <p>Пример краткой записи:</p> <code>p { font: 12px sans-serif; }</code> <p>Пример полной записи</p> <code>p { font: italic small-caps bold 12px/18px serif; }</code> <p>Системные шрифты задаются обычным свойством font всего с одним параметром — тип шрифта. Разумеется, тип начертания, размер и прочие атрибуты уже содержатся внутри этого параметра.</p> <code>.menu { font: menu; }</code> <p>Допускается в качестве значения использовать ключевые слова, определяющие шрифт различных элементов операционной системы пользователя:</p> <p><strong>caption</strong> Шрифт на управляющих элементах (кнопки, радио, выпадающие списки).</p> <p><strong>icon</strong> Шрифт для текста под иконками.</p> <p><strong>menu</strong> Шрифт, используемый в системных меню.</p> <p><strong>message-box</strong> Шрифт в диалоговых окнах.</p> <p><strong>small-caption</strong> Шрифт для подписей к небольшим элементам управления.</p> <p><strong>status-bar</strong> Шрифт в строке состояния.</p> </article> <article class="article"> <div class="anchor" id="css-font-family"></div> <h3>font-family</h3> <p>Задает семейство шрифта, которое будет использоваться для оформления текста содержимого</p> </article> <article class="article"> <div class="anchor" id="css-font-feature-settings"></div> <h3>font-feature-settings</h3> <p>Низкоуровневое управление настройками шрифтов</p> </article> <article class="article"> <div class="anchor" id="css-font-kerning"></div> <h3>font-kerning</h3> <p>Кернинг</p> </article> <article class="article"> <div class="anchor" id="css-font-size"></div> <h3>font-size</h3> <p>Размер шрифта</p> </article> <article class="article"> <div class="anchor" id="css-font-size-adjust"></div> <h3>font-size-adjust</h3> <p>Относительный размер шрифта</p> </article> <article class="article"> <div class="anchor" id="css-font-stretch"></div> <h3>font-stretch</h3> <p>Ширина шрифта. Устанавливает более широкое или узкое начертание шрифта</p> </article> <article class="article"> <div class="anchor" id="css-font-style"></div> <h3>font-style</h3> <p>Устанавливает стиль начертания шрифта - обычное, курсивное или наклонное</p> </article> <article class="article"> <div class="anchor" id="css-font-synthesis"></div> <h3>font-synthesis</h3> <p>Управление синтезом шрифтов</p> </article> <article class="article"> <div class="anchor" id="css-font-variant"></div> <h3>font-variant</h3> <p>Before CSS3, this property accepted one of two possible values: normal (how text is rendered by default) and small-caps. The font-variant CSS shorthand property allows you to set all the font variants for a font. Краткая запись для рендеринга шрифтов. Определяет, как следует представлять строчные буквы - делать их все прописными уменьшенного размера или оставить без изменений</p> </article> <article class="article"> <div class="anchor" id="css-font-variant-caps"></div> <h3>font-variant-caps</h3> <p>Преобразование в заглавные буквы</p> </article> <article class="article"> <div class="anchor" id="css-font-variant-east-asian"></div> <h3>font-variant-east-asian</h3> <p>Визуализация восточноазиатского текста</p> </article> <article class="article"> <div class="anchor" id="css-font-variant-ligatures"></div> <h3>font-variant-ligatures</h3> <p>Лигатуры</p> </article> <article class="article"> <div class="anchor" id="css-font-variant-numeric"></div> <h3>font-variant-numeric</h3> <p>Форматирование цифр</p> </article> <article class="article"> <div class="anchor" id="css-font-variant-position"></div> <h3>font-variant-position</h3> <p>Подстрочные и надстрочные формы</p> </article> <article class="article"> <div class="anchor" id="css-font-weight"></div> <h3>font-weight</h3> <p>Толщина шрифта.</p> </article> <article class="article"> <div class="anchor" id="property-animation"></div> <h2>Animation (Анимация) (10)</h2> <p><a href="#css-keyframes">@keyframes</a> <a href="#css-animation">animation</a> <a href="#css-animation-delay">animation-delay</a> <a href="#css-font-animation-direction">animation-direction</a> <a href="#css-animation-duration">animation-duration</a> <a href="#css-animation-fill-mode">animation-fill-mode</a> <a href="#css-font-animation-iteration-count">animation-iteration-count</a> <a href="#css-animation-name">animation-name</a> <a href="#css-animation-play-state">animation-play-state</a> <a href="#css-animation-timing-function">animation-timing-function</a></p> </article> <article class="article"> <div class="anchor" id="css-keyframes"></div> <h3>@keyframes</h3> <p>Устанавливает ключевые кадры при анимации элемента.</p> </article> <article class="article"> <div class="anchor" id="css-animation"></div> <h3>animation</h3> <p>Краткая запись свойств анимации. Позволяет установить все значения свойств анимации в одном объявлении.</p> </article> <article class="article"> <div class="anchor" id="css-animation-delay"></div> <h3>animation-delay</h3> <p>Устанавливает время (в секундах или миллисекундах)ожидания перед запуском анимации</p> </article> <article class="article"> <div class="anchor" id="css-animation-direction"></div> <h3>animation-direction</h3> <p>Устанавливает направление движения анимации</p> </article> <article class="article"> <div class="anchor" id="css-animation-duration"></div> <h3>animation-duration</h3> <p>Устанавливает время (в секундах или миллисекундах), одного цикла анимации</p> </article> <article class="article"> <div class="anchor" id="css-animation-fill-mode"></div> <h3>animation-fill-mode</h3> <p>Определяет, какие стили должны применяться к элементу, когда анимация не проигрывается</p> </article> <article class="article"> <div class="anchor" id="css-animation-fill-mode"></div> <h3>animation-fill-mode</h3> <p>Определяет, какие стили должны применяться к элементу, когда анимация не проигрывается</p> </article> <article class="article"> <div class="anchor" id="css-animation-iteration-count"></div> <h3>animation-iteration-count</h3> <p>Устанавливает, сколько раз проигрывать цикл анимации</p> </article> <article class="article"> <div class="anchor" id="css-animation-name"></div> <h3>animation-name</h3> <p>Определяет список имен анимаций, которые должны быть применены к выбранному элементу</p> </article> <article class="article"> <div class="anchor" id="css-animation-play-state"></div> <h3>animation-play-state</h3> <p>Определяет, проигрывать анимацию или поставить её на паузу</p> </article> <article class="article"> <div class="anchor" id="css-animation-timing-function"></div> <h3>animation-timing-function</h3> <p>Определяет кривую скорости для анимации</p> </article> <article class="article"> <div class="anchor" id="property-transform"></div> <h2>Transformation (Трансформация) (11)</h2> <p> <a href="#css-backface-visibility">backface-visibility</a> <a href="#css-perspective">perspective</a> <a href="#css-perspective-origin">perspective-origin</a> <a href="#css-transform">transform</a> <a href="#css-transform-origin">transform-origin</a> <a href="#css-transform-style">transform-style</a> <a href="#css-font-transition">transition</a> <a href="#css-transition-delay">transition-delay</a> <a href="#css-transition-duration">transition-duration</a> <a href="#css-transition-property">transition-property</a> <a href="#css-transition-timing-function">transition-timing-function</a> </p> </article> <article class="article"> <div class="anchor" id="css-backface-visibility"></div> <h3>backface-visibility</h3> <p>Определяет, показывать обратную сторону элемента или нет</p> </article> <article class="article"> <div class="anchor" id="css-perspective"></div> <h3>perspective</h3> <p>Определяет, на сколько пикселей удален 3D элемент от точки обзора</p> </article> <article class="article"> <div class="anchor" id="css-perspective-origin"></div> <h3>perspective-origin</h3> <p>Определяет, где располагается 3D элемент на осях x и y</p> </article> <article class="article"> <div class="anchor" id="css-perspective-origin"></div> <h3>perspective-origin</h3> <p>Определяет, где располагается 3D элемент на осях x и y</p> </article> <article class="article"> <div class="anchor" id="css-transform"></div> <h3>transform</h3> <p>Применяет к элементу 2D или 3D трансформацию</p> </article> <article class="article"> <div class="anchor" id="css-transform-origin"></div> <h3>transform-origin</h3> <p>Устанавливает исходную точку трансформации элемента</p> </article> <article class="article"> <div class="anchor" id="css-transform-style"></div> <h3>transform-style</h3> <p>Определяет, как дочерние элементы будут отображаться в 3D-пространстве</p> </article> <article class="article"> <div class="anchor" id="css-transition"></div> <h3>transition</h3> <p>Позволяет делать плавные переходы между двумя значениями какого-либо CSS свойства</p> </article> <article class="article"> <div class="anchor" id="css-transition-delay"></div> <h3>transition-delay</h3> <p>Устанавливает продолжительность задержки перед началом анимации перехода</p> </article> <article class="article"> <div class="anchor" id="css-transition-duration"></div> <h3>transition-duration</h3> <p>Устанавливает продолжительность анимации перехода</p> </article> <article class="article"> <div class="anchor" id="css-transition-property"></div> <h3>transition-property</h3> <p>Определяет CSS свойство, для которого будет применён эффект перехода</p> </article> <article class="article"> <div class="anchor" id="css-transition-timing-function"></div> <h3>transition-timing-function</h3> <p>Определяет кривую скорости для анимации перехода</p> </article> <article class="article"> <div class="anchor" id="property-transform"></div> <h2>Flex (12)</h2> <p> <a href="#css-align-content">align-content</a> <a href="#css-align-items">align-items</a> <a href="#css-align-self">align-self</a> <a href="#css-flex">flex</a> <a href="#css-flex-basis">flex-basis</a> <a href="#css-flex-direction">flex-direction</a> <a href="#css-flex-flow">flex-flow</a> <a href="#css-flex-grow">flex-grow</a> <a href="#css-flex-shrink">flex-shrink</a> <a href="#css-flex-wrap">flex-wrap</a> <a href="#css-justify-content">justify-content</a> <a href="#css-order">order</a> </p> </article> <article class="article"> <div class="anchor" id="css-align-content"></div> <h3>align-content</h3> <p>Выравнивает строки флекс-элементов по вертикали внутри флекс-контейнера</p> </article> <article class="article"> <div class="anchor" id="css-align-items"></div> <h3>align-items</h3> <p>Выравнивает флекс-элементы внутри контейнера по высоте</p> </article> <article class="article"> <div class="anchor" id="css-align-self"></div> <h3>align-self</h3> <p>Устанавливает выравнивание по высоте отдельно взятого флекс-элемента</p> </article> <article class="article"> <div class="anchor" id="css-flex"></div> <h3>flex</h3> <p>Универсальное свойство, которое позволяет указать параметры элемента, чтобы он эффективно заполнял доступное пространство</p> </article> <article class="article"> <div class="anchor" id="css-flex-basis"></div> <h3>flex-basis</h3> <p>Устанавливает базовую ширину флекс-элемента</p> </article> <article class="article"> <div class="anchor" id="css-flex-direction"></div> <h3>flex-direction</h3> <p>Определяет направление главной оси во флекс-контейнере</p> </article> <article class="article"> <div class="anchor" id="css-flex-flow"></div> <h3>flex-flow</h3> <p>Позволяет за одну декларацию задать направление главной оси и возможность переноса флекс-элементов на новую строку</p> </article> <article class="article"> <div class="anchor" id="css-flex-grow"></div> <h3>flex-grow</h3> <p>Определяет коэффициент увеличения ширины флекс-элемента относительно других флекс-элементов</p> </article> <article class="article"> <div class="anchor" id="css-flex-shrink"></div> <h3>flex-shrink</h3> <p>Определяет коэффициент уменьшения ширины флекс-элемента относительно других флекс-элементов</p> </article> <article class="article"> <div class="anchor" id="css-flex-wrap"></div> <h3>flex-wrap</h3> <p>Разрешает или нет перенос на другую строку</p> </article> <article class="article"> <div class="anchor" id="css-justify-content"></div> <h3>justify-content</h3> <p>Выравнивает флекс-элементы по ширине флекс-контейнера</p> </article> <article class="article"> <div class="anchor" id="css-order"></div> <h3>order</h3> <p>Определяет порядок вывода флекс-элементов внутри флекс-контейнера</p> </article> <article class="article"> <div class="anchor" id="property-background"></div> <h2>Background (Фон) (10)</h2> <p> <a href="#css-background">background</a> <a href="#css-background-attachment">background-attachment</a> <a href="#css-background-blend-mode">background-blend-mode</a> <a href="#css-background-clip">background-clip</a> <a href="#css-background-color">background-color</a> <a href="#css-background-image">background-image</a> <a href="#css-background-origin">background-origin</a> <a href="#css-background-position">background-position</a> <a href="#css-background-repeat">background-repeat</a> <a href="#css-background-size">background-size</a> </p> </article> <article class="article"> <div class="anchor" id="css-background"></div> <h3>background</h3> <p>Короткое свойство, устанавливающее все свойства фона элемента за одну декларацию</p> </article> <article class="article"> <div class="anchor" id="css-background-attachment"></div> <h3>background-attachment</h3> <p>Определяет, будет ли фоновое изображение зафиксировано, или оно будет прокручиваться вместе с остальным содержимым страницы</p> </article> <article class="article"> <div class="anchor" id="css-background-blend-mode"></div> <h3>background-blend-mode</h3> <p>Устанавливает режим наложения фонового изображения элемента на фоны других элементов.</p> </article> <article class="article"> <div class="anchor" id="css-background-clip"></div> <h3>background-clip</h3> <p>Устанавливает область прорисовки фонового изображения</p> </article> <article class="article"> <div class="anchor" id="css-background-color"></div> <h3>background-color</h3> <p>Определяет фоновый цвет элемента</p> </article> <article class="article"> <div class="anchor" id="css-background-image"></div> <h3>background-image</h3> <p>Определяет фоновое изображение элемента</p> </article> <article class="article"> <div class="anchor" id="css-background-origin"></div> <h3>background-origin</h3> <p>Устанавливает область позиционирования фонового изображения</p> </article> <article class="article"> <div class="anchor" id="css-background-position"></div> <h3>background-position</h3> <p>Задает начальное положение фонового изображения в пределах содержащего его элемента</p> </article> <article class="article"> <div class="anchor" id="css-background-repeat"></div> <h3>background-repeat</h3> <p>Определяет, как будет повторяться фоновое изображение, установленное с помощью параметра background-image</p> </article> <article class="article"> <div class="anchor" id="css-background-size"></div> <h3>background-size</h3> <p>Устанавливает размер фонового изображения</p> </article>','<h1>CSS селекторы</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#links">links</a></p> <p><a href="#spec">Специфичность</a></p> <p><a href="#list">Список всех селекторов</a></p> </div> </div> <article class="article"> <div class="anchor" id="links"></div> <h2>links</h2> <p><a href="https://doka.guide/css/specificity/">doka.guide/css/specificity</a> Специфичность</p> <p><a href="https://htmlacademy.ru/blog/css/which-selector">htmlacademy.ru/blog/css/which-selector</a> Специфичность селекторов в CSS</p> </article> <article class="article"> <div class="anchor" id="spec"></div> <h2>Специфичность</h2> <p>Когда к одному элементу на странице прописываются стили в разных строчках css файла, то браузер принимает решение на основе специфичности селектора.</p> <p>Встроенные стили (inline) всегда важнее внешних, поэтому специфичность считается внутри тега style и во внешнем css файле</p> <p>Вес селектора складывается из трех цифр</p> <ol> <li>Селекторы по идентификатору (id)</li> <li>Селекторы по классу (class), селекторы по аттрибуту и селекторы с псевдоклассами</li> <li>Селекторы по тегу, селеткторы с псевдоэлементами</li> </ol> </article> <article class="article"> <div class="anchor" id="list"></div> <h2>Список всех селекторов css</h2> <table> <thead> <tr> <th>Селектор</th> <th>Пример</th> <th>Описание примера</th> </tr> </thead> <tbody> <tr> <td><a href="#class-selector" rel="nofollow"><var>*</var></a></td> <td><var>*</var></td> <td>Все элементы.</td> </tr> <tr> <td><a href="#id-selector" rel="nofollow"><var>#id</var></a></td> <td><var>#firstname</var></td> <td>Элемент с <var>id="firstname"</var>.</td> </tr> <tr> <td><a href="#class-selector" rel="nofollow"><var>.class</var></a></td> <td><var>.intro</var></td> <td>Все элементы с <var>class="intro"</var>.</td> </tr> <tr> <td><a href="#class-selector" rel="nofollow"><var>.class1.class2</var></a></td> <td><var>.name1.name2</var></td> <td>Все элементы с <var>class="name1 name2"</var>.</td> </tr> <tr> <td><a href="#class-selector" rel="nofollow"><var>.class1 .class2</var></a></td> <td><var>.name1 .name2</var></td> <td>Все элементы с <var>class="name2"</var> у которых родитель с <var>class="name1"</var>.</td> </tr> <tr> <td><a href="#tag-selector" rel="nofollow"><var>tag</var></a></td> <td><var>p</var></td> <td>Все <var>&lt;p&gt;</var> элементы.</td> </tr> <tr> <td><a href="#class-selector" rel="nofollow"><var>tag.class</var></a></td> <td><var>p.intro</var></td> <td>Все <var>&lt;p&gt;</var> элементы с <var>class="intro"</var>.</td> </tr> <tr> <td><a href="#comma" rel="nofollow"><var>tag, tag</var></a></td> <td><var>div, p</var></td> <td>Все <var>&lt;div&gt;</var> и все <var>&lt;p&gt;</var> элементы.</td> </tr> <tr> <td><a href="#space" rel="nofollow"><var>tag tag</var></a></td> <td><var>div p</var></td> <td>Все <var>&lt;p&gt;</var> внутри всех <var>&lt;div&gt;</var>.</td> </tr> <tr> <td><a href="#gt" rel="nofollow"><var>tag > tag</var></a></td> <td><var>div > p</var></td> <td>Все <var>&lt;p&gt;</var> прямой родитель которых <var>&lt;div&gt;</var>.</td> </tr> <tr> <td><a href="#plus" rel="nofollow"><var>tag + tag</var></a></td> <td><var>div + p</var></td> <td><var>&lt;p&gt;</var> который находятся сразу после <var>&lt;div&gt;</var>.</td> </tr> <tr> <td><a href="#tilde" rel="nofollow"><var>tag ~ tag</var></a></td> <td><var>div ~ p</var></td> <td>Все <var>&lt;p&gt;</var> которые находятся после <var>&lt;div&gt;</var>.</td> </tr> <tr> <td><a href="#attr" rel="nofollow"><var>[attribute]</var></a></td> <td><var>[target]</var></td> <td>Все элементы с <var>target="что-либо"</var>.</td> </tr> <tr> <td><a href="#attr-value" rel="nofollow"><var>[attribute = value]</var></a></td> <td><var>[target=_blank]</var></td> <td>Все элементы с <var>target="_blank"</var>.</td> </tr> <tr> <td><a href="#attr-start-value" rel="nofollow"><var>[attribute ^= value]</var></a></td> <td><var>a[href^="https"]</var></td> <td>Каждый <var>&lt;a&gt;</var> атрибут <var>href</var> которого начинается с "https".</td> </tr> <tr> <td><a href="#attr-end-value" rel="nofollow"><var>[attribute $= value]</var></a></td> <td><var>a[href$=".pdf"]</var></td> <td>Каждый <var>&lt;a&gt;</var> атрибут <var>href</var> которого заканчивается ".pdf".</td> </tr> <tr> <td><a href="#attr-float-value" rel="nofollow"><var>[attribute *= value]</var></a></td> <td><var>a[href*="w3schools"]</var></td> <td>Каждый <var>&lt;a&gt;</var> атрибут <var>href</var> которого содержит подстроку "w3schools".</td> </tr> <tr> <td><a href="#attr-oneof-value" rel="nofollow"><var>[attribute ~= value]</var></a></td> <td><var>[title~=flower]</var></td> <td>Все элементы в атрибуте <var>title</var> которых есть слово "flower".</td> </tr> <tr> <td><a href="#attr-start-equal" rel="nofollow"><var>[attribute |= value]</var></a></td> <td><var>[lang|=en]</var></td> <td>Все элементы атрибут <var>lang</var> которых начинается с "en".</td> </tr> <tr> <td><a href="#link" rel="nofollow"><var>:active</var></a></td> <td><var>a:active</var></td> <td>Активная ссылка.</td> </tr> <tr> <td><a href="#after" rel="nofollow"><var>::after</var></a></td> <td><var>p::after</var></td> <td>Вставляет псевод-элемент в начале каждого <var>&lt;p&gt;</var> элемента.</td> </tr> <tr> <td><a href="#before" rel="nofollow"><var>::before</var></a></td> <td><var>p::before</var></td> <td>Вставляет псевод-элемент в конце каждого <var>&lt;p&gt;</var> элемента.</td> </tr> <tr> <td><a href="#checked" rel="nofollow"><var>:checked</var></a></td> <td><var>input:checked</var></td> <td>Все выбранные <var>&lt;input type="checkbox"&gt;</var> элементы.</td> </tr> <tr> <td><a href="#default" rel="nofollow"><var>:default</var></a></td> <td><var>input:default</var></td> <td>Все <var>&lt;input&gt;</var> элементы.</td> </tr> <tr> <td><a href="#disabled" rel="nofollow"><var>:disabled</var></a></td> <td><var>input:disabled</var></td> <td>Все <var>&lt;input disabled&gt;</var> элементы.</td> </tr> <tr> <td><a href="#empty" rel="nofollow"><var>:empty</var></a></td> <td><var>p:empty</var></td> <td>Все пустые <var>&lt;p&gt;</var>, в которых нет пробелом, текста или других элементов.</td> </tr> <tr> <td><a href="#enabled" rel="nofollow"><var>:enabled</var></a></td> <td><var>input:enabled</var></td> <td>Все активные (не disabled) элементы <var>&lt;input&gt;</var>.</td> </tr> <tr> <td><a href="#first-child" rel="nofollow"><var>:first-child</var></a></td> <td><var>p:first-child</var></td> <td>Первый элемент в списке родительского элемента.</td> </tr> <tr> <td><a href="#first-of-type" rel="nofollow"><var>:first-of-type</var></a></td> <td><var>p:first-of-type</var></td> <td>Первый <var>&lt;p&gt;</var> элемент в списке родительского элемента.</td> </tr> <tr> <td><a href="#first-letter" rel="nofollow"><var>::first-letter</var></a></td> <td><var>p::first-letter</var></td> <td>Первая буква каждого <var>&lt;p&gt;</var> элемента.</td> </tr> <tr> <td><a href="#first-letter" rel="nofollow"><var>::first-line</var></a></td> <td><var>p::first-line</var></td> <td>Первая линия каждого <var>&lt;p&gt;</var> элемента.</td> </tr> <tr> <td><a href="#focus" rel="nofollow"><var>:focus</var></a></td> <td><var>input:focus</var></td> <td><var>&lt;input&gt;</var> в котором находится курсор.</td> </tr> <tr> <td><a href="#focus-visible" rel="nofollow"><var>:focus-visible</var></a></td> <td><var>a:focus-visible</var></td> <td>Фокус сработает, только если на кнопку перешли с клавиатуры через TAB.</td> </tr> <tr> <td><a href="#focus-within" rel="nofollow"><var>:focus-within</var></a></td> <td><var>div:focus-within</var></td> <td>Сработает на блоке, когда его внутренний элемент находится в фокусе.</td> </tr> <tr> <td><a href="#hover" rel="nofollow"><var>:hover</var></a></td> <td><var>a:hover</var></td> <td>Сслыка на которую наведена мышка.</td> </tr> <tr> <td><var>:in-range</var></td> <td><var>input:in-range</var></td> <td>Все <var>&lt;input&gt;</var> со значением в пределах указанного диапазона.</td> </tr> <tr> <td><var>:indeterminate</var></td> <td><var>input:indeterminate</var></td> <td>Все <var>&lt;input&gt;</var> в статусе indeterminate.</td> </tr> <tr> <td><var>:invalid</var></td> <td><var>input:invalid</var></td> <td>Все <var>&lt;input&gt;</var> с недопустимым значением.</td> </tr> <tr> <td><var>:lang(language)</var></td> <td><var>p:lang(it)</var></td> <td>Все <var>&lt;p&gt;</var> с <var>lang="it"</var>.</td> </tr> <tr> <td><a href="#last-child" rel="nofollow"><var>:last-child</var></a></td> <td><var>p:last-child</var></td> <td>Последний элемент в списке родительского элемента.</td> </tr> <tr> <td><a href="#first-of-type" rel="nofollow"><var>:last-of-type</var></a></td> <td><var>p:last-of-type</var></td> <td>Последний <var>&lt;p&gt;</var> в списке родительского элемента.</td> </tr> <tr> <td><a href="#link" rel="nofollow"><var>:link</var></a></td> <td><var>a:link</var></td> <td>Все непосещенные ссылки.</td> </tr> <tr> <td><a href="#not-selector" rel="nofollow"><var>:not(selector)</var></a></td> <td><var>:not(p)</var></td> <td>Все не <var>&lt;p&gt;</var> элементы.</td> </tr> <tr> <td><a href="#not-only-child" rel="nofollow"><var>:not(:only-child)</var></a></td> <td><var>div:not(:only-child)</var></td> <td>Все <var>&lt;div&gt;</var> внутри которых больше одного элемента.</td> </tr> <tr> <td><a href="#nth-child" rel="nofollow"><var>:nth-child(n)</var></a></td> <td><var>p:nth-child(2)</var></td> <td>Второй элемент в списке родительского элемента.</td> </tr> <tr> <td><a href="#nth-of-type" rel="nofollow"><var>:nth-of-type(n)</var></a></td> <td><var>p:nth-of-type(2)</var></td> <td>Второй <var>&lt;p&gt;</var> в списке родительского элемента.</td> </tr> <tr> <td><a href="#nth-last-child" rel="nofollow"><var>:nth-last-child(n)</var></a></td> <td><var>p:nth-last-child(2)</var></td> <td>Второй элемент в списке родительского элемента (счет идет с конца).</td> </tr> <tr> <td><a href="#nth-last-of-type" rel="nofollow"><var>:nth-last-of-type(n)</var></a></td> <td><var>p:nth-last-of-type(2)</var></td> <td>Второй <var>&lt;p&gt;</var> в списке родительского элемента (счет идет с конца).</td> </tr> <tr> <td><a href="#only-child" rel="nofollow"><var>:only-child</var></a></td> <td><var>p:only-child</var></td> <td>Единственный <var>&lt;p&gt;</var> у родителя (других элементов быть не может).</td> </tr> <tr> <td><a href="#only-of-type" rel="nofollow"><var>:only-of-type</var></a></td> <td><var>p:only-of-type</var></td> <td>Один <var>&lt;p&gt;</var> у родителя (других элементы могут быть).</td> </tr> <tr> <td><var>:optional</var></td> <td><var>input:optional</var></td> <td>Все <var>&lt;input&gt;</var> у которых нет артибута "required".</td> </tr> <tr> <td><var>:required</var></td> <td><var>input:required</var></td> <td>Все <var>&lt;input&gt;</var> у которых указан атрибут "required".</td> </tr> <tr> <td><var>:out-of-range</var></td> <td><var>input:out-of-range</var></td> <td>Все <var>&lt;input&gt;</var> со значением выходящим за указанный рэндж.</td> </tr> <tr> <td><var>::placeholder</var></td> <td><var>input::placeholder</var></td> <td>Все <var>&lt;input&gt;</var> у которых указан атрибут "placeholder".</td> </tr> <tr> <td><var>:read-only</var></td> <td><var>input:read-only</var></td> <td>Все <var>&lt;input&gt;</var> у которых указан атрибут "readonly".</td> </tr> <tr> <td><var>:read-write</var></td> <td><var>input:read-write</var></td> <td>Все <var>&lt;input&gt;</var> у которых не указан атрибут "readonly".</td> </tr> <tr> <td><var>:root</var></td> <td><var>:root</var></td> <td>Корень документа.</td> </tr> <tr> <td><var>::selection</var></td> <td><var>::selection</var></td> <td>Выберет текущее выделение текста мышкой.</td> </tr> <tr> <td><a href="#target" rel="nofollow"><var>:target</var></a></td> <td><var>#news:target</var></td> <td>Выберет элемент с <var>id="news"</var> когда к нему пришли по клику.</td> </tr> <tr> <td><var>:valid</var></td> <td><var>input:valid</var></td> <td>Все <var>&lt;input&gt;</var> с валидным значением.</td> </tr> <tr> <td><a href="#link" rel="nofollow"><var>:visited</var></a></td> <td><var>a:visited</var></td> <td>Все посещенные ссылки.</td> </tr> </tbody> </table> </article>'],t=document.querySelector("#code"),document.querySelectorAll(".aside a").forEach((function(r,i){!function(r,i){r.addEventListener("click",(function(r){r.preventDefault(),t.innerHTML=e[i]}))}(r,i)}));var i=new Event("click");Z[0].dispatchEvent(i)}()}},{url:"code-js.html",text:"JS",content:"<code-js></code-js>",act:function(){!function(){var e,t,r=document.querySelector(".aside");r.innerHTML="",r.append.apply(r,re),e=['<h1>JavaScript</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#links">links</a></p> <p><a href="#es">ECMAScript</a></p> <p><a href="#keywords">keywords</a></p> <p><a href="#number">number</a></p> </div> </div> <article class="article"> <div class="anchor" id="links"></div> <h2>links</h2> <p><a href="https://es5.javascript.ru/">es5.javascript.ru</a> Перевод стандарта ES5</p> <p><a href="https://doka.guide/js/">doka.guide/js</a> Дока — это документация для разработчиков на понятном языке</p> <p><a href="https://my-js.org/">my-js.org</a> MyJavaScript Руководства, шпаргалки</p> <p><a href="https://metanit.com/web/javascript/">metanit.com/web/javascript</a> Руководство по JavaScript (обновление 2023-07-15)</p> <p><a href="https://jsexpert.net/handbook/">jsexpert.net/handbook/</a> JavaScript справочник</p> <p><a href="https://www.w3resource.com/javascript-exercises/">w3resource.com/javascript-exercises/</a> JavaScript упражнения</p> <p><a href="https://www.30secondsofcode.org/">30secondsofcode.org</a> 30secondsofcode.org</p> <p><a href="https://www.javascripttutorial.net/">javascripttutorial.net</a> JavaScript Tutorial</p> <h3>Статьи на habr</h3> <p><a href="https://habr.com/ru/articles/188010/">Знай сложности алгоритмов</a> (Eric Rowell 2013-07-29)</p> <p><a href="https://habr.com/ru/articles/196560/">Введение в анализ сложности алгоритмов (часть 1)</a> (Dionysis Zindros 2013-10-07)</p> <p><a href="https://habr.com/ru/companies/livetyping/articles/324196/">Краткая история JavaScript. Часть 1</a> (Андрей Руденко 2017-03-17)</p> <p><a href="https://habr.com/ru/companies/livetyping/articles/324506/">Краткая история JavaScript. Часть 2</a> (Андрей Руденко 2017-03-21)</p> <p><a href="https://habr.com/ru/companies/livetyping/articles/324908/">Краткая история JavaScript. Часть 3</a> (Андрей Руденко 2017-03-27)</p> <p><a href="https://habr.com/ru/articles/740934/">ECMAScript 2015, 2016, 2017, 2018, 2019, 2020, 2021</a> (Ирина Мельникова @JetBlackCodes 2023-06-09)</p> <p><a href="https://habr.com/ru/articles/741372/">Новые возможности ECMAScript 2021-2023</a> (Ирина Мельникова @JetBlackCodes 2023-06-13)</p> <p><a href="https://habr.com/ru/post/518386/">JavaScript: полное руководство по классам</a> (Dmitri Pavlutin 2020-09-09)</p> <p><a href="https://habr.com/ru/post/522380/">Объектно-ориентированный JavaScript простыми словами</a> (Zell Liew 2020-10-07)</p> <p><a href="https://habr.com/ru/company/otus/blog/547098/">Основы JavaScript: почему вы должны знать, как работает JS-движок</a> (OTUS 2021-03-15)</p> <p><a href="https://habr.com/ru/post/552076/">Используй console.log () как про</a> (Marko Denic 2021-04-12)</p> <p><a href="https://habr.com/ru/company/ruvds/blog/554288/">JavaScript-классы — это не просто «синтаксический сахар»</a> (Andrea Giammarchi 2021-05-03)</p> <p><a href="https://habr.com/ru/company/ruvds/blog/665290/">Знакомство с ООП на примере JavaScript</a> (Germán Cocca 2022-05-15)</p> <p><a href="https://habr.com/ru/post/666972/">20+ консольных команд, которые изменят ваше представление об отладке</a> (Web Dev Simplified 2022-05-20)</p> <p><a href="https://habr.com/ru/post/667662/">Приведение значений к Boolean в JavaScript</a> (Natalie Pina 2022-05-25)</p> <p><a href="https://habr.com/ru/companies/yandex/articles/718084/">Полное понимание асинхронности в браузере</a> (gbiz 2023-02-28)</p> <h3>Статьи</h3> <p><a href="https://dmitripavlutin.com/javascript-classes-complete-guide/">The Complete Guide to JavaScript Classes</a> (Dmitri Pavlutin 2019-12-11)</p> <p><a href="https://frontend-stuff.com/blog/object-oriented-programming/">ООП в JavaScript Вкратце об объектно-ориентированном программировании</a> (Alexey Myzgin 2020-01-24)</p> <p><a href="https://gcoder.ru/gajd-dlya-razvitiya-frontend-razrabotchika-v-2021/">ГАЙД ДЛЯ РАЗВИТИЯ ФРОНТЕНД-РАЗРАБОТЧИКА В 2021</a></p> <p><a href="https://ru.hexlet.io/blog/posts/js-s-chego-nachat">С чего начать изучение JavaScript и как это делать эффективно</a> (Екатерина Самохвалова 2022-09-22)</p> <p><a href="https://ru.hexlet.io/blog/posts/stoit-li-uchit-javascript-perspektivy-situatsiya-na-rynke-truda-mneniya-ekspertov">Стоит ли учить JavaScript: перспективы, ситуация на рынке труда, мнения экспертов</a> (Дмитрий Дементий 2023-01-10)</p> <h3>Статьи на habr. Подготовка к собеседованию</h3> <p><a href="https://habr.com/ru/company/ruvds/blog/505480/">Как пройти собеседование в GitLab, попасть в команду разработчиков Vue и стать Staff-engineer</a> (RUVDS.com 2020-06-06)</p> <p><a href="https://habr.com/ru/company/prequel/blog/666136/">Войти в IT в 27 лет. Что получилось за 4 года</a> (Prequel 2022-05-17)</p> <p><a href="https://habr.com/ru/company/netologyru/blog/667520/">Что спрашивают у начинающего разработчика JavaScript на собеседованиях и в тестовых заданиях</a> (Нетология 2022-05-24)</p> <h3>Статьи. Подготовка к собеседованию</h3> <p><a href="https://gcoder.ru/kak-ponyat-chto-vy-gotovy-zanyat-poziciyu-front-end-razrabotchika/">КАК ПОНЯТЬ, ЧТО ВЫ ГОТОВЫ ЗАНЯТЬ ПОЗИЦИЮ FRONT-END РАЗРАБОТЧИКА</a> (2020-12-30)</p> <p><a href="https://tproger.ru/problems/sobesedovanie-na-poziciju-middle-javascript-razrabotchika-primery-zadach-i-neobhodimye-znanija/">Собеседование на позицию Middle JavaScript разработчика: примеры задач и необходимые знания</a> (Дмитрий Шостак 2021-01-27)</p> <p><a href="https://webdevblog.ru/7-voprosov-dlya-sobesedovaniya-o-zamykanie-v-javascript-smozhete-li-vy-na-nih-otvetit/">7 вопросов для собеседования о замыкание в JavaScript. Сможете ли вы на них ответить</a> (Dmitri Pavlutin 2021-02-15)</p> <p><a href="https://gcoder.ru/5-sovetov-dlya-pervogo-goda-raboty-junior-razrabotchika/">5 СОВЕТОВ ДЛЯ ПЕРВОГО ГОДА РАБОТЫ JUNIOR РАЗРАБОТЧИКА</a> (2021-03-17)</p> <p><a href="https://ru.hexlet.io/blog/posts/kak-dzhunu-napisat-soprovoditelnoe-pismo">Как джуну написать сопроводительное письмо, за которое его возьмут на работу</a> (Наталья Ёркина 2022-02-02)</p> <p><a href="https://ru.hexlet.io/blog/posts/kak-dzhunu-nayti-rabotu-i-gde-nachinat-karieru">Как джуну найти работу и где лучше начинать карьеру в IT: советы от Хекслета</a> (Екатерина Самохвалова 2023-04-14)</p> </article> <article class="article"> <div class="anchor" id="es"></div> <h2>ECMAScript Editions</h2> <table class="ws-table-all"> <tbody><tr> <th>Ver</th> <th>Official Name</th> <th>Дата выхода</th> <th>Description</th> </tr> <tr> <td>ES1</td> <td>ECMAScript 1</td> <td>Июнь 1997</td> <td>First edition</td> </tr> <tr> <td>ES2</td> <td>ECMAScript 2</td> <td>Июнь 1998</td> <td>Editorial changes</td> </tr> <tr> <td>ES3</td> <td>ECMAScript 3 (1999)</td> <td>Декабрь 1999</td> <td>Added regular expressions<br> Added try/catch<br> Added switch<br> Added do-while</td> </tr> <tr> <td>ES4</td> <td>ECMAScript 4</td> <td>Не выпущена</td> <td>Never released</td> </tr> <tr> <td>ES5</td> <td>ECMAScript 5 (2009)</td> <td>Декабрь 2009</td> <td> Added "strict mode"<br> Added JSON support<br> Added String.trim()<br> Added Array.isArray()<br> Added Array iteration methods<br> Allows trailing commas for object literals<br> </td> </tr> <tr> <td>ES6</td> <td>ECMAScript 2015</td> <td>Июнь 2015</td> <td>Added let and const<br> Added default parameter values<br> Added Array.find()<br> Added Array.findIndex()<br> </td> </tr> <tr> <td>ES7</td> <td>ECMAScript 2016</td> <td>Июнь 2016</td> <td>Added exponential operator (**)<br> Added Array.includes() </td> </tr> <tr> <td>ES8</td> <td>ECMAScript 2017</td> <td>Июнь 2017</td> <td>Added string padding<br> Added Object.entries()<br> Added Object.values()<br> Added async functions<br> Added shared memory<br> Allows trailing commas for function parameters<br> </td> </tr> <tr> <td>ES9</td> <td>ECMAScript 2018</td> <td>Июнь 2018</td> <td> Added rest / spread properties<br> Added asynchronous iteration<br> Added Promise.finally()<br> Additions to RegExp </td> </tr> <tr> <td>ES10</td> <td>ECMAScript 2019</td> <td>Июнь 2019</td> <td> String.trimStart()<br> String.trimEnd()<br> Array.flat()<br> Object.fromEntries<br> Optional catch binding </td> </tr> <tr> <td>ES11</td> <td>ECMAScript 2020</td> <td>Июнь 2020</td> <td> The Nullish Coalescing Operator (??)<br> </td> </tr> </tbody></table> </article> <article class="article"> <div class="anchor" id="keywords"></div> <h2>Ключевые слова (keywords) в Javascript</h2> <p>Ключевые слова - это имена (идентификаторы), зарезервированные для специального использования. Ключевые слова нельзя использовать в качестве имен переменных и функций.</p> <p>В JavaScript существуют следующие ключевые слова (часть из них на самом деле являются ключевыми словами языка Java, а в JavaScript зарезервированы лишь в целях большей совместимости):</p> <div class="flex-keywords"> <div>await</div> <div>break</div>\t<div>case</div> <div>catch</div> <div>class</div> <div>const</div> <div>continue</div> <div>debugger</div> <div>default</div> <div>delete</div> <div>do</div> <div>else</div> <div>enum</div> <div>export</div> <div>extends</div> <div>false</div> <div>finally</div> <div>for</div> <div>function</div> <div>if</div> <div>import</div> <div>in</div> <div>instanceof</div> <div>new</div> <div>null</div> <div>return</div> <div>super</div> <div>switch</div> <div>this</div> <div>throw</div> <div>true</div> <div>try</div> <div>typeof</div> <div>var</div> <div>void</div> <div>while</div> <div>with</div> <div>yield</div> </div> <p>Кроме вышеприведенных ключевых слов, программисту не рекомендуется использовать в качестве имен переменных и функций следующие идентификаторы:</p> <p> alert isNaN pageYOffset anchor java parent area JavaArray parseFloat array JavaClass parseInt assign JavaObject password blur JavaPackage pkcs11 button innerHeight plugin checkbox innerWidth prompt clearTimeout length prototype clientInformation link radio close location ref closed Math reset confirm MimeType screenX crypto name screenY date navigate scroll defaultStatus navigator secure document netscape select element number self escape object setTimeout eval offscreenBuffering status event onblur string fileUpload onerror submit focus onfocus sun form onload taint frame onunload text frames open textarea frameRate opener top function option toString getClass outerHeight unescape hidden outerWidth untaint history packages valueOf image pageXOffset window </p> </article> <article class="article"> <div class="anchor" id="number"></div> <h2>Число (тип данных number) в Javascript</h2> </article> ','<h1>String</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#links">links</a></p> <p><a href="#string">string</a></p> <p><a href="#properties">Свойства строк</a></p> <p><a href="#methods">Методы строк</a></p> </div> </div> <article class="article"> <div class="anchor" id="links"></div> <h2>links</h2> <p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String">developer.mozilla.org/String</a></p> <p><a href="https://learn.javascript.ru/string">learn.javascript.ru/string</a></p> <p><a href="https://doka.guide/js/string/">doka.guide/js/string</a></p> <p><a href="https://jsexpert.net/handbook/javascript/string/">jsexpert.net/handbook/javascript/string</a></p> <p><a href="https://metanit.com/web/javascript/6.1.php">metanit.com</a></p> </article> <article class="article"> <div class="anchor" id="string"></div> <h2>Строка (тип данных string) в Javascript</h2> <h3>Строковый литерал</h3> <p>Строковый литерал можно записать одним из трех способов</p> <code>\'qwerty\' // в одинарных кавычках <br>"asdfg" // в двойных кавычках <br>`zxcvb` // в обратных кавычках</code> <h3>Состав строки</h3> <p>Внутри строки можно использовать три вида символов</p> <code>\'qwerty\' // обычные символы (буквы, цифры и т.д.) <br>\'\\n\\t\' // escape-последовательности (\\n новая строка, \\t табуляция) <br>\'\\u0056\\u0179\\u2190\' // unicode символы (\\u0056 V, \\u0179 Ź, u2190 ←) </code> <p>Escape-последовательность это обратный слеш (\\) за которым пишется буква или цифры. Рассматривается как один символ и является допустимой символьной константой. Обычно используется для указания действий, например возврата каретки или табуляции, на терминалах и принтерах.</p> <h3>1. Какой тип данных у строки</h3> <p>Есть два типа строк: строки примитивного типа и строки типа объект (String Object).</p> <h3>2. Как создать строку примитивного типа</h3> <p>Строковые примитивы это строковые литералы и строки, возвращенные вызовом String без ключевого слова new.</p> <p>Инициализируем примитивную строку. Присваиваем переменной литерал строки.</p> <code>const a = \'Frontend\';</code> <p>Инициализируем примитивную строку. Присваиваем переменной результат работы глобального объекта String</p> <code>const b = String(\'Backend\');</code> <h3>Как проверить что перед нами строка примитивного типа</h3> <p>Оператор typeof должен вернуть значение \'string\'.</p> <code>typeof a; <br>\'string\'</code> <code>typeof b; <br>\'string\'</code> <h3>3. Как создать строку String Object</h3> <p>Инициализируем String Object. Вызываем конструктор нового объекта через ключевое слово new и в качестве параметра передаем в конструктор литерал строки.</p> <code>const c = new String(\'Fullstack\');</code> <p>Методы и свойства String Objects доступны для всех строк. Если методы и свойства нужно вызвать на примитивном типе, то JavaScript осуществляет конвертацию строки в объект и обратно каждый раз, когда вызывается метод или свойство.</p> <h3>Как проверить что перед нами строка типа String Object</h3> <p>Оператор typeof должен вернуть значение \'object\'. Оператор instanceof String должен вернуть значение true.</p> <code>typeof c; <br>\'object\'</code> <code>c instanceof String; <br>true</code> <h3>4. Как преобразовать строку примитивного типа в String Object</h3> <p>JavaScript автоматически преобразует примитивы в объекты String, так что на строковых примитивах возможно использовать методы объекта String.</p> <p>В контекстах, когда на примитивной строке вызывается метод или происходит поиск свойства, JavaScript автоматически оборачивает строковый примитив объектом и вызывает на нём метод или ищет в нём свойство.</p> <h3>5. Как преобразовать объект String в строковый примитив</h3> <p>Объект String также всегда может быть преобразован в его примитивный аналог при помощи метода valueOf().</p> <h3>6. Как индексируется строка</h3> <p>Каждый символ строки соответствует индексу, начиная с 0.</p> <h3>7. Как получить доступ к символу строки</h3> <p>Используя квадратные скобки, можно получить доступ к любому символу строки.</p> <code>\'Frontend\'[4]; <br>t</code>  <h3>8. Как изменить строку</h3> <p>Строки неизменяемы. Содержимое строки в JavaScript нельзя изменить. Нельзя взять символ посередине и заменить его. Как только строка создана — она такая навсегда.</p> <code>let str = \'Frontend\'; <br>str[0] = \'f\'; // ошибка</code> <p>Можно создать новую строку и записать ее в ту же самую переменную.</p> <code>let str = \'Frontend\' <br>str = str.toUpperCase(); // \'FRONTEND\'</code> </article> <article class="article"> <div class="anchor" id="properties"></div> <h3>8. Свойства строк</h3> <p>Строки имеют только одно свойство - length.</p> <ol> <li><strong>constructor</strong>. Возвращает функцию конструктор строки <strong>function String() { [native code] }</strong></li> <li><strong>length</strong>. Возвращает количество символов в строке</li> <li><strong>prototype</strong>. Возвращает ссылку на объект String.prototype. Позволяет добавлять новые свойства и методы к объекту String()</li> </ol> </article> <article class="article"> <h3>Свойство constructor</h3> <p><em>(Возвращает <strong>function</strong>)</em></p> <p><em>(Появился в <strong>ES1</strong>)</em></p> <p>Свойство constructor у строки возвращает функцию, которая создала прототип строки <strong>function String() { [native code] }</strong></p> <code>let a = \'aaa\'; <br>a.constructor <br>f String() { [native code] }</code> <code>let b = new String(\'bbb\'); <br>b.constructor <br>f String() { [native code] }</code> </article> <article class="article"> <h3>Свойство length</h3> <p><em>(Возвращает <strong>number</strong>)</em></p> <p><em>(Появился в <strong>ES1</strong>)</em></p> <p>Возвращает количество символов в строке</p> <code>\'Frontend\'.length <br>8</code> <code>a = \'Front\'; <br>b = a.length;</code> <p>Свойство length не изменяет исходную строку</p> <code>console.log(a); // \'Front\'</code> <p>Свойство length возвращает number</p> <code>console.log(b); // 4</code> </article> <article class="article"> <h3>Свойство prototype</h3> <p><em>(Возвращает <strong>String.prototype</strong>)</em></p> <p><em>(Появился в <strong>ES1</strong>)</em></p> <p>Ссылка на объект String.prototype</p> </article> <article class="article"> <div class="anchor" id="methods"></div> <h3>9. Методы строк</h3> <p>Методы строк не изменяют исходную строку.</p> <p>Методы объекта String, записанные в его прототипе String.prototype.</p> <table> <tr> <td>1</td> <th><a href="#string-at">at()</a></th> <td>Возвращает символ по его индексу в строке. Возвращает <strong>string</strong></td> </tr> <tr> <td>2</td> <th><a href="#string-char-at">charAt()</a></th> <td>Возвращает символ по его индексу в строке. Возвращает <strong>string</strong></td> </tr> <tr> <td>3</td> <th><a href="#string-char-code-at">charCodeAt()</a></th> <td>Возвращает Unicode (целое число между 0 и 65535) символа по его индексу в строке. Возвращает <strong>number</strong></td> </tr> <tr> <td>4</td> <th><a href="#string-code-point-at">codePointAt()</a></th> <td>Возвращает Unicode (целое число между 0 и 65535) символа по его индексу в строке. Возвращает <strong>number</strong></td> </tr> <tr> <td>5</td> <th><a href="#string-concat">concat()</a></th> <td>Объединяет переданные в параметрах строки с исходной строкой и возвращает объединенную строку. Возвращает <strong>string</strong></td> </tr> <tr> <td>6</td> <th><a href="#string-ends-with">endsWith()</a></th> <td>Возвращает true если строка оканчивается на указанную подстроку. Возвращает <strong>boolean</strong></td> </tr> <tr> <td>7</td> <th><a href="#string-from-char-code">String.fromCharCode()</a></th> <td>Преобразует значения Unicode в символы. Возвращает <strong>string</strong></td> </tr> <tr> <td>8</td> <th><a href="#string-from-code-point">String.fromCodePoint()</a></th> <td>Возвращает строку, созданную из указанной последовательности кодовых точек. Возвращает <strong>string</strong></td> </tr> <tr> <td>9</td> <th><a href="#string-includes">includes()</a></th> <td>Возвращает true если строка содержит указанную подстроку. Возвращает <strong>boolean</strong></td> </tr> <tr> <td>10</td> <th><a href="#string-index-of">indexOf()</a></th> <td>Возвращает индекс первого вхождения в строке. Возвращает <strong>number</strong></td> </tr> <tr> <td>11</td> <th><a href="#string-is-well-formed">isWellFormed()</a></th> <td>returns a boolean indicating whether this string contains any lone surrogates.</td> </tr> <tr> <td>12</td> <th><a href="#string-last-index-of">lastIndexOf()</a></th> <td>Возвращает индекс последнего вхождения в строке</td> </tr> <tr> <td>13</td> <th><a href="#string-locale-compare">localeCompare()</a></th> <td>Возвращает 1, 0, -1 как результат сравнения двух строк</td> </tr> <tr> <td>14</td> <th><a href="#string-match">match()</a></th> <td>Ищет строку для соответствия регулярному выражению и возвращает совпадения</td> </tr> <tr> <td>15</td> <th><a href="#string-match-all">matchAll()</a></th> <td>возвращает итератор по всем результатам при сопоставлении строки с регулярным выражением</td> </tr> <tr> <td>16</td> <th><a href="#string-normalize">normalize()</a></th> <td>возвращает форму нормализации Юникода данной строки</td> </tr> <tr> <td>17</td> <th><a href="#string-pad-end">padEnd()</a></th> <td>Добавление символов в конец строки</td> </tr> <tr> <td>18</td> <th><a href="#string-pad-start">padStart()</a></th> <td>Добавление символов в начало строки</td> </tr> <tr> <td>19</td> <th><a href="#string-raw">String.raw()</a></th> <td>используется для получения необработанной строки из шаблона</td> </tr> <tr> <td>20</td> <th><a href="#string-repeat">repeat()</a></th> <td>Возвращает строку, повторяющую исходную указанное количество раз</td> </tr> <tr> <td>21</td> <th><a href="#string-replace">replace()</a></th> <td>Заменяет указанное значение (первое вхождение) в строке</td> </tr> <tr> <td>22</td> <th><a href="#string-replace-all">replaceAll()</a></th> <td>Заменяет указанное значение (все вхождения) в строке</td> </tr> <tr> <td>23</td> <th><a href="#string-search">search()</a></th> <td></td> </tr> <tr> <td>24</td> <th><a href="#string-search">slice()</a></th> <td>Извлечение подстроки</td> </tr> <tr> <td>25</td> <th><a href="#string-search">split()</a></th> <td>Разбиение строк</td> </tr> <tr> <td>26</td> <th><a href="#string-starts-with">startsWith()</a></th> <td></td> </tr> <tr> <td>27</td> <th><a href="#string-starts-with">substring()</a></th> <td>Извлечение подстроки</td> </tr> <tr> <td>28</td> <th><a href="#string-to-local-lower-case">toLocaleLowerCase()</a></th> <td></td> </tr> <tr> <td>29</td> <th><a href="#string-to-local-upper-case">toLocaleUpperCase()</a></th> <td></td> </tr> <tr> <td>30</td> <th><a href="#string-to-lower-case">toLowerCase()</a></th> <td>Преобразует все символы в нижний регистр</td> </tr> <tr> <td>31</td> <th><a href="#string-to-string">toString()</a></th> <td></td> </tr> <tr> <td>32</td> <th><a href="#string-to-upper-case">toUpperCase()</a></th> <td>Преобразует все символы в верхний регистр</td> </tr> <tr> <td>33</td> <th><a href="#string-to-well-formed">toWellFormed()</a></th> <td>returns a string where all lone surrogates of this string are replaced with the Unicode replacement character U+FFFD.</td> </tr> <tr> <td>34</td> <th><a href="#string-trim">trim()</a></th> <td>Отсечение пробелов в начале и конце строки</td> </tr> <tr> <td>35</td> <th><a href="#string-trim-end">trimEnd()</a></th> <td>Отсечение пробелов в конце строки</td> </tr> <tr> <td>36</td> <th><a href="#string-trim-start">trimStart()</a></th> <td>Отсечение пробелов в начале строки</td> </tr> <tr> <td>37</td> <th><a href="#string-value-of">valueOf()</a></th> <td></td> </tr> </table> </article> <article class="article"> <div class="anchor" id="string-at"></div> <h3>Метод at()</h3> <p><em>(Возвращает <strong>string</strong>)</em></p> <p><em>(Появился в <strong>es2022</strong>)</em></p> <p><strong>Метод at(index) возвращает символ</strong> по его индексу в строке если index - целое число от нуля до длины строки - 1</p> <p>Возвращает символ по его позиции начиная с конца строки если index - целое отрицательное число от -1 до длины строки - 1</p> <p>Возвращает undefined если index выходит за пределы этого диапазона</p> <p>Метод at() лучше чем charAt() тем что работает еще и с отрицательными индексами</p> <code>\'abcde\'.at(0); <br>a</code> <code>\'abcde\'.at(4); <br>e</code> <code>\'abcde\'.at(5); <br>undefined</code> <code>\'abcde\'.at(-1); <br>e</code> <code>\'abcde\'.at(-5); <br>a</code> <h3>Метод at(). Особенности</h3> <p>Если в качестве параметра приходит дробное число, то дробная часть отбрасывается</p> <code>\'abcde\'.at(3.9999); <br>d</code> <p>Если в качестве параметра приходит число в виде строки, то она преобразуется в число</p> <code>\'abcde\'.at(\'2\'); <br>c</code> <p>Возвращает первый символ строки в следующих случаях:</p> <code>\'abcde\'.at(); <br>a</code> <code>\'abcde\'.at(0); <br>a</code> <code>\'abcde\'.at(false); <br>a</code> <code>\'abcde\'.at(\'\'); <br>a</code> <code>\'abcde\'.at(\'anystring\'); <br>a</code> <code>\'abcde\'.at(null); <br>a</code> <code>\'abcde\'.at(undefined); <br>a</code> <code>\'abcde\'.at(NaN); <br>a</code> <p>Возвращает второй символ строки в следующих случаях:</p> <code>\'abcde\'.at(true); <br>b</code> <h3>Отличие между at() и charAt()</h3> <p>1. at() это новый улучшенный метод, позволяет использовать отрицательные числа для поиска от конца строки <br>2. если index выходит за пределы диапазона, то at() возвращает undefined, charAt() возвращает пустую строку</p> </article> <article class="article"> <div class="anchor" id="string-char-at"></div> <h3>Метод charAt()</h3> <p><em>(Возвращает <strong>string</strong>)</em></p> <p><em>(Появился в <strong>ES1</strong>)</em></p> <p><strong> Метод charAt(index) возвращает символ</strong> по его индексу в строке если index - целое число от нуля до длины строки - 1</p> <p>Возвращает пустую строку если index выходит за пределы строки</p> <code>\'abcde\'.charAt(0); <br>a</code> <code>\'abcde\'.charAt(4); <br>e</code> <code>\'abcde\'.charAt(-1); <br>\'\'</code> <code>\'abcde\'.charAt(5); <br>\'\'</code> <h3>Метод charAt(). Особенности</h3> <p>Если в качестве параметра приходит дробное число, то дробная часть отбрасывается</p> <code>\'abcde\'.charAt(3.9999); <br>d</code> <p>Если в качестве параметра приходит число в виде строки, то она преобразуется в число</p> <code>\'abcde\'.charAt(\'2\'); <br>c</code> <p>Возвращает первый символ строки в следующих случаях:</p> <code>\'abcde\'.charAt(); <br>a</code> <code>\'abcde\'.charAt(0); <br>a</code> <code>\'abcde\'.charAt(false); <br>a</code> <code>\'abcde\'.charAt(\'\'); <br>a</code> <code>\'abcde\'.charAt(\'anystring\'); <br>a</code> <code>\'abcde\'.charAt(null); <br>a</code> <code>\'abcde\'.charAt(undefined); <br>a</code> <code>\'abcde\'.charAt(NaN); <br>a</code> <p>Возвращает второй символ строки в следующих случаях:</p> <code>\'abcde\'.charAt(true); <br>b</code> </article> <article class="article"> <div class="anchor" id="string-char-code-at"></div> <h3>Метод charCodeAt()</h3> <p><em>(Возвращает <strong>number</strong>)</em></p> <p><em>(Появился в <strong>ES1</strong>)</em></p> <p><strong>Метод charCodeAt возвращает Unicode символа</strong> (целое число между 0 и 65535) по его индексу в строке.</p> <p>Возвращает NaN если index выходит за пределы строки</p> <code>\'ABCDE\'.charCodeAt(0); <br>65</code> <code>\'ABCDE\'.charCodeAt(4); <br>69</code> <code>\'ABCDE\'.charCodeAt(5); <br>NaN</code> <code>\'ABCDE\'.charCodeAt(-1); <br>NaN</code> <h3>Метод charCodeAt(). Особенности</h3> <p>Если в качестве параметра приходит дробное число, то дробная часть отбрасывается</p> <code>\'ABCDE\'.charCodeAt(0.9999); <br>65</code> <p>Если в качестве параметра приходит число в виде строки, то она преобразуется в число</p> <code>\'ABCDE\'.charCodeAt(\'2\'); <br>67</code> <p>Возвращает Unicode первого символа строки в следующих случаях:</p> <code>\'ABCDE\'.charCodeAt(); <br>65</code> <code>\'ABCDE\'.charCodeAt(0); <br>65</code> <code>\'ABCDE\'.charCodeAt(false); <br>65</code> <code>\'ABCDE\'.charCodeAt(\'\'); <br>65</code> <code>\'ABCDE\'.charCodeAt(\'anystring\'); <br>65</code> <code>\'ABCDE\'.charCodeAt(null); <br>65</code> <code>\'ABCDE\'.charCodeAt(undefined); <br>65</code> <code>\'ABCDE\'.charCodeAt(NaN); <br>65</code> <p>Возвращает второй символ строки в следующих случаях:</p> <code>\'ABCDE\'.charCodeAt(true); <br>66</code> <h3>Отличие между charCodeAt() и codePointAt()</h3> <p>Внутренняя кодировка строк в JavaScript – это UTF-16, то есть под каждый символ отводится ровно два байта.</p> <p>Но под всевозможные символы всех языков мира 2 байт не хватает. Поэтому бывает так, что одному символу языка соответствует два Юникодных символа (итого 4 байта). Такое сочетание называют «суррогатной парой»</p> <p>Заметим, однако, что не всякий китайский иероглиф – суррогатная пара. Китайскими иероглифами суррогатные пары, естественно, не ограничиваются. Ими представлены редкие математические символы, а также некоторые символы для эмоций.</p> <p>В современный JavaScript добавлены методы String.fromCodePoint и str.codePointAt – аналоги String.fromCharCode и str.charCodeAt, корректно работающие с суррогатными парами.</p> </article> <article class="article"> <div class="anchor" id="string-code-pointe-at"></div> <h3>Метод codePointAt()</h3> <p><em>(Возвращает <strong>number</strong>)</em></p> <p><em>(Появился в <strong>es6</strong>)</em></p> <p><strong>Метод charCodeAt возвращает Unicode символа</strong> (целое число между 0 и 65535) по его индексу в строке.</p> <p>Возвращает undefined если index выходит за пределы строки</p> <p>Метод codePointAt() лечше чем charCodeAt() тем что работает еще и с суррогатными парами</p> <code>\'ABCDE\'.codePointAt(0); <br>65</code> <code>\'ABCDE\'.codePointAt(4); <br>69</code> <code>\'ABCDE\'.codePointAt(5); <br>undefined</code> <code>\'ABCDE\'.codePointAt(-1); <br>undefined</code> <h3>Метод codePointAt(). Особенности</h3> <p>Если в качестве параметра приходит дробное число, то дробная часть отбрасывается</p> <code>\'ABCDE\'.codePointAt(0.9999); <br>65</code> <p>Если в качестве параметра приходит число в виде строки, то она преобразуется в число</p> <code>\'ABCDE\'.codePointAt(\'2\'); <br>67</code> <p>Возвращает первый символ строки в следующих случаях:</p> <code>\'ABCDE\'.codePointAt(); <br>65</code> <code>\'ABCDE\'.codePointAt(0); <br>65</code> <code>\'ABCDE\'.codePointAt(false); <br>65</code> <code>\'ABCDE\'.codePointAt(\'\'); <br>65</code> <code>\'ABCDE\'.codePointAt(\'anystring\'); <br>65</code> <code>\'ABCDE\'.codePointAt(null); <br>65</code> <code>\'ABCDE\'.codePointAt(undefined); <br>65</code> <code>\'ABCDE\'.codePointAt(NaN); <br>65</code> <p>Возвращает второй символ строки в следующих случаях:</p> <code>\'ABCDE\'.charAt(true); <br>66</code> </article> <article class="article"> <div class="anchor" id="string-concat"></div> <h3>Метод concat()</h3> <p><em>(Возвращает <strong>string</strong>)</em></p> <p><em>(Появился в <strong>ES1</strong>)</em></p> <p>Без параметров возвращает ту же самую строку</p> <code>\'abcde\'.concat(); <br>abcde</code> <p>С одним или более параметрами преобразуют каждый параметр в строку и по очереди добавляют в конец исходной строки, возвращая новую строку</p> <code>\'abcde\'.concat(1234); <br>abcde1234</code> <code>\'abcde\'.concat(\'Backend\', 123, null, NaN, \'\', undefined, Infinity); <br>abcdeBackend123nullNaNundefinedInfinity</code> </article> <article class="article"> <div class="anchor" id="string-ends-with"></div> <h3>Метод endsWith()</h3> <p><em>(Возвращает <strong>boolean</strong>)</em></p> <p><em>(Появился в <strong>ES6</strong>)</em></p> <p>Метод endsWith проверяет, заканчивается ли строка на указанную в первом параметре подстроку. Если заканчивается, то возвращает true, а если не заканчивается, то false. Вторым необязательным параметром можно принудительно указать длину строки. В этом случае проверка будет не настоящего конца строки, а указанного.</p> </article> <article class="article"> <div class="anchor" id="string-from-char-code"></div> <h3>Метод String.fromCharCode()</h3> <p><em>(Возвращает <strong>string</strong>)</em></p> <p><em>(Появился в <strong>ES1</strong>)</em></p> <p>Преобразует числовые значения Юникода UTF-16 от 0 до 65535 (0xFFFF) в читаемые символы. Числа больше 0xFFFF усекаются</p> <code>String.fromCharCode(72, 101, 108, 108, 11); <br>\'Hello\'</code> </article> <article class="article"> <div class="anchor" id="string-from-code-point"></div> <h3>Метод String.fromCodePoint()</h3> <p><em>(Возвращает <strong>string</strong>)</em></p> <p><em>(Появился в <strong>ES6</strong>)</em></p> <p>Возвращает строку, созданную из указанной последовательности кодовых точек</p> <code>String.fromCodePoint(65, 90); <br>\'AZ\'</code> </article> <article class="article"> <div class="anchor" id="string-includes"></div> <h3>Метод includes()</h3> <p><em>(Возвращает <strong>boolean</strong>)</em></p> <p><em>(Появился в <strong>ES6</strong>)</em></p> <p>Метод includes выполняет поиск заданной строки в текущей с учетом регистра. Первым параметром метод принимает строку, которую нужно найти, вторым необязательным - позицию, с которой нужно начинать поиск. После выполнения метод возвращает true или false.</p> </article> <article class="article"> <div class="anchor" id="string-index-of"></div> <h3>Метод indexOf()</h3> <p><em>(Возвращает <strong>number</strong>)</em></p> <p><em>(Появился в <strong>ES1</strong>)</em></p> <p>Методы indexOf() и lastIndexOf() принимают символ или строку, возвращают индекс.</p> <p>Возвращает индекс первого вхождения в строке</p> <code>\'Frontend\'.indexOf(\'n\'); <br>3</code> <code>\'Frontend\'.indexOf(\'ont\'); <br>2</code> <code>a = \'Frontend\'; <br>b = a.indexOf(\'n\');</code> <p>Метод indexOf() не изменяет исходную строку</p> <code>console.log(a); // \'Frontend\'</code> <p>Метод indexOf() возвращает number</p> <code>console.log(b); // 3</code> </article> <article class="article"> <div class="anchor" id="string-is-well-formed"></div> <h3>Метод isWellFormed()</h3> <p><em>(Появился в <strong>ES2024</strong>)</em></p> <p>Значения строк в ECMAScript представляют собой последовательность из 16-битных беззнаковых целочисленных значений.</p> <p>В правильно сформированных строках каждое целочисленное значение в последовательности представляет собой отдельную единицу UTF-16 юникодного текста. Однако не все последовательности представляют собой UTF-16 юникодный текст.</p> <p>Также в правильно сформированных строках кодовые единицы в диапазоне от 0xD800 до 0xDBFF (ведущие суррогаты) и от 0xDC00 до 0xDFFF (заключительные суррогаты) должны появляться парами и по порядку. Строки с непарными или неправильно упорядоченными суррогатами считаются неправильно сформированными.</p> <p>Новый стандарт предлагает ввести метода для проверки, является ли строка правильно сформированной. Метод должен улучшить производительность и увеличит понятность для читателей кода.</p> </article> <article class="article"> <div class="anchor" id="string-last-index-of"></div> <h3>Метод lastIndexOf()</h3> <p><em>(Возвращает <strong>number</strong>)</em></p> <p><em>(Появился в <strong>ES1</strong>)</em></p> <p>Методы indexOf() и lastIndexOf() принимают символ или строку, возвращают индекс.</p> <p>Возвращает индекс последнего вхождения символа в строке</p> <code>"Frontend".lastIndexOf(\'n\'); <br>6</code> <code>a = \'Frontend\'; <br>b = a.lastIndexOf(\'n\');</code> <p>Метод indexOf() не изменяет исходную строку</p> <code>console.log(a); // \'Frontend\'</code> <p>Метод indexOf() возвращает number</p> <code>console.log(b); // 6</code> </article> <article class="article"> <div class="anchor" id="string-locale-compare"></div> <h3>Метод localeCompare()</h3> <p><em>(Возвращает <strong>number</strong>)</em></p> <p><em>(Появился в <strong>ES1</strong>)</em></p> <p>Метод localeCompare() сравнивает две строки в текущей локали. Локаль основана на настройках языка браузера.</p> <code>string.localeCompare(compareString)</code> <p>Возвращает одно из трех значений: <br>-1, если строка сортируется до compareString <br>0, если две строки равны <br>1, если строка сортируется после compareString </p> </article> <article class="article"> <div class="anchor" id="string-match"></div> <h3>Метод match()</h3> <p><em>(Появился в <strong>ES1</strong>)</em></p> <p>Метод match() ищет строку для соответствия регулярному выражению и возвращает совпадения в качестве объекта Array.</p> </article> <article class="article"> <div class="anchor" id="string-match-all"></div> <h3>Метод matchAll()</h3> <p>возвращает итератор по всем результатам при сопоставлении строки с регулярным выражением</p> </article> <article class="article"> <div class="anchor" id="string-normalize"></div> <h3>Метод normalize()</h3> <p>возвращает форму нормализации Юникода данной строки</p> </article> <article class="article"> <div class="anchor" id="string-pad-end"></div> <h3>Метод padEnd(num [, str])</h3> <p>Возвращает новую строку указанной длины num. Если исходная строка была длинее, то она возвращается без изменений.</p> <code>"Frontend".padEnd(5); <br>“Frontend”</code> <p>Без второго параметра добавляет в конце пробелы до указанной длины строки.</p> <code>"Frontend".padEnd(10); <br>“Frontend ”</code> <p>Второй необязательный параметр str это строка, которую надо добавить в конце до указанной длины строки.</p> <code>"Frontend".padEnd(10, “*”); <br>“Frontend**”</code> <p>Если str слишком длинная, то она обрезается.</p> <code>"Frontend".padEnd(10, “vue”); <br>“Frontendvu”</code> <p>Если str слишком короткая, то она повторяется.</p> <code>"Frontend".padEnd(20, “vue”); <br>"Frontendvuevuevuevue"</code> </article> <article class="article"> <div class="anchor" id="string-pad-start"></div> <h3>Метод padStart(num [, str])</h3> <p>Возвращает новую строку указанной длины num. Если исходная строка была длинее, то она возвращается без изменений.</p> <code>"Frontend".padStart(5); <br>“Frontend”</code> <p>Без второго параметра добавляет в начале пробелы до указанной длины строки.</p> <code>"Frontend".padStart(10); <br>“ Frontend”</code> <p>Второй необязательный параметр str это строка, которую надо добавить в начале до указанной длины строки.</p> <code>"Frontend".padStart(10, “*”); <br>“**Frontend”</code> <p>Если str слишком длинная, то она обрезается.</p> <code>"Frontend".padStart(10, “vue”); <br>“vuFrontend”</code> <p>Если str слишком короткая, то она повторяется.</p> <code>"Frontend".padStart(20, “vue”); <br>"vuevuevuevueFrontend"</code> </article> <article class="article"> <div class="anchor" id="string-raw"></div> <h3>Метод String.raw()</h3> <p>используется для получения необработанной строки из шаблона</p> <code>String.raw`Привет\\n${2 + 3}!`; <br>\'Привет\\n5!\', символ после \'Привет\' не является символом новой строки</code> </article> <article class="article"> <div class="anchor" id="string-repeat"></div> <h3>Метод repeat()</h3> <p><em>(Появился в <strong>ES6</strong>)</em></p> <p>Без параметров возвращает пустую строку</p> <code>\'front\'.repeat(); <br>\'\'</code> <p>Если параметр 0 или который при привидении к number дает 0 (\'0\', NaN, false, null, undefined) возвращает пустую строку</p> <code>\'front\'.repeat(NaN); <br>\'\'</code> <p>Если параметр 1 или при привидении к number дает 1 (\'1\', true) возвращает исходную строку</p> <code>\'front\'.repeat(true); \'front\'</code> <p>Если параметр число или приводится к числу, возвращает строку, повторяющую исходную указанное количество раз</p> <code>\'front\'.repeat(3); \'frontfrontfront\'</code> <code>a = \'front\'; <br>b = a.repeat(\'3\');</code> <p>Метод repeat() не изменяет исходную строку</p> <code>console.log(a); // \'front\'</code> <p>Метод repeat() возвращает string</p> <code>console.log(b); // \'frontfrontfront\'</code> </article> <article class="article"> <div class="anchor" id="string-replace"></div> <h3>Метод replace()</h3> <p><em>(Появился в <strong>ES1</strong>)</em></p> <p>Ищет в строке указанное значение или регулярное выражение и возвращает новую строку, в которой выполнена замена на второй параметр</p> <code>"Frontend".replace(“Front”, “Back”); <br>Backend</code> </article> <article class="article"> <div class="anchor" id="string-replace-all"></div> <h3>Метод replaceAll()</h3> <p>Заменяет все найденные совпадения другой строкой</p> <code>"FrontFrontend".replace(“Front”, “Back”); <br>BackBackend</code> </article> <article class="article"> <div class="anchor" id="string-search"></div> <h3>Метод search()</h3> <p><em>(Появился в <strong>ES1</strong>)</em></p> </article> <article class="article"> <div class="anchor" id="string-slice"></div> <h3>Метод slice()</h3> <p><em>(Появился в <strong>ES1</strong>)</em></p> <p>Возвращает символы начиная с указанного индекса и до конца строки</p> <code>"Frontend".slice(“5”); <br>end</code> <p>Возвращает символы между двумя индексами</p> <code>"Frontend".slice(“5, 7”); <br>en</code> <p>Можно указывать отрицательные значения</p> <code>"Frontend".slice(“-5, -2”); <br>nte</code> </article> <article class="article"> <div class="anchor" id="string-split"></div> <h3>Метод split()</h3> <p><em>(Появился в <strong>ES1</strong>)</em></p> <p>Без параметров возвращает массив из одного элемента, содержащего исходную строку</p> <code>\'Frontend\'.split(); <br>[\'Frontend\']</code> <p>Если параметр это пустая строка, то возвращает массив из всех символов исходной строки</p> <code>\'Frontend\'.split(\'\'); <br>[\'F\', \'r\', \'o\', \'n\', \'t\', \'e\', \'n\', \'d\']</code> <p>Возвращает массив строк из исходной строки по символу переданному в параметрах</p> <code>\'Front end developer\'.split(\' \'); <br>[\'Front\', \'end\', \'developer\']</code> <code>a = \'Frontend\'; <br>b = a.split(\'\');</code> <p>Метод split() не изменяет исходную строку</p> <code>console.log(a); // \'Frontend\'</code> <p>Метод split() возвращает array</p> <code>console.log(b); // [\'F\', \'r\', \'o\', \'n\', \'t\', \'e\', \'n\', \'d\']</code> </article> <article class="article"> <div class="anchor" id="string-starts-with"></div> <h3>Метод startsWith()</h3> <p><em>(Появился в <strong>ES6</strong>)</em></p> </article> <article class="article"> <div class="anchor" id="string-substring"></div> <h3>Метод substring(indexA [, indexB])</h3> <p><em>(Появился в <strong>ES1</strong>)</em></p> <p>Если указать только один параметр, то возвращает символы начиная с указанного индекса indexA и до конца строки</p> <code>"Frontend". substring(5); <br>end</code> <p>Если указать два параметра, то возвращает символы между двумя индексами</p> <code>"Frontend". substring(5, 7); <br>en</code> <p>В отличие от slice, можно задавать start больше, чем end. Отрицательные значения не поддерживаются, они интерпретируются как 0.</p> </article> <article class="article"> <div class="anchor" id="string-to-local-lower-case"></div> <h3>Метод toLocaleLowerCase()</h3> <p><em>(Появился в <strong>ES1</strong>)</em></p> </article> <article class="article"> <div class="anchor" id="string-to-local-upper-case"></div> <h3>Метод toLocaleUpperCase()</h3> <p><em>(Появился в <strong>ES1</strong>)</em></p> </article> <article class="article"> <div class="anchor" id="string-to-lower-case"></div> <h3>Метод toLowerCase()</h3> <p><em>(Появился в <strong>ES1</strong>)</em></p> <p>Не принимает параметры, преобразует все символы в нижний регистр, возвращает новую строку</p> <code>\'Frontend\'.toLowerCase(); <br>frontend</code> <code>a = \'Frontend\'; <br>b = a.toLowerCase();</code> <p>Метод toLowerCase() не изменяет исходную строку</p> <code>console.log(a); // \'Frontend\'</code> <p>Метод toLowerCase() возвращает string</p> <code>console.log(b); // \'frontend\'</code> </article> <article class="article"> <div class="anchor" id="string-to-string"></div> <h3>Метод toString()</h3> <p><em>(Появился в <strong>ES1</strong>)</em></p> <p>возвращает строку, представляющую указанный объект</p> <code>var x = new String("Привет, мир"); <br>console.log(x.toString()); // Отобразит \'Привет, мир\'</code> </article> <article class="article"> <div class="anchor" id="string-to-upper-case"></div> <h3>Метод toUpperCase()</h3> <p><em>(Появился в <strong>ES1</strong>)</em></p> <p>Не принимает параметры, преобразует все символы в верхний регистр, возвращает новую строку</p> <code>\'Frontend\'.toUpperCase(); <br>\'FRONTEND\'</code> <code>a = \'Frontend\'; <br>b = a.toUpperCase();</code> <p>Метод toUpperCase() не изменяет исходную строку</p> <code>console.log(a); // \'Frontend\'</code> <p>Метод toUpperCase() возвращает string</p> <code>console.log(b); // \'FRONTEND\'</code> </article> <article class="article"> <div class="anchor" id="string-to-well-formed"></div> <h3>Метод toWellFormed()</h3> </article> <article class="article"> <div class="anchor" id="string-trim"></div> <h3>Метод trim()</h3> <p><em>(Появился в <strong>ES3</strong>)</em></p> <p>Возвращает строку без пробелов в начале и конце строки</p> <code>" Frontend ".trim(); <br>“Frontend”</code> </article> <article class="article"> <div class="anchor" id="string-trim-end"></div> <h3>Метод trimEnd()</h3> <p>Возвращает строку без пробелов в конце строки</p> <code>" Frontend ".trimEnd(); <br>“ Frontend”</code> </article> <article class="article"> <div class="anchor" id="string-trim-start"></div> <h3>Метод trimStart()</h3> <p>Возвращает строку без пробелов в начале строки</p> <code>" Frontend ".trimStart(); <br>“Frontend ”</code> </article> <article class="article"> <div class="anchor" id="string-value-of"></div> <h3>Метод valueOf()</h3> <p><em>(Появился в <strong>ES1</strong>)</em></p> </article> ','<h1>null</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#links">links</a></p> <p><a href="#about">about</a></p> </div> </div> <article class="article"> <div class="anchor" id="links"></div> <h2>links</h2> <p><a href="https://doka.guide/js/null-primitive/">doka.guide/js/null-primitive</a></p> </article> <article class="article"> <div class="anchor" id="about"></div> <h2>about</h2> <p>Null — это тип, единственным значением которого является значение null.</p> <p>Значение null используют, когда нужно обозначить намеренное отсутствие значения объекта (объект с неопределённой структурой).</p> <p>Null всегда явно задаётся программистом, JavaScript автоматически не устанавливает его.</p> <p>В JavaScript null используется только для обозначения конца цепочки прототипов, чтобы показать, что следующий прототип отсутствует.</p> <p>В языке существует похожее примитивное значение undefined. Оно обозначает, что переменной ещё не присвоено значение. Их можно легко спутать, потому что оба обозначают отсутствие значения. Разница состоит в том, что null обозначает намеренное отсутствие значения объекта (объект без заданной структуры), а undefined — что переменной (не объекту) ещё не присвоено значение.</p> <p>Оператор typeof определяет тип null как \'object\'. Это происходит потому, что примитивное значение null обозначает объект, у которого в данный момент не определена структура.</p> <pre>console.log(typeof null)\r\n    // \'object\'</pre> <p>Разница между undefined и null:</p> <ul> <li>undefined обозначает, что переменной не присвоено значение, и эта переменная не объект;</li> <li>null — объект с неопределённой структурой</li> </ul> <p>null задаётся переменной явно и означает, что она является объектом, но структура этого объекта ещё не определена. undefined присваивается переменной (переменная не декларирует объект), когда она была объявлена, но не было определено её начальное значение. Функция может возвращать undefined или null. Всё зависит от того, что мы ожидаем в результате работы функции. Если мы ожидаем объект, но по каким-то причинам функция его вернуть не может, то возвращаем null. Если функция должна вернуть, например, число (главное, не объект), но не может этого сделать, то она возвращает undefined.</p> <pre>console.log(null + null); // 0\r\n    console.log(undefined + undefined); // NaN</pre> <p>По спецификации EcmaScript</p> <ul> <li>null во время сложения приводится к нулю;</li> <li>undefined во время сложения приводится к NaN</li> </ul> <code>console.log(null + []); // "null"</code> <p>JavaScript сначала приводит массив к примитивному значению. Для этого вызывается метод toString(), который вызывает метод join(). Т.к. массив пустой, то join() вернёт пустую строку "". А сложение чего-то со строкой в JS возвращает строку. Поэтому null уже никуда не приводится, а возращается строка "null"</p> </article>','<h1>undefined</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#links">links</a></p> <p><a href="#about">about</a></p> </div> </div> <article class="article"> <div class="anchor" id="links"></div> <h2>links</h2> <p><a href="https://doka.guide/js/undefined/">doka.guide/js/undefined</a></p> </article> <article class="article"> <div class="anchor" id="about"></div> <h2>about</h2> <p>Undefined — это тип, состоящий из одного значения undefined. Оно используется, чтобы обозначить, что переменной не присвоено значение.</p> <p>Если переменная инициализирована с помощью let или var и ей не присвоено значение, то JavaScript автоматически устанавливает значение undefined.</p> <p>Также JavaScript автоматически устанавливает значение undefined в аргумент функции, если значение не передали при вызове.</p> <p>Вручную установленное undefined используют, чтобы обозначить неизвестное значение.</p> <p>Но будьте аккуратны, когда устанавливаете undefined свойствам объектов. Если у объекта person удалить age, то при обращении к несуществующему свойству также вернётся undefined.</p> <p>undefined обозначает, что значение по каким-то причинам ещё не установлено или неизвестно. В этом контексте его использует сам язык JavaScript.</p> </article>','<h1>Array</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#links">links</a></p> <p><a href="#array">array</a></p> <p><a href="#methods">Методы массивов</a></p> </div> </div> <article class="article"> <div class="anchor" id="links"></div> <h2>links</h2> <p><a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array">developer.mozilla.org/Array</a></p> <p><a href="https://learn.javascript.ru/array">learn.javascript.ru/array</a></p> <p><a href="https://doka.guide/js/arrays/">doka.guide/js/arrays</a></p> <p><a href="https://jsexpert.net/handbook/javascript/array/">jsexpert.net/handbook/javascript/array</a></p> <p><a href="https://metanit.com/web/javascript/5.3.php">metanit.com</a></p> </article> <article class="article"> <div class="anchor" id="array"></div> <h2>Массив (тип данных Object) в Javascript</h2> </article> <article class="article"> <h3>8. Свойства массивов</h3> <p>Массивы имеют только одно свойство - length.</p> <table> <tr> <td>1</td> <th>constructor</th> <td>Возвращает функцию конструктор массива <strong>function Array(){ [native code] }</strong></td> </tr> <tr> <td>2</td> <th>length</th> <td>Задает или возвращает количество элементов в массиве.</td> </tr> <tr> <td>3</td> <th>prototype</th> <td>Возвращает ссылку на объект Array.prototype. Позволяет добавлять новые свойства и методы к объекту Array().</td> </tr> </table> <h3>Свойство length</h3> <p>Значение данного свойства 32-битное безнаковое целое число, которое всегда численно больше чем самый наибольший индекс в массиве.</p> <code>[\'one\', \'two\', 100].length <br>3</code> </article> <article class="article"> <div class="anchor" id="methods"></div> <h3>9. Методы массивов</h3> <p>Методы строк не изменяют исхдную строку.</p> <p>Методы объекта String, записанные в его прототипе String.prototype.</p> <table> <tr> <td>1</td> <th><a href="#array-at">at()</a></th> <td></td> </tr> <tr> <td>2</td> <th><a href="#array-concat">concat()</a></th> <td>Возвращает новый массив, содержащий значения объединенных массивов</td> </tr> <tr> <td>3</td> <th><a href="#array-copy-within">copyWithin()</a></th> <td></td> </tr> <tr> <td>4</td> <th><a href="#array-entries">entries()</a></th> <td></td> </tr> <tr> <td>5</td> <th><a href="#array-every">every()</a></th> <td></td> </tr> <tr> <td>6</td> <th><a href="#array-fill">fill()</a></th> <td></td> </tr> <tr> <td>7</td> <th><a href="#array-filter">filter()</a></th> <td></td> </tr> <tr> <td>8</td> <th><a href="#array-find">find()</a></th> <td></td> </tr> <tr> <td>9</td> <th><a href="#array-find-index">findIndex()</a></th> <td></td> </tr> <tr> <td>10</td> <th><a href="#array-find-last">findLast()</a></th> <td></td> </tr> <tr> <td>11</td> <th><a href="#array-find-last-index">findLastIndex()</a></th> <td></td> </tr> <tr> <td>12</td> <th><a href="#array-flat">flat()</a></th> <td></td> </tr> <tr> <td>13</td> <th><a href="#array-flat-map">flatMap()</a></th> <td></td> </tr> <tr> <td>14</td> <th><a href="#array-for-each">forEach()</a></th> <td></td> </tr> <tr> <td>15</td> <th><a href="#array-from">Array.from()</a></th> <td></td> </tr> <tr> <td>16</td> <th><a href="#array-from-async">Array.fromAsync()</a></th> <td></td> </tr> <tr> <td>17</td> <th><a href="#array-includes">includes()</a></th> <td></td> </tr> <tr> <td>18</td> <th><a href="#array-index-of">indexOf()</a></th> <td></td> </tr> <tr> <td>19</td> <th><a href="#array-is-array">Array.isArray()</a></th> <td></td> </tr> <tr> <td>20</td> <th><a href="#array-join">join()</a></th> <td></td> </tr> <tr> <td>21</td> <th><a href="#array-keys">keys()</a></th> <td></td> </tr> <tr> <td>22</td> <th><a href="#array-last-index-of">lastIndexOf()</a></th> <td></td> </tr> <tr> <td>23</td> <th><a href="#array-map">map()</a></th> <td></td> </tr> <tr> <td>24</td> <th><a href="#array-of">Array.of()</a></th> <td></td> </tr> <tr> <td>25</td> <th><a href="#array-pop">pop()</a></th> <td></td> </tr> <tr> <td>26</td> <th><a href="#array-push">push()</a></th> <td></td> </tr> <tr> <td>27</td> <th><a href="#array-reduce">reduce()</a></th> <td></td> </tr> <tr> <td>28</td> <th><a href="#array-reduce-right">reduceRight()</a></th> <td></td> </tr> <tr> <td>29</td> <th><a href="#array-reverse">reverse()</a></th> <td></td> </tr> <tr> <td>30</td> <th><a href="#array-shift">shift()</a></th> <td></td> </tr> <tr> <td>31</td> <th><a href="#array-slice">slice()</a></th> <td></td> </tr> <tr> <td>32</td> <th><a href="#array-some">some()</a></th> <td></td> </tr> <tr> <td>33</td> <th><a href="#array-sort">sort()</a></th> <td></td> </tr> <tr> <td>34</td> <th><a href="#array-splice">splice()</a></th> <td></td> </tr> <tr> <td>35</td> <th><a href="#array-to-locale-string">toLocaleString()</a></th> <td></td> </tr> <tr> <td>36</td> <th><a href="#array-to-reversed">toReversed()</a></th> <td></td> </tr> <tr> <td>37</td> <th><a href="#array-to-sorted">toSorted()</a></th> <td></td> </tr> <tr> <td>38</td> <th><a href="#array-to-spliced">toSpliced()</a></th> <td></td> </tr> <tr> <td>39</td> <th><a href="#array-to-string">toString()</a></th> <td></td> </tr> <tr> <td>40</td> <th><a href="#array-unshift">unshift()</a></th> <td></td> </tr> <tr> <td>41</td> <th><a href="#array-values">values()</a></th> <td></td> </tr> <tr> <td>42</td> <th><a href="#array-with">with()</a></th> <td></td> </tr> </table> </article> <article class="article"> <div class="anchor" id="array-at"></div> <h3>Метод At()</h3> </article> <article class="article"> <div class="anchor" id="array-concat"></div> <h3>Метод concat()</h3> <p><em>(<strong>Не изменяет</strong> исходный массив)</em></p> <p><em>(Возвращает <strong>новый массив</strong>)</em></p> <p><em>(Появился в <strong>es1</strong>)</em></p> <p>Метод concat() вызывается на массиве, в качестве аргументов может принимать любые значения. Возвращает новый массив, в которы кладет сперва исходный массив и добавляет после него значения, переданные в аргументах в порядке их появления. При этом у массивов делается поверхностная копия, а объекты передаются по ссылке.</p> <pre>let a = [1, 2];\r\nlet b = [\'a\', \'b\'];\r\na.concat(10, 20, \'aa\', \'bb\', b); // [1, 2, 10, 20, \'aa\', \'bb\', \'a\', \'b\']\r\nlet c = [1,2,[3,4],[5,6],7,8];\r\na.concat(c); // [1, 2, 1, 2, [3,4], [5,6], 7, 8]\r\na.concat(null,true,undefined, {ac:\'dc\'}); // [1, 2, null, true, undefined, {ac:\'dc\'}]</pre> </article> <article class="article"> <div class="anchor" id="array-copy-within"></div> <h3>Метод copyWithin()</h3> <p><em>(<strong>Изменяет</strong> исходный массив)</em></p> <p><em>(Возвращает <strong>измененный массив</strong>)</em></p> <p><em>(Появился в <strong>es6</strong>)</em></p> <p>Метод copyWithin() копирует элементы внутри массива (начиная с позиции, которая передается вторым необязательным аргументом и до позиции, которая передается третьим необязательным аргументом), в позицию, указанную первым аргументом.</p> <code>array.copyWithin(target, start, end)</code> <p>target\tОбязательный. Позиция индекса, куда копировать элементы.</p> <p>start\tНеобязательный. Позиция индекса для начала копирования элементов (по умолчанию 0)</p> <p>end\tНеобязательный. Позиция последнего индекса для копирования элементов (по умолчанию — array.length)</p> <code>[1, 2, 3, 4, 5].copyWithin(0, 3); // [4, 5, 3, 4, 5]</code> <code>[1, 2, 3, 4, 5].copyWithin(0, 3, 4); // [4, 2, 3, 4, 5]</code> <code>[1, 2, 3, 4, 5].copyWithin(0, -2, -1); // [4, 2, 3, 4, 5]</code> </article> <article class="article"> <div class="anchor" id="array-entries"></div> <h3>Метод entries()</h3> <p><em>(Появился в <strong>es6</strong>)</em></p> <p>Метод entries() возвращает новый объект итератора массива Array Iterator, содержащий пары ключ / значение для каждого индекса в массиве.</p> <pre>let array = ["one", "two", "three"];\r\nlet iterator = array.entries(); \r\nfor (let item of iterator) { \r\n  console.log( item ); \r\n}\r\n// [0, "one"]\r\n// [1, "two"]\r\n// [2, "three"]</pre> </article> <article class="article"> <div class="anchor" id="array-every"></div> <h3>Метод every()</h3> </article> <article class="article"> <div class="anchor" id="array-fill"></div> <h3>Метод fill()</h3> </article> <article class="article"> <div class="anchor" id="array-filter"></div> <h3>Метод filter()</h3> </article> <article class="article"> <div class="anchor" id="array-find"></div> <h3>Метод find()</h3> </article> <article class="article"> <div class="anchor" id="array-find-index"></div> <h3>Метод findIndex()</h3> </article> <article class="article"> <div class="anchor" id="array-find-last"></div> <h3>Метод findLast()</h3> </article> <article class="article"> <div class="anchor" id="array-find-last-index"></div> <h3>Метод findLastIndex()</h3> </article> <article class="article"> <div class="anchor" id="array-flat"></div> <h3>Метод flat()</h3> </article> <article class="article"> <div class="anchor" id="array-flat-map"></div> <h3>Метод flatMap()</h3> </article> <article class="article"> <div class="anchor" id="array-for-each"></div> <h3>Метод forEach()</h3> </article> <article class="article"> <div class="anchor" id="array-from"></div> <h3>Метод Array.from()</h3> </article> <article class="article"> <div class="anchor" id="array-from-async"></div> <h3>Метод Array.fromAsync()</h3> </article> <article class="article"> <div class="anchor" id="array-includes"></div> <h3>Метод includes()</h3> </article> <article class="article"> <div class="anchor" id="array-index-of"></div> <h3>Метод indexOf()</h3> </article> <article class="article"> <div class="anchor" id="array-is-array"></div> <h3>Метод Array.isArray()</h3> </article> <article class="article"> <div class="anchor" id="array-join"></div> <h3>Метод join()</h3> </article> <article class="article"> <div class="anchor" id="array-keys"></div> <h3>Метод keys()</h3> </article> <article class="article"> <div class="anchor" id="array-last-index-of"></div> <h3>Метод lastIndexOf()</h3> </article> <article class="article"> <div class="anchor" id="array-map"></div> <h3>Метод map()</h3> </article> <article class="article"> <div class="anchor" id="array-of"></div> <h3>Метод Array.of()</h3> <p>Array.of() — статический метод, который создаёт массив из переданных ему аргументов. Array.of() и конструктор массива Array() работают практически одинаково. Разница возникает, если передавать этим функциям один аргумент, причём этот аргумент должен быть числом. В этом случае для конструктора Array() аргумент будет считаться длинной массива, а для Array.of() — первым элементом массива.</p> <code>Array.of(\'🐱\', 0b001, document.createElement(\'div\')); // [\'🐱\', 1, div] <br>Array.of(3); // [3] <br>Array(2) // [empty × 2] — массив из двух пустых элементов</code> <code>// Для строк всё работает одинаково <br>Array.of(\'котик\') // [\'котик\'] <br>Array(\'котик\') // [\'котик\']</code> <code>Array.of(10.5) // [10.5] <br>Array(10.5) // RangeError: Invalid array length</code> </article> <article class="article"> <div class="anchor" id="array-pop"></div> <h3>Метод pop()</h3> </article> <article class="article"> <div class="anchor" id="array-push"></div> <h3>Метод push()</h3> </article> <article class="article"> <div class="anchor" id="array-reduce"></div> <h3>Метод reduce()</h3> </article> <article class="article"> <div class="anchor" id="array-reduce-right"></div> <h3>Метод reduceRight()</h3> </article> <article class="article"> <div class="anchor" id="array-reverse"></div> <h3>Метод reverse()</h3> </article> <article class="article"> <div class="anchor" id="array-shift"></div> <h3>Метод shift()</h3> </article> <article class="article"> <div class="anchor" id="array-slice"></div> <h3>Метод slice()</h3> </article> <article class="article"> <div class="anchor" id="array-some"></div> <h3>Метод some()</h3> </article> <article class="article"> <div class="anchor" id="array-sort"></div> <h3>Метод sort()</h3> </article> <article class="article"> <div class="anchor" id="array-splice"></div> <h3>Метод splice()</h3> </article> <article class="article"> <div class="anchor" id="array-to-locale-string"></div> <h3>Метод toLocaleString()</h3> </article> <article class="article"> <div class="anchor" id="array-to-reversed"></div> <h3>Метод toReversed()</h3> </article> <article class="article"> <div class="anchor" id="array-to-sorted"></div> <h3>Метод toSorted()</h3> </article> <article class="article"> <div class="anchor" id="array-to-spliced"></div> <h3>Метод toSpliced()</h3> </article> <article class="article"> <div class="anchor" id="array-to-string"></div> <h3>Метод toString()</h3> </article> <article class="article"> <div class="anchor" id="array-unshift"></div> <h3>Метод unshift()</h3> </article> <article class="article"> <div class="anchor" id="array-values"></div> <h3>Метод values()</h3> </article> <article class="article"> <div class="anchor" id="array-with"></div> <h3>Метод with()</h3> </article> ','<h1>Объект Date</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#links">links</a></p> <p><a href="#about">about</a></p> <p><a href="#methods">Методы объекта Date</a></p> </div> </div> <article class="article"> <div class="anchor" id="links"></div> <h2>links</h2> <p><a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Date">developer.mozilla.org</a> Дата</p> <p><a href="https://puzzleweb.ru/javascript/obj_date.php">puzzleweb.ru</a> JavaScript объект Date</p> </article> <article class="article"> <div class="anchor" id="about"></div> <h2>about</h2> <p>Объект Date позволяет работать с датами и временем. Для создания нового объекта Date используется следующий синтаксис:</p> <code>new Date();</code> <code>Thu Feb 29 2024 10:10:28 GMT+0300 (Москва, стандартное время)</code> <p>Даты хранятся в нём как количество миллисекунд, прошедших с полуночи 1 января 1970 г. согласно единому всемирному времени (UTC). Благодаря такому формату с помощью Date можно точно представлять даты, отстоящие от 1 января 1970 г. на 285616 лет.</p> <p>Если конструктор Date вызывается без аргументов, создаётся объект с текущими значениями даты и времени. Для создания объекта Date с определенной датой или временем, необходимо будет передать один из четырех возможных параметров:</p> <ol> <li>миллисекунды: значение должно быть числом миллисекунд с 01.01.1970 <code>new Date(1700000000000); // 17 и одиннадцать нулей</code> <code>Wed Nov 15 2023 01:13:20 GMT+0300 (Москва, стандартное время) {}</code> </li> <li>строка с датой: любая дата в формате поддерживаемом методом parse() <code>new Date("Februar 29, 2024");</code> <code>Thu Feb 29 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> </li> <li>год, месяц, день <code>new Date(2024, 1, 29);</code> <code>Thu Feb 29 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <p>Обратите внимание, что число 4 соответствует маю месяцу. Это значит, что январю соответствует число 0. Аналогичным образом вычисляются и дни, только нулю в этом случае соответствует воскресенье.</p> </li> <li>год, месяц, день, час, минуты, секунды, миллисекунды <p>При работе с объектом Date важно помнить, что вычисления выполняются с использованием единого всемирного времени (UTC), несмотря на то, что ваш компьютер может отображать время в соответствии с вашей временной зоной.</p> </li> </ol> </article> <article class="article"> <div class="anchor" id="methods"></div> <h2>Методы объекта Date</h2> <ol> <li><a href="#getDate">getDate</a></li> <li><a href="#getDay">getDay</a></li> <li><a href="#getFullYear">getFullYear</a></li> <li><a href="#getHours">getHours</a></li> <li><a href="#getMilliseconds">getMilliseconds</a></li> <li><a href="#getMinutes">getMinutes</a></li> <li><a href="getMonth">getMonth</a></li> <li><a href="#getSeconds">getSeconds</a></li> <li><a href="#getTime">getTime</a></li> <li><a href="#getTimezoneOffset">getTimezoneOffset</a></li> <li><a href="#getUTCDate">getUTCDate</a></li> <li><a href="#getUTCDay">getUTCDay</a></li> <li><a href="#getUTCFullYear">getUTCFullYear</a></li> <li><a href="#getUTCHours">getUTCHours</a></li> <li><a href="#getUTCMilliseconds">getUTCMilliseconds</a></li> <li><a href="#getUTCMinutes">getUTCMinutes</a></li> <li><a href="#getUTCMonth">getUTCMonth</a></li> <li><a href="#getUTCSeconds">getUTCSeconds</a> <p><a href="#getYear">getYear</a> удален</p> </li> <li><a href="#dateNow">Date.now</a></li> <li><a href="#dateParse">Date.parse</a></li> <li><a href="#setDate">setDate</a></li> <li><a href="#setFullYear">setFullYear</a></li> <li><a href="#setHours">setHours</a></li> <li><a href="#setMilliseconds">setMilliseconds</a></li> <li><a href="#setMinutes">setMinutes</a></li> <li><a href="#setMonth">setMonth</a></li> <li><a href="#setSeconds">setSeconds</a></li> <li><a href="#setTime">setTime</a></li> <li><a href="#setUTCDate">setUTCDate</a></li> <li><a href="#setUTCFullYear">setUTCFullYear</a></li> <li><a href="#setUTCHours">setUTCHours</a></li> <li><a href="#setUTCMilliseconds">setUTCMilliseconds</a></li> <li><a href="#setUTCMinutes">setUTCMinutes</a></li> <li><a href="#setUTCMonth">setUTCMonth</a></li> <li><a href="#setUTCSeconds">setUTCSeconds</a> <p><a href="#setYear">setYear</a> удален</p> </li> <li><a href="#toDateString">toDateString</a></li> <li><a href="#toISOString">toISOString</a></li> <li><a href="#toJSON">toJSON</a></li> <li><a href="#toLocaleDateString">toLocaleDateString</a></li> <li><a href="#toLocaleTimeString">toLocaleTimeString</a></li> <li><a href="#toLocaleString">toLocaleString</a></li> <li><a href="#toString">toString</a></li> <li><a href="#toTimeString">toTimeString</a></li> <li><a href="#toUTCString">toUTCString</a></li> <li><a href="#dateUTC">Date.UTC</a></li> <li><a href="#valueOf">valueOf</a></li> </ol> </article> <article class="article"> <div class="anchor" id="getDate"></div> <h2>1. getDate()</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает number</strong></p> <p>Возвращает день месяца (от 1 до 31) для указанной даты по местному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.getDate();</code> <code>1</code> </article> <article class="article"> <div class="anchor" id="getDay"></div> <h2>2. getDay()</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает number</strong></p> <p>Возвращает день недели (от 0 до 6, 0 - воскресенье, ... 6 - суббота) для указанной даты по местному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.getDay();</code> <code>1</code> </article> <article class="article"> <div class="anchor" id="getFullYear"></div> <h2>3. getFullYear()</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает number</strong></p> <p>Возвращает год (четыре цифры) для указанной даты по местному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.getFullYear();</code> <code>2024</code> </article> <article class="article"> <div class="anchor" id="getHours"></div> <h2>4. getHours()</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает number</strong></p> <p>Возвращает час (от 0 до 23) для указанной даты по местному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.getHours();</code> <code>0</code> </article> <article class="article"> <div class="anchor" id="getMilliseconds"></div> <h2>5. getMilliseconds()</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает number</strong></p> <p>Возвращает миллисекунды (от 0 до 999) для указанной даты по местному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.getMilliseconds();</code> <code>0</code> </article> <article class="article"> <div class="anchor" id="getMinutes"></div> <h2>6. getMinutes()</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает number</strong></p> <p>Возвращает минуты (от 0 до 59) для указанной даты по местному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.getMinutes();</code> <code>0</code> </article> <article class="article"> <div class="anchor" id="getMonth"></div> <h2>7. getMonth()</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает number</strong></p> <p>Возвращает месяц (от 0 до 11; 0 = январь, 1 = февраль и т.д.) для указанной даты по местному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.getMonth();</code> <code>0</code> </article> <article class="article"> <div class="anchor" id="getSeconds"></div> <h2>8. getSeconds()</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает number</strong></p> <p>Возвращает секунды (от 0 до 59) для указанной даты по местному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.getSeconds();</code> <code>0</code> </article> <article class="article"> <div class="anchor" id="getTime"></div> <h2>9. getTime()</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает number</strong></p> <p>Возвращает количество миллисекунд, прошедших с полуночи 01.01.1970 по всемирному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.getTime();</code> <code>1704056400000</code> </article> <article class="article"> <div class="anchor" id="getTimezoneOffset"></div> <h2>10. getTimezoneOffset()</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает number</strong></p> <p>Возвращает разницу во времени между временем UTC и местным временем, в минутах.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.getTimezoneOffset();</code> <code>-180</code> </article> <article class="article"> <div class="anchor" id="getUTCDate"></div> <h2>11. getUTCDate()</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает number</strong></p> <p>Возвращает день месяца (от 1 до 31) для указанной даты по всемирному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.getUTCDate();</code> <code>31</code> </article> <article class="article"> <div class="anchor" id="getUTCDay"></div> <h2>12. getUTCDay()</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает number</strong></p> <p>Возвращает день недели (от 0 до 6, 0 - воскресенье, ... 6 - суббота) для указанной даты по всемирному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.getUTCDay();</code> <code>0</code> </article> <article class="article"> <div class="anchor" id="getUTCFullYear"></div> <h2>13. getUTCFullYear()</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает number</strong></p> <p>Возвращает год (четыре цифры) для указанной даты по всемирному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.getUTCFullYear();</code> <code>2023</code> </article> <article class="article"> <div class="anchor" id="getUTCHours"></div> <h2>14. getUTCHours()</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает number</strong></p> <p>Возвращает час (от 0 до 23) для указанной даты по всемирному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.getUTCHours();</code> <code>21</code> </article> <article class="article"> <div class="anchor" id="getUTCMilliseconds"></div> <h2>15. getUTCMilliseconds()</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает number</strong></p> <p>Возвращает миллисекунды (от 0 до 999) для указанной даты по всемирному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.getUTCMilliseconds();</code> <code>0</code> </article> <article class="article"> <div class="anchor" id="getUTCMinutes"></div> <h2>16. getUTCMinutes()</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает number</strong></p> <p>Возвращает минуты (от 0 до 59) для указанной даты по всемирному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.getUTCMinutes();</code> <code>0</code> </article> <article class="article"> <div class="anchor" id="getUTCMonth"></div> <h2>17. getUTCMonth()</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает number</strong></p> <p>Возвращает месяц (от 0 до 11) для указанной даты по всемирному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.getUTCMonth();</code> <code>11</code> </article> <article class="article"> <div class="anchor" id="getUTCSeconds"></div> <h2>18. getUTCSeconds()</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает number</strong></p> <p>Возвращает секунды (от 0 до 59) для указанной даты по всемирному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.getUTCSeconds();</code> <code>0</code> </article> <article class="article"> <div class="anchor" id="getYear"></div> <h2>getYear() метод удален из стандарта</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает number</strong></p> <p>Метод getYear() возвращает год (год минус 1900) указанной даты по местному времени. Поскольку метод getYear() не возвращает полный год («проблема 2000 года»), он больше не используется и был заменён методом getFullYear().</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.getYear();</code> <code>124</code> </article> <article class="article"> <div class="anchor" id="dateNow"></div> <h2>19. Date.now()</h2> <p><strong>Не принимает параметры</strong></p> <p><em>(Появился в <strong>es5</strong>)</em></p> <p><strong>Возвращает number</strong></p> <p>Метод Date.now() возвращает количество миллисекунд, прошедших с 1 января 1970 года 00:00:00 по UTC.</p> <code>Date.now();</code> <code>1709378146339</code> </article> <article class="article"> <div class="anchor" id="dateParse"></div> <h2>20. Date.parse()</h2> <p><strong>Принимает строку (string)</strong></p> <p><strong>Возвращает number</strong></p> <p>Анализирует строку даты (например, "21 мая 1992 года") и возвращает количество миллисекунд, прошедших с 1 января 1970 года 00:00:00 по UTC.</p> <code>Date.parse(\'2024 feb 2\');</code> <code>1706821200000</code> </article> <article class="article"> <div class="anchor" id="setDate"></div> <h2>21. setDate()</h2> <p><strong>Принимает целое число (number)</strong>, представляющее номер дня в месяце.</p> <p><strong>Изменяет объект</strong> и возвращает количество миллисекунд от начала эпохи (1 января 1970 00:00:00 UTC) для полученного значения объекта</p> <p><strong>Возвращает number</strong></p> <p>Устанавливает день месяца (от 1 до 31) для указанной даты по местному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.setDate(5);</code> <code>1704402000000</code> <code>date</code> <code>Fri Jan 05 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> </article> <article class="article"> <div class="anchor" id="setFullYear"></div> <h2>22. setFullYear()</h2> <p><strong>Принимает целое число (number)</strong>, представляющее год.</p> <p><strong>Изменяет объект</strong> и возвращает количество миллисекунд от начала эпохи (1 января 1970 00:00:00 UTC) для полученного значения объекта</p> <p><strong>Возвращает number</strong></p> <p>Устанавливает год (четыре цифры) для указанной даты по местному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.setFullYear(2025);</code> <code>1735678800000</code> <code>date</code> <code>Wed Jan 01 2025 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> </article> <article class="article"> <div class="anchor" id="setHours"></div> <h2>23. setHours()</h2> <p><strong>Принимает целое число (number)</strong>, представляющее час.</p> <p><strong>Изменяет объект</strong> и возвращает количество миллисекунд от начала эпохи (1 января 1970 00:00:00 UTC) для полученного значения объекта</p> <p><strong>Возвращает number</strong></p> <p>Устанавливает часы (от 0 до 23) для указанной даты по местному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.setHours(16);</code> <code>1704114000000</code> <code>date</code> <code>Mon Jan 01 2024 16:00:00 GMT+0300 (Москва, стандартное время) {}</code> </article> <article class="article"> <div class="anchor" id="setMilliseconds"></div> <h2>24. setMilliseconds()</h2> <p><strong>Принимает целое число (number)</strong>, представляющее миллисекунды.</p> <p><strong>Изменяет объект</strong> и возвращает количество миллисекунд от начала эпохи (1 января 1970 00:00:00 UTC) для полученного значения объекта</p> <p><strong>Возвращает number</strong></p> <p>Устанавливает миллисекунды (от 0 до 999) для указанной даты по местному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.setMilliseconds(911);</code> <code>1704056400911</code> <code>date</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> </article> <article class="article"> <div class="anchor" id="setMinutes"></div> <h2>25. setMinutes()</h2> <p><strong>Принимает целое число (number)</strong>, представляющее минуты.</p> <p><strong>Изменяет объект</strong> и возвращает количество миллисекунд от начала эпохи (1 января 1970 00:00:00 UTC) для полученного значения объекта</p> <p><strong>Возвращает number</strong></p> <p>Устанавливает минуты (от 0 до 59) для указанной даты по местному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.setMinutes(25);</code> <code>1704057900000</code> <code>date</code> <code>Mon Jan 01 2024 00:25:00 GMT+0300 (Москва, стандартное время) {}</code> </article> <article class="article"> <div class="anchor" id="setMonth"></div> <h2>26. setMonth()</h2> <p><strong>Принимает целое число (number)</strong>, представляющее месяц.</p> <p><strong>Изменяет объект</strong> и возвращает количество миллисекунд от начала эпохи (1 января 1970 00:00:00 UTC) для полученного значения объекта</p> <p><strong>Возвращает number</strong></p> <p>Устанавливает месяц (от 0 до 11) для указанной даты по местному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.setMonth(5);</code> <code>1717189200000</code> <code>date</code> <code>Sat Jun 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> </article> <article class="article"> <div class="anchor" id="setSeconds"></div> <h2>27. setSeconds()</h2> <p><strong>Принимает целое число (number)</strong>, представляющее секунды.</p> <p><strong>Изменяет объект</strong> и возвращает количество миллисекунд от начала эпохи (1 января 1970 00:00:00 UTC) для полученного значения объекта</p> <p><strong>Возвращает number</strong></p> <p>Устанавливает секунды (от 0 до 59) для указанной даты по местному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.setSeconds(35);</code> <code>1704056435000</code> <code>date</code> <code>Mon Jan 01 2024 00:00:35 GMT+0300 (Москва, стандартное время) {}</code> </article> <article class="article"> <div class="anchor" id="setTime"></div> <h2>28. setTime()</h2> <p><strong>Принимает целое число (number)</strong>, представляющее количество миллисекунд, прошедших с 1 января 1970 00:00:00 по UTC.</p> <p><strong>Изменяет объект</strong> и возвращает количество миллисекунд от начала эпохи (1 января 1970 00:00:00 UTC) для полученного значения объекта</p> <p><strong>Возвращает number</strong></p> <p>Устанавливает дату в миллисекундах (от 0 до 999) после (или до) 01.01.1970.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.setTime(1707117935700);</code> <code>1707117935700</code> <code>date</code> <code>Mon Feb 05 2024 10:25:35 GMT+0300 (Москва, стандартное время) {}</code> </article> <article class="article"> <div class="anchor" id="setUTCDate"></div> <h2>29. setUTCDate()</h2> <p><strong>Принимает целое число (number)</strong>, представляющее номер дня месяца.</p> <p><strong>Изменяет объект</strong> и возвращает количество миллисекунд от начала эпохи (1 января 1970 00:00:00 UTC) для полученного значения объекта</p> <p><strong>Возвращает number</strong></p> <p>Устанавливает день месяца (от 0 до 31) по всемирному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.setUTCDate(1);</code> <code>1701464400000</code> <code>date</code> <code>Sat Dec 02 2023 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> </article> <article class="article"> <div class="anchor" id="setUTCFullYear"></div> <h2>30. setUTCFullYear()</h2> <p><strong>Принимает целое число (number)</strong>, представляющее год.</p> <p><strong>Изменяет объект</strong> и возвращает количество миллисекунд от начала эпохи (1 января 1970 00:00:00 UTC) для полученного значения объекта</p> <p><strong>Возвращает number</strong></p> <p>Устанавливает год (четыре цифры) по всемирному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.setUTCFullYear(2025);</code> <code>1767214800000</code> <code>date</code> <code>Thu Jan 01 2026 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> </article> <article class="article"> <div class="anchor" id="setUTCHours"></div> <h2>31. setUTCHours()</h2> <p><strong>Принимает целое число (number)</strong>, представляющее час.</p> <p><strong>Изменяет объект</strong> и возвращает количество миллисекунд от начала эпохи (1 января 1970 00:00:00 UTC) для полученного значения объекта</p> <p><strong>Возвращает number</strong></p> <p>Устанавливает час (от 0 до 23) для указанной даты по всемирному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.setUTCHours(23);</code> <code>1704063600000</code> <code>date</code> <code>Mon Jan 01 2024 02:00:00 GMT+0300 (Москва, стандартное время) {}</code> </article> <article class="article"> <div class="anchor" id="setUTCMilliseconds"></div> <h2>32. setUTCMilliseconds()</h2> <p><strong>Принимает целое число (number)</strong>, представляющее миллисекунды.</p> <p><strong>Изменяет объект</strong> и возвращает количество миллисекунд от начала эпохи (1 января 1970 00:00:00 UTC) для полученного значения объекта</p> <p><strong>Возвращает number</strong></p> <p>Устанавливает миллисекунды (от 0 до 999) для указанной даты по всемирному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.setUTCMilliseconds(555);</code> <code>1704056400555</code> <code>date</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> </article> <article class="article"> <div class="anchor" id="setUTCMinutes"></div> <h2>33. setUTCMinutes()</h2> <p><strong>Принимает целое число (number)</strong>, представляющее минуты.</p> <p><strong>Изменяет объект</strong> и возвращает количество миллисекунд от начала эпохи (1 января 1970 00:00:00 UTC) для полученного значения объекта</p> <p><strong>Возвращает number</strong></p> <p>Устанавливает минуты (от 0 до 59) для указанной даты по всемирному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.setUTCMinutes(4);</code> <code>1704056640000</code> <code>date</code> <code>Mon Jan 01 2024 00:04:00 GMT+0300 (Москва, стандартное время) {}</code> </article> <article class="article"> <div class="anchor" id="setUTCMonth"></div> <h2>34. setUTCMonth()</h2> <p><strong>Принимает целое число (number)</strong>, представляющее месяц.</p> <p><strong>Изменяет объект</strong> и возвращает количество миллисекунд от начала эпохи (1 января 1970 00:00:00 UTC) для полученного значения объекта</p> <p><strong>Возвращает number</strong></p> <p>Устанавливает месяц (от 0 до 11) для указанной даты по всемирному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.setUTCMonth(10);</code> <code>1701464400000</code> <code>date</code> <code>Sat Dec 02 2023 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> </article> <article class="article"> <div class="anchor" id="setUTCSeconds"></div> <h2>35. setUTCSeconds()</h2> <p><strong>Принимает целое число (number)</strong>, представляющее секунды.</p> <p><strong>Изменяет объект</strong> и возвращает количество миллисекунд от начала эпохи (1 января 1970 00:00:00 UTC) для полученного значения объекта</p> <p><strong>Возвращает number</strong></p> <p>Устанавливает секунды (от 0 до 59) для указанной даты по всемирному времени.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.setUTCSeconds(15);</code> <code>1704056415000</code> <code>date</code> <code>Mon Jan 01 2024 00:00:15 GMT+0300 (Москва, стандартное время) {}</code> </article> <article class="article"> <div class="anchor" id="setYear"></div> <h2>setYear()</h2> <p><strong>Принимает целое число (number)</strong>, представляющее год.</p> <p><strong>Изменяет объект</strong> и возвращает количество миллисекунд от начала эпохи (1 января 1970 00:00:00 UTC) для полученного значения объекта</p> <p><strong>Возвращает number</strong></p> <p>Устанавливает год (четыре цифры) для указанной даты по местному времени. Поскольку метод setYear() не устанавливает полный год («проблема 2000 года»), он больше не используется и был заменён методом setFullYear().</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.setYear(15);</code> <code>-1735698617000</code> <code>date</code> <code>Fri Jan 01 1915 00:00:00 GMT+0230 (Москва, стандартное время) {}</code> </article> <article class="article"> <div class="anchor" id="toDateString"></div> <h2>36. toDateString()</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает строку (string)</strong> в виде человеко-читаемой строки на американском английском.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.toDateString();</code> <code>\'Mon Jan 01 2024\'</code> </article> <article class="article"> <div class="anchor" id="toISOString"></div> <h2>37. toISOString()</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает строку (string)</strong> в формате ISO 8601. Часовой пояс всегда равен UTC, что обозначено суффиксом "Z".</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.toISOString();</code> <code>\'2023-12-31T21:00:00.000Z\'</code> </article> <article class="article"> <div class="anchor" id="toJSON"></div> <h2>38. toJSON()</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает строку (string)</strong></p> <p>Возвращает дату в виде строки, отформатированную как дата JSON (при помощи метода toISOString()). Этот метод, как правило, предназначен для сериализации объектов Date в JSON</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.toJSON();</code> <code>\'2023-12-31T21:00:00.000Z\'</code> </article> <article class="article"> <div class="anchor" id="toLocaleDateString"></div> <h2>39. toLocaleDateString()</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает строку (string)</strong></p> <p>Возвращает дату (год, месяц, число) в виде строки, с языкозависимым представлением даты на основе параметров системы.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.toLocaleDateString();</code> <code>\'01.01.2024\'</code> </article> <article class="article"> <div class="anchor" id="toLocaleTimeString"></div> <h2>40. toLocaleTimeString()</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает строку (string)</strong></p> <p>Возвращает время (часы, минуты, секунды) в виде строки, с языкозависимым представлением на основе параметров системы.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.toLocaleTimeString();</code> <code>\'00:00:00\'</code> </article> <article class="article"> <div class="anchor" id="toLocaleString"></div> <h2>41. toLocaleString()</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает строку (string)</strong></p> <p>Возвращает дату (год, месяц, число и часы, минуты, секунды) в виде строки, с языкозависимым представлением даты на основе параметров системы.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.toLocaleString();</code> <code>\'01.01.2024, 00:00:00\'</code> </article> <article class="article"> <div class="anchor" id="toString"></div> <h2>42. toString()</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает строку (string)</strong></p> <p>Возвращает строку, представляющую указанный объект Date.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.toString();</code> <code>\'Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время)\'</code> </article> <article class="article"> <div class="anchor" id="toTimeString"></div> <h2>43. toTimeString()</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает строку (string)</strong></p> <p>Возвращает часть даты в виде строки. То же что и toString(), толко без года, месяча, числа.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.toTimeString();</code> <code>\'00:00:00 GMT+0300 (Москва, стандартное время)\'</code> </article> <article class="article"> <div class="anchor" id="toUTCString"></div> <h2>44. toUTCString()</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает строку (string)</strong></p> <p>Преобразует дату в строку, используя часовой пояс UTC.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.toUTCString();</code> <code>\'Sun, 31 Dec 2023 21:00:00 GMT\'</code> </article> <article class="article"> <div class="anchor" id="dateUTC"></div> <h2>45. Date.UTC()</h2> <p><strong>Принимает параметры в виде целых чисел (number)</strong> Date.UTC(year[, month[, day[, hour[, minute[, second[, millisecond]]]]]])</p> <p><strong>Возвращает number</strong></p> <p><strong>Создает объект</strong> и возвращает количество миллисекунд от начала эпохи (1 января 1970 00:00:00 UTC) для полученного значения объекта</p> <code>Date.UTC(2024, 11, 31, 23, 59, 59, 999);</code> <code>1735689599999</code> </article> <article class="article"> <div class="anchor" id="valueOf"></div> <h2>46. valueOf()</h2> <p><strong>Не принимает параметры</strong></p> <p><strong>Не изменяет объект</strong></p> <p><strong>Возвращает number</strong></p> <p>Возвращает примитивное значение объекта Date.</p> <code>let date = new Date(2024, 0, 1);</code> <code>Mon Jan 01 2024 00:00:00 GMT+0300 (Москва, стандартное время) {}</code> <code>date.valueOf();</code> <code>1704056400000</code> </article> ','<h1>History API (объект window.history)</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#links">links</a></p> <p><a href="#about">about</a></p> <p><a href="#properties">Свойства window.history</a></p> <p><a href="#methods">Методы window.history</a></p> </div> </div> <article class="article"> <div class="anchor" id="links"></div> <h2>links</h2> <p><a href="https://doka.guide/js/window-history/">doka.guide/js/window-history</a> window.history</p> <h3>habr</h3> <p><a href="https://habr.com/ru/articles/123106/">habr.com/ru/articles/123106</a> Введение в HTML5 History API (2011.06.30)</p> </article> <article class="article"> <div class="anchor" id="about"></div> <h2>about</h2> <p>History API позволяет работать с историей браузера в пределах одной сессии. Браузер создаёт новую сессию, когда пользователь открывает новую вкладку или новое окно браузера.</p> <p>С помощью History API можно переходить по истории вперёд, назад и управлять содержимым истории. Доступ к API осуществляется с помощью объекта window.history.</p> </article> <article class="article"> <div class="anchor" id="properties"></div> <h2>Свойства window.history</h2> <ol> <li> <h3>window.history.length</h3> <p>Количество записей в текущей сессии истории</p> </li> <li> <h3>window.history.state</h3> <p>Возвращает текущий объект истории</p> </li> </ol> </article> <article class="article"> <div class="anchor" id="methods"></div> <h2>Методы window.history</h2> <ol> <li> <h3>window.history.back()</h3> <p><strong>back()</strong> перемещает пользователя по истории на страницу назад. Метод, идентичный вызову go(-1)</p> </li> <li> <h3>window.history.forward()</h3> <p><strong>forward()</strong> перемещает пользователя по истории на страницу вперёд. Метод, идентичный вызову go(1)</p> </li> <li> <h3>window.history.go(n)</h3> <p><strong>go()</strong> универсальный метод для перемещения по истории вперёд или назад. Метод, позволяющий гулять по истории. В качестве аргумента передается смещение, относительно текущей позиции. Если передан 0, то будет обновлена текущая страница. Если индекс выходит за пределы истории, то ничего не произойдет.</p> </li> <li> <h3>window.history.pushState(data, title [, url])</h3> <p><strong>pushState()</strong> добавляет новую запись в истории сессии. Добавляет элемент истории.</p> </li> <li> <h3>window.history.replaceState(data, title [, url])</h3> <p><strong>replaceState()</strong> изменяет текущую запись в истории сессии. Обновляет текущий элемент истории</p> </li> </ol> </article> ','<h1>Location (объект window.location)</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#links">links</a></p> <p><a href="#about">about</a></p> <p><a href="#properties">Свойства windows.location</a></p> <p><a href="#methods">Методы windows.location</a></p> </div> </div> <article class="article"> <div class="anchor" id="links"></div> <h2>links</h2> <p><a href="https://doka.guide/js/window-location/">doka.guide/js/window-location</a> window.location</p> </article> <article class="article"> <div class="anchor" id="about"></div> <h2>about</h2> <p>location — это объект хранящийся в window, который позволяет получать информацию о текущем адресе страницы и менять его с помощью функций или обновления полей объекта.</p> <p>Для навигации по сайту мы используем адреса и параметры страницы. window.location содержит набор свойств и методов, чтобы удобно получать адрес и управлять им.</p> </article> <article class="article"> <div class="anchor" id="properties"></div> <h2>Свойства windows.location</h2> <ol> <li> <h3>window.location.href</h3> <p>href – полное представление адреса. Можно сказать, что это зеркало того, что находится в адресной строке браузера в данный момент. Если записать значение в это свойство, то произойдёт обновление адреса и редирект на новый адрес. Остальные свойства — это кусочки location.href. Они нужны, чтобы удобно получать каждый из них отдельно, а не вытаскивать их руками из полной строки адреса.</p> <code>window.location.href = \'https//example.com:3000/profile/edit?key=1&key=2#user-info\'</code> </li> <li> <h3>window.location.protocol</h3> <p>protocol содержит текущий протокол по которому открыта страница. Чаще всего там будет https и http.</p> <code>window.location.protocol // https</code> </li> <li> <h3>window.location.host</h3> <p>host содержит значение хоста из ссылки. Хост включает в себя название текущего домена и порта.</p> <code>window.location.host // example.com:3000</code> </li> <li> <h3>window.location.hostname</h3> <p>hostname — частичка с доменом из свойства host, не включает в себя порт.</p> <code>window.location.hostname // example.com</code> </li> <li> <h3>window.location.port</h3> <p>port — вторая составляющая значения host, содержит только номер порта. Если порт не указан в явном виде, то значением свойства будет пустая строка \'\'.</p> <code>window.location.port // 3000</code> </li> <li> <h3>window.location.origin</h3> <p>origin включает в себя путь, начиная с protocol и заканчивая port.</p> <code>window.location.origin // https//example.com:3000</code> </li> <li> <h3>window.location.pathname</h3> <p>pathname – репрезентация текущего пути на сайте. Если текущий урл не содержит путь, то значением будет корневой путь "/".</p> <code>window.location.pathname // profile/edit/</code> </li> <li> <h3>window.location.search</h3> <p>search содержит параметры в формате ключ=значение разделённые &. Если параметров нет, то значением будет пустая строка.</p> <code>window.location.search // key=1&key=2</code> </li> <li> <h3>window.location.hash</h3> <p>hash — якорная ссылка включая символ #. Она находится в самом конце пути и отвечает за навигацию между размеченными на странице элементами с помощью установки атрибута id на тегах. Эта часть URL не передаётся на сервер. Если параметров нет, то значением будет пустая строка.</p> <code>window.location.hash // user-info</code> </li> </ol> </article> <article class="article"> <div class="anchor" id="methods"></div> <h2>Методы windows.location</h2> <ol> <li> <h3>window.location.assign(url)</h3> <p><strong>assign(url)</strong> – метод вызывает переход на страницу, переданную в аргументах. После перехода на страницу пользователь может вернуться на страницу, с которой произошёл переход, с помощью браузерной кнопки назад.</p> </li> <li> <h3>window.location.replace(url)</h3> <p><strong>replace(url)</strong> аналогичен методу assign(), но адрес страницы с которой был вызван этот метод не будет сохранён в истории браузера. При попытке вернуться назад пользователь будет отправлен на страницу предшествующую той, с которой произошёл переход.</p> </li> <li> <h3>window.location.reload()</h3> <p><strong>reload()</strong> перезагружает текущую страницу.</p> </li> <li> <h3>window.location.toString()</h3> <p><strong>toString()</strong> приводит адрес страницы к строке. Возвращает то же самое значение, что и location.href.</p> </li> </ol> </article> ','<h1>Объект Math</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#links">links</a></p> <p><a href="#about">about</a></p> <p><a href="#const">Константы Math</a></p> <p><a href="#methods">Методы Math</a></p> </div> </div> <article class="article"> <div class="anchor" id="links"></div> <h2>links</h2> <p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math">developer.mozilla.org</a> Math</p> <p><a href="https://metanit.com/web/javascript/5.2.php">metanit.com</a> Объект Math. Математические операции (2023-10-26)</p> <p><a href="https://doka.guide/js/math/">doka.guide/js/math</a> Объект Math</p> <h3>habr</h3> <p><a href="https://habr.com/ru/articles/312880/">habr.com/ru/articles/312880</a> Математика в JavaScript (2016-11-11)</p> </article> <article class="article"> <div class="anchor" id="about"></div> <h2>about</h2> <p>Объект Math предоставляет ряд математических констант и функций, которые можно использовать при вычислениях. Обычно используется для генерации случайных чисел или округления значений.</p> </article> <article class="article"> <div class="anchor" id="const"></div> <h2>Константы</h2> <ul> <li><strong>Math.PI</strong> (число PI): 3.141592653589793</li> <li><strong>Math.SQRT2</strong> (квадратный корень из двух): 1.4142135623730951</li> <li><strong>Math.SQRT1_2</strong> (половина от квадратного корня из двух): 0.7071067811865476</li> <li><strong>Math.E</strong> (число e или число Эйлера): 2.718281828459045</li> <li><strong>Math.LN2</strong> (натуральный логарифм числа 2): 0.6931471805599453</li> <li><strong>Math.LN10</strong> (натуральный логарифм числа 10): 2.302585092994046</li> <li><strong>Math.LOG2E</strong> (двоичный логарифм числа e): 1.4426950408889634</li> <li><strong>Math.LOG10E</strong> (десятичный логарифм числа e): 0.4342944819032518</li> </ul> </article> <article class="article"> <div class="anchor" id="methods"></div> <h2>Методы</h2> <ol> <li><strong>Math.abs()</strong></li> <li><strong>Math.acos()</strong></li> <li><strong>Math.acosh()</strong></li> <li><strong>Math.asin()</strong></li> <li><strong>Math.asinh()</strong></li> <li><strong>Math.atan()</strong></li> <li><strong>Math.atan2()</strong></li> <li><strong>Math.atanh()</strong></li> <li><strong>Math.cbrt()</strong></li> <li><strong>Math.ceil()</strong></li> <li><strong>Math.clz32()</strong></li> <li><strong>Math.cos()</strong></li> <li><strong>Math.cosh()</strong></li> <li><strong>Math.exp()</strong></li> <li><strong>Math.expm1()</strong></li> <li><strong>Math.floor()</strong></li> <li><strong>Math.fround()</strong></li> <li><strong>Math.hypot()</strong></li> <li><strong>Math.imul()</strong></li> <li><strong>Math.log()</strong></li> <li><strong>Math.log10()</strong></li> <li><strong>Math.log1p()</strong></li> <li><strong>Math.log2()</strong></li> <li><strong>Math.max()</strong></li> <li><strong>Math.min()</strong></li> <li><strong>Math.pow()</strong></li> <li><strong>Math.random()</strong></li> <li><strong>Math.round()</strong></li> <li><strong>Math.sign()</strong></li> <li><strong>Math.sin()</strong></li> <li><strong>Math.sinh()</strong></li> <li><strong>Math.sqrt()</strong></li> <li><strong>Math.tan()</strong></li> <li><strong>Math.tanh()</strong></li> <li><strong>Math.trunc()</strong></li> </ol> </article> ','<h1>Промисы</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#links">links</a></p> <p><a href="#about">about</a></p> <p><a href="#task1">Базовые задачи на Promise в JavaScript</a></p> <p><a href="#task1-1">Задачи на .then Задача 1. Случаи, когда .then возвращает или не возвращает значение</a></p> <p><a href="#task1-2">Задачи на .then Задача 2. Второй аргумент .then</a></p> <p><a href="#task1-3">Задачи на .then Задача 3. null в .then</a></p> <p><a href="#task1-4">Задачи на .catch Задача 4. Ошибка из Promise.reject</a></p> <p><a href="#task1-5">Задачи на .catch Задача 5. Ошибка из Promise.reject в .catch</a></p> <p><a href="#task1-6">Задачи на .catch Задача 6. Ошибка throw new Error</a></p> <p><a href="#task1-7">Задачи на .catch Задача 7. Необработанная ошибка в Promise</a></p> <p><a href="#task1-8">Задачи на .catch Задача 8. null в .catch</a></p> <p><a href="#task1-9">Задачи на .finally Задача 9</a></p> <p><a href="#task1-10">Задачи на несколько Promise Задача 10</a></p> <p><a href="#task1-11">Задача на бесконечные микротаски Задача 11</a></p> <p><a href="#task2">10 задач с JavaScript Promise для подготовки к собеседованиям</a></p> <p><a href="#task2-1">Задача №1: Конструктор Promise</a></p> <p><a href="#task2-2">Задача №2: .then()</a></p> <p><a href="#task2-3">Задача №3: resolve()</a></p> <p><a href="#task2-4">Задача №4: resolve() не вызывается</a></p> <p><a href="#task2-5">Задача №5: Нечто, сбивающее с толку</a></p> <p><a href="#task2-6">Задача №6: с Fulfilling Promise</a></p> <p><a href="#task2-7">Задача №7: setTimeout vs Promise</a></p> <p><a href="#task2-8">Задача №8: Микрозадачи смешиваются с макрозадачами</a></p> <p><a href="#task2-9">Задача №9: приоритезировать микрозадачи и макрозадачи</a></p> <p><a href="#task2-10">Задача №10: типичный вопрос с собеседования</a></p> </div> </div> <article class="article"> <div class="anchor" id="links"></div> <h2>links</h2> <p><a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise">developer.mozilla.org</a> Promise</p> <p><a href="https://learn.javascript.ru/promise">learn.javascript.ru/promise</a> Promise</p> <p><a href="https://doka.guide/js/promise/">doka.guide/js/promise/</a> Promise</p> <h3>Ссылки на задачи по Промисам</h3> <p><a href="https://habr.com/ru/articles/582914/">habr.com/ru/articles/582914</a> <br>Базовые задачи на Promise в JavaScript (2021.10.12)</p> <p><a href="https://habr.com/ru/companies/otus/articles/686670/">habr.com/ru/companies/otus/articles/686670</a> <br>10 задач с JavaScript Promise для подготовки к собеседованиям (2022.09.06 Otus)</p> </article> <article class="article"> <div class="anchor" id="about"></div> <h2>about</h2> <p>Промис (Promise) — специальный объект JavaScript, который используется для написания и обработки асинхронного кода.</p> <p>Асинхронные функции возвращают объект Promise в качестве значения. Внутри промиса хранится результат вычисления, которое может быть уже выполнено или выполнится в будущем.</p> <p>Промис может находиться в одном из трёх состояний:</p> <ul> <li>pending — стартовое состояние, операция стартовала;</li> <li>fulfilled — получен результат;</li> <li>rejected — ошибка.</li> </ul> <p>Поменять состояние можно только один раз: перейти из pending либо в fulfilled, либо в rejected</p> <p>У промиса есть методы then() и catch(), которые позволяют использовать результат работы промиса.</p> <h3>Как пишется</h3> <p>Промис создаётся с помощью конструктора.</p> <p>В конструктор передаётся функция-исполнитель асинхронной операции (англ. executor). Она вызывается сразу после создания промиса. Задача этой функции — выполнить асинхронную операцию и перевести состояние промиса в fulfilled (успех) или rejected (ошибка).</p> <p>Изменить состояние промиса можно, вызвав колбэки, переданные аргументами в функцию:</p> <pre>const promise = new Promise(function (resolve, reject) {\r\n    const data = getData() // делаем асинхронную операцию: запрос в БД, API, etc.\r\n    resolve(data) // переводим промис в состояние fulfilled. Результатом выполнения будет объект data\r\n  })\r\n  \r\n  const errorPromise = new Promise(function (resolve, reject) {\r\n    reject(new Error(\'ошибка\')) // переводим промис в состояние rejected. Результатом выполнения будет объект Error\r\n  })\r\n  </pre> <ul> <li>первый параметр (в примере кода назван resolve) — колбэк для перевода промиса в состояние fulfilled, при его вызове аргументом передаётся результат операции;</li> <li>второй параметр (в примере кода назван reject) — колбэк для перевода промиса в состояние rejected, при его вызове аргументом передаётся информация об ошибке.</li> </ul> <h3>Как понять</h3> <p>Промис решает задачу выполнения кода, который зависит от результата асинхронной операции.</p> <p>Промис устроен таким образом, что рычаги управления его состоянием остаются у асинхронной функции. После создания, промис находится в состоянии ожидания pending. Когда асинхронная операция завершается, функция переводит промис в состояние успеха fulfilled или ошибки rejected.</p> <p>С помощью методов then(), catch() и finally() мы можем реагировать на изменение состояния промиса и использовать результат его выполнения.</p> <h3>Методы</h3> <p>Существует три метода, которые позволяют работать с результатом выполнения вычисления внутри промиса:</p> <ul> <li>then()</li> <li>catch()</li> <li>finally()</li> </ul> <h3>then</h3> <p>Метод then() используют, чтобы выполнить код после успешного выполнения асинхронной операции.</p> <p>Например, мы запросили у сервера список фильмов и хотим отобразить их на экране, когда сервер получит результат. В этом случае:</p> <ul> <li>асинхронная операция — запрос данных у сервера;</li> <li>код, который мы хотим выполнить после её завершения, — отрисовка списка.</li> </ul> <p>Метод then() принимает в качестве аргумента две функции-колбэка. Если промис в состоянии fulfilled то выполнится первая функция. Если в состоянии rejected — вторая. Хорошей практикой считается не использовать второй аргумент метода then() и обрабатывать ошибки при помощи метода catch().</p> <pre>fetch(`https://swapi.dev/api/films/${id}/`).then(function (movies) {\r\n    renderList(movies)\r\n  })</pre> <p>В коде выше, асинхронная функция fetch() возвращает промис, к которому применяется метод then. При его выполнении в переменной movies будет ответ сервера.</p> <h3>catch</h3> <p>Метод catch() используют, чтобы выполнить код в случае ошибки при выполнении асинхронной операции.</p> <p>Например, мы запросили у сервера список фильмов и хотим показать экран обрыва соединения, если произошла ошибка. В этом случае:</p> <ul> <li>асинхронная операция — запрос данных у сервера;</li> <li>код, который мы хотим выполнить при ошибке — экран обрыва соединения.</li> </ul> <p>Метод catch() принимает в качестве аргумента функцию-колбэк, которая выполняется сразу после того, как промис поменял состояние на rejected. Параметр колбэка содержит экземпляр ошибки:</p> <pre>fetch(`https://swapi.dev/api/films/${id}/`).catch(function (error) {\r\n    renderErrorMessage(error)\r\n  })</pre> <h3>finally</h3> <p>Метод finally() используют, чтобы выполнить код при завершении асинхронной операции. Он будет выполнен вне зависимости от того, была ли операция успешной или завершилась ошибкой.</p> <p>Самый частый сценарий использования finally() — работа с индикаторами загрузки. Перед началом асинхронной операции разработчик включает индикатор загрузки. Индикатор нужно убрать вне зависимости от того, как завершилась операция. Если этого не сделать, то пользователь не сможет взаимодействовать с интерфейсом.</p> <p>Метод finally() принимает в качестве аргумента функцию-колбэк, которая выполняется сразу после того, как промис поменял состояние на rejected или fulfilled:</p> <pre>let isLoading = true\r\n    fetch(`https://swapi.dev/api/films/${id}/`).finally(function () {\r\n      isLoading = false\r\n    })</pre> </article> <article class="article"> <div class="anchor" id="task1"></div> <h2>Базовые задачи на Promise в JavaScript</h2> <p>Promise - специальный объект, который хранит своё состояние и используется для обработки результатов асинхронных операций.</p> <p>Что будет в статье:</p> <ul> <li>Основные задачи на Promsie, которые часто спрашивают на собеседованиях</li> <li>Код задач с подробными комментариями</li> </ul> <p>Чего в статье НЕ будет:</p> <ul> <li>Теории про Promsie и Event Loop</li> <li>Задач на Event Loop, показывающих приоритетность выполнения Promise, setTimeout и т.д.</li> </ul> <p>Статья предназначена для тех, кто уже изучил теорию по Promise и хочет попрактиковаться в решении тестовых задач.</p> <h3>Основные методы Promise</h3> <p>Приведу список методов, которые будут использоваться а задачах:</p> <ul> <li>"Promise.resolve(value)" - создаёт успешно выполнившийся Promise с результатом value</li> <li>"Promise.reject(value)" - создаёт выполнившийся Promise с ошибкой</li> <li>".then" - обработчик событий Promise "onFulfilled" и "onRejected"</li> <li>".catch" - обработчик события Promise "onRejected"</li> <li>".finally" - дает возможность запустить один раз определенный участок кода, который должен выполниться вне зависимости от того, с каким результатом выполнился Promise</li> </ul> </article> <article class="article"> <div class="anchor" id="task1-1"></div> <h2>Задачи на .then Задача 1. Случаи, когда .then возвращает или не возвращает значение</h2> <pre>Promise.resolve("1")\r\n    // Promise.resolve вернул "1"\r\n    .then(data => {\r\n        console.log(data); // => "1"\r\n    })\r\n\r\n    // .then ничего не вернул\r\n    .then(data => {\r\n        console.log(data); // => "undefined"\r\n        return "2";\r\n    })\r\n\r\n    // .then вернул "2"\r\n    .then(data => {\r\n        console.log(data); // => "2"\r\n    })</pre> </article> <article class="article"> <div class="anchor" id="task1-2"></div> <h2>Задачи на .then Задача 2. Второй аргумент .then</h2> <p>Первая задача</p> <pre>Promise.reject(1)\r\n    // skip\r\n    // обработать reject можно только в .catch\r\n    .then(data => {\r\n        console.log(data);\r\n    })\r\n\r\n    // второй аргумент .then вместо .catch\r\n    .then(null, data => console.log(data)) // => 1\r\n\r\n    // после обработки ошибки попадаем в .then\r\n    // => "ok"\r\n    .then(() => console.log(\'ok\'));</pre> <p>Вторая задача</p> <pre>Promise.reject()\r\n      // используем колбэки для .then и для .catch\r\n      .then(\r\n          data => console.log(\'ok\'),   // => skip\r\n          data => console.log(\'error\') // => "error"\r\n      )</pre> </article> <article class="article"> <div class="anchor" id="task1-3"></div> <h2>Задачи на .then Задача 3. null в .then</h2> <pre>Promise.resolve("1")\r\n    // skip\r\n    .then(null)\r\n\r\n    // придут данные из Promise.resolve\r\n    .then(data => console.log(data)) // => "1"</pre> </article> <article class="article"> <div class="anchor" id="task1-4"></div> <h2>Задачи на .catch Задача 4. Ошибка из Promise.reject</h2> <pre>Promise.reject("Api Error")\r\n    // skip из-за Promise.reject\r\n    .then(data => console.log(\'ok\'))\r\n\r\n    // обработка ошибки\r\n    .catch(error => {\r\n        console.log(error); // => "Api Error"\r\n        return "1";\r\n    })\r\n\r\n    // catch вернул "1"\r\n    .then(data => {\r\n        console.log(data); // => "1"\r\n    })</pre> </article> <article class="article"> <div class="anchor" id="task1-5"></div> <h2>Задачи на .catch Задача 5. Ошибка из Promise.reject в .catch</h2> <pre>Promise.reject()\r\n    // обработка Promise.reject\r\n    .catch(() => {\r\n        console.log(\'error1\'); // => "error1"\r\n        return Promise.reject();\r\n        // аналогично\r\n        // return reject();\r\n    })\r\n\r\n    // обработка Promise.reject из предыдущего .catch\r\n    .catch(() => {\r\n        console.log(\'error2\'); // => "error2"\r\n    })</pre> </article> <article class="article"> <div class="anchor" id="task1-6"></div> <h2>Задачи на .catch Задача 6. Ошибка throw new Error</h2> <pre>Promise.resolve()\r\n    .then(data => {\r\n        // возникновение ошибки\r\n        throw new Error(\'Api Error\');\r\n        // не имеет значения, что вернули\r\n        return 1;\r\n    })\r\n\r\n    // skip, потому что предыдущий .then бросил ошибку\r\n    .then(data => console.log(\'ok\'))\r\n\r\n    // обработка ошибки\r\n    .catch(error => {\r\n        console.log(error.message); // => "Api Error"\r\n        return "2";\r\n    })\r\n\r\n    // .catch вернул "2"\r\n    .then(data => {\r\n        console.log(data); // => "2"\r\n    })</pre> </article> <article class="article"> <div class="anchor" id="task1-7"></div> <h2>Задачи на .catch Задача 7. Необработанная ошибка в Promise</h2> <p>Необработанная ошибка в Promise не влияет на работу программы, т.к. Promise не выпускает ошибку за свои пределы.</p> <pre>Promise.resolve()\r\n    .then(() => {\r\n        throw new Error(\'Api Error\');\r\n    })\r\n\r\n// код будет работать\r\nsetTimeout(() => {\r\n    console.log(\'setTimeout\'); // => "setTimeout"\r\n}, 1000);</pre> </article> <article class="article"> <div class="anchor" id="task1-8"></div> <h2>Задачи на .catch Задача 8. null в .catch</h2> <pre>Promise.reject("Api Error")\r\n    // skip: ошибку не обработали\r\n    .catch(null)\r\n\r\n    // skip из-за необработанной ошибки\r\n    .then(data => console.log(\'ok\'))\r\n\r\n    // обработка ошибки\r\n    .catch(error => console.log(error)) // => "Api Error"\r\n\r\n    // .then выполнится\r\n    .then(data => console.log(\'ok\')) // => "ok"</pre> </article> <article class="article"> <div class="anchor" id="task1-9"></div> <h2>Задачи на .finally Задача 9</h2> <p>Первая задача</p> <pre>Promise.resolve()\r\n    .then(() => {\r\n        return "1";\r\n    })\r\n\r\n    // .then вернул "1", но .finally пропустит его мимо себя\r\n    .finally(data => { \r\n        console.log(data); // => "undefined"\r\n        return "2";\r\n    })\r\n\r\n    // из .finally вернули "2", но результат берется из предыдущего .then или .catch\r\n    .then(data => console.log(data)) // => "1"</pre> <p>Вторая задача</p> <pre>Promise.reject()\r\n    // .finally выполняется в любом случае: даже при возникновении ошибки\r\n    .finally(data => { \r\n        console.log(\'finally\'); // => "finally"\r\n    })</pre> </article> <article class="article"> <div class="anchor" id="task1-10"></div> <h2>Задачи на несколько Promise Задача 10</h2> <p>Если несколько Promise, то ".then" будет выполняться последовательно для каждого:</p> <pre>Promise.resolve()\r\n    .then(() => console.log(1))  // "Первый"\r\n    .then(() => console.log(2))  // "Третий"\r\n\r\nPromise.resolve()\r\n    .then(() => console.log(11)) // "Второй"\r\n    .then(() => console.log(12)) // "Четвертый"</pre> <p>При ".catch" аналогично:</p> <pre>Promise.resolve()\r\n    .then(() => console.log(1))                          // "Первый"\r\n    .then(() => { console.log(2); throw new Error(); })  // "Третий"\r\n    .catch(() => console.log(3))                         // "Пятый"\r\n    .then(() => console.log(4))                          // "Седьмой"\r\n\r\nPromise.resolve()\r\n    .then(() => console.log(11))                         // "Второй"\r\n    .then(() => { console.log(12); throw new Error(); }) // "Четвертый"\r\n    .catch(() => console.log(13))                        // "Шестой"\r\n    .then(() => console.log(14))                         // "Восьмой"</pre> </article> <article class="article"> <div class="anchor" id="task1-11"></div> <h2>Задача на бесконечные микротаски Задача 11</h2> <p>В качестве бонуса покажу, как повесить браузер микротасками, которыми являются Promise:</p> <pre>const foo = () =>  {\r\n    Promise.resolve().then(() => foo())\r\n}\r\n\r\nfoo();</pre> </article> <article class="article"> <div class="anchor" id="task2"></div> <h2>10 задач с JavaScript Promise для подготовки к собеседованиям</h2> <p>Promise — это отличительная особенность JavaScript как асинхронного языка программирования. Нравится вам это или нет, понять его в любом случае придется.</p> <p>В этой статье я привожу 10 примеров кода с Promise, начиная от базового уровня заканчивая продвинутым. Готовы? Начнем!</p> </article> <article class="article"> <div class="anchor" id="task2-1"></div> <h2>Задача №1: Конструктор Promise</h2> <p>Каким будет вывод этого фрагмента кода?</p> <pre>\r\n  console.log(\'start\');\r\n\r\n  const promise1 = new Promise((resolve, reject) => {\r\n    console.log(1)\r\n  })\r\n\r\n  console.log(\'end\');\r\n  </pre> <h3> Анализ</h3> <p>С первой задачей справиться легко.</p> <p>Что мы знаем:</p> <ul> <li>Блоки синхронного кода всегда выполняются последовательно сверху вниз.</li> <li>Когда мы вызываем new Promise(callback), функция коллбэка будет выполнена сразу же.</li> </ul> <h3>Результат</h3> <p>Итак, этот код должен последовательно выводить start, 1, end.</p> </article> <article class="article"> <div class="anchor" id="task2-2"></div> <h2>Задача №2: .then()</h2> <p>Каким будет вывод этого фрагмента кода?</p> <pre>\r\nconsole.log(\'start\');\r\n\r\nconst promise1 = new Promise((resolve, reject) => {\r\n  console.log(1)\r\n  resolve(2)\r\n})\r\n\r\npromise1.then(res => {\r\n  console.log(res)\r\n})\r\n\r\nconsole.log(\'end\');\r\n  </pre> <h3>Анализ</h3> <p>Это фрагмент асинхронного кода. То есть коллбэк-функция в .then().</p> <p>Помните о том, что интерпретатор JavaScript всегда сначала выполняет синхронный код, а затем асинхронный.</p> <p>При столкновении с этой проблемой нам нужно только различать синхронный и асинхронный код.</p> <h3>Результат</h3> <p>Итак, выводом будет start , 1 , end и 2 .</p> </article> <article class="article"> <div class="anchor" id="task2-3"></div> <h2>Задача №3: resolve()</h2> <p>Каким будет вывод этого фрагмента кода?</p> <pre>\r\nconsole.log(\'start\');\r\n\r\nconst promise1 = new Promise((resolve, reject) => {\r\n  console.log(1)\r\n  resolve(2)\r\n  console.log(3)\r\n})\r\n\r\npromise1.then(res => {\r\n  console.log(res)\r\n})\r\n\r\nconsole.log(\'end\');\r\n  </pre> <h3>Анализ</h3> <p>Этот фрагмент кода почти такой же, как и предыдущий; единственная разница в том, что после resolve(2) есть console.log(3).</p> <p>Помните, что метод resolve не прерывает выполнение функции. Код, стоящий за ним, по-прежнему будет выполняться.</p> <h3>Результат</h3> <p>Таким образом, выходным результатом будет start , 1 , 3 , end и 2 .</p> <p>Я неоднократно сталкивался с мнением, будто resolve прервет выполнение функции, поэтому я подчеркиваю этот момент здесь.</p> </article> <article class="article"> <div class="anchor" id="task2-4"></div> <h2>Задача №4: resolve() не вызывается</h2> <p>Каким будет вывод этого фрагмента кода?</p> <pre>\r\nconsole.log(\'start\');\r\n\r\nconst promise1 = new Promise((resolve, reject) => {\r\n  console.log(1)\r\n})\r\n\r\npromise1.then(res => {\r\n  console.log(2)\r\n})\r\n\r\nconsole.log(\'end\');\r\n  </pre> <h3>Анализ</h3> <p>В этом коде метод resolve никогда не вызывался, поэтому promise1 всегда находится в состоянии ожидания (pending). Так что promise1.then(…) никогда не выполнялся. 2 не выводится в консоли.</p> <h3>Результат</h3> <p>Выходным результатом станет start , 1 , end .</p> </article> <article class="article"> <div class="anchor" id="task2-5"></div> <h2>Задача №5: Нечто, сбивающее с толку</h2> <pre>\r\nconsole.log(\'start\')\r\n\r\nconst fn = () => (new Promise((resolve, reject) => {\r\n  console.log(1);\r\n  resolve(\'success\')\r\n}))\r\n\r\nconsole.log(\'middle\')\r\n\r\nfn().then(res => {\r\n  console.log(res)\r\n})\r\n\r\nconsole.log(\'end\')\r\n  </pre> <p>Каким будет вывод этого фрагмента кода?</p> <h3>Анализ</h3> <p>Этот код преднамеренно добавляет функцию, чтобы запутать испытуемых, то есть нас, и это fn.</p> <p>Пожалуйста, помните, что независимо от того, сколько существует слоев вызовов функций, наши базовые принципы остаются неизменными:</p> <p>Сначала выполняется синхронный код, а затем асинхронный.</p> <p>Синхронный код выполняется в том порядке, в котором он был вызван.</p> <h3>Результат</h3> <p>Выходным результатом будет start , middle, 1 , end и success.</p> </article> <article class="article"> <div class="anchor" id="task2-6"></div> <h2>Задача №6: с Fulfilling Promise</h2> <p>Каким будет вывод этого фрагмента кода?</p> <pre>\r\nconsole.log(\'start\')\r\n\r\nPromise.resolve(1).then((res) => {\r\n  console.log(res)\r\n})\r\n\r\nPromise.resolve(2).then((res) => {\r\n  console.log(res)\r\n})\r\n\r\nconsole.log(\'end\')\r\n  </pre> <h3>Анализ</h3> <p>Здесь Promise.resolve(1) вернет объект Promise, состояние которого fulfilled, а результат равен 1 . Это синхронный код.</p> <p>Выходным результатом будет start , end , 1 и 2.</p> <p>Ну что, думаете, это незначительные трудности?</p> <p>Это только начало. Сложность Promise проявляется, когда он используется с setTimeout. Следующие задачи будут сложнее.</p> <p>Готовы? Продолжим.</p> </article> <article class="article"> <div class="anchor" id="task2-7"></div> <h2>Задача №7: setTimeout vs Promise</h2> <p>Каким будет вывод этого фрагмента кода?</p> <pre>\r\nconsole.log(\'start\')\r\n\r\nsetTimeout(() => {\r\n  console.log(\'setTimeout\')\r\n})\r\n\r\nPromise.resolve().then(() => {\r\n  console.log(\'resolve\')\r\n})\r\n\r\nconsole.log(\'end\')\r\n  </pre> <h3>Анализ</h3> <p></p>Обратите внимание, это сложный вопрос. Если вы сможете правильно ответить на него и объяснить причину, то можно считать, что ваше понимание асинхронного программирования в JavaScript достигло среднего уровня. <p>Прежде чем я дам объяснение, давайте вспомним соответствующую теоретическую базу.</p> <p>Ранее мы говорили, что синхронный код выполняется в порядке вызова, так в каком же порядке выполняются эти асинхронные коллбэк-функции?</p> <p>Кто-то может сказать, что тот, кто закончит первым, будет и выполнен первым. Что ж, это правда, но что, если две асинхронные задачи выполняются одновременно?</p> <p>Например, в приведенном выше коде таймер setTimeout равен 0 секундам, а Promise.resolve() также вернет выполненный объект Promise сразу же после выполнения.</p> <p>Обе асинхронные задачи выполняются немедленно, поэтому чья коллбэк-функция будет выполнена первой?</p> <p>Некоторые джуны могут сказать, что setTimeout находится в начале, поэтому сначала будет выведен setTimeout, а затем resolve. На самом деле, это утверждение неверно.</p> <p>Мы знаем, что многие вещи НЕ выполняются в порядке по принципу «первым пришел — первым вышел», например, трафик.</p> <h3>Приоритет</h3> <p>Обычно мы делим весь транспорт на две категории:</p> <ul> <li>Общие транспортные средства.</li> <li>Транспортные средства для чрезвычайных ситуаций. Например, пожарные машины и машины скорой помощи.</li> </ul> <p>Чтобы проехать многолюдные перекрестки, мы пропустим первыми пожарные машины и машины скорой помощи. Автомобили скорой помощи имеют приоритет выше, чем другой транспорт. Ключевое слово: приоритеты.</p> <p>В JavaScript EventLoop также есть понятие приоритета.</p> <ul> <li>Задачи с более высоким приоритетом называются микрозадачами. Например: Promise, ObjectObserver, MutationObserver, process.nextTick, async/await.</li> <li>Задачи с более низким приоритетом называются макрозадачами. Например: setTimeout, setInterval и XHR.</li> </ul> <p>Хотя setTimeout и Promise.resolve() выполняются одновременно, и даже код setTimeout еще впереди, но из-за низкого приоритета относящаяся к нему коллбэк-функция выполняется позже.</p> <pre>\r\nconsole.log(\'start\')\r\nconsole.log(\'end\')\r\n// start, end\r\n  </pre> <pre>\r\nconsole.log(\'resolve\')\r\n// resolve\r\n  </pre> <pre>\r\nconsole.log(\'setTimeout\')\r\n// setTimeout\r\n  </pre> <h3>Результат</h3> <p>Выходным результатом будет start , end , resolve и setTimeout.</p> </article> <article class="article"> <div class="anchor" id="task2-8"></div> <h2>Задача №8: Микрозадачи смешиваются с макрозадачами</h2> <p>Каким будет вывод этого фрагмента кода?</p> <pre>\r\nconst promise = new Promise((resolve, reject) => {\r\n  console.log(1);\r\n  setTimeout(() => {\r\n    console.log("timerStart");\r\n    resolve("success");\r\n    console.log("timerEnd");\r\n  }, 0);\r\n  console.log(2);\r\n});\r\n\r\npromise.then((res) => {\r\n  console.log(res);\r\n});\r\n\r\nconsole.log(4);\r\n  </pre> <h3>Анализ</h3> <p>Эту задачу легко выполнить, если вы поняли предыдущий код.</p> <p>Нам просто нужно выполнить эти три шага:</p> <ol> <li>Найти синхронный код.</li> <li>Найти код микрозадачи.</li> <li>Найти код макрозадачи.</li> </ol> <p>Сначала выполните синхронный код:</p> <pre>\r\nconsole.log(1);\r\nsetTimeout(() => {\r\n  console.log("timerStart");\r\n  resolve("success");\r\n  console.log("timerEnd");\r\n}, 0);\r\nconsole.log(2);\r\nconsole.log(4);\r\n// 1, 2, 3\r\n  </pre> <p>Выведется 1 , 2 и 4 .</p> <p>Затем выполните микрозадачу:</p> <pre>\r\npromise.then((res) => {\r\n  console.log(res);\r\n});\r\n  </pre> <p>Но вот ловушка: поскольку текущий Promise все еще находится в состоянии ожидания (pending), код в данный момент выполняться не будет.</p> <p>Затем выполните макрозадачу:</p> <pre>\r\nconsole.log("timerStart");\r\nresolve("success");\r\nconsole.log("timerEnd");\r\n// timerStart, timerEnd\r\n  </pre> <p>И состояние promise становится fulfilled .</p> <p>Затем с помощью Event Loop снова выполните микрозадачу:</p> <pre>\r\nconsole.log(res);\r\n// success\r\n  </pre> <h3>Результат</h3> <p>Выходным результатом будет 1 , 2, 4, timeStart, timeEnd, success</p> </article> <article class="article"> <div class="anchor" id="task2-9"></div> <h2>Задача №9: приоритезировать микрозадачи и макрозадачи</h2> <p>Прежде чем мы определим приоритет между микрозадачами и макрозадачами, здесь мы рассмотрим случай поочередного выполнения микрозадач и макрозадач.</p> <p>Что выводит этот фрагмент кода?</p> <pre>\r\nconst timer1 = setTimeout(() => {\r\n  console.log(\'timer1\');\r\n\r\n  const promise1 = Promise.resolve().then(() => {\r\n    console.log(\'promise1\')\r\n  })\r\n}, 0)\r\n\r\nconst timer2 = setTimeout(() => {\r\n  console.log(\'timer2\')\r\n}, 0)\r\n  </pre> <h3>Анализ</h3> <p>Некоторые могут подумать, что микрозадачи и макрозадачи выполняются так:</p> <ol> <li>Сначала выполняются все микрозадачи.</li> <li>Выполняются все макрозадачи.</li> <li>Выполняются все микрозадачи снова.</li> <li>Цикл повторяется / Цикл завершается.</li> </ol> <p>Но это утверждение неверно. Правильно вот так:</p> <ol> <li>Сначала выполняются все микрозадачи.</li> <li>Выполняется одна макрозадача.</li> <li>Повторно выполняются все (вновь добавленные) микрозадачи.</li> <li>Выполняется следующая макрозадача.</li> <li>Цикл повторяется / Цикл завершается.</li> </ol> <p>Так:</p> <p>microtesk1, microtask2, macrotask1, microtask3, microtask4, macrotask2, microtask5, microtask6</p> <p>Таким образом, в приведенном выше коде коллбэк-функция Promise.then будет выполняться перед коллбэк-функцией второго setTimeout, потому что это микрозадача, и она была врезана в последовательность задач.</p> <h3>Результат</h3> <p>Выходным результатом будет timer1, promise1, timer2</p> </article> <article class="article"> <div class="anchor" id="task2-10"></div> <h2>Задача №10: типичный вопрос с собеседования</h2> <p>Что ж, это наша последняя задача. Если вы сможете правильно определить вывод этого кода, то ваше понимание Promise уже на высоком уровне. И однотипные вопросы на собеседовании точно не станут для вас трудностью.</p> <p>Что выводит этот фрагмент кода?</p> <pre>\r\nconsole.log(\'start\');\r\n\r\nconst promise1 = Promise.resolve().then(() => {\r\n  console.log(\'promise1\');\r\n  const timer2 = setTimeout(() => {\r\n    console.log(\'timer2\')\r\n  }, 0)\r\n});\r\n\r\nconst timer1 = setTimeout(() => {\r\n  console.log(\'timer1\')\r\n  const promise2 = Promise.resolve().then(() => {\r\n    console.log(\'promise2\')\r\n  })\r\n}, 0)\r\n\r\nconsole.log(\'end\');\r\n  </pre> <h3>Анализ</h3> <p>Эта задача является более суровой версией предыдущей задачи, но основной принцип остается прежним.</p> <p>Вспомните, что мы узнали ранее:</p> <ol> <li>Синхронный код</li> <li>Все микрозадачи</li> <li>Первая макрозадача</li> <li>Все недавно добавленные микрозадачи</li> <li>Следующая макрозадача</li> </ol> <p>Итак:</p> <ol> <li>Выполним весь синхронный код: <pre>\r\nconsole.log(\'start\');\r\nconsole.log(\'end\');\r\n// start, end\r\n      </pre> </li> <li>Выполним все микрозадачи: <pre>\r\nconsole.log(\'promise1\');\r\nconst timer2 = setTimeout(() => {\r\n  console.log(\'timer2\')\r\n}, 0)\r\n// promise1\r\n      </pre> </li> <li>Выполним первую макрозадачу: <pre>\r\nconsole.log(\'timer1\')\r\nconst promise2 = Promise.resolve().then(() => {\r\n  console.log(\'promise2\')\r\n})\r\n// timer1\r\n      </pre> <p>Примечание. На этом шаге макрозадача добавляет в очередь задач новую микрозадачу.</p> </li> <li>4. Выполним все вновь добавленные микрозадачи: <pre>\r\nconsole.log(\'promise2\')\r\n// promise2\r\n      </pre> </li> <li>5. Выполним следующую макрозадачу: <pre>\r\nconsole.log(\'timer2\')\r\n// timer2\r\n      </pre> </li> </ol> <h3>Результат</h3> <p>Вывод будет таким start, end, promise1, timer1, promise2, timer2</p> <h3>Заключение</h3> <p>Для всех подобных вопросов нужно просто запомнить три правила:</p> <ol> <li>Интерпретатор JavaScript всегда сначала выполняет синхронный код, а затем асинхронный.</li> <li>Микрозадачи имеют приоритет над макрозадачами.</li> <li>Микрозадачи могут врезаться в последовательность выполнения в Event Loop.</li> </ol> </article>','<h1>Прототипы</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#links">links</a></p> </div> </div> <article class="article"> <div class="anchor" id="links"></div> <h2>links</h2> <p><a href="https://habr.com/ru/articles/518360/">habr.com/ru/articles/518360</a> <br>Прототипы в JS и малоизвестные факты (2020.09.09)</p> </article> ','<h1>Web Storage API</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#links">links</a></p> <p><a href="#about">about</a></p> <p><a href="#interface">Интерфейсы Web Storage</a></p> <p><a href="#storage">Интерфейс Storage</a></p> <p><a href="#local">localStorage</a></p> <p><a href="#session">sessionStorage</a></p> </div> </div> <article class="article"> <div class="anchor" id="links"></div> <h2>links</h2> <p><a href="https://www.dev-notes.ru/articles/frontend/use-cases-for-htmls-web-storage-API/">Варианты использования Web Storage API в HTML</a> (2023-07-22)</p> <p><a href="https://doka.guide/tools/browsers-storages/">doka.guide/tools/browsers-storages</a> Хранение данных в браузере (2023-07-22)</p> <h3>habr</h3> <p><a href="https://habr.com/ru/articles/496348/">Web Storage API: примеры использования</a> (2020-04-09)</p> </article> <article class="article"> <div class="anchor" id="about"></div> <h2>about</h2> <p>Web Storage API предоставляет механизмы, при помощи которых браузеры могут безопасно хранить пары ключ/значение в более интуитивно понятной манере, чем куки (cookies).</p> <p>Web Storage API включает в себя localStorage и sessionStorage. Разница между ними состоит во времени хранения данных.</p> <p>В localStorage данные хранятся постоянно до их «явного» удаления (ни перезагрузка страницы, ни ее закрытие не приводят к удалению данных).</p> <p>Время хранения данных в sessionStorage, как следует из названия, ограничено сессией браузера (пока браузер открыт, даже в случае перезагрузки страницы).</p> <p>Поскольку sessionStorage на практике почти не используется, мы будет рассматривать только localStorage.</p> </article> <article class="article"> <div class="anchor" id="interface"></div> <h2>Интерфейсы Web Storage</h2> <ol> <li> <h3>Storage</h3> <p>Позволяет присваивать, извлекать (читать) и удалять данные для специфического домена и типа хранилища (сессии или локального).</p> </li> <li> <h3>Window</h3> <p>Web Storage API расширяет Window объект, добавляя к нему два новых свойства — Window.sessionStorage и Window.localStorage — которые предоставляют доступ к сессии текущего домена и к соответствующим локальным Storage объектам, и Window.onstorage (en-US) обработчик событий, который срабатывает при изменении объекта хранилища (например, при сохранении нового элемента)</p> </li> <li> <h3>StorageEvent</h3> <p>Событие storage срабатывает на объекте документа Window при изменении объекта хранилища.</p> </li> </ol> </article> <article class="article"> <div class="anchor" id="storage"></div> <h2>Интерфейс Storage</h2> <p>Объект «Storage» используется для хранения данных на стороне клиента и в этом смысле выступает альтернативой cookies. Преимущество Storage состоит в размере хранилища (от 5 Мб, зависит от браузера, при превышении лимита выбрасывается ошибка «QUOTA_EXCEEDED_ERR») и отсутствии необходимости обращаться к серверу.</p> <p>Интерфейс Storage из Web Storage API предоставляет доступ для session storage или local storage для конкретного домена, позволяя вам к примеру добавлять, изменять или удалять сохранённые элементы данных.</p> <p>В браузерах объект Window реализует объекты WindowLocalStorage и WindowSessionStorage, которые содержат свойства localStorage и sessionStorage. Вызов одного из этих свойств создаст экземпляр объекта Storage, с помощью которого можно устанавливать, извлекать и удалять элементы данных из хранилища.</p> <p>Если вы хотите управлять session storage для домена, вы вызываете Window.sessionStorage метод; Если вы хотите управлять local storage домена, вы вызываете Window.localStorage.</p> <h3>Свойства Storage</h3> <h3>Storage.length Только для чтения</h3> <p>Возвращает число, представляющее количество элементов в объекте Storage.</p> <h3>Методы Storage</h3> <ol> <li> <h3>Storage.key(n)</h3> <p>Приняв число n, метод вернёт имя n-ного ключа в Storage</p> </li> <li> <h3>Storage.getItem(key)</h3> <p>Приняв имя ключа key, метод вернёт для него значение.</p> </li> <li> <h3>Storage.setItem(key, value)</h3> <p>Приняв имя ключа key и значение value, метод добавит этот ключ в Storage или обновит его значение, если ключ уже существовал.</p> </li> <li> <h3>Storage.removeItem(key)</h3> <p>Приняв имя ключа key, метод удалит этот ключ из Storage</p> </li> <li> <h3>Storage.clear()</h3> <p>При вызове метод удалит все ключи из Storage.</p> </li> </ol> </article> <article class="article"> <div class="anchor" id="local"></div> <h2>localStorage</h2> <h3>localStorage обладает следующими методами:</h3> <ul> <li><strong>Storage.length</strong> — длина хранилища (количество элементов — пар ключ/значение)</li> <li><strong>Storage.key(index)</strong> — имя ключа (возвращает ключ элемента, который имеет индекс index)</li> <li><strong>Storage.setItem(key, value)</strong> — записать элемент (устанавливает для элемента с ключом key значение value)</li> <li><strong>Storage.getItem(key)</strong> — получить элемент (возвращает элемент, который имеет ключ key)</li> <li><strong>Storage.removeItem(key)</strong> — удалить элемент с ключом key</li> <li><strong>Storage.clear()</strong> — очистить хранилище (удаляет все элементы из хранилища)</li> </ul> <h3>Данные в хранилище записываются одним из следующих способов:</h3> <code>localStorage.color1 = \'red\';</code> <code>localStorage[\'color2\'] = \'red\';</code> <code>localStorage.setItem(\'color\', \'red\'); // рекомендуется использовать этот способ</code> <p>Получить данные можно так:</p> <code>localStorage.color1;</code> <code>localStorage[\'color2\'];</code> <code>localStorage.getItem(\'color3\'); // рекомендуется использовать этот способ</code> <h3>Как перебрать ключи хранилища и получить значения?</h3> <p>способ 1</p> <pre>for (let i = 0; i &lt; localStorage.length; i++) {\r\n  let key = localStorage.key(i)\r\n  console.log(`${key}: ${localStorage.getItem(key)}`)\r\n}</pre> <p>способ 2</p> <pre>let keys = Object.keys(localStorage)\r\nfor (let key of keys) {\r\n  console.log(`${key}: ${localStorage.getItem(key)}`)\r\n}</pre> </article> <article class="article"> <div class="anchor" id="session"></div> <h2>sessionStorage</h2> <h3>sessionStorage обладает теми же свойствами и методами что и localStorage:</h3> <ul> <li><strong>Storage.length</strong> — длина хранилища (количество элементов — пар ключ/значение)</li> <li><strong>Storage.key(index)</strong> — имя ключа (возвращает ключ элемента, который имеет индекс index)</li> <li><strong>Storage.setItem(key, value)</strong> — записать элемент (устанавливает для элемента с ключом key значение value)</li> <li><strong>Storage.getItem(key)</strong> — получить элемент (возвращает элемент, который имеет ключ key)</li> <li><strong>Storage.removeItem(key)</strong> — удалить элемент с ключом key</li> <li><strong>Storage.clear()</strong> — очистить хранилище (удаляет все элементы из хранилища)</li> </ul> </article> ','<h1>Объект XMLHttpRequest</h1> <article class="article"> <p>XMLHttpRequest – это встроенный в браузер объект, который даёт возможность делать HTTP-запросы к серверу без перезагрузки страницы. XMLHttpRequest имеет два режима работы: синхронный и асинхронный.</p> </article> <article class="article"> <h2>Синхронные запросы</h2> <p>Если в методе open третий параметр async установлен на false, запрос выполняется синхронно. Выполнение JavaScript останавливается на send() и возобновляется после получения ответа. Так ведут себя, например, функции alert или prompt.</p> <code>let xhr = new XMLHttpRequest(); <br>xhr.open(\'GET\', \'/article/xmlhttprequest/hello.txt\', false); <br>try { <br>&nbsp;&nbsp;xhr.send(); <br>&nbsp;&nbsp;if (xhr.status != 200) { <br>&nbsp;&nbsp;&nbsp;&nbsp;alert(`Ошибка ${xhr.status}: ${xhr.statusText}`); <br>&nbsp;&nbsp;} else { <br>&nbsp;&nbsp;&nbsp;&nbsp;alert(xhr.response); <br>&nbsp;&nbsp;} <br>} catch(err) { // для отлова ошибок используем конструкцию try...catch вместо onerror <br>&nbsp;&nbsp;alert("Запрос не удался"); <br>}</code> <p>Выглядит, может быть, и неплохо, но синхронные запросы используются редко, так как они блокируют выполнение JavaScript до тех пор, пока загрузка не завершена. В некоторых браузерах нельзя прокручивать страницу, пока идёт синхронный запрос. Ну а если же синхронный запрос по какой-то причине выполняется слишком долго, браузер предложит закрыть «зависшую» страницу.</p> <p>Многие продвинутые возможности XMLHttpRequest, такие как выполнение запроса на другой домен или установка таймаута, недоступны для синхронных запросов. Также, как вы могли заметить, ни о какой индикации прогресса речь тут не идёт.</p> <p>Из-за всего этого синхронные запросы используют очень редко. Мы более не будем рассматривать их.</p> </article> <article class="article"> <h2>Асинхронные запросы</h2> <p>Чтобы сделать запрос, нам нужно выполнить три шага:</p> <h4>1. Создать XMLHttpRequest.</h4> <code>let xhr = new XMLHttpRequest(); // у конструктора нет аргументов</code> Конструктор не имеет аргументов.<p></p> <h4>2. Инициализировать его.</h4> <code>xhr.open(method, URL, [async, user, password])</code> <p>Этот метод обычно вызывается сразу после new XMLHttpRequest. В него передаются основные параметры запроса: <br>- method – HTTP-метод. Обычно это "GET" или "POST". <br>- URL – URL, куда отправляется запрос: строка, может быть и объект URL. <br>- async – если указать false, тогда запрос будет выполнен синхронно, это мы рассмотрим чуть позже. <br>- user, password – логин и пароль для базовой HTTP-авторизации (если требуется).</p> <p>Заметим, что вызов open, вопреки своему названию, не открывает соединение. Он лишь конфигурирует запрос, но непосредственно отсылается запрос только лишь после вызова send.</p> <h4>3. Послать запрос.</h4> <code>xhr.send([body])</code> <p>Этот метод устанавливает соединение и отсылает запрос к серверу. Необязательный параметр body содержит тело запроса.</p> <p>Некоторые типы запросов, такие как GET, не имеют тела. А некоторые, как, например, POST, используют body, чтобы отправлять данные на сервер. Мы позже увидим примеры.</p> </article>','<article class="article"> <h2>links</h2> <p><a href="https://symbl.cc/ru/">symbl.cc</a><br>Все кодировки и символы</p> </article> <article class="article"> <div class="anchor" id="ascii"></div> <h2>Таблица ASCII</h2> <p>Так выглядит таблица ASCII (American Standard Code for Information Interchange) с символами от 0 до 127. Совпадает с символами Unicode от 00 до 7F.</p> <pre>\r\n  DEC  HEX  CHAR\r\n  -------------\r\n    0  00   NUL (Null)\r\n    1  01   SOH (Start of Heading)\r\n    2  02   STX (Start of Text)\r\n    3  03   ETX (End of Text)\r\n    4  04   EOT (End of Transmission)\r\n    5  05   ENQ (Enquiry)\r\n    6  06   ACK (Acknowledgment)\r\n    7  07   BEL (Bell)\r\n    8  08   BS  (Backspace)\r\n    9  09   TAB (Horizontal Tab)\r\n   10  0A   LF  (Line Feed)\r\n   11  0B   VT  (Vertical Tab)\r\n   12  0C   FF  (Form Feed)\r\n   13  0D   CR  (Carriage Return)\r\n   14  0E   SO  (Shift Out)\r\n   15  0F   SI  (Shift In)\r\n   16  10   DLE (Data Link Escape)\r\n   17  11   DC1 (Device Control 1)\r\n   18  12   DC2 (Device Control 2)\r\n   19  13   DC3 (Device Control 3)\r\n   20  14   DC4 (Device Control 4)\r\n   21  15   NAK (Negative Acknowledgement)\r\n   22  16   SYN (Synchronous Idle)\r\n   23  17   ETB (End of Transmission Block)\r\n   24  18   CAN (Cancel)\r\n   25  19   EM  (End of Medium)\r\n   26  1A   SUB (Substitute)\r\n   27  1B   ESC (Escape)\r\n   28  1C   FS  (File Separator)\r\n   29  1D   GS  (Group Separator)\r\n   30  1E   RS  (Record Separator)\r\n   31  1F   US  (Unit Separator)\r\n   32  20   SPACE (Space)\r\n   33  21   !   (Exclamation Mark)\r\n   34  22   "   (Double Quote)\r\n   35  23   #   (Number Sign)\r\n   36  24   $   (Dollar Sign)\r\n   37  25   %   (Percent Sign)\r\n   38  26   &   (Ampersand)\r\n   39  27   \'   (Single Quote)\r\n   40  28   (   (Left Parenthesis)\r\n   41  29   )   (Right Parenthesis)\r\n   42  2A   *   (Asterisk)\r\n   43  2B   +   (Plus Sign)\r\n   44  2C   ,   (Comma)\r\n   45  2D   -   (Hyphen-Minus)\r\n   46  2E   .   (Period)\r\n   47  2F   /   (Slash)\r\n   48  30   0   (Digit Zero)\r\n   49  31   1   (Digit One)\r\n   50  32   2   (Digit Two)\r\n   51  33   3   (Digit Three)\r\n   52  34   4   (Digit Four)\r\n   53  35   5   (Digit Five)\r\n   54  36   6   (Digit Six)\r\n   55  37   7   (Digit Seven)\r\n   56  38   8   (Digit Eight)\r\n   57  39   9   (Digit Nine)\r\n   58  3A   :   (Colon)\r\n   59  3B   ;   (Semicolon)\r\n   60  3C   &lt;   (Less-Than Sign)\r\n   61  3D   =   (Equal Sign)\r\n   62  3E   &gt;   (Greater-Than Sign)\r\n   63  3F   ?   (Question Mark)\r\n   64  40   @   (Commercial At)\r\n   65  41   A\r\n   66  42   B\r\n   67  43   C\r\n   68  44   D\r\n   69  45   E\r\n   70  46   F\r\n   71  47   G\r\n   72  48   H\r\n   73  49   I\r\n   74  4A   J\r\n   75  4B   K\r\n   76  4C   L\r\n   77  4D   M\r\n   78  4E   N\r\n   79  4F   O\r\n   80  50   P\r\n   81  51   Q\r\n   82  52   R\r\n   83  53   S\r\n   84  54   T\r\n   85  55   U\r\n   86  56   V\r\n   87  57   W\r\n   88  58   X\r\n   89  59   Y\r\n   90  5A   Z\r\n   91  5B   [   (Left Square Bracket)\r\n   92  5C   \\   (Backslash)\r\n   93  5D   ]   (Right Square Bracket)\r\n   94  5E   ^   (Caret / Circumflex)\r\n   95  5F   _   (Underscore)\r\n   96  60   `   (Grave Accent)\r\n   97  61   a\r\n   98  62   b\r\n   99  63   c\r\n  100  64   d\r\n  101  65   e\r\n  102  66   f\r\n  103  67   g\r\n  104  68   h\r\n  105  69   i\r\n  106  6A   j\r\n  107  6B   k\r\n  108  6C   l\r\n  109  6D   m\r\n  110  6E   n\r\n  111  6F   o\r\n  112  70   p\r\n  113  71   q\r\n  114  72   r\r\n  115  73   s\r\n  116  74   t\r\n  117  75   u\r\n  118  76   v\r\n  119  77   w\r\n  120  78   x\r\n  121  79   y\r\n  122  7A   z\r\n  123  7B   {   (Left Curly Brace)\r\n  124  7C   |   (Vertical Bar)\r\n  125  7D   }   (Right Curly Brace)\r\n  126  7E   ~   (Tilde)\r\n  127  7F   DEL (Delete)\r\n</pre> </article>','<h1>Unicode</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#links">links</a></p> <p><a href="#about">about</a></p> <p><a href="#u0000">0000-007F Основная латиница (ASCII)</a></p> </div> </div> <article class="article"> <div class="anchor" id="links"></div> <h2>links</h2> <p><a href="https://symbl.cc/ru/">symbl.cc</a><br>Все кодировки и символы</p> <p><a href="https://neerc.ifmo.ru/wiki/index.php?title=%D0%9F%D1%80%D0%B5%D0%B4%D1%81%D1%82%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_%D1%81%D0%B8%D0%BC%D0%B2%D0%BE%D0%BB%D0%BE%D0%B2,_%D1%82%D0%B0%D0%B1%D0%BB%D0%B8%D1%86%D1%8B_%D0%BA%D0%BE%D0%B4%D0%B8%D1%80%D0%BE%D0%B2%D0%BE%D0%BA">neerc.ifmo.ru</a><br>Представление символов, таблицы кодировок</p> </article> <article class="article"> <div class="anchor" id="about"></div> <h2>about</h2> <p>Так выглядит таблица ASCII (American Standard Code for Information Interchange) с символами от 0 до 127. Совпадает с символами Unicode от 00 до 7F.</p> </article> <article class="article"> <div class="anchor" id="u0000"></div> <h2>0000</h2> <p>Так выглядит таблица ASCII (American Standard Code for Information Interchange) с символами от 0 до 127. Совпадает с символами Unicode от 00 до 7F.</p> </article>'],t=document.querySelector("#code"),document.querySelectorAll(".aside a").forEach((function(r,i){!function(r,i){r.addEventListener("click",(function(r){r.preventDefault(),t.innerHTML=e[i]}))}(r,i)}));var i=new Event("click");re[0].dispatchEvent(i)}()}},{url:"code-ts.html",text:"TS",content:"<code-ts></code-ts>",act:function(){!function(){var e,t,r=document.querySelector(".aside");r.innerHTML="",r.append.apply(r,le),e=['<h1>TypeScript</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#about">about</a></p> <p><a href="#links">links</a></p> <p><a href="#install">install</a></p> <p><a href="#ts">typescript</a></p> </div> </div> <article class="article"> <div class="anchor" id="about"></div> <h2>about</h2> <p>TypeScript is JavaScript with syntax for types.</p> <p>TypeScript is a strongly typed programming language that builds on JavaScript, giving you better tooling at any scale.</p> </article> <article class="article"> <div class="anchor" id="links"></div> <h2>links</h2> <p><a href="https://www.typescriptlang.org/">typescriptlang.org</a> Typescript документация</p> <p><a href="https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html">typescriptlang.org/docs/handbook/typescript-in-5-minutes.html</a> Typescript за 5 минут</p> <p><a href="https://www.typescriptlang.org/play/">typescriptlang.org/play</a> Песочница</p> <p><a href="http://typescript-lang.ru/docs/">typescript-lang.ru/docs</a> Справочник Typescript</p> <p><a href="https://scriptdev.ru/">scriptdev.ru</a></p> <p><a href="https://metanit.com/web/typescript/1.1.php">metanit.com/web/typescript</a> Руководство по TypeScript (обновление 2023-01-09)</p> <p><a href="https://my-js.org/docs/guide/ts/">my-js.org/docs/guide/ts</a> Карманная книга по Typescript</p> <p><a href="https://typescript-handbook.ru/">typescript-handbook.ru</a> Карманная книга по Typescript</p> <p><a href="https://www.totaltypescript.com/">totaltypescript.com</a></p> <p><a href="https://type-level-typescript.com/">type-level-typescript.com</a></p> <p><a href="https://scrimba.com/learn/typescript">scrimba.com/learn/typescript</a></p> <p><a href="https://thenewstack.io/typescript-vs-javascript/">thenewstack.io/typescript-vs-javascript</a></p> <p><a href="https://typescript-exercises.github.io/">typescript-exercises.github.io</a></p> <p><a href="https://github.com/type-challenges/type-challenges">github.com/type-challenges/type-challenges</a></p> <h3>Статьи на habr</h3> <p><a href="https://habr.com/ru/company/macloud/blog/557996/">Практическое руководство по TypeScript для разработчиков (2021-05-18)</a></p> <p><a href="https://habr.com/ru/post/667104/">Почему вы должны начать писать на TypeScript в 2022 году (2022-05-22)</a></p> <p><a href="https://habr.com/ru/post/667156/">Принципы ООП в TypeScript (2022-05-23)</a></p> <h3>Статьи</h3> <p><a href="https://ru.hexlet.io/blog/posts/sistema-tipov-v-typescript">Как устроена система типов в TypeScript (Алексей Покровский 2022-12-06)</a></p> <p><a href="https://ru.hexlet.io/blog/posts/vse-chto-nuzhno-znat-novichku-o-typescript-ischerpyvayuschiy-gayd">Что такое TypeScript и зачем он нужен (Екатерина Самохвалова 2023-07-14)</a></p> <p><a href="https://bestcode.su/frontend/ispolzovanie-webpack-s-typescript/">Использование Webpack с Typescript (bestcode.su 2024-01-26)</a></p> </article> <article class="article"> <div class="anchor" id="install"></div> <h2>install</h2> <ol> <li> <p>Установка typescript глобально</p> <code>npm i -g typescript</code> <p>Если нужно установить только в проект</p> <code>npm i -D typescript</code> </li> <li> <p>Проверим установленную версию typescript</p> <code>tsc -v</code> <code>Version 5.2.2</code> </li> <li> <p>Теперь мы можем скомпилировать любой ts файл (например, index.ts) в js файл командой</p> <code>tsc index.ts</code> <p>При этом создастся файл index.js</p> </li> <li> <p>Создадим папку для нового проекта</p> <code>mkdir ts_project</code> </li> <li> <p>Перейдем в папку ts_project</p> <code>cd ts_project</code> </li> <li> <p>Инициализируем typescript в новом проекте</p> <code>tsc --init</code> </li> <li> <p>При этом будет создан файл конфигурации</p> <code>tsconfig.json</code> </li> <li> <p>Теперь можно скомпилировать все ts файлы проекта командой</p> <code>tsc</code> </li> <li>Вся конфигурация для компилятора ts файлов записывается в файл tsconfig.json, например <pre>{\r\n  "CompilerOptions": {\r\n    "target": "es6",\r\n    "sourceMap": true,\r\n    "outFile": "build/tsc.js"\r\n  },\r\n  "include": [\r\n    "src"\r\n  ],\r\n  "exclude": [\r\n    "node_modules"\r\n  ]\r\n}</pre> </li> </ol> </article> <article class="article"> <h2>Установка webpack для работы с typescript</h2> <p>Далее мы установим пакеты webpack и ts-loader в качестве зависимостей в нашем проекте:</p> <code>npm i -D webpack webpack-cli ts-loader webpack-dev-server</code> <p>Давайте добавим файл конфигурации webpack в наш проект. В корневой папке проекта создайте файл webpack.config.js со следующими конфигурациями:</p> <pre>const path = require(\'path\');\r\n\r\nmodule.exports = {\r\n  entry: \'./src/index.ts\',\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.ts?$/,\r\n        use: \'ts-loader\',\r\n        exclude: /node_modules/,\r\n      },\r\n    ],\r\n  },\r\n  resolve: {\r\n    extensions: [\'.tsx\', \'.ts\', \'.js\'],\r\n  },\r\n  output: {\r\n    filename: \'bundle.js\',\r\n    path: path.resolve(__dirname, \'dist\'),\r\n  },\r\n  devServer: {\r\n    static: path.join(__dirname, "dist"),\r\n    compress: true,\r\n    port: 4000,\r\n  },\r\n};</pre> </article> <article class="article"> <div class="anchor" id="ts"></div> <h2>Typescript</h2> <p>Typescript это надстройка над языком Javascript со строгой типизацией, где без указания типа создаваемых данных ничего сделать нельзя. Строгая типизация гарантирует что уменьшится количество ошибок от несовпадения данных которые мы ожидаем на вход нашей функции.</p> <p>Typescript это компилируемый язык, в отличие от Javascript. Но после компиляции он становится обычным Javascript, который выполняется в браузере.</p> <p>Плюсы тайпскрипта. Кроссплатформенный язык. Предпочтителен для больших приложений. Улучшает читаемость кода и поддержку готового приложения. Улучшает документацию проекта. На этапе разработке показывает ошибки. Синтаксический сахар.</p> <P>Минусы тайпскрипта. Больше кода примерно на 30% при разработке, но на размер конечного кода (который будет уже на javascript) это не повлияет. Требует файла конфигурации где описывается его работа. Отдельный пакет для языка.</P> <p>Типы указываются при объявлении переменной.<code>let isMoodGood: boolean;</code></p> <p>Если при объявлении мы записываем в переменную значение то тип указывать не обязательно<code>let isMoodGood = true;</code>но можно и указывать<code>let isMoodGood: boolean = true;</code> </p> <p>Типы данных: Boolean, String, Number, Array, Tuple, Enum, Any, Void, Null, Undefined, Never.</p> </article>','<h1>learn.microsoft.com</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#module">Build JavaScript applications using TypeScript</a> Создание приложений JavaScript с помощью TypeScript</p> <p><a href="#module-1">Module 1. Getting Started with TypeScript</a> Начало работы с TypeScript 36 мин</p> <p><a href="#module-2">Module 2. Declare Variable Types in TypeScript</a> Объявление типов переменных в TypeScript 38 мин</p> <p><a href="#module-3">Module 3. Implement Interfaces in TypeScript</a> Реализация интерфейсов в TypeScript 46 мин</p> <p><a href="#module-4">Module 4. Develop Typed Functions in TypeScript</a> Разработка типизированных функций с использованием TypeScript 51 мин</p> <p><a href="#module-5">Module 5. Declare and Instantiate Classes in TypeScript</a> Объявление классов и создание их экземпляров в TypeScript 1 ч 7 мин</p> <p><a href="#module-6">Module 6. Generics in TypeScript</a> Определение универсальных шаблонов в TypeScript 46 мин</p> <p><a href="#module-7">Module 7. Work with External Libraries in TypeScript</a> Доступ к внешним библиотекам из TypeScript 46 мин</p> <p><a href="#module-8">Module 8. Organize Code with Namespaces in TypeScript</a> Упорядочение кода с помощью пространств имен TypeScript 46 мин</p> </div> </div> <article class="article"> <div class="anchor" id="module"></div> <h2>Build JavaScript applications using TypeScript</h2> <p><a href="https://learn.microsoft.com/api/achievements/share/ru-ru/frontend200tb-0827/WAC4HG5N?sharingId=6364D7D096225EB9">Значек</a></p> <p><a href="https://learn.microsoft.com/en-us/training/paths/build-javascript-applications-typescript/">Build JavaScript applications using TypeScript (en)</a> <br><a href="https://learn.microsoft.com/ru-ru/training/paths/build-javascript-applications-typescript/">Создание приложений JavaScript с помощью TypeScript (ru)</a></p> <p>6 ч 4 мин 8 модулей</p> <p>TypeScript предоставляет все возможности JavaScript, а также дополнительный уровень — систему типов TypeScript. В этой схеме обучения показано, как используя TypeScript для разработки JavaScript, можно создавать более надежный код, сокращать ошибки типов среды выполнения, использовать преимущества современных функций, прежде чем они будут доступны в JavaScript, и оптимизировать работу с командами разработчиков.</p> <h3>Предварительные требования</h3> <ol> <li>Знакомство с базовым HTML и JavaScript ES6/2015, включая: <ul> <li>Условные выражения</li> <li>Функции</li> <li>Область</li> <li>Массивы</li> <li>Циклы</li> <li>Итераторы</li> <li>Объект</li> <li>Классы</li> <li>Модули</li> </ul> </li> <li>Установленное программное обеспечение: <ul> <li>Git</li> <li>Visual Studio Code</li> <li>Node.js</li> <li>TypeScript</li> </ul> </li> </ol> </article> <article class="article"> <div class="anchor" id="module-1"></div> <h2>Модуль 1. Getting Started with TypeScript. Начало работы с TypeScript. 36 мин</h2> <p><a href="https://learn.microsoft.com/api/achievements/share/ru-ru/frontend200tb-0827/HYLSQA78?sharingId=6364D7D096225EB9">Значек</a></p> <p><a href="https://learn.microsoft.com/en-us/training/modules/typescript-get-started/">Getting Started with TypeScript (en)</a> <br><a href="https://learn.microsoft.com/ru-ru/training/modules/typescript-get-started/">Начало работы с TypeScript (ru)</a></p> <p>36 мин Модуль 8 единиц(ы)</p> <p>В этом модуле представлены сведения о языке TypeScript, причинах его создания и его использовании для разработки JavaScript. Вы также настроите среду разработки TypeScript для будущих упражнений.</p> <h3>Цели обучения</h3> <p>В этом модуле вы:</p> <ul> <li>Узнаете, что TypeScript является улучшением JavaScript для веб-разработки.</li> <li>Выберете редактор TypeScript.</li> <li>Установите TypeScript.</li> <li>Настроите проект TypeScript в Visual Studio Code.</li> </ul> <h3>Предварительные требования</h3> <ul> <li>Знание JavaScript</li> </ul> <h3>Этот модуль входит в состав указанных схем обучения</h3> <ul> <li>Создание приложений JavaScript с помощью TypeScript</li> </ul> <p>Введение 2 мин</p> <p>Общие сведения о TypeScript 5 мин</p> <p>Упражнение. Выбор редактора TypeScript 5 мин</p> <p>Упражнение. Установка компилятора TypeScript 5 мин</p> <p>Компиляция файла TypeScript 5 мин</p> <p>Упражнение. Подготовка проекта TypeScript 10 мин</p> <p>Проверка знаний 2 мин</p> <p>Сводка 2 мин</p> </article> <article class="article"> <h2>Урок 1 из 8. Введение. 2 мин</h2> <p>В этом модуле вы познакомитесь с языком TypeScript, узнаете, почему он был создан, и увидите, как можно использовать его преимущества для разработки JavaScript.</p> <p>Вы также настроите среду разработки TypeScript, чтобы подготовиться к будущим упражнениям.</p> <h3>Цели обучения</h3> <p>Из этого модуля вы узнаете следующее:</p> <ul> <li>Узнаете, что TypeScript является улучшением JavaScript для веб-разработки.</li> <li>Выберете редактор TypeScript.</li> <li>Установите TypeScript.</li> <li>Настроите проект TypeScript в Visual Studio Code.</li> </ul> <h3>Необходимые компоненты</h3> <ul> <li>Знание JavaScript</li> </ul> </article> <article class="article"> <h2>Урок 2 из 8. Общие сведения о TypeScript. 5 мин</h2> <p>JavaScript, один из наиболее используемых в мире языков программирования, стал официальным языком веб-разработки. Разработчики используют его для создания кроссплатформенных приложений, которые могут работать на любой платформе и в любом браузере.</p> <p>Хотя JavaScript используется для создания кроссплатформенных приложений, он не предназначен для больших приложений, включающих тысячи или даже миллионы строк кода. В JavaScript отсутствуют некоторые функции более зрелых языков, на которых написаны современные сложные приложения. В интегрированных средах разработки (IDE) будет сложно управлять JavaScript и поддерживать большие базы кода.</p> <p>TypeScript позволяет устранить ограничения JavaScript без ущерба для ключевого преимущества JavaScript — возможности выполнять код в любом месте и на любой платформе, браузере или узле.</p> <h3>Что такое TypeScript?</h3> <p>TypeScript — это язык с открытым кодом, разработанный корпорацией Майкрософт. Это супермножество JavaScript, что означает, что вы можете использовать навыки JavaScript, которые вы уже разработали вместе с некоторыми функциями, которые ранее были недоступны для вас.</p> <h3>Подсказки по типам</h3> <p>Основной компонент TypeScript — это система типов. В TypeScript можно задать тип данных переменной или параметра, используя указание типа. С помощью указаний типа вы описываете форму объекта для более подробного документирования, чтобы TypeScript проверил правильность работы кода.</p> <p>С помощью статической проверки типов TypeScript перехватывает проблемы с кодом на ранних этапах разработки, которые JavaScript не может обнаружить, пока код не будет запущен в браузере. Типы также позволяют описать, что должен делать код. Если вы работаете в команде, ваш коллега затем легко разберется в вашем коде.</p> <p>Типы также предоставляют преимущества анализа и продуктивности средств разработки, таких как IntelliSense, навигация на основе символов, переход к определению, поиск всех ссылок, завершение операторов и рефакторинг кода.</p> <p>Написание типов может быть необязательным в TypeScript, так как вывод типов позволяет получить большую часть этой возможности без написания дополнительного кода. Если TypeScript может определить тип данных неявно (например, при присвоении значения переменной с помощью <code class="code-inline">let age = 42</code>), он автоматически выводит тип данных.</p> <h3>Попробовать! Изучение типов</h3> <p>Рассмотрим пример, демонстрирующий использование типов.</p> <ol> <li>Откройте <a href="https://www.typescriptlang.org/play">тестовую площадку</a> TypeScript. С тестовой площадкой вы познакомитесь более подробно далее в рамках этого модуля.</li> <li> <p>Скопируйте и вставьте следующий пример кода JavaScript в область TypeScript слева:</p> <code>function addNumbers(x, y) { <br>return x + y; <br>} <br>console.log(addNumbers(3, 6));</code> <p>Обратите внимание, что тот же код отображается в области .JS справа. На этой панели показан код JavaScript, создаваемый TypeScript после компиляции.</p> </li> <li>Нажмите <strong>Выполнить</strong>, чтобы выполнить код JavaScript. Затем перейдите на вкладку <strong>Журналы</strong> и обратите внимание, что значение <code class="code-inline">9</code> записывается в консоль. JavaScript назначил тип <code class="code-inline">number</code> параметрам <code class="code-inline">x</code> и <code class="code-inline">y</code>, а функция вернула число.</li> <li>Замените <code class="code-inline">3</code> на <code class="code-inline">"three"</code> (включая кавычки) в коде TypeScript и запустите его. Теперь JavaScript присваивает тип <code class="code-inline">string</code> параметру <code class="code-inline">x</code> и возвращает в консоль тип строки "three6". Вы, вероятно, сталкивались с такими ситуациями раньше и знаете, что это может привести к непредвиденным результатам. <p>В области TypeScript обратите внимание на красные волнистые линии под именами параметров в функции <code class="code-inline">addNumbers</code>. Строки указывают на то, что тип проверка ер определил ошибки. Наведите указатель мыши на один из параметров и прочтите описание ошибки. TypeScript неявно назначает тип <code class="code-inline">any</code>, который является самым широким типом, так как он может содержать что угодно.</p></li> <li>Обновите код TypeScript, чтобы указать тип для каждого параметра. Замените <code class="code-inline">x</code> на <code class="code-inline">x: number</code> и <code class="code-inline">y</code> на <code class="code-inline">y: number</code>. <p>Вы заметите, что ошибки теперь ушли из параметров, но новый появился под первым аргументом в вызове функции: "Аргумент типа "string" не может быть назначен параметру типа "number".</p> </li> <li>Замените на <code class="code-inline">"three"</code> число, чтобы исправить ошибку. Можно передать литеральное значение, переменную или любые другие данные. TypeScript понимает форму объекта, поэтому она может уведомить вас о конфликте типов во время разработки.</li> <li>Просмотрите код JavaScript и обратите внимание, что в нем нет изменений. TypeScript смог предоставить тип проверка во время разработки, но не повлиял на полученный код JavaScript, так как он не поддерживает типы.</li> </ol> <h3>Другие функции кода TypeScript</h3> <p>TypeScript имеет больше возможностей написания кода, которые не будут находиться в JavaScript:</p> <ul> <li>Интерфейсы</li> <li>Пространства имен</li> <li>Универсальные шаблоны</li> <li>Абстрактные классы</li> <li>Модификаторы данных</li> <li>Необязательные параметры</li> <li>Перегрузка функций</li> <li>Декораторы</li> <li>Тип utils</li> <li>Ключевое слово readonly</li> </ul> <p>Дополнительные сведения о некоторых из этих функций см. в следующих модулях.</p> <h3>Совместимость TypeScript с JavaScript</h3> <p>TypeScript является строгим надмножеством <a href="https://www.ecma-international.org/ecma-262/6.0/">ECMAScript 2015</a> (ECMAScript 6 или ES6). Эта связь означает, что весь код JavaScript также является кодом TypeScript, а программа TypeScript может легко использовать JavaScript.</p> <p>Браузеры понимают только JavaScript. Чтобы приложение работало, при написании его в TypeScript необходимо скомпилировать код и преобразовать его в JavaScript. Преобразование кода TypeScript в код JavaScript осуществляется с помощью компилятора TypeScript или транскомпилятора, совместимого с TypeScript. Полученный JavaScript — это чистый простой код, который работает где угодно: в браузере, на Node.js или в приложениях.</p> <h3>Важно!</h3> <p>При работе с TypeScript следует помнить, что TypeScript будет скомпилирован (или транскомпилирован) в JavaScript, который и будет выполняться средой выполнения. TypeScript можно использовать в любом проекте, где используется JavaScript.</p> <h3>Миграция из JavaScript в TypeScript</h3> <p>Внедрение TypeScript не является двоичным выбором, поэтому вы можете постепенно перенести базу кода. Вы можете начать с аннотации существующего JavaScript с помощью JSDoc, а затем переключить несколько файлов для проверки с помощью TypeScript. Вы можете подготовить базу кода к полному преобразованию с течением времени.</p> <p>Дополнительные сведения об этом процессе см. в <a href="https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html">руководствах по TypeScript: миграция из JavaScript</a></p> </article> <article class="article"> <h2>Урок 3 из 8. Упражнение. Выбор редактора TypeScript. 5 мин</h2> <p>Вы можете написать код TypeScript в любом текстовом редакторе или IDE.</p> <p>В этом упражнении вы узнаете о параметрах текстового редактора, а затем настроите Visual Studio Code, чтобы можно было выполнить оставшиеся упражнения в этом модуле.</p> <h3>Тестовая площадка TypeScript</h3> <p>Ранее вы написали простой код TypeScript на тестовой площадке. Тестовая площадка — это место, где можно писать, совместно использовать и изучать TypeScript. Ее можно использовать в следующих целях:</p> <ul> <li>Изучение TypeScript в среде, где ничего не может сломаться.</li> <li>Эксперименты с синтаксисом TypeScript и совместное использование URL-адресов с другими пользователями.</li> <li>Эксперименты с различными функциями компилятора TypeScript.</li> </ul> <p>В этом курсе вы иногда будете использовать тестовую площадку, чтобы испытывать новые концепции TypeScript.</p> <h3>Интегрированные среды разработки</h3> <p>Для полноценного редактирования и использования инструментов TypeScript можно использовать различные интегрированные среды разработки (IDE), которые поддерживают TypeScript или содержат подключаемые модули или пакеты инструментов, разработанные для его поддержки. В этом модуле используется Visual Studio Code, но вы можете выбрать любой другой редактор.</p> <h3>Установка Visual Studio Code</h3> <p>Visual Studio Code — это простой и бесплатный редактор исходного кода, который работает в операционных системах macOS, Linux и Windows. Он изначально поддерживает JavaScript, TypeScript и Node.js и имеет обширную экосистему расширений для других языков и сред выполнения.</p> <p>Установка Visual Studio Code:</p> <ol> <li>Перейдите на страницу <a href="https://code.visualstudio.com/download">загрузки Visual Studio Code</a> и выберите вариант загрузки для вашей операционной системы.</li> <li>Чтобы получить дополнительные рекомендации по настройке, перейдите на страницу установки операционной системы: <ul> <li>Linux</li> <li>macOS</li> <li>Windows</li> </ul> </li> </ol> <p>Теперь, когда у вас есть редактор кода, можно приступать к установке TypeScript.</p> </article> <article class="article"> <h2>Урок 4 из 8. Упражнение. Установка компилятора TypeScript. 5 мин</h2> <p>В редакторе кода может быть встроенная поддержка языка Для TypeScript. Однако чтобы преобразовать код TypeScript в JavaScript, который будет понимать браузер, необходимо сначала установить библиотеку TypeScript. Библиотека также содержит компилятор TypeScript, который называется tsc.</p> <p>TypeScript можно установить глобально (доступно в любой точке файловой системы) или локально (доступно только на уровне проекта). В этом упражнении вы установите TypeScript глобально. По мере внедрения TypeScript в более крупные и сложные базы кода вы, скорее всего, перейдете к установке по проектам, чтобы лучше контролировать согласованность проектов.</p> <h3>Тестирование установки TypeScript</h3> <p>Возможно, на вашем компьютере уже установлен TypeScript. Вы можете проверка, открыв окно командной строки и введя <code class="code-inline">tsc</code>. Если TypeScript установлен, вы увидите версию и список команд компилятора. Теперь все готово к использованию TypeScript.</p> <p>Если TypeScript не установлен, появится сообщение о том, что команда не распознана. В этом случае перейдите к следующему шагу упражнения.</p> <h3>Установка диспетчера пакетов Node (npm)</h3> <p>Для запуска пакета TypeScript потребуется копия Node.js в качестве среды. Node.js, библиотека JavaScript для серверных приложений, не требуется для изучения TypeScript. Но, установив ее, вы также получаете диспетчер пакетов Node, npm — диспетчер пакетов для языка JavaScript. Затем вы сможете использовать npm для установки пакета TypeScript.</p> <p>Если вы являетесь разработчиком JavaScript, npm, скорее всего, уже установлен на вашем компьютере. Вы можете проверка, открыв окно командной строки и введя <code class="code-inline">npm version</code>. Если npm установлен, вы увидите версию и список команд компилятора и сможете использовать npm.</p> <p>Если npm не установлен, появится сообщение о том, что команда не распознана. Установка Node.js:</p> <ol> <li>Перейдите на страницу <a href="https://nodejs.org/en/download"></a>Загрузки Node.js.</li> <li>Выберите любую из доступных версий Node.js, чтобы скачать и установить ее.</li> <li>Чтобы убедиться, что npm установлен, откройте окно командной строки и введите <code class="code-inline">npm version</code>.</li> </ol> <h3>Установите TypeScript</h3> <p>TypeScript доступен в виде пакета в реестре npm — typescript. Установка последней версии TypeScript:</p> <ol> <li>В окне командной строки введите <code class="code-inline">npm install -g typescript</code>.</li> <li>Введите <code class="code-inline">tsc</code>, чтобы убедиться, что TypeScript установлен. Если он успешно установлен, эта команда должна отобразить список команд и параметров компилятора.</li> </ol> </article> <article class="article"> <h2>Урок 5 из 8. Компиляция файла TypeScript. 5 мин</h2> <p>Как вы уже знаете, TypeScript является строгим надмножеством <a href="https://www.ecma-international.org/ecma-262/6.0/">ECMAScript 2015</a> (ECMAScript 6 или ES6). Весь код JavaScript также является кодом TypeScript, и программа TypeScript может легко использовать JavaScript. На самом деле вы можете преобразовать файл JavaScript в файл TypeScript только путем переименования расширения из JS в TS.</p> <p>Однако не весь код TypeScript является кодом JavaScript. TypeScript добавляет новый синтаксис в JavaScript, что упрощает чтение и реализацию некоторых функций JavaScript, таких как статический ввод. Хотя код TypeScript упрощает разработку и уменьшает вероятность ошибок, браузеры и большинство других сред выполнения изначально не поддерживают TypeScript. По этой причине TypeScript требует шаг сборки (транскомпилятор) для преобразования его в JavaScript для работы приложения.</p> <p>Код TypeScript можно преобразовать в код JavaScript с помощью компилятора TypeScript. Или можно использовать совместимый с TypeScript транскомпилятор, например Babel, swc или Sucrase. Этот процесс удаляет код, относящийся к TypeScript (например, объявления типов и интерфейсы). Кроме того, он создает чистый файл JavaScript, который запускается с веб-страниц и является совместимым с браузерами.</p> <h3>Компиляция файла TypeScript</h3> <p>Запустите компилятор TypeScript из командной строки с помощью команды <code class="code-inline">tsc</code>. При запуске <code class="code-inline">tsc</code> без параметров он компилирует все файлы TS в текущей папке и создает JS-файл для каждого из них.</p> <p>Можно также скомпилировать конкретный файл. Например, чтобы скомпилировать файл TypeScript с именем utility_functions.ts, введите <code class="code-inline">tsc utility_functions.ts</code>.</p> <p>Примечание. Вводить расширение файла .ts необязательно.</p> <p>Если ошибки компилятора отсутствуют, команда <code class="code-inline">tsc</code> создает файл JavaScript с именем utility_functions.js.</p> <p>Если компилятор обнаруживает ошибки в коде, он отображает их в командном окне. Исправьте ошибки в файле TypeScript и повторите команду <code class="code-inline">tsc</code>.</p> <h3>Параметры компилятора</h3> <p>С помощью параметров компилятора можно управлять созданием JavaScript из исходного TypeScript. Параметры можно задать либо в командной строке, как и при использовании многих интерфейсов командной строки, либо в файле JSON с именем tsconfig.json.</p> <p>Вам доступно множество параметров компилятора. Полный список параметров можно найти в документации по интерфейсам командной строки tsc. Ниже перечислены наиболее распространенные из них:</p> <ul> <li>noImplicitAny</li> <li>noEmitOnError</li> <li>target</li> <li>Параметры каталога</li> </ul> <p>Для управления компиляцией можно использовать параметры компилятора с командой tsc, в том числе:</p> <ul> <li>Параметр <code class="code-inline">--noImplicitAny</code> предписывает компилятору вызывать ошибки в выражениях и объявлениях с неявным типом <code class="code-inline">any</code>. Например: <code>tsc utility_functions.ts --noImplicitAny</code> </li> <li>Параметр <code class="code-inline">--target</code> указывает целевую версию ECMAScript для файла JavaScript. В этом примере компилируется файл JavaScript, совместимый с ECMAScript 6: <code>tsc utility_functions.ts --target "ES2015"</code> </li> </ul> <p>Дополнительные сведения о других параметрах компилятора см. в следующих модулях.</p> </article> <article class="article"> <h2>Урок 6 из 8. Упражнение. Подготовка проекта TypeScript. 10 мин</h2> <p>В этом упражнении вы создадите проект TypeScript. Затем вы убедитесь, что ваша среда разработки правильно настроена, запустив компилятор и убедившись, что файл JavaScript создан.</p> <h3>Настройка проекта TypeScript в Visual Studio Code</h3> <p>На этом шаге вы создадите рабочую область проекта в Visual Studio Code, а затем инициализируете проект.</p> <ol> <li>Откройте Visual Studio Code.</li> <li>На панели приветствия выберите пункт Добавить папку рабочей области.</li> <li>Создайте новую папку проекта и нажмите кнопку Добавить.</li> <li>На левой панели нажмите кнопку Обозреватель.</li> <li>На панели обозревателя щелкните значок Создать файл.</li> <li>В разделе Упражнение по модулю 01 введите имя файла module01.ts, а затем нажмите клавишу ВВОД. Файл TypeScript появится в новом редакторе кода.</li> </ol> <h3>Создание файла tsconfig.json</h3> <p>Компилятор TypeScript применяет поведение по умолчанию при компиляции исходного кода TypeScript. Но вы можете изменить параметры компилятора TypeScript, добавив файл tsconfig.json в корневую папку проекта TypeScript. Этот файл определяет параметры проекта TypeScript, такие как параметры компилятора и включаемые в него файлы.</p> <p>Вы можете использовать <code class="code-inline">init</code> параметр компилятора TypeScript для создания файла tsconfig.json с параметрами по умолчанию.</p> <ol> <li>В Visual Studio Code откройте новое окно терминала, выбрав Терминал - Новый терминал.</li> <li>В командной строке введите <code class="code-inline">tsc --init</code>. <p>Обратите внимание, что новый файл tsconfig.json добавлен на панель обозревателя. Для просмотра файла, возможно, потребуется обновить панель обозревателя.</p> </li> <li>Откройте файл tsconfig.json в редакторе кода. Вы увидите, что он имеет множество вариантов, большинство из которых закомментированы. Просмотрите описание каждого включенного параметра.</li> <li>В файле tsconfig.json найдите параметр target и измените его на <code class="code-inline">"ES2015"</code>.</li> <li>Обновите файл tsconfig.json, чтобы компилятор сохранил все файлы JavaScript в новой папке. <p>a. На панели обозревателя создайте в проекте новую папку с именем build.</p> <p>b. В файле tsconfig.json найдите параметр <code class="code-inline">outDir</code>, удалите комментарий и задайте для параметра значение build.</p> </li> <li>Сохраните файл tsconfig.json.</li> <li>В командной строке введите <code class="code-inline">tsc</code>. Эта команда считывает файл tsconfig.json и сбрасывает параметры проекта.</li> </ol> <p>Совет. Дополнительные сведения о файле jsconfig.json см. в справочнике по TSConfig.</p> <h3>Компиляция TypeScript в JavaScript</h3> <p>Добавим код JavaScript в файл TypeScript, а затем скомпилируем его.</p> <ol> <li>Скопируйте и вставьте следующий код JavaScript в редактор module01.ts. <pre>\r\nfunction addNumbers(x, y) {\r\n  return x + y;\r\n}\r\nconsole.log(addNumbers(3, 6));\r\n      </pre> <p>Обратите внимание, что даже если код еще не скомпилирован, Visual Studio Code использовал встроенную поддержку TypeScript для проверки типов. Как и ранее, в двух параметрах функции addNumbers есть ошибки типа.</p></li> <li>Обновите код TypeScript, чтобы указать тип для каждого параметра. Замените <code class="code-inline">x</code> на <code class="code-inline">x: number</code>, а <code class="code-inline">y</code> — на <code class="code-inline">y: number</code>.</li> <li>Сохраните файл TypeScript. Компилятор TypeScript работает только с сохраненной версией файла.</li> <li>В командной строке терминала введите <code class="code-inline">tsc module01.ts</code>. Компилятор должен запуститься без ошибок. <p>Обратите внимание, что добавлен новый файл JavaScript, но он не содержится в папке сборки в Обозреватель. Для просмотра файла, возможно, потребуется обновить панель обозревателя. При выполнении команды <code class="code-inline">tsc</code> для одного файла компилятор игнорирует файл tsconfig.json.</p> </li> <li>Чтобы загрузить файл конфигурации и скомпилировать все TS-файлы в папке, запустите <code class="code-inline">tsc</code> без имени файла. Эта команда должна добавить JS-файл в папку сборки. Не забудьте удалить дополнительный JS-файл в корневой папке.</li> <li>Откройте файл module01.js, а затем нажмите кнопку Разделить редактор справа в правом верхнем углу, чтобы открыть новое представление редактора. <p>Теперь TS- и JS-файлы должны быть доступны параллельно. Обратите внимание, что они идентичны, за исключением того, что файл JS не содержит новых аннотаций типа.</p> </li> <li>В командной строке терминала введите <code class="code-inline">node ./build/module01.js</code>. Эта команда запускает JavaScript и отображает результат в журнале консоли.</li> </ol> <h3>Добавление HTML-файла</h3> <p>В качестве последнего шага добавьте в проект HTML-файл, чтобы можно было выполнять и тестировать код JavaScript.</p> <ol> <li>На панели обозревателя щелкните значок Создать файл.</li> <li>Введите имя файла module01.html, а затем нажмите клавишу ВВОД. HTML-файл появится в новом редакторе кода.</li> <li>Скопируйте и вставьте следующий HTML-код в редактор, а затем сохраните файл. <pre>\r\n&lt;!DOCTYPE html&gt;\r\n&lt;html lang="en" dir="ltr"&gt;\r\n&lt;head&gt;\r\n  &lt;meta charset="UTF-8"&gt;\r\n  &lt;title&gt;Test JavaScript&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n  &lt;h1&gt;Test JavaScript&lt;/h1&gt;\r\n    &lt;p id="date"&gt;&lt;/p&gt;\r\n    &lt;p&gt;This page calls the script module01.js and is used for testing.&lt;/p&gt;\r\n    &lt;script src="./build/module01.js"&gt;&lt;/script&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n      </pre> </li> <li>В обозревателе щелкните правой кнопкой мыши module01.html, а затем выберите Открыть в браузере по умолчанию.</li> <li>Активируйте средства разработчика для браузера и приступите к написанию кода в TypeScript!</li> </ol> <h3>Решение упражнения</h3> <p>Вы можете скачать готовую рабочую область Visual Studio Code из репозитория кода GitHub. Чтобы запустить решение, необходимо сначала установить на компьютере следующее программное обеспечение:</p> <ul> <li>Visual Studio Code (или IDE по своему усмотрению).</li> <li>Диспетчер пакетов Node (npm).</li> <li>Компилятор TypeScript (tsc).</li> </ul> <p>Для получения наилучших результатов полностью следуйте инструкциям по настройке среды и использованию компилятора TypeScript в этом модуле. После настройки среды можно запустить любые файлы подготовки к заданию или его решения в схеме обучения Сборка приложений JavaScript с помощью TypeScript.</p> </article> <article class="article"> <h2>Урок 7 из 8. Проверка знаний. 2 мин</h2> <p>Выберите наиболее подходящий ответ на каждый из приведенных ниже вопросов:</p> <ol> <li>1. Как связаны TypeScript и JavaScript? <ul> <li>TypeScript — это надмножество JavaScript.</li> <li>TypeScript и JavaScript идентичны.</li> <li>TypeScript — это подмножество JavaScript.</li> </ul> </li> <li>2. Зачем нужно компилировать (или транскомпилировать) код TypeScript в JavaScript, прежде чем его можно будет использовать в приложениях? <ul> <li>Не обязательно, так как для его работы необходимо переименовать только файл TypeScript с расширением JS.</li> <li>Код TypeScript считается допустимым javaScript, а код JavaScript недействителен в TypeScript.</li> <li>TypeScript включает функции кода, несовместимые с браузерами.</li></ul></li>  <li>3. Что делает команда npm install -g typescript? <ul> <li>Устанавливает npm, чтобы можно было установить TypeScript.</li> <li>Устанавливает компилятор TypeScript на компьютере глобально.</li> <li>Устанавливает Node.js и npm.</li> </ul> </li> </ol> </article> <article class="article"> <h2>Урок 8 из 8. Сводка. 2 мин</h2> <p>После изучения этого урока вы можете выполнять следующие задачи:</p> <ul> <li>Объяснить, что TypeScript является улучшением JavaScript для веб-разработки.</li> <li>Выберете редактор TypeScript.</li> <li>Установите TypeScript.</li> <li>Настроите проект TypeScript в Visual Studio Code.</li> </ul> <h3>Ресурсы</h3> <p>Дополнительные сведения о TypeScript:</p> <ul> <li><a href="https://www.youtube.com/watch?v=tXK50czRbdA">Секреты TypeScript с Андерсом Хейлсбергом (корпорация Майкрософт)</a>. Создатель TypeScript обсуждает TypeScript 3.4.</li> <li><a href="https://www.typescriptlang.org/">Документация по TypeScript и другие ресурсы</a>.</li> <li><a href="https://github.com/microsoft/TypeScript">Репозитории TypeScript на GitHub</a>. Участие в сообществе разработчиков открытого кода TypeScript.</li> <li><a href="https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html">Руководство по миграции с JavaScript</a>. Дополнительные сведения о переносе существующих проектов JavaScript в TypeScript.</li> <li><a href="https://code.visualstudio.com/docs/typescript/typescript-tutorial">Учебник по TypeScript в Visual Studio Code</a>. Дополнительные сведения об использовании TypeScript в Visual Studio Code.</li> </ul> </article> <article class="article"> <div class="anchor" id="module-2"></div> <h2>Модуль 2. Declare Variable Types in TypeScript. Объявление типов переменных в TypeScript. 38 мин</h2> <p><a href="https://learn.microsoft.com/api/achievements/share/ru-ru/frontend200tb-0827/8R6RQ83W?sharingId=6364D7D096225EB9">Значек</a></p> <p><a href="https://learn.microsoft.com/en-us/training/modules/typescript-declare-variable-types/">Declare variable types in TypeScript (en)</a> <br><a href="https://learn.microsoft.com/ru-ru/training/modules/typescript-declare-variable-types/">Объявление типов переменных в TypeScript (ru)</a></p> <p>38 мин Модуль 10 единиц(ы)</p> <p>JavaScript — язык с динамической типизацией. Это упрощает объявление переменных, но в некоторых случаях может приводить к непредвиденным результатам. Статическая система типов в TypeScript позволяет описывать форму объектов, предоставлять более качественную документацию и проверять правильность работы кода. В TypeScript при объявлении пространств имен, классов, свойств, функций, переменных и других элементов языка с ними связываются типы. Способ определения типа и его сопоставления с элементом языка зависит от характера этого элемента. В этом модуле представлены некоторые из имеющихся типов и показано, как связывать их с переменными. Последующие модули будут посвящены тому, как в интерфейсах, функциях и классах используется статическая типизация.</p> <h3>Цели обучения</h3> <p>В этом модуле вы научитесь выполнять следующее.</p> <ul> <li>объяснять преимущества объявления типизированных переменных в TypeScript;</li> <li>объявлять переменные с помощью примитивных типов;</li> <li>объявлять переменные с помощью типов объектов;</li> <li>объявлять переменные с помощью типов объединений и пересечений.</li> </ul> <h3>Предварительные требования</h3> <ul> <li>Знакомство с JavaScript.</li> <li>Умение объявлять переменные с помощью let и const в JavaScript.</li> <li>Базовые познания в TypeScript.</li> <li>Установленное программное обеспечение: <ul> <li>Git</li> <li>Visual Studio Code</li> <li>Node.js</li> <li>TypeScript</li> </ul> </li> </ul> <h3>Этот модуль входит в состав указанных схем обучения</h3> <ul> <li>Создание приложений JavaScript с помощью TypeScript</li> </ul> <p>Введение 2 мин</p> <p>Общие сведения о типах в TypeScript 5 мин</p> <p>Примитивные типы в TypeScript 5 мин</p> <p>Упражнение. Перечисления 5 мин</p> <p>Типы any и unknown в TypeScript 5 мин</p> <p>Типы объединений и пересечений в TypeScript 2 мин</p> <p>Типы коллекций в TypeScript 5 мин</p> <p>Задание. Использование типов в TypeScript 5 мин</p> <p>Проверка знаний 2 мин</p> <p>Итоги 2 мин</p> </article> <article class="article"> <h2>Урок 1 из 10. Введение. 2 мин</h2> <p>Как динамически типизированный язык JavaScript упрощает объявление переменных, но в некоторых случаях может привести к непредвиденным результатам. Система статического типа в TypeScript позволяет описать форму объекта, предоставить лучшую документацию и разрешить TypeScript проверить правильность работы кода. В TypeScript при объявлении пространств имен, классов, свойств, функций, переменных и других элементов языка с ними связываются типы. Способ определения типа и его сопоставления с элементом языка зависит от характера этого элемента.</p> <p>В этом модуле представлены некоторые из имеющихся типов и показано, как связывать их с переменными. Последующие модули будут посвящены тому, как в интерфейсах, функциях и классах используется статическая типизация.</p> <h3>Цели обучения</h3> <p>По завершении этого модуля вы сможете:</p> <ul> <li>объяснять преимущества объявления типизированных переменных в TypeScript;</li> <li>объявлять переменные с помощью примитивных типов;</li> <li>объявлять переменные с помощью типов объектов;</li> <li>объявлять переменные с помощью типов объединений и пересечений.</li> </ul> <h3>Необходимые компоненты</h3> <ul> <li>Знакомство с JavaScript.</li> <li>Умение объявлять переменные с помощью <code class="code-inline">let</code> и <code class="code-inline">const</code> в JavaScript.</li> <li>Установленное программное обеспечение: <ul> <li>Git</li> <li>Visual Studio Code</li> <li>Node.js</li> <li>TypeScript — TypeScript можно установить после установки Node.js, выполнив следующую команду в терминале или окне команд: <code>npm install -g typescript</code> </li> </ul> </li> </ul> <p>Для получения наилучших результатов полностью следуйте инструкциям по настройке окружения и использованию компилятора TypeScript в статье <a href="https://learn.microsoft.com/ru-ru/training/modules/typescript-get-started/">Модуль 01. Начало работы с TypeScript</a>. После настройки окружения можно запустить любые файлы подготовки к заданию или его решения в <a href="https://learn.microsoft.com/ru-ru/training/paths/build-javascript-applications-typescript/">приложении сборки JavaScript</a> с помощью схемы обучения TypeScript.</p> </article> <article class="article"> <h2>Урок 2 из 10. Общие сведения о типах в TypeScript. 5 мин</h2> <p>Основное преимущество TypeScript заключается в том, что он позволяет добавлять статические типы в код JavaScript. Типы устанавливают статические ограничения на элементы программы, такие как функции, переменные и свойства, благодаря чему компиляторам и средствам разработки проще проводить проверку и оказывать помощь в процессе разработки.</p> <p>Система статических типов компиляции TypeScript тесно моделирует динамическую систему типов времени выполнения JavaScript. Система статических типов компиляции позволяет точно выразить связи типов, которые должны существовать при запуске программ. Затем убедитесь, что эти предположения предварительно проверены компилятором TypeScript. Анализ типов TypeScript производится исключительно во время компиляции, поэтому во время выполнения программы дополнительной нагрузки не создается.</p> <p>Статические типы также позволяют лучше документировать назначение кода, делая код понятнее для вас и других разработчиков.</p> <h3>Объявление переменных let и const</h3> <p>В <a href="https://www.ecma-international.org/ecma-262/6.0/">ECMAScript 2015</a> для объявления переменных в JavaScript были добавлены ключевые слова <code class="code-inline">let</code> и <code class="code-inline">const</code>. Это позволило решить некоторые проблемы, связанные с ключевым словом <code class="code-inline">var</code> в предыдущих версиях. Это изменение дает возможность объявлять переменные с областью видимости на уровне блока и запрещает объявлять одну и ту же переменную несколько раз.</p> <p>В TypeScript рекомендуется использовать ключевые слова <code class="code-inline">let</code> и <code class="code-inline">const</code> для объявления переменных.</p> <p><strong>Примечание.</strong> Разница между ними заключается в том, что объявления let не требуют инициализации, тогда как объявления const всегда инициализируются значением. Кроме того, объявления const нельзя переназначать.</p> <h3>Упражнение. Определение типа в TypeScript</h3> <p>Типы с переменными можно связывать с помощью явных аннотаций типов или путем неявного определения типа.</p> <p>Явные аннотации типов — рекомендуемый, хотя и необязательный метод в TypeScript. Чтобы объявить явный тип, используйте синтаксис <code class="code-inline">variableName: type</code>. <code class="code-inline">let myVariable: number</code> Инструкция объявляет переменную как тип числа без инициализации. Кроме того, можно инициализировать переменную с помощью <code class="code-inline">let myVariable: number = 10</code>.</p> <p>Чтобы означать тип переменной с помощью вывода типов, используйте тот же формат, который вы используете в JavaScript. Например, указывает, что переменная имеет тип <code class="code-inline">number</code>, <code class="code-inline">let myVariable = 10</code> так как она инициализирована со значением <code class="code-inline">10</code>.</p> <p>Давайте откроем <a href="https://www.typescriptlang.org/play">Playground</a> и посмотрим, как это работает.</p> <ol> <li>Введите следующие объявления переменных: <pre>\r\nlet x: number;   //* Explicitly declares x as a number type\r\nlet y = 1;       //* Implicitly declares y as a number type\r\nlet z;           //* Declares z without initializing it\r\n      </pre> </li> <li>TypeScript теперь знает, что <code class="code-inline">x</code> имеет тип <code class="code-inline">number</code>. TypeScript также определяет тип <code class="code-inline">y number</code> типа, так как это тип значения, используемого для инициализации. Но что произойдет при попытке присвоить переменной значение другого типа? И что произойдет с переменной z?</li> <li>Откройте в Playground вкладку Errors (Ошибки), чтобы можно было отслеживать ошибки.</li> <li>Введите <code class="code-inline">x = 1</code>. Это объявление должно работать должным образом без ошибок.</li> <li>Введите <code class="code-inline">x = "one"</code>. Как ожидалось, это объявление вызывает ошибку Type "string" не присваивается типу "number", так как статический тип проверка ing не позволяет <code class="code-inline">string</code> назначать переменную.</li> <li>Введите <code class="code-inline">y = "one"</code>. Вы увидите, что эта же ошибка возникает, так как TypeScript вычислил, что y имеет тип <code class="code-inline">number</code>.</li> <li>Введите имя переменной <code class="code-inline">y</code> с точкой после него и обратите внимание на еще одну особенность. Хотя вы не указали тип переменной <code class="code-inline">y</code> явно, IntelliSense предлагает методы, которые применимы только к типу <code class="code-inline">number</code>.</li> <li>Введите <code class="code-inline">z = 1</code> и <code class="code-inline">z = "one"</code>. В TypeScript принимаются оба значения, но почему? Эти объявления работают так же, как и в JavaScript, так как переменная <code class="code-inline">z</code> теперь может принимать любое значение, назначенное ему. TypeScript вычислил тип <code class="code-inline">any</code>, так как вы не назначали <code class="code-inline">z</code> тип или инициализировать его при объявлении. Дополнительные сведения о типе <code class="code-inline">any</code> вы узнаете позже.</li> </ol> <p>Итак, вы можете неявно определять типы в TypeScript, но зачем? При использовании определения типов вы получаете некоторые преимущества статической проверки типов и технологии IntelliSense и можете постепенно переходить на явные объявления типов в проектах. Однако явные объявления типов позволяют лучше документировать назначение кода и делают его более продуманным.</p> <h3>Типы и подтипы в TypeScript</h3> <p>Прежде чем углубляться в способы использования типов для объявления переменной, давайте рассмотрим имеющиеся в TypeScript типы и подтипы.</p> <h3>Любой тип</h3> <p>Все типы в TypeScript являются подтипами одного типа верхнего уровня, называемого any. any — это единственный тип, который может представлять любое значение JavaScript без ограничений. Все остальные типы делятся на примитивные, типы объектов или параметры типов. Они налагают различные статические ограничения на свои значения.</p> <h3>Примитивные типы</h3> <p>К примитивным типам относятся <code class="code-inline">boolean</code>, <code class="code-inline">number</code>, <code class="code-inline">string</code>, <code class="code-inline">void</code>, <code class="code-inline">null</code> и <code class="code-inline">undefined</code>, а также пользовательские перечисления или типы <code class="code-inline">enum</code>. Тип <code class="code-inline">void</code> нужен лишь для того, чтобы указывать на отсутствие значения, например в функции без возвращаемого значения. Типы <code class="code-inline">null</code> и <code class="code-inline">undefined</code> являются подтипами всех остальных типов. Явно ссылаться на <code class="code-inline">null</code> и <code class="code-inline">undefined</code> типы невозможно. Можно ссылаться только на их значения с помощью литералов <code class="code-inline">null</code> и <code class="code-inline">undefined</code>.</p> <h3>Типы объектов и параметры типов</h3> <p>Типы объектов — это все классы, интерфейс, массив и литеральные типы (все, что не является примитивным типом).</p> <p>Типы классов и интерфейсов вводятся путем объявления классов и интерфейсов, а ссылаться на них следует по имени, присвоенному в объявлении. Типы классов и интерфейсов могут быть универсальными, имеющими один или несколько параметров типа. Эти типы объектов будут рассмотрены подробнее в последующих модулях.</p> </article> <article class="article"> <h2>Урок 3 из 10. Примитивные типы в TypeScript. 5 мин</h2> <p>Начнем с самых основных и распространенных типов, которые могут встретиться вам при написании кода на JavaScript или TypeScript. Эти базовые типы позже образуют основные стандартные блоки более сложных типов.</p> <h3>Тип Boolean</h3> <p>Самым простым типом данных является логический тип boolean, принимающий значение <code class="code-inline">true</code> или <code class="code-inline">false</code>.</p> <p>Например:</p> <pre>\r\nlet flag: boolean;\r\nlet yes = true;\r\nlet no = false;\r\n  </pre> <h3>Типы Number и BigInteger</h3> <p>Как и в JavaScript, все числа в TypeScript являются либо значениями с плавающей запятой, либо BigInteger. Числа с плавающей запятой имеют тип <code class="code-inline">number</code>, а BigInteger — тип <code class="code-inline">bigint</code>. Помимо шестнадцатеричных и десятичных литералов, TypeScript поддерживает двоичные и восьмеричные, представленные в ECMAScript 2015.</p> <p>Например:</p> <pre>\r\nlet x: number;\r\nlet y = 0;\r\nlet z: number = 123.456;\r\nlet big: bigint = 100n;\r\n  </pre> <h3>Тип строки</h3> <p>Ключевое слово <code class="code-inline">string</code> представляет последовательности символов, которые хранятся как единицы кода в Юникоде UTF-16. Как и в JavaScript, в TypeScript строковые данные заключаются в двойные кавычки (<code class="code-inline">"</code>) или одинарные кавычки (<code class="code-inline">\'</code>).</p> <p>Некоторые примеры:</p> <pre>\r\nlet s: string;\r\nlet empty = "";\r\nlet abc = \'abc\';\r\n  </pre> <p>В TypeScript можно также использовать шаблонные строки, которые могут охватывать несколько строк и содержать внедренные выражения. Эти строки окружены символом backtick/backquote (\'), а внедренные выражения имеют форму <code class="code-inline">${ expr }</code>.</p> <p>Например:</p> <pre>\r\nlet firstName: string = "Mateo";\r\nlet sentence: string = `My name is ${firstName}.\r\n    I am new to TypeScript.`;\r\nconsole.log(sentence);\r\n  </pre> <p>Результат выполнения этого примера:</p> <pre>\r\nMy name is Mateo.\r\n    I am new to TypeScript.\r\n  </pre> <h3>Типы void, null и undefined</h3> <p>В JavaScript и TypeScript есть два примитивных значения, которые указывают на отсутствующее или неинициализированное значение: <code class="code-inline">null</code> и <code class="code-inline">undefined</code>. Эти типы наиболее полезны в контексте функций, поэтому мы рассмотрим их более подробно в одном из последующих модулей.</p> </article> <article class="article"> <h2>Урок 4 из 10. Упражнение. Перечисления. 5 мин</h2> <p>Давайте рассмотрим различные типы данных TypeScript, доступные и эффекты, которые они имеют в нашем коде.</p> <h3>Тип перечисления</h3> <p>Полезным дополнением к стандартному набору типов данных из JavaScript является тип перечисления или <code class="code-inline">enum</code>.</p> <p>Перечисления упрощают работу с наборами связанных констант. Символьное enum имя для набора значений. Перечисления представляются как типы данных, и их можно использовать для создания наборов констант, которые затем применяются в переменных и свойствах.</p> <p>Если подпрограмма принимает ограниченный набор переменных, рекомендуется использовать перечисление. Перечисления делают код более понятным и удобочитаемым, особенно при использовании осмысленных имен.</p> <p>Использование перечислений:</p> <ul> <li>помогает сократить количество ошибок, вызванных перестановкой или опечатками;</li> <li>упрощает изменение значений в будущем;</li> <li>Упрощает чтение кода, что означает, что ошибки будут ползать в него.</li> <li>обеспечивает прямую совместимость. При перечислении код, скорее всего, завершится ошибкой, если кто-то изменяет значения, соответствующие именам элементов в будущем.</li> </ul> <h3>Создание перечисления</h3> <p>Перечисления позволяют указать список доступных значений. Они особенно полезны, если у вас есть набор значений, которые может принимать определенный тип переменной. Предположим, что у вас есть поле во внешней базе данных с именем ContractStatus, которая содержит номера 1, 2 или 3, которые представляют следующие состояния контактов: Постоянный, Temp и Ученик. Мы создадим перечисление с этими значениями и рассмотрим поддержку TypeScript.</p> <ol> <li>Откройте <a href="https://www.typescriptlang.org/play">тестовую площадку</a> и удалите существующий код.</li> <li>Введите следующий код, чтобы создать сценарий <code class="code-inline">enum</code> : <pre>\r\nenum ContractStatus {\r\n     Permanent,\r\n     Temp,\r\n     Apprentice\r\n}\r\n      </pre> </li> <li>Теперь объявите для нового сотрудника переменную с именем <code class="code-inline">employeeStatus</code> типа <code class="code-inline">ContractStatus</code> и присвойте ей значение <code class="code-inline">"Temp"</code>. Выведите результат в консоль. <pre>\r\nlet employeeStatus: ContractStatus = ContractStatus.Temp;\r\nconsole.log(employeeStatus);\r\n      </pre> </li> <li>Выберите Выполнить. Обратите внимание на значение, отображаемое в окне Log (Журнал). Какое значение возвращается?</li> <li>По умолчанию значения <code class="code-inline">enum</code> начинаются с нуля, поэтому значение <code class="code-inline">Permanent</code> равно 0, <code class="code-inline">Temp</code> равно 1, а <code class="code-inline">Apprentice</code> равно 2. Если нужно, чтобы значения начинались с другого числа (в данном случае 1), укажите это в объявлении <code class="code-inline">enum</code>. Чтобы значения <code class="code-inline">enum</code> начинались с 1, внесите указанные ниже изменения. <pre>\r\nenum ContractStatus {\r\n     Permanent = 1,\r\n     Temp,\r\n     Apprentice\r\n}\r\n      </pre> </li> <li>Повторно запустите код, выбрав Run (Выполнить). Обратите внимание: теперь отображается значение 2.</li> <li>Чтобы отобразить имя, связанное со значением перечисления, можно использовать предоставленный индексатор. Добавьте следующую строку в конце кода: <code>console.log(ContractStatus[employeeStatus]);</code> </li> <li>Выполните код. Обратите внимание, что отображается значение Temp ( имя, связанное со значением перечисления 2).</li> </ol> </article> <article class="article"> <h2>Урок 5 из 10. Типы any и unknown в TypeScript. 5 мин</h2> <p>Иногда вам потребуется работать со значениями, неизвестными вам во время разработки кода. В таких случаях можно использовать типы <code class="code-inline">any</code> и <code class="code-inline">unknown</code> и контролировать возможные действия с переданными значениями с помощью утверждения типа и условий типа.</p> <h3>Любой тип</h3> <p><code class="code-inline">any</code> — это единственный тип, который может представлять любое значение JavaScript без ограничений. Этот тип может быть полезен при ожидании значения из сторонней библиотеки или входных данных пользователей, где это значение является динамическим, так как <code class="code-inline">any</code> тип позволит переназначить различные типы значений. Как упоминалось ранее, тип <code class="code-inline">any</code> позволяет постепенно переводить код JavaScript на использование статических типов TypeScript.</p> <p>В следующем примере объявляется переменная типа <code class="code-inline">any</code>, и ей присваиваются значения:</p> <pre>\r\nlet randomValue: any = 10;\r\nrandomValue = \'Mateo\';   // OK\r\nrandomValue = true;      // OK\r\n  </pre> <p>При компиляции этого примера ошибка не возникает, так как тип <code class="code-inline">any</code> охватывает значения всех возможных типов. Проверка типа для <code class="code-inline">any</code> не предусмотрена, и вы не обязаны проводить никаких проверок перед вызовом его свойств, их конструированием или обращением к ним.</p> <p>Использование типа <code class="code-inline">any</code> в этом примере позволяет вызывать:</p> <ul> <li>свойство, которого нет у типа;</li> <li>randomValue как функцию;</li> <li>метод, который применяется только к типу string.</li> </ul> <p>Поскольку <code class="code-inline">randomValue</code> регистрируется как <code class="code-inline">any</code>, все приведенные ниже примеры являются допустимыми TypeScript и не приводят к ошибке времени компиляции. Однако ошибки среды выполнения могут возникать в зависимости от фактического типа данных переменной. В приведенном выше примере, где для <code class="code-inline">randomValue</code> задано логическое значение, следующие строки кода будут вызывать проблемы во время выполнения:</p> <pre>\r\nconsole.log(randomValue.name);  // Logs "undefined" to the console\r\nrandomValue();                  // Returns "randomValue is not a function" error\r\nrandomValue.toUpperCase();      // Returns "randomValue is not a function" error\r\n  </pre> <p><strong>Важно!</strong> Помните, что все удобство использования <code class="code-inline">any</code> достигается за счет потери безопасности типов. Безопасность типов — одна из основных причин использовать TypeScript. <code class="code-inline">any</code> следует использовать, только когда это действительно необходимо.</p> <h3>Тип unknown</h3> <p>Хотя тип <code class="code-inline">any</code> очень гибкий, он может вызывать непредвиденные ошибки. Чтобы устранить эту проблему, TypeScript представила <code class="code-inline">unknown</code> тип.</p> <p>Тип <code class="code-inline">unknown</code> похож на тип <code class="code-inline">any</code> тем, что типу <code class="code-inline">unknown</code> можно присваивать любое значение. Однако вы не можете получить доступ к свойствам типа <code class="code-inline">unknown</code>, а также вызывать или создавать их.</p> <p>В этом примере тип <code class="code-inline">any</code> из предыдущего примера заменяется на <code class="code-inline">unknown</code>. Теперь происходят ошибки проверки типов, что не позволяет скомпилировать код, пока они не будут устранены.</p> <pre>\r\nlet randomValue: unknown = 10;\r\nrandomValue = true;\r\nrandomValue = \'Mateo\';\r\n\r\nconsole.log(randomValue.name);  // Error: Object is of type unknown\r\nrandomValue();                  // Error: Object is of type unknown\r\nrandomValue.toUpperCase();      // Error: Object is of type unknown\r\n  </pre> <p><strong>Примечание.</strong> Основное различие между any и unknown заключается в том, что вы не можете взаимодействовать с переменной типа unknown. Это вызывает ошибку компилятора. any обходит любые проверки во время компиляции. Объект вычисляется во время выполнения. Если метод или свойство существует, все будет работать нормально.</p> <h3>Утверждение типа</h3> <p>Если необходимо рассматривать переменную как другой тип данных, можно использовать утверждение типа. Утверждение типа сообщает TypeScript, что вы выполнили все специальные проверка, необходимые перед вызовом инструкции. Это как бы говорит компилятору: "доверься мне, я знаю, что делаю". Утверждение типа похоже на приведение типа в других языках, но не предусматривает специальной проверки или реструктуризации данных. Он не имеет эффекта среды выполнения и используется исключительно компилятором.</p> <p>Утверждения типов имеют две формы. Первая из них — синтаксис <code class="code-inline">as</code>:</p> <code>(randomValue as string).toUpperCase();</code> <p>Вторая — синтаксис с угловыми скобками:</p> <code>(&lt;string&gt;randomValue).toUpperCase();</code> <p><strong>Примечание.</strong> as — предпочтительный вариант синтаксиса. В некоторых ситуациях, например в JSX, использование &lt; &gt; для преобразования типов в TypeScript может приводить к путанице.</p> <p>В приведенном ниже примере выполняется проверка того, что переменная <code class="code-inline">randomValue</code> имеет тип <code class="code-inline">string</code>, перед использованием утверждения типа для вызова метода <code class="code-inline">toUpperCase</code>.</p> <pre>\r\nlet randomValue: unknown = 10;\r\n\r\nrandomValue = true;\r\nrandomValue = \'Mateo\';\r\n\r\nif (typeof randomValue === "string") {\r\n    console.log((randomValue as string).toUpperCase());    //* Returns MATEO to the console.\r\n} else {\r\n    console.log("Error - A string was expected here.");    //* Returns an error message.\r\n}\r\n  </pre> <p>В TypeScript теперь предполагается, что вы выполнили необходимую проверку. Утверждение типа говорит о том, что переменную <code class="code-inline">randomValue</code> следует рассматривать как <code class="code-inline">string</code>, что позволяет применить метод <code class="code-inline">toUpperCase</code>.</p> <h3>Условия типов</h3> <p>В предыдущем примере было продемонстрировано использование <code class="code-inline">typeof</code> в блоке <code class="code-inline">if</code> для проверки типа выражения во время выполнения. Этот условный тест называется типозащищенным.</p> <p>Возможно, вы знакомы с использованием <code class="code-inline">typeof</code> и <code class="code-inline">instanceof</code> в JavaScript для проверки таких условий. TypeScript поддерживает эти условия и при их использовании в блоке <code class="code-inline">if</code> изменяет определение типа соответствующим образом.</p> <p>Чтобы узнать тип переменной, можно использовать приведенные ниже условия.</p> <pre>\r\nТип\t       Предикат\r\nstring\t   typeof s === "string"\r\nnumber\t   typeof n === "number"\r\nboolean\t   typeof b === "boolean"\r\nundefined\t typeof undefined === "undefined"\r\nfunction\t typeof f === "function"\r\narray\t     Array.isArray(a)\r\n  </pre> </article> <article class="article"> <h2>Урок 6 из 10. Типы объединений и пересечений в TypeScript. 2 мин</h2> <p>В TypeScript есть и более развитые возможности для объявления типов. Типы объединения и пересечения помогают справиться с ситуациями, когда тип состоит из двух или более возможных типов. Литеральные типы позволяют ограничить значения, назначенные типу, узким списком параметров.</p> <h3>Типы объединения</h3> <p>Тип объединения описывает значение, которое может иметь один из нескольких типов. Эта гибкость может оказаться полезной, если значение не входит в контроль (например, значения из библиотеки, API или пользовательского ввода).</p> <p>Тип <code class="code-inline">any</code> также может принимать различные типы, так зачем использовать объединение? Тип объединения ограничивает назначение значений указанным типам в союзе, в то время как <code class="code-inline">any</code> тип не имеет ограничений. Еще одна причина — поддержка технологии IntelliSense.</p> <p>Для разделения типов в объединении используется вертикальная черта (<code class="code-inline">|</code>). В следующем примере <code class="code-inline">multiType</code> может иметь тип <code class="code-inline">number</code> или <code class="code-inline">boolean</code>:</p> <pre>\r\nlet multiType: number | boolean;\r\nmultiType = 20;         //* Valid\r\nmultiType = true;       //* Valid\r\nmultiType = "twenty";   //* Invalid\r\n  </pre> <p>С помощью условий типов можно легко работать с переменной типа объединения. В этом примере функция <code class="code-inline">add</code> принимает два значения, которые могут иметь тип <code class="code-inline">number</code> или <code class="code-inline">string</code>. Если оба значения имеют числовые типы, они складываются. Если оба строкового типа, они сцепляются. В противном случае происходит ошибка.</p> <pre>\r\nfunction add(x: number | string, y: number | string) {\r\n    if (typeof x === \'number\' && typeof y === \'number\') {\r\n        return x + y;\r\n    }\r\n    if (typeof x === \'string\' && typeof y === \'string\') {\r\n        return x.concat(y);\r\n    }\r\n    throw new Error(\'Parameters must be numbers or strings\');\r\n}\r\nconsole.log(add(\'one\', \'two\'));  //* Returns "onetwo"\r\nconsole.log(add(1, 2));          //* Returns 3\r\nconsole.log(add(\'one\', 2));      //* Returns error\r\n  </pre> <h3>Типы пересечений</h3> <p>Типы пересечений тесно связаны с типами объединения, но они используются по-разному. Тип пересечения служит для объединения двух или нескольких типов, в результате чего получается тип, имеющий все свойства исходных типов. Пересечение позволяет объединить существующие типы, чтобы получить один тип с всеми нужными функциями.</p> <p>В пересечении типы отделяются друг от друга амперсандом (<code class="code-inline">&</code>).</p> <p>Типы пересечения чаще всего используются с интерфейсами. В приведенном ниже примере определяются два интерфейса, <code class="code-inline">Employee</code> и <code class="code-inline">Manager</code>, а затем создается тип пересечения <code class="code-inline">ManagementEmployee</code>, объединяющий в себе свойства обоих интерфейсов.</p> <pre>\r\ninterface Employee {\r\n  employeeID: number;\r\n  age: number;\r\n}\r\ninterface Manager {\r\n  stockPlan: boolean;\r\n}\r\ntype ManagementEmployee = Employee & Manager;\r\nlet newManager: ManagementEmployee = {\r\n    employeeID: 12345,\r\n    age: 34,\r\n    stockPlan: true\r\n};\r\n  </pre> <p>Дополнительные сведения об интерфейсах см. в модуле <a href="https://learn.microsoft.com/ru-ru/training/modules/typescript-implement-interfaces/">Реализация интерфейсов в TypeScript</a>.</p> <h3>Литеральные типы</h3> <p>Литерал — это более конкретный подтип общего типа. Это означает, что <code class="code-inline">"Hello World"</code> это , <code class="code-inline">string</code> но <code class="code-inline">string</code> не <code class="code-inline">"Hello World"</code> внутри системы типов.</p> <p>В TypeScript есть три набора литеральных типов: <code class="code-inline">string</code>, <code class="code-inline">number</code> и <code class="code-inline">boolean</code>. С помощью литерального типа можно указать точное значение, которое должно иметь строковая, числовая или логическая переменная (например, "да", "нет" или "возможно").</p> <h3>Что такое сужение литерала?</h3> <p>При объявлении переменной с помощью <code class="code-inline">var</code> или <code class="code-inline">let</code> в TypeScript компилятор сообщает, что эта переменная изменит его содержимое. При объявлении с помощью let переменная типизируется (например, как <code class="code-inline">string</code>), поэтому она может принимать бесконечное множество потенциальных значений.</p> <p>В отличие от этого, при объявлении переменной с помощью <code class="code-inline">const</code> вы указываете TypeScript, что объект никогда не изменится. То есть объявление <code class="code-inline">const</code> задает фиксированное значение (например, "Hello World").</p> <p>Переход от бесконечного множества потенциальных вариантов к их конечному числу называется сужением.</p> <h3>Определение литеральных типов</h3> <p>Литеральные типы представляются как объекты, массивы, функции или конструкторы и служат для создания новых типов на основе существующих.</p> <p>Лучше всего продемонстрировать использование литеральных типов на примере. Это определение создает литеральный тип с именем <code class="code-inline">testResult</code>, который может содержать одно из трех значений <code class="code-inline">string</code>:</p> <pre>\r\ntype testResult = "pass" | "fail" | "incomplete";\r\nlet myResult: testResult;\r\nmyResult = "incomplete";    //* Valid\r\nmyResult = "pass";          //* Valid\r\nmyResult = "failure";       //* Invalid\r\n  </pre> <p>При задании значения переменной <code class="code-inline">myResult</code> <code class="code-inline">"incomplete"</code> и <code class="code-inline">"pass"</code> допустимых записей, хотя <code class="code-inline">"failure"</code> и не потому, что он не является одним из элементов в <code class="code-inline">testResult</code> определении типа.</p> <p>TypeScript также имеет числовые литеральные типы, которые действуют так же, как строковые литералы. Например:</p> <pre>\r\ntype dice = 1 | 2 | 3 | 4 | 5 | 6;\r\nlet diceRoll: dice;\r\ndiceRoll = 1;    //* Valid\r\ndiceRoll = 2;    //* Valid\r\ndiceRoll = 7;    //* Invalid\r\n  </pre> <p>При определении литеральных типов или любых сочетаний типов можно также использовать значения <code class="code-inline">boolean</code>.</p> </article> <article class="article"> <h2>Урок 7 из 10. Типы коллекций в TypeScript. 5 мин</h2> <p>Типы объектов — это все классы, интерфейс, массив и литеральные типы (все, что не является примитивным типом). Теперь рассмотрим типы массивов и кортежей.</p> <h3>Массивы</h3> <p>В TypeScript, как и в JavaScript, можно работать с массивами. Они записываются одним из двух способов. В первом случае указывается тип элементов, за которым стоят квадратные скобки (<code class="code-inline">[ ]</code>) для обозначения массива элементов этого типа:</p> <code>let list: number[] = [1, 2, 3];</code> <p>Во втором случае используется универсальный тип <code class="code-inline">Array</code> и синтаксис <code class="code-inline">Array&lt;type&gt;</code>:</p> <code>let list: Array<number> = [1, 2, 3];</number></code> <p>Нет никакого преимущества использовать один над другим, поэтому вам нужно решить, какой синтаксис следует использовать.</p> <h3>Кортежи</h3> <p>Массивы со значениями одного типа полезны, но иногда требуется массив со смешанными значениями. Для этого в TypeScript есть тип кортежа. Чтобы объявить кортеж, используйте синтаксис <code class="code-inline">variableName: [type, type, ...]</code>.</p> <h3>Упражнение. Кортежи</h3> <ol> <li>Откройте <a href="https://www.typescriptlang.org/play">тестовую площадку</a> и удалите существующий код.</li> <li>Введите следующий код, чтобы создать кортеж с элементами <code class="code-inline">string</code> и <code class="code-inline">number</code>: <code>let person1: [string, number] = [\'Marcia\', 35];</code> </li> <li>Попробуйте добавить еще один элемент в массив. Например: <code>let person1: [string, number] = [\'Marcia\', 35, true];</code> </li> <li>Обратите внимание, что возникает ошибка, так как элементы кортежа <code class="code-inline">array</code> исправлены. Кортеж <code class="code-inline">person1</code> — это массив, содержащий ровно одно значение <code class="code-inline">string</code> и ровно одно значение <code class="code-inline">number</code>.</li> <li>Попробуйте поменять элементы в массиве местами. Например: <code>let person1: [string, number] = [35, \'Marcia\'];</code> </li> <li>Вы получите сообщение об ошибке, указывающее, что порядок значений должен соответствовать порядку типов.</li> </ol> </article> <article class="article"> <h2>Урок 8 из 10. Задание. Использование типов в TypeScript. 5 мин</h2> <p>В этой лаборатории вы напишете JavaScript в каждом из следующих упражнений в TypeScript, строго введя каждую из переменных.</p> <h3>Упражнение 1. Изменение существующего кода JavaScript для строгой типизации переменных</h3> <ol> <li>Клонируйте начальный репозиторий, введя следующую команду в командной строке. <pre>\r\ngit clone https://github.com/MicrosoftDocs/mslearn-typescript\r\ncd mslearn-typescript/code/module-02/m02-start\r\ncode .\r\n      </pre> </li> <li>Откройте файл module02.ts и найдите раздел Exercise 1.</li> <li>Измените код, добавив типы в объявления переменных. По завершении скомпилированный код JavaScript должен выглядеть так же, как в исходном примере. <pre>\r\n/*  EXERCISE 1\r\n    TODO: Modify the code to add types to the variable declarations.\r\n    The resulting JavaScript should look the same as the original example when you\'re done. */\r\n\r\nlet firstName;\r\nlet lastName;\r\nlet fullName;\r\nlet age;\r\nlet ukCitizen;\r\n\r\nfirstName = \'Rebecca\';\r\nlastName = \'Smith\';\r\nage = 42;\r\nukCitizen = false;\r\nfullName = firstName + " " + lastName;\r\n\r\nif (ukCitizen) {\r\n    console.log("My name is " + fullName + ", I\'m " + age + ", and I\'m a citizen of the United Kingdom.");\r\n} else {\r\n    console.log("My name is " + fullName + ", I\'m " + age + ", and I\'m not a citizen of the United Kingdom.");\r\n}\r\n      </pre> </li> </ol> <h3>Упражнение 2. Изменение существующего кода JavaScript для получения нужных результатов с помощью строго типизированных переменных</h3> <ol> <li>Найдите раздел Exercise 2 в файле module02.ts.</li> <li>С помощью типов можно получать нужные результаты операций. Запустите код как есть, а затем измените его так, чтобы переменные в нем были строго типизированными.</li> <li>Устраните все обнаруженные ошибки, чтобы в переменную a возвращался результат <code class="code-inline">12</code>. <pre>\r\n/* EXERCISE 2\r\n   TODO: Run the code as is and then modify it to have strongly typed variables.\r\n   Then, address any errors you find so that the result returned to a is 12. */\r\n\r\nlet x;\r\nlet y;\r\nlet a;\r\n\r\nx = \'five\';\r\ny = 7;\r\na = x + y;\r\n\r\nconsole.log(a);\r\n    </pre></li> </ol> <h3>Упражнение 3. Реализация типа перечисления</h3> <ol> <li>Найдите раздел Exercise 3 в файле module02.ts.</li> <li>Реализуйте тип <code class="code-inline">enum</code> с именем <code class="code-inline">Season</code>, который представляет константы <code class="code-inline">"Fall", "Winter", "Spring" и "Summer".</code></li> <li>Обновите функцию, чтобы можно было передать время года, обратившись к элементу <code class="code-inline">enum</code>, например <code class="code-inline">Season.Fall</code> вместо литеральной строки <code class="code-inline">"Fall"</code>. <pre>\r\n/* EXERCISE 3\r\n   TODO: In the following code, implement an enum type called Season that represents\r\n   the constants "Fall", "Winter", "Spring", and "Summer". Then, update the function so\r\n   you can pass in the season by referencing an item in the enum, for example\r\n   Season.Fall, instead of the literal string "Fall". */\r\n\r\nfunction whichMonths(season) {\r\n    let monthsInSeason: string;\r\n    switch (season) {\r\n        case "Fall":\r\n            monthsInSeason = "September to November";\r\n            break;\r\n        case "Winter":\r\n            monthsInSeason = "December to February";\r\n            break;\r\n        case "Spring":\r\n            monthsInSeason = "March to May";\r\n            break;\r\n        case "Summer":\r\n            monthsInSeason = "June to August";\r\n    }\r\n    return monthsInSeason;\r\n}\r\n\r\nconsole.log(whichMonths("Fall"));\r\n      </pre> </li> </ol> <h3>Упражнение 4. Объявление типа массива</h3> <ol> <li>Найдите раздел Exercise 4 в файле module02.ts.</li> <li>Объявите массив как тип, который должны иметь элементы в нем. <pre>\r\n/* EXERCISE 4\r\n   TODO: Declare the array as the type to match the type of the items in the array. */\r\n\r\nlet randomNumbers;\r\nlet nextNumber;\r\nfor (let i = 0; i &lt; 10; i++) {\r\n    nextNumber = Math.floor(Math.random() * (100 - 1)) + 1;\r\n    randomNumbers.push(nextNumber);\r\n}\r\n\r\nconsole.log(randomNumbers);\r\n      </pre> </li> </ol> <h3>Попробуйте свои силы!</h3> <p>Чтобы усложнить задачу, возьмите существующий код JavaScript, написанный вами или найденный в Интернете, и перепишите его, добавив базовые типы TypeScript. Вы можете скопировать код JavaScript и вставить его в Playground, а затем отредактировать, или использовать другой редактор, например Visual Studio Code.</p> <h3>Решение задания</h3> <p>Просмотрите окончательную версию кода, введя следующую команду в командной строке.</p> <pre>\r\ncd ../m02-end\r\ncode .\r\n  </pre> <p>Откройте файл module02.ts, чтобы просмотреть решение этого задания.</p> </article> <article class="article"> <h2>Урок 9 из 10. Проверка знаний. 2 мин</h2> <p>Выберите наилучший ответ на каждый из вопросов ниже. Затем нажмите кнопку Проверьте свои ответы.</p> <ol> <li>1. К какой категории подтипов any относятся типы boolean, number, string и enum? <ul> <li>Параметры типа.</li> <li>Типы объектов.</li> <li>Примитивные типы.</li> </ul> </li> <li>2. Какие из следующих типов являются примерами типов объектов? <ul> <li>Array.</li> <li>void.</li> <li>Параметры типа.</li> </ul> </li> <li>3. В чем основное различие между типами any и unknown? <ul> <li>Типу unknown можно присвоить любое значение, а у типа any есть ряд ограничений.</li> <li>К свойствам типа unknown можно обращаться, а к свойствам типа any нет.</li> <li>К свойствам типа any можно обращаться, а к свойствам типа unknown нет.</li> </ul> </li> <li>4. Как называется функция в TypeScript, сообщающая компилятору: "Я знаю, что делаю"? <ul> <li>Сужение литерала.</li> <li>Утверждение типа.</li> <li>Условие типа.</li> </ul> </li> <li>5. Что такое кортеж? <ul> <li>Массив с бесконечным числом элементов одного типа.</li> <li>Массив с определенным числом элементов одного типа.</li> <li>Массив с определенным числом элементов одного или нескольких типов.</li> </ul> </li> </ol> </article> <article class="article"> <h2>Урок 10 из 10. Сводка. 2 мин</h2> <p>После изучения этого урока вы можете выполнять следующие задачи:</p> <ul> <li>объяснять преимущества объявления типизированных переменных в TypeScript;</li> <li>объявлять переменные с помощью примитивных типов;</li> <li>объявлять переменные с помощью типов объектов;</li> <li>объявлять переменные с помощью типов объединений и пересечений.</li> </ul> <h3>Ресурсы</h3> <p>Воспользуйтесь этими ресурсами, чтобы узнать больше.</p> <ul> <li>Чтобы узнать больше о примитивных типах и типе массива, обратитесь к <a href="https://www.typescriptlang.org/docs/handbook/basic-types.html">руководству по основным типам TypeScript.</a></li> <li>Чтобы узнать больше о типах перечислений, обратитесь к <a href="https://www.typescriptlang.org/docs/handbook/enums.html">руководству по перечислениям в TypeScript.</a></li> <li>Чтобы узнать больше об условиях типов, обратитесь к <a href="https://www.typescriptlang.org/docs/handbook/advanced-types.html">справочному руководству по расширенным типам в TypeScript.</a></li> <li>Чтобы узнать больше о литеральных типах, обратитесь к <a href="https://www.typescriptlang.org/docs/handbook/literal-types.html">руководству по литеральным типам в TypeScript.</a></li> <li>Чтобы узнать больше о типах объединений и пересечений, обратитесь к <a href="https://www.typescriptlang.org/docs/handbook/unions-and-intersections.html">руководству по этим расширенным типам в TypeScript.</a></li> </ul> </article> <article class="article"> <div class="anchor" id="module-3"></div> <h2>Модуль 3. Declare Variable Types in TypeScript. Реализация интерфейсов в TypeScript. 46 мин</h2> <p><a href="https://learn.microsoft.com/api/achievements/share/ru-ru/frontend200tb-0827/FZUET2HX?sharingId=6364D7D096225EB9">Значек</a></p> <p><a href="https://learn.microsoft.com/en-us/training/modules/typescript-implement-interfaces/">Implement interfaces in TypeScript (en)</a> <br><a href="https://learn.microsoft.com/ru-ru/training/modules/typescript-implement-interfaces/">Реализация интерфейсов в TypeScript (ru)</a></p> <p>46 мин Модуль 8 единиц(ы)</p> <p>JavaScript не поддерживает интерфейсы, поэтому, если вы разработчик JavaScript, у вас может не быть опыта работы с ними. В TypeScript интерфейсы можно использовать так же, как в традиционном объектно-ориентированном программировании. Можно также использовать интерфейсы для определения типов объектов. Как раз об этом мы и будем говорить в этом модуле.</p> <h3>Цели обучения</h3> <p>В этом модуле вы научитесь выполнять следующее.</p> <ul> <li>Объяснение причин использования интерфейса в TypeScript.</li> <li>Объявление интерфейса и создание его экземпляра.</li> <li>Расширение интерфейса.</li> <li>Объявление интерфейса с пользовательскими типами массивов.</li> </ul> <h3>Предварительные требования</h3> <ul> <li>Знание TypeScript.</li> <li>Опыт работы с JavaScript</li> <li>Опыт работы с функциями и массивами в JavaScript</li> <li>Установленное программное обеспечение: <ul> <li>Git</li> <li>Visual Studio Code</li> <li>Node.js</li> <li>TypeScript</li> </ul> </li> </ul> <h3>Этот модуль входит в состав указанных схем обучения</h3> <p>Создание приложений JavaScript с помощью TypeScript</p> <p>Введение 2 мин</p> <p>Общие сведения об интерфейсах в TypeScript 5 мин</p> <p>Упражнение. Объявление и создание экземпляра интерфейса в TypeScript 5 мин</p> <p>Упражнение. Расширение интерфейса в TypeScript 5 мин</p> <p>Другие способы использования интерфейсов в Typescript 5 мин</p> <p>Задание. Использование интерфейсов в TypeScript 20 мин</p> <p>Проверка знаний 2 мин</p> <p>Сводка 2 мин</p> </article> <article class="article"> <h2>Урок 1 из 8. Введение. 2 мин</h2> <p>JavaScript не поддерживает интерфейсы, поэтому, если вы разработчик JavaScript, у вас может не быть опыта работы с ними. В TypeScript интерфейсы можно использовать так же, как в традиционном объектно-ориентированном программировании. Можно также использовать интерфейсы для определения типов объектов. Как раз об этом мы и будем говорить в этом модуле.</p> <h3>Цели обучения</h3> <p>По завершении этого модуля вы сможете:</p> <ul> <li>Объяснение причин использования интерфейса в TypeScript.</li> <li>Объявление интерфейса и создание его экземпляра.</li> <li>Расширение интерфейса.</li> <li>Объявление интерфейса с пользовательскими типами массивов.</li> </ul> <h3>Необходимые компоненты</h3> <ul> <li>Знание TypeScript</li> <li>Знакомство с JavaScript.</li> <li>Опыт работы с функциями и массивами в JavaScript</li> <li>Установленное программное обеспечение: <ul> <li>Git</li> <li>Visual Studio Code</li> <li>Node.js</li> <li>TypeScript. TypeScript можно установить после установки Node.js и выполнения указанной ниже команды в терминале или командном окне. <code>npm install -g typescript</code> </li> </ul> </li> </ul> <p>Для получения наилучших результатов полностью следуйте инструкциям по настройке окружения и использованию компилятора TypeScript в статье <a href="https://learn.microsoft.com/ru-ru/training/modules/typescript-get-started/">Модуль 01. Начало работы с TypeScript</a>. После настройки окружения можно запустить любые файлы подготовки к заданию или его решения в <a href="https://learn.microsoft.com/ru-ru/training/paths/build-javascript-applications-typescript/">приложении сборки JavaScript</a> с помощью схемы обучения TypeScript.</p> </article> <article class="article"> <h2>Урок 2 из 8. Общие сведения об интерфейсах в TypeScript. 5 мин</h2> <p>Одним из основных принципов TypeScript является тот факт, что проверка типов нацелена на форму значений. Иногда это называется неявной типизацией или структурной подтипизацией. В TypeScript интерфейсы выполняют именование этих типов и являются эффективным способом определения "контракта кода" в коде, а также контрактов с кодом за пределами проекта.</p> <p>Начнем с обзора интерфейсов: что это такое и как их можно использовать в коде TypeScript.</p> <h3>Что такое интерфейс?</h3> <p>Интерфейсы можно использовать для описания объекта, именования и параметризации типов объектов, а также для составления существующих типов именованных объектов в новые.</p> <p>Этот простой интерфейс определяет два свойства и метод объекта <code class="code-inline">Employee</code>.</p> <pre>\r\ninterface Employee {\r\n    firstName: string;\r\n    lastName: string;\r\n    fullName(): string;\r\n}\r\n  </pre> <p>Обратите внимание, что интерфейс не инициализирует и не реализует свойства, объявленные внутри него. Это обусловлено тем, что единственным заданием интерфейса является описание типа. Он определяет, что требует контракт кода, а переменная, функция или класс, реализующие интерфейс, удовлетворяют контракту, предоставляя необходимые сведения о реализации.</p> <p>После определения интерфейса его можно использовать как тип и получить все преимущества проверки типов и IntelliSense.</p> <p>В этом примере интерфейс реализуется путем объявления переменной типа <code class="code-inline">Employee</code>. Он выполняет контракт, передавая значения для свойств <code class="code-inline">firstName</code> и <code class="code-inline">lastName</code> и указывая, что метод <code class="code-inline">fullName</code> должен объединять свойства <code class="code-inline">firstName</code> и <code class="code-inline">lastName</code> и вернуть результат.</p> <pre>\r\nlet employee: Employee = {\r\n    firstName : "Emil",\r\n    lastName: "Andersson",\r\n    fullName(): string {\r\n        return this.firstName + " " + this.lastName;\r\n    }\r\n}\r\n\r\nemployee.firstName = 10;  //* Error - Type \'number\' is not assignable to type \'string\'\r\n  </pre> <p>Проверка типа гарантирует, что число 10 не может быть назначено employee.firstName, так как ожидается string.</p> <p>Поскольку TypeScript имеет систему структурных типов, тип интерфейса с определенным набором элементов считается идентичным другому типу интерфейса или литерала типа объекта с таким же набором элементов, и один можно заменить на другой. Если интерфейс и класс реализуют одну и ту же структуру, они взаимозаменяемы. Пример см. в разделе Структурная типизация на тестовой площадке.</p> <p>Интерфейсы не имеют представления во время выполнения; они существуют только во время компиляции. Интерфейсы особенно полезны для документирования и проверки требуемой формы свойств, объектов, передаваемых в качестве параметров, и объектов, возвращаемых функциями. Это позволяет перехватывать ошибки и гарантировать передачу правильных параметров во время компиляции, а не ожидать их обнаружения в среде выполнения.</p> <h3>Причины использования интерфейса в TypeScript</h3> <p>Интерфейсы часто являются ключевой точкой контакта между любыми двумя частями кода TypeScript, особенно при работе с существующим кодом JavaScript или встроенными объектами JavaScript.</p> <p>Интерфейс можно использовать в следующих целях:</p> <ul> <li>Создание сокращенных имен для часто используемых типов. При использовании даже простого интерфейса, подобного описанному в предыдущем примере, вы по-прежнему получаете преимущества IntelliSense и проверки типов.</li> <li>Согласованность дисков в наборе объектов, так как каждый объект, реализующий интерфейс, работает с теми же определениями типов. Это может быть полезно при работе с группой разработчиков и при необходимости обеспечит передачу правильных значений в свойства, конструкторы или функции. Например, объекты, реализующие интерфейс, должны реализовать все необходимые члены интерфейса. Поэтому, если вы не передаете все необходимые параметры правильного типа, компилятор TypeScript выдаст ошибку.</li> <li>Описание существующих API-интерфейсов JavaScript и уточнение параметров функции и типов возвращаемого значения. Это особенно полезно при работе с библиотеками JavaScript, например jQuery. Интерфейс может дать четкое представление о том, что ожидает функция и что она будет возвращать, без постоянного обращения к документации.</li> </ul> <h3>Чем интерфейс отличается от псевдонима типа?</h3> <p>Приведенный выше интерфейс Employee можно также выразить как псевдоним типа с помощью ключевого слова type:</p> <pre>\r\ntype Employee = {\r\n    firstName: string;\r\n    lastName: string;\r\n    fullName(): string;\r\n}\r\n  </pre> <p>Псевдоним типа — это определение типа данных, например объединение, примитив, пересечение, кортеж или любой другой тип. Интерфейсы, с другой стороны, позволяют описывать фигуры данных, например объект. Псевдонимы типов могут действовать как интерфейсы. Однако существуют незначительные отличия. Ключевое отличие заключается в том, что псевдоним типа нельзя открыть повторно, чтобы добавить новые свойства, в то время как интерфейс можно легко расширять. Кроме того, с помощью псевдонима типа можно описать только объединение или кортеж.</p> </article> <article class="article"> <h2>Урок 3 из 8. Упражнение. Объявление и создание экземпляра интерфейса в TypeScript. 5 мин</h2> <p>Чтобы объявить интерфейс, начните с interface ключевое слово с именем интерфейса (идентификатором).) Имя интерфейса может не быть одним из предопределенных имен типов в системе типов. И, по соглашению, имена интерфейсов находятся в PascalCase.</p> <p><strong>Примечание.</strong> Рекомендации по написанию кода TypeScript предполагают, что интерфейсы не должны начинаться с буквы I.</p> <p>Затем определите свойства (или члены) интерфейса и их тип. Свойства могут быть обязательными, необязательными или только для чтения.</p> <ol> <li>Обязательное поле.\tВсе свойства являются обязательными, если не указано иное.\tfirstName: string;</li> <li>Необязательное.\tДобавьте вопросительный знак (?) в конец имени свойства. Используйте его для необязательных свойств. Это предотвращает вызов системой типов ошибки, если свойство пропущено.\tfirstName?: string;</li> <li>Только чтение.\tДобавьте ключевое слово readonly перед именем свойства. Используйте его для свойств, которые должны быть изменены только при создании объекта.\treadonly firstName: string;</li> </ol> <h3>Объявление интерфейса с членами</h3> <ol> <li>Откройте <a href="https://www.typescriptlang.org/play">тестовую площадку</a> и удалите существующий код.</li> <li>Объявите интерфейс с именем IceCream, который включает два свойства: flavor как string и scoops как number. <pre>\r\ninterface IceCream {\r\n    flavor: string;\r\n    scoops: number;\r\n}\r\n      </pre> </li> <li>Теперь можно реализовать новый интерфейс. Начнем с использования интерфейса IceCream как типа в объявлении переменной. Объявите новую переменную с именем myIceCream типа IceCream и присвойте значения требуемым свойствам. Когда вы начнете вводить имя свойства, IntelliSense предложит правильные имена и типы. Проверьте работу, отобразив значение на консоли. <pre>\r\nlet myIceCream: IceCream = {\r\n    flavor: \'vanilla\',\r\n    scoops: 2\r\n}\r\n\r\nconsole.log(myIceCream.flavor);\r\n      </pre> </li> <li>Выберите Выполнить. Обратите внимание, что в окне Журнал отображается вкус (flavor).</li> <li>Теперь создадим функцию в нижней части с именем tooManyScoops, которая использует интерфейс IceCream в качестве типа параметра. Эта функция проверяет количество ложек (scoops) в объекте IceCream и возвращает сообщение на основе результата. Чтобы протестировать работу, передайте объект {flavor: \'vanilla\', scoops: 5} в качестве параметра и проверьте результат, выведя его на консоль. <pre>\r\nfunction tooManyScoops(dessert: IceCream) {\r\n    if (dessert.scoops >= 4) {\r\n      return dessert.scoops + \' is too many scoops!\';\r\n    } else {\r\n      return \'Your order will be ready soon!\';\r\n    }\r\n}\r\n\r\nconsole.log(tooManyScoops({flavor: \'vanilla\', scoops: 5}));\r\n      </pre> </li> <li>Запустите код, нажав кнопку Выполнить. Выходные данные должны выглядеть следующим образом. <pre>\r\n"vanilla"\r\n"5 is too many scoops!"\r\n      </pre> </li> <li>Откройте область JavaScript и обратите внимание на различия между кодом JavaScript и кодом TypeScript. Интерфейс не имеет представления в коде JavaScript.</li> <li>Что произойдет, если добавить в интерфейс IceCream еще одно свойство? Давайте добавим новое свойство с именем instructions и присвоим ему тип string.</li> <li>Проверьте ошибки, отображаемые в коде. Чтобы устранить их, необходимо добавить свойство instructions в сведения о реализации объявления переменной и добавить его в качестве параметра, передаваемого функции. Пока сделайте свойство instructions необязательным, добавив вопросительный знак в имя свойства. Все ошибки разрешатся, так как свойство instructions больше не требуется интерфейсу.</li> </ol> <p>Пока все в порядке. Но мороженое сандей без топпингов — это просто мороженое. Далее мы рассмотрим, как расширить интерфейс.</p> </article> <article class="article"> <h2>Урок 4 из 8. Упражнение. Расширение интерфейса в TypeScript. 5 мин</h2> <p>Интерфейсы могут дополнять друг друга. Это позволяет копировать члены одного интерфейса в другой, обеспечивая большую гибкость при разделении интерфейсов на многократно используемые компоненты.</p> <p>При расширении интерфейса одним или несколькими интерфейсами применяются следующие правила.</p> <ul> <li>Вы должны реализовать все необходимые свойства из всех интерфейсов.</li> <li>Два интерфейса могут иметь одно и то же свойство, если свойство имеет то же имя и тип.</li> <li>Если два интерфейса имеют свойство с одинаковым именем, но разными типами, необходимо объявить новое свойство таким образом, чтобы результирующее свойство было подтипом обоих интерфейсов.</li> </ul> <h3>Расширение интерфейса</h3> <p>Существует несколько типов десертов, которые можно создать из интерфейса IceCream (сандей, молочные коктейли и т. д.), но все они имеют различные свойства в дополнение к объявленным в IceCream. Расширим интерфейс с помощью нового, Sundae, и объявим его свойства.</p> <ol> <li>Продолжите работу над проектом на тестовой площадке.</li> <li>В объявлении интерфейса IceCream объявите новый интерфейс с именем Sundae, который выполняет операцию extends с интерфейсом IceCream. Интерфейс Sundae включает четыре новых свойства: <ul> <li>sauce литерального типа \'chocolate\' | \'caramel\' | \'strawberry\';</li> <li>nuts типа boolean (необязательно);</li> <li>whippedCream типа boolean (необязательно);</li> <li>instructions типа boolean (необязательно);</li> </ul> <pre>\r\ninterface Sundae extends IceCream {\r\n    sauce: \'chocolate\' | \'caramel\' | \'strawberry\';\r\n    nuts?: boolean;\r\n    whippedCream?: boolean;\r\n    instructions?: boolean;\r\n}\r\n      </pre> </li> <li>Обратите внимание на ошибку в новом интерфейсе. TypeScript обнаружил, что оба интерфейса, IceCream и Sundae, имеют свойство instructions, но принадлежат разным типам. Чтобы устранить эту ошибку, давайте создадим оба свойства instructions одного типа string.</li> <li>Давайте попробуем создать новый интерфейс, изменив переменную myIceCream на тип Sundae. Это приведет к ошибке: Свойство \'sauce\' отсутствует в типе \'{ flavor: string; scoops: number; }\', но требуется в типе \'Sundae\'. В интерфейс Sundae добавлено четыре новых свойства, но требовалось только свойство sauce. <pre>\r\nlet myIceCream: Sundae = {\r\n    flavor: \'vanilla\',\r\n    scoops: 2\r\n}\r\n      </pre> </li> <li>Исправьте ошибку, добавив требуемое свойство, а также любое из необязательных свойств по желанию. <pre>\r\nlet myIceCream: Sundae = {\r\n    flavor: \'vanilla\',\r\n    scoops: 2,\r\n    sauce: \'caramel\',\r\n    nuts: true\r\n}\r\n      </pre> </li> <li>Теперь попробуйте реализовать интерфейс Sundae в функции tooManyScoops. Ошибки не отображаются в самой функции, но вызов функции в следующей строке приводит к ошибке. Это обусловлено тем, что ожидается три обязательных параметра. Устраните ошибку, добавив свойство sauce в вызов функции. <pre>\r\nfunction tooManyScoops(dessert: Sundae) {\r\n    if (dessert.scoops >= 4) {\r\n        return dessert.scoops + \' is too many scoops!\';\r\n    } else {\r\n        return \'Your order will be ready soon!\';\r\n    }\r\n}\r\nconsole.log(tooManyScoops({flavor: \'vanilla\', scoops: 5, sauce: \'caramel\'}));\r\n      </pre> </li> </ol> </article> <article class="article"> <h2>Урок 5 из 8. Другие способы использования интерфейсов в Typescript. 5 мин</h2> <p>Теперь, когда вы знакомы с основами объявления и реализации интерфейса, давайте рассмотрим другие способы его использования.</p> <h3>Создание индексируемых типов</h3> <p>Можно использовать интерфейсы, описывающие типы массивов, в которые можно выполнять индексирование.</p> <p>Индексируемые типы имеют сигнатуру индекса, описывающую тип, который можно использовать для индексирования объекта, а также соответствующие возвращаемые типы при индексировании.</p> <p>Например, интерфейс IceCreamArray объявляет сигнатуру индекса как number и возвращает тип string. Эта сигнатура индекса указывает, что IceCreamArray индексируется числом и будет возвращать строку.</p> <pre>\r\ninterface IceCreamArray {\r\n    [index: number]: string;\r\n}\r\n\r\nlet myIceCream: IceCreamArray;\r\nmyIceCream = [\'chocolate\', \'vanilla\', \'strawberry\'];\r\nlet myStr: string = myIceCream[0];\r\nconsole.log(myStr);\r\n  </pre> <p>Можно также использовать встроенный тип массива или псевдоним типа для пользовательского массива, но с помощью интерфейса можно определить собственный тип массива, чтобы любой, кто хочет работать с этим интерфейсом, мог применять его согласованно.</p> <h3>Описание API JavaScript с помощью интерфейса</h3> <p>Обычно разработчики JavaScript и TypeScript испытывают трудности при работе с внешними библиотеками JavaScript. Вы можете использовать интерфейс, чтобы описывать существующие API-интерфейсы JavaScript и уточнять параметры функции и типы возвращаемого значения. Интерфейс дает четкое представление о том, что ожидает API и что он будет возвращать.</p> <p>API fetch — это собственная функция JavaScript, которую можно использовать для взаимодействия с веб-службами. В этом примере объявляется интерфейс Post для возвращаемых типов в JSON-файле, а затем используется fetch с async и await для создания строго типизированного ответа.</p> <pre>\r\nconst fetchURL = \'https://jsonplaceholder.typicode.com/posts\'\r\n// Interface describing the shape of our json data\r\ninterface Post {\r\n    userId: number;\r\n    id: number;\r\n    title: string;\r\n    body: string;\r\n}\r\nasync function fetchPosts(url: string) {\r\n    let response = await fetch(url);\r\n    let body = await response.json();\r\n    return body as Post[];\r\n}\r\nasync function showPost() {\r\n    let posts = await fetchPosts(fetchURL);\r\n    // Display the contents of the first item in the response\r\n    let post = posts[0];\r\n    console.log(\'Post #\' + post.id)\r\n    // If the userId is 1, then display a note that it\'s an administrator\r\n    console.log(\'Author: \' + (post.userId === 1 ? "Administrator" : post.userId.toString()))\r\n    console.log(\'Title: \' + post.title)\r\n    console.log(\'Body: \' + post.body)\r\n}\r\n\r\nshowPost();\r\n  </pre> <p>В этой схеме обучения мы не будем рассматривать использование async/await. Если вы хотите узнать больше об этом, см. видео из курса <a href="https://learn.microsoft.com/ru-ru/shows/beginners-series-to-javascript/">JavaScript для начинающих:</a></p> <ul> <li><a href="https://youtu.be/CjOVvs61zAQ">Использование async/await в JavaScript с длительными операциями</a></li> <li><a href="https://youtu.be/YwmlRkrxvkk">async/await для управления обещаниями</a></li> <li><a href="https://youtu.be/XLxIqq3HlL8">Ролик: async/await для управления обещаниями</a></li> </ul> <a href="https://www.youtube.com/playlist?list=PLlrxD0HtieHhW0NCG7M536uHGOtJ95Ut2">youtube</a> <p><strong>Совет.</strong> Хотя предыдущие версии ECMAScript, такие как ES3, не поддерживают async и await, компилятор TypeScript может создать совместимый код для реализации этой функции. Это позволяет воспользоваться преимуществами более новой функции при нацеливании на более старые браузеры! На тестовой площадке скопируйте и вставьте приведенный выше пример, задайте целевую версию ES3 и просмотрите вспомогательный код, формируемый TypeScript, чтобы это было возможно.</p> </article> <article class="article"> <h2>Урок 6 из 8. Задание. Использование интерфейсов в TypeScript. 20 мин</h2> <p>В этом задании код JavaScript преобразуется в строго типизированный код с помощью интерфейсов.</p> <p>Код JavaScript содержит две функции: calculateInterestOnlyLoanPayment, которая рассчитывает платеж по неамортизационному кредиту, и calculateConventionalLoanPayment, которая вычисляет платеж по обычному кредиту. Как и в большинстве случаев расчета по кредитам, обе функции принимают параметры principal и interestRate. Различие между ними заключается в том, что функция calculateConventionalLoanPayment принимает третье свойство, months, а функция calculateInterestOnlyLoanPayment — нет.</p> <ul> <li>principal\tОсновная сумма кредита.</li> <li>interestRate\tГодовая процентная ставка по кредиту. Например, 5 % указывается как 5.</li> <li>months\tСрок кредита в месяцах. Для неамортизационного кредита это свойство не требуется, так как количество месяцев не имеет значения (кредит не будет погашаться, каждый месяц погашается только процент).</li> </ul> <p>В этом упражнении вы выполните следующие действия.</p> <ol> <li>Объявите интерфейс Loan, который определяет два свойства: principal и interestRate.</li> <li>Объявите интерфейс ConventionalLoan, который расширяет Loan и определяет дополнительное свойство, необходимое для обычного кредита, months.</li> <li>Обновите обе функции, чтобы реализовать новые интерфейсы, и строго типизируйте параметры.</li> </ol> <h3>Упражнение 1. Объявление интерфейсов</h3> <ol> <li>Клонируйте начальный репозиторий, введя следующую команду в командной строке. <pre>\r\ngit clone https://github.com/MicrosoftDocs/mslearn-typescript\r\ncd mslearn-typescript/code/module-03/m03-start\r\ncode .\r\n      </pre> </li> <li>Откройте файл module03.ts.</li> <li>Найдите TODO: Declare the Loan interface. Объявите интерфейс Loan, который определяет два свойства: principal и interestRate, каждое — number. <pre>\r\ninterface Loan {\r\n    principal: number,\r\n    interestRate: number    //* Interest rate percentage (eg. 14 is 14%)\r\n}\r\n      </pre> </li> <li>Найдите TODO: Declare the ConventionalLoan interface. Объявите интерфейс ConventionalLoan, который расширяет Loan и определяет дополнительное свойство, необходимое для обычного кредита, months, как number. <pre>\r\ninterface ConventionalLoan extends Loan {\r\n    months: number      //* Total number of months\r\n}\r\n      </pre> </li> </ol> <h3>Упражнение 2. Реализация интерфейсов</h3> <ol> <li>Найдите TODO: Update the calculateInterestOnlyLoanPayment function. Замените два параметра в функции calculateInterestOnlyLoanPayment объектом типа Loan (например, loanTerms: Loan) и введите возвращаемое значение функции в виде string. <pre>\r\nfunction calculateInterestOnlyLoanPayment(loanTerms: Loan): string {\r\n    // ...\r\n}\r\n      </pre> </li> <li>Вы заметите несколько ошибок, так как TypeScript не распознает параметры interestRate и principal. Замените имена параметров в функции свойствами объекта Loan. (Например, loanTerms.interestRate). <pre>\r\nfunction calculateInterestOnlyLoanPayment(loanTerms: Loan): string {\r\n    // Calculates the monthly payment of an interest only loan\r\n    let interest = loanTerms.interestRate / 1200;   // Calculates the Monthly Interest Rate of the loan\r\n    let payment;\r\n    payment = loanTerms.principal * interest;\r\n    return \'The interest only loan payment is \' + payment.toFixed(2);\r\n}\r\n      </pre> </li> <li>Введите переменные interest и payment в функции calculateInterestOnlyLoanPayment в качестве numbers.</li> <li>Протестируйте функцию calculateInterestOnlyLoanPayment, чтобы убедиться, что она работает правильно. Помните, что теперь необходимо передать параметры в функцию в виде объекта Loan. <pre>\r\nlet interestOnlyPayment = calculateInterestOnlyLoanPayment({principal: 30000, interestRate: 5});\r\nconsole.log(interestOnlyPayment);     //* Returns "The interest only loan payment is 125.00"\r\n      </pre> </li> <li>Найдите TODO: Update the calculateConventionalLoanPayment function. Обновите функцию calculateConventionalLoanPayment, на этот раз заменив три параметра объектом типа ConventionalLoan и типом возвращаемого значения функции в виде string. Внесите остальные изменения в реализацию функции calculateConventionalLoanPayment. <pre>\r\nfunction calculateConventionalLoanPayment(loanTerms: ConventionalLoan): string {\r\n    // Calculates the monthly payment of a conventional loan\r\n    let interest: number = loanTerms.interestRate / 1200;   // Calculates the Monthly Interest Rate of the loan\r\n    let payment: number;\r\n    payment = loanTerms.principal * interest / (1 - (Math.pow(1/(1 + interest), loanTerms.months)));\r\n    return \'The conventional loan payment is \' + payment.toFixed(2);\r\n}\r\n      </pre> </li> <li>Протестируйте функцию calculateConventionalLoanPayment, чтобы убедиться, что она работает правильно. Помните, что теперь необходимо передать параметры в функцию в виде объекта ConventionalLoan. <pre>\r\nlet conventionalPayment = calculateConventionalLoanPayment({principal: 30000, interestRate: 5, months: 180});\r\nconsole.log(conventionalPayment);     //* Returns "The conventional loan payment is 237.24"\r\n      </pre> </li> </ol> <h3>Решение задания</h3> <p>Просмотрите окончательную версию кода, введя следующую команду в командной строке.</p> <pre>\r\ncd ../m03-end\r\ncode .\r\n  </pre> <p>Откройте файл module03.ts, чтобы просмотреть решение для этого задания. Дополнительные сведения о настройке среды разработки для запуска решения см. в разделе Подготовка к заданию выше.</p> </article> <article class="article"> <h2>Урок 7 из 8. Проверка знаний. 2 мин</h2> <p>Выберите наилучший ответ на каждый из вопросов ниже. Затем нажмите кнопку Проверьте свои ответы.</p> <ol> <li>1. Какова основная задача интерфейса? <ul> <li>Определение сведений о реализации для объекта.</li> <li>Описание свойств и возвращаемых типов объекта.</li> <li>Выполнение контракта кода для объекта.</li> </ul> </li> <li>2. Как предотвратить возникновение ошибки в системе типов при пропуске свойства в интерфейсе? <ul> <li>Сделать свойство необязательным.</li> <li>Сделать свойство обязательным.</li> <li>Сделать свойство доступным только для чтения.</li> </ul> </li> <li>3. Что происходит при расширении одного интерфейса другим? <ul> <li>Несколько интерфейсов могут иметь одно и то же свойство, если свойство имеет то же имя.</li> <li>Если у двух интерфейсов есть свойство с одинаковым именем, но с разными типами, TypeScript полностью пропускает это свойство.</li> <li>Вы должны реализовать все необходимые свойства из всех интерфейсов.</li> </ul> </li> </ol> </article> <article class="article"> <h2>Урок 8 из 8. Сводка. 2 мин</h2> <p>Теперь, после изучения этого модуля, вы можете выполнять следующие задачи.</p> <ul> <li>Объяснение причин использования интерфейса в TypeScript.</li> <li>Объявление интерфейса.</li> <li>Реализация интерфейса.</li> <li>Объявление интерфейса с пользовательскими типами массивов.</li> </ul> <h3>Ресурсы</h3> <p>Воспользуйтесь этими ресурсами, чтобы узнать больше.</p> <ul> <li>Дополнительные сведения об интерфейсах см. в документе <a href="https://www.typescriptlang.org/docs/handbook/2/objects.html">Руководстве по TypeScript: интерфейсы.</a></li> </ul> </article> <article class="article"> <div class="anchor" id="module-4"></div> <h2>Модуль 4. Develop typed functions by using TypeScript. Разработка типизированных функций с использованием TypeScript. 51 мин</h2> <p><a href="https://learn.microsoft.com/api/achievements/share/ru-ru/frontend200tb-0827/QDA973TE?sharingId=6364D7D096225EB9">Значек</a></p> <p><a href="https://learn.microsoft.com/en-us/training/modules/typescript-develop-typed-functions/">Develop typed functions by using TypeScript (en)</a> <br><a href="https://learn.microsoft.com/ru-ru/training/modules/typescript-develop-typed-functions/">Разработка типизированных функций с использованием TypeScript (ru)</a></p> <p>51 мин Модуль 9 единиц(ы)</p> <p>Если вы умеете писать функции на JavaScript, значит вам уже известно, как писать функции на TypeScript. Но в TypeScript к стандартным функциям JavaScript добавлен ряд новых возможностей, которые упрощают работу с ними.</p> <h3>Цели обучения</h3> <p>В этом модуле вы научитесь выполнять следующее.</p> <ul> <li>Объяснять преимущества использования типов в функциях.</li> <li>Писать функции, которые имеют обязательные и необязательные параметры, параметры по умолчанию и параметры rest.</li> <li>Определять типы функций с помощью псевдонимов типов или интерфейсов.</li> </ul> <h3>Предварительные требования</h3> <ul> <li>Знание TypeScript</li> <li>Опыт работы с JavaScript</li> <li>Опыт работы с функциями и массивами в JavaScript</li> <li>Установленное программное обеспечение: <ul> <li>Git</li> <li>Visual Studio Code</li> <li>Node.js</li> <li>TypeScript</li> </ul> </li> </ul> <h3>Этот модуль входит в состав указанных схем обучения</h3> <p>Создание приложений JavaScript с помощью TypeScript</p> <p>Введение 2 мин</p> <p>Создание функций на TypeScript 5 мин</p> <p>Упражнение. Создание функций 5 мин</p> <p>Функция с параметрами 5 мин</p> <p>Упражнение. Функция с параметрами 5 мин</p> <p>Упражнение. Определение типов функции 5 мин</p> <p>Задание. Использование функций на TypeScript 20 мин</p> <p>Тест на проверку знаний 2 мин</p> <p>Сводка и ресурсы 2 мин</p> </article> <article class="article"> <h2>Урок 1 из 9. Введение. 2 мин</h2> <p>Если вы умеете писать функции на JavaScript, значит вам уже известно, как писать функции на TypeScript. Но в TypeScript к стандартным функциям JavaScript добавлен ряд новых возможностей, которые упрощают работу с ними.</p> <h3>Цели обучения</h3> <p>По завершении этого модуля вы сможете:</p> <ul> <li>Объяснять преимущества использования типов в функциях.</li> <li>Писать функции, которые имеют обязательные и необязательные параметры, параметры по умолчанию и параметры rest.</li> <li>Определять типы функций с помощью псевдонимов типов или интерфейсов.</li> </ul> <h3>Необходимые компоненты</h3> <ul> <li>Знание TypeScript</li> <li>Знакомство с JavaScript.</li> <li>Опыт работы с функциями и массивами в JavaScript</li> <li>Установленное программное обеспечение: <ul> <li>Git</li> <li>Visual Studio Code</li> <li>Node.js</li> <li>TypeScript. TypeScript можно установить после установки Node.js и выполнения указанной ниже команды в терминале или командном окне. <code>npm install -g typescript</code> </li> </ul> </li> </ul> <p>Для получения наилучших результатов полностью следуйте инструкциям по настройке окружения и использованию компилятора TypeScript в статье <a href="https://learn.microsoft.com/ru-ru/training/modules/typescript-get-started/">Модуль 01. Начало работы с TypeScript</a>. После настройки окружения можно запустить любые файлы подготовки к заданию или его решения в <a href="https://learn.microsoft.com/ru-ru/training/paths/build-javascript-applications-typescript/">приложении сборки JavaScript</a> с помощью схемы обучения TypeScript.</p> </article> <article class="article"> <h2>Урок 2 из 9. Создание функций на TypeScript. 5 мин</h2> <p>В JavaScript определения функций не указывают типы данных для параметров, не выполняют проверку типов для переданных аргументов и не проверяют количество полученных аргументов. Поэтому необходимо добавить логику для проверки этих параметров в функции.</p> <p>TypeScript упрощает разработку функций и устранение неполадок, позволяя вводить параметры и возвращать значения. В TypeScript также предусмотрены новые возможности для параметров. Например, хотя в функциях JavaScript все параметры являются необязательными, в TypeScript можно обозначить параметры как обязательные или необязательные.</p> <p>Добавление типов в функции помогает предотвратить передачу значений, которые не следует передавать в функции. Типизированные функции особенно важны при работе с более крупными базами кода или функциями, разработанными другими пользователями. Хотя добавление типов не создает существенных отличий, оно дает такое преимущество, как проверка типов передаваемых в функцию значений и возвращаемых ею данных. Вместо того чтобы добавлять в функцию всю логику для проверки правильности типа передаваемого и возвращаемого значения, с помощью TypeScript можно гарантировать правильность типов значений при разработке кода. Кроме того, при создании логики функции будет доступна полная поддержка автозаполнения, так как редактор будет знать тип данных параметров, в то время как код JavaScript, как правило, определить его не может. Автозаполнение особенно полезно при использовании функций, разработанных другими пользователями, так как TypeScript определяет необходимые типы входных и выходных данных.</p> <p>Как и в JavaScript, функции в TypeScript можно определять несколькими способами. Рассмотрим, чем отличаются эти функции в связи с добавлением типов в TypeScript.</p> <h3>Именованные функции</h3> <p>Именованная функция — это объявление функции, написанное с помощью ключевого слова function, для которого в текущей области указано уникальное имя. Объявления именованных функций загружаются в контекст выполнения перед выполнением любого кода. Этот процесс называется подъемом, и это означает, что вы можете использовать функцию перед объявлением.</p> <p>Для объявления именованной функции в TypeScript используется такой же, как и для ее определения в JavaScript. Единственное отличие в TypeScript заключается в том, что здесь можно добавить заметку с типом для параметров и возвращаемого значения функции.</p> <p>Эта функция принимает два параметра типа number и возвращает значение типа number.</p> <pre>\r\nfunction addNumbers (x: number, y: number): number {\r\n   return x + y;\r\n}\r\naddNumbers(1, 2);\r\n  </pre> <h3>Анонимные функции</h3> <p>Выражение функции (или анонимная функция) — это функция, которая не загружается предварительно в контекст выполнения и выполняется только тогда, когда встречается в коде. Выражения функций создаются во время выполнения и должны быть объявлены перед их вызовом. Они не подняты, в отличие от именованных объявлений функций, которые будут подняты сразу после начала выполнения программы и могут вызываться до их объявления.</p> <p>Выражения функций представляют значения, поэтому они обычно назначаются переменной или передаются в другие функции и могут быть анонимными, то есть функция не имеет имени.</p> <p>В этом примере выражение function присваивается переменной addNumbers. Обратите внимание, что вместо имени функции отображается она сама, что делает ее анонимной. Теперь эту переменную можно использовать для вызова функции.</p> <pre>\r\nlet addNumbers = function (x: number, y: number): number {\r\n   return x + y;\r\n}\r\naddNumbers(1, 2);\r\n  </pre> <p>В следующем примере показано, как выглядит именованной функции sum при написании в виде анонимной функции. Обратите внимание, что имя sum было заменено ключевое словоfunction, а функция реализована как выражение в объявлении переменной.</p> <pre>\r\nlet sum = function (input: number[]): number {\r\n    let total: number =  0;\r\n    for(let i = 0; i &lt; input.length; i++) {\r\n        if(isNaN(input[i])) {\r\n            continue;\r\n        }\r\n        total += Number(input[i]);\r\n    }\r\n    return total;\r\n}\r\n\r\nconsole.log(sum([1, 2, 3]));\r\n  </pre> <p>Как и ранее, при использовании анонимных функций вы получаете проверку типов и IntelliSense. В этом примере обратите также внимание на то, что переменная sum не типизирована, но TypeScript может определить ее тип с помощью так называемой "контекстной типизации", своего рода определения типа. Контекстная типизация может сократить количество усилий, необходимых для сохранения типа программы.</p> <h3>Функции со стрелкой</h3> <p>Функции со стрелками (также называемые лямбда-выражениями или функциями с жирными стрелками, поскольку для их определения используется оператор =>), обеспечивают краткий синтаксис для определения анонимной функции. Из-за их краткости функции со стрелками часто используются с простыми функциями, а также в некоторых сценариях обработки событий.</p> <p>В этом примере сравнивается синтаксис анонимной функции function и синтаксис функции со стрелкой в одну строку. Функция со стрелкой позволяет сократить синтаксис, пропустив ключевое слово function и добавив оператор => между параметрами и телом функции.</p> <pre>\r\n// Anonymous function\r\nlet addNumbers1 = function (x: number, y: number): number {\r\n   return x + y;\r\n}\r\n\r\n// Arrow function\r\nlet addNumbers2 = (x: number, y: number): number => x + y;\r\n  </pre> <p>Обратите внимание, что в этом примере фигурные скобки удалены, а оператор return отсутствует. Однострочные функции со стрелками могут использоватькраткий синтаксис тела или неявный возврат, допускающий пропуск фигурных скобок и ключевого слова return.</p> <p>Если тело функции имеет более одной строки, заключите его в фигурные скобки и включите инструкцию return (при необходимости). В этом примере показано, как выглядит анонимная функция в предыдущем примере при написании в виде функции со стрелкой.</p> <pre>\r\nlet total2 = (input: number[]): number => {\r\n    let total: number =  0;\r\n    for(let i = 0; i &lt; input.length; i++) {\r\n        if(isNaN(input[i])) {\r\n            continue;\r\n        }\r\n        total += Number(input[i]);\r\n    }\r\n    return total;\r\n}\r\n  </pre> <p><strong>Совет.</strong> Функции со стрелками были введены в ES2015, поэтому их поддерживают не все браузеры. TypeScript позволяет воспользоваться преимуществами этих типов функций, а затем при необходимости транскомпилировать код в более ранние версии JavaScript, чтобы он работал с более старыми браузерами.</p> </article> <article class="article"> <h2>Урок 3 из 9. Упражнение. Создание функций. 5 мин</h2> <p>При выполнении этого упражнения вы создадите две именованные функции со строго типизированными параметрами и возвращаемыми значениями.</p> <ol> <li>Откройте тестовую площадку и удалите существующий код.</li> <li>Скопируйте следующую функцию JavaScript в тестовую площадку. Обратите внимание, что параметр message неявно имеет тип any. <pre>\r\nfunction displayAlert(message) {\r\n    alert(\'The message is \' + message);\r\n}\r\n      </pre> </li> <li>Теперь присвойте тип string параметру message. Эта именованной функция не возвращает значение, чтобы вы могли оставить возвращаемый тип (вы также можете передать обратно void в качестве возвращаемого типа, но это не обязательно. <pre>\r\nfunction displayAlert(message: string) {\r\n    alert(\'The message is \' + message);\r\n}\r\n      </pre> </li> <li>Попробуйте вызвать функцию, передав string в качестве параметра. Теперь попробуйте передать number. TypeScript проверит тип параметра и уведомит вас о конфликте. В зависимости от того, что вы пытаетесь выполнить с помощью этой функции, можно взять число в кавычки, дополнить типы значений, принимаемых параметром, типом объединения (например, msg: string | number) или добавить в функцию логику для обработки различных типов передаваемых в нее значений.</li> <li>Ниже приведен еще один пример. Функция sum суммирует числа в массиве и возвращает результат. Скопируйте код JavaScript в тестовую площадку. <pre>\r\nfunction sum(input) {\r\n    let total =  0;\r\n    for(let count = 0; count &lt; input.length; count++) {\r\n        if(isNaN(input[count])){\r\n            continue;\r\n        }\r\n        total += Number(input[count]);\r\n    }\r\n    return total;\r\n}\r\n      </pre> </li> <li>Попробуйте вызвать функцию с одним числом в качестве параметра, например sum(5). Он принимает значение, но не возвращает правильный результат, так как параметр не передается в виде массива.</li> <li>Задайте тип параметра массиву number значений, задайте тип возвращаемой функции numberи задайте тип переменной totalnumber.input <pre>\r\nfunction sum(input: number[]): number {\r\n    let total: number =  0;\r\n    for(let count = 0; count &lt; input.length; count++) {\r\n        if(isNaN(input[count])){\r\n            continue;\r\n        }\r\n        total += Number(input[count]);\r\n    }\r\n    return total;\r\n}\r\n      </pre> </li> <li>Теперь, если вы вызываете функцию с sum(5), TypeScript помечает проблему типа с параметром.</li> <li>Попробуйте вызвать функцию с массивом значений, имеющих смешанные типы, например sum([1, \'two\', 3]). Значения внутри массива относятся к типу проверка, а TypeScript возвращает ошибку:Type \'string\' is not assignable to type \'number\'.</li> </ol> </article> <article class="article"> <h2>Урок 4 из 9. Функция с параметрами. 5 мин</h2> <p>Компилятор TypeScript по умолчанию предполагает, что требуются все параметры, определенные в функции. При вызове функции компилятор TypeScript проверяет следующее:</p> <ul> <li>Значения были предоставлены для каждого параметра.</li> <li>передаются ли только те параметры, которые необходимы функции;</li> <li>Параметры передаются в том порядке, в котором они определены в функции.</li> </ul> <p>Эти требования отличаются от JavaScript. JavaScript предполагает, что все параметры являются необязательными и позволяют передавать больше (или меньше) аргументов функции, чем определено им.</p> <p>В дополнение к обязательным параметрам можно определить функции с необязательными параметрами, параметрами по умолчанию и параметрами rest, а также с деконструированными параметрами объекта.</p> <h3>Обязательные параметры</h3> <p>Если не указано иное, все параметры функции являются обязательными, а число аргументов, передаваемых в функцию, должно соответствовать числу обязательных параметров, которые требуются функции.</p> <p>В этом примере все параметры являются обязательными.</p> <pre>\r\nfunction addNumbers (x: number, y: number): number {\r\n   return x + y;\r\n}\r\n\r\naddNumbers(1, 2); // Returns 3\r\naddNumbers(1);    // Returns an error\r\n  </pre> <h3>Необязательные параметры</h3> <p>Кроме того, можно определить необязательные параметры, добавив в конец имени параметра вопросительный знак (?).</p> <p>В этом примере x является обязательным, а y — необязательным параметром. Необязательный параметр должен следовать после всех обязательных параметров в списке параметров. Кроме того, чтобы эта функция возвращала правильное значение, необходимо учитывать вероятность того, что y может передаваться как неопределенное.</p> <pre>\r\nfunction addNumbers (x: number, y?: number): number {\r\n    if (y === undefined) {\r\n        return x;\r\n    } else {\r\n        return x + y;\r\n    }\r\n}\r\n\r\naddNumbers(1, 2); // Returns 3\r\naddNumbers(1);    // Returns 1\r\n  </pre> <h3>Параметры по умолчанию</h3> <p>Необязательным параметрам можно также присвоить значения по умолчанию. Если значение передается необязательному параметру в качестве аргумента, ему будет присвоено это значение. В противном случае ему присваивается значение по умолчанию. Как и в случае с необязательными параметрами, параметры по умолчанию должны следовать после обязательных параметров в списке параметров.</p> <p>В этом примере x является обязательным, а y — необязательным параметром. Если значение не передается y, значение по умолчанию равно 25.</p> <pre>\r\nfunction addNumbers (x: number, y = 25): number {\r\n   return x + y;\r\n}\r\n\r\naddNumbers(1, 2);  // Returns 3\r\naddNumbers(1);     // Returns 26\r\n  </pre> <h3>Параметры rest</h3> <p>Если вы хотите работать с несколькими параметрами в качестве группы (например, передавая их в массив). Или, если вы не знаете, сколько параметров функция в конечном итоге займет. Можно использовать параметры rest. Параметры rest обрабатываются как неограниченное число необязательных параметров. Вы можете убирать их или добавлять в любом количестве.</p> <p>В этом примере есть один обязательный параметр и необязательный параметр с именем restOfNumbers, который может принимать любое количество дополнительных чисел. Многоточие (...) перед restOfNumbers указывает компилятору, что необходимо создать массив переданных функции аргументов, и присвоить ему имя, чтобы его можно было использовать в функции.</p> <pre>\r\nlet addAllNumbers = (firstNumber: number, ...restOfNumbers: number[]): number => {\r\n   let total: number =  firstNumber;\r\n   for(let counter = 0; counter &lt; restOfNumbers.length; counter++) {\r\n      if(isNaN(restOfNumbers[counter])){\r\n         continue;\r\n      }\r\n      total += Number(restOfNumbers[counter]);\r\n   }\r\n   return total;\r\n}\r\n  </pre> <p>Теперь функция может принимать одно или несколько значений и возвращать результат.</p> <pre>\r\naddAllNumbers(1, 2, 3, 4, 5, 6, 7);  // returns 28\r\naddAllNumbers(2);                    // returns 2\r\naddAllNumbers(2, 3, "three");        // flags error due to data type at design time, returns 5\r\n  </pre> <h3>Деконструированные параметры объекта</h3> <p>Параметры функции являются позициальными и должны быть переданы в порядке, в котором они определены в функции. Позиционные параметры могут сделать код менее читаемым при вызове функции с несколькими параметрами, которые являются необязательными или одинаковыми типами данных.</p> <p>Для включения именованных параметров можно использовать метод, называемый деконструктивным параметрами объекта. Этот метод позволяет использовать интерфейс для определения именованных, а не позиционных параметров в функциях.</p> <p>В следующем примере определяется интерфейс с именем Message, который определяет два свойства. displayMessage В функции Message объект передается в качестве параметра, предоставляя доступ к свойствам, как будто они являются обычными параметрами.</p> <pre>\r\ninterface Message {\r\n   text: string;\r\n   sender: string;\r\n}\r\n\r\nfunction displayMessage({text, sender}: Message) {\r\n    console.log(`Message from ${sender}: ${text}`);\r\n}\r\n\r\ndisplayMessage({sender: \'Christopher\', text: \'hello, world\'});\r\n  </pre> </article> <article class="article"> <h2>Урок 5 из 9. Упражнение. Функция с параметрами. 5 мин</h2> <p>При выполнении этого упражнения вы создадите функции, которые имеют обязательные и необязательные параметры, а также параметры по умолчанию.</p> <h3>Обязательные параметры</h3> <ul> <li>Откройте тестовую площадку и удалите существующий код.</li> <li>Введите следующую функцию со стрелкой, которая принимает три обязательных параметра. <code>let addThreeNumbers = (x: number, y: number, z: number): number => x + y + z;</code> </li> <li>Попробуйте вызвать функцию, введя addThreeNumbers(10, 20). TypeScript инициирует ошибку Ожидалось аргументов: 3, получено: 2. Не указан аргумент для "z". При запуске функция возвращает NaN, поскольку третий аргумент был передан как undefined, что делает вычисление недопустимым.</li> <li>Что происходит при вводе addThreeNumbers(10, 20, 30, 40)? TypeScript вызывает ошибку Ожидалось аргументов: 3, получено: 4. При запуске четвертый аргумент удаляется, а функция возвращает 60.</li> </ul> <h3>Необязательные параметры</h3> <ul> <li>Попробуйте сделать параметр y в функции необязательным. Что происходит? <code>let addThreeNumbers = (x: number, y?: number, z: number): number => x + y + z;</code> </li> <li>TypeScript инициирует ошибку, так как в данном случае имеет значение положение необязательных параметров. В списке параметров необязательные параметры должны следовать после всех обязательных параметров. Попробуйте вместо параметра y сделать необязательным параметр z. Кроме того, чтобы эта функция возвращала правильное значение, ее также необходимо обновить с учетом вероятности того, что z может теперь передаваться как undefined. Теперь вы можете вызвать функцию с помощью addThreeNumbers(10, 20) или addThreeNumbers(10, 20, 30). <pre>\r\nlet addThreeNumbers = (x: number, y: number, z?: number): number => {\r\n    if((z === undefined)) {\r\n        return x + y;\r\n    } else {\r\n        return x + y + z;\r\n    }\r\n};\r\n      </pre> </li> </ul> <h3>Параметры по умолчанию</h3> <ul> <li>Введите следующую функцию со стрелкой, которая принимает три обязательных параметра. <code>let subtractThreeNumbers = (x: number, y: number, z: number): number => x - y - z;</code> </li> <li>Присвойте параметру z значение по умолчанию 100, заменив z: number на z = 100. <code>let subtractThreeNumbers = (x: number, y: number, z = 100): number => x - y - z;</code> </li> <li>Попробуйте вызвать функцию с двумя и тремя аргументами для проверки результата. <pre>\r\nsubtractThreeNumbers(10, 20);       // returns -110 because \'z\' has been assigned the value 100\r\nsubtractThreeNumbers(10, 20, 15);   // returns -25\r\n      </pre> </li> </ul> </article> <article class="article"> <h2>Урок 6 из 9. Упражнение. Определение типов функции. 5 мин</h2> <p>Вы можете определить типы функций, а затем использовать их при создании функций. Эта конструкция полезна, если вы хотите применить сигнатуру одного типа функции к нескольким функциям.</p> <p>Тип функции можно определить с помощью псевдонима типа или интерфейса. Принцип действия обоих подходов по сути не отличается, поэтому выбирайте тот, который вам лучше всего подходит. Интерфейс лучше, если вы хотите расширить тип функции. Псевдоним типа лучше подходит, если требуется использовать объединения или кортежи.</p> <p>Давайте создадим функцию, которая выполняет операцию добавления или вычитающую операцию в зависимости от значения переданного ему параметра. Операции сложения и вычитания принимают два числа, x и y, и возвращают результат в виде числа.</p> <ul> <li>Откройте тестовую площадку и удалите существующий код.</li> <li>Определите тип функции с именем calculator, используя псевдоним типа. Сигнатура типа содержит список параметров (x: number, y: number) и возвращает объект number, отделенный оператором стрелки (=>). (Обратите внимание, что синтаксис сигнатуры типа такой же, как и у функции со стрелкой.) <code>type calculator = (x: number, y: number) => number;</code> </li> <li>Теперь тип функции можно использовать как сигнатуру типа при объявлении функций. Объявите две переменные типа функции calculator: одну для операции сложения, а другую для операции вычитания. Протестируйте новые функции, возвратив результат каждой из них в консоль. <pre>\r\nlet addNumbers: calculator = (x: number, y: number): number => x + y;\r\nlet subtractNumbers: calculator = (x: number, y: number): number => x - y;\r\n\r\nconsole.log(addNumbers(1, 2));\r\nconsole.log(subtractNumbers(1, 2));\r\n      </pre> </li> <li>Тип функции calculator можно также использовать для передачи значений из другой функции. Введите функцию doCalculation, которая возвращает результат функции addNumbers или subtractNumbers в зависимости от значения, переданного в параметр operation. <pre>\r\nlet doCalculation = (operation: \'add\' | \'subtract\'): calculator => {\r\n    if (operation === \'add\') {\r\n        return addNumbers;\r\n    } else {\r\n        return subtractNumbers;\r\n    }\r\n}\r\n      </pre> </li> <li>Попробуйте выполнить функцию, введя. console.log(doCalculation(\'add\')(1, 2)). Как можно видеть, TypeScript может предоставить справку IntelliSense на основе типов, определенных в doCalculation и calculator.</li> <li>Теперь закомментируйте тип функции calculator и объявите новый с помощью интерфейса. Обратите внимание, что сигнатура типа немного отличается. В качестве разделителя между списком параметров и типом возвращаемого значения вместо оператора со стрелкой используется двоеточие (:). Замените функцию calculator интерфейсом Calculator в объявлениях переменных. Когда все будет готово, код должен работать точно так же. <pre>\r\n// type calculator = (x: number, y: number) => number;\r\ninterface Calculator {\r\n    (x: number, y: number): number;\r\n}\r\n      </pre> </li> </ul> <h3>Определение типа функции</h3> <p>При определении функции имена параметров функции не должны совпадать с именами в типе функции. Хотя для имени параметров в сигнатуре типа в обоих местах имена игнорируются при проверка, если два типа функций совместимы.</p> <p>Вы также можете отключить типы параметров и возвращаемый тип, так как TypeScript будет выводить эти типы из определения типа функции.</p> <p>Что касается TypeScript, эти три оператора идентичны.</p> <pre>\r\nlet addNumbers: Calculator = (x: number, y: number): number => x + y;\r\nlet addNumbers: Calculator = (number1: number, number2: number): number => number1 + number2;\r\nlet addNumbers: Calculator = (num1, num2) => num1 + num2;\r\n  </pre> </article> <article class="article"> <h2>Урок 7 из 9. Задание. Использование функций на TypeScript. 20 мин</h2> <p>В этой лаборатории вы преобразуете некоторые функции JavaScript в TypeScript.</p> <h3>Упражнение 1. Преобразование функции JavaScript в TypeScript с строго типизированными параметрами и возвращаемыми типами</h3> <p>Следующий код JavaScript содержит три функции:</p> <ul> <li>Функция BuildArray формирует массив уникальных случайных чисел. Она принимает параметр items, определяющий количество элементов в массиве, и параметр sortOrder, определяющий, порядок сортировки массива (по возрастанию или по убыванию).</li> <li>sortDescending и sortAscending — это функции сравнения, которые указывают методу sort(), как сортировать числа в порядке возрастания или убывания.</li> </ul> <p>Преобразуйте функции в TypeScript со строго типизированными параметрами и типами возвращаемых значений.</p> <ol> <li>Клонируйте начальный репозиторий, введя следующую команду в командной строке. <pre>\r\ngit clone https://github.com/MicrosoftDocs/mslearn-typescript\r\ncd mslearn-typescript/code/module-04/m04-start\r\ncode .\r\n      </pre> </li> <li>Откройте файл module04.ts.</li> <li>Найдите TODO: Update the BuildArray function.</li> <li>BuildArray В функции добавьте типы в список параметров, возвращаемое значение и переменные. <pre>\r\nfunction buildArray(items: number, sortOrder: \'ascending\' | \'descending\'): number[] {\r\n   let randomNumbers: number[] = [];\r\n   let nextNumber: number;\r\n\r\n   for (let counter = 0; counter &lt; items; counter++) {\r\n       nextNumber = Math.ceil(Math.random() * (100 - 1));\r\n       if (randomNumbers.indexOf(nextNumber) === -1) {\r\n         randomNumbers.push(nextNumber);\r\n       } else {\r\n         counter--;\r\n       }\r\n   }\r\n\r\n   if (sortOrder === \'ascending\') {\r\n     return randomNumbers.sort(sortAscending);\r\n   } else {\r\n     return randomNumbers.sort(sortDescending);\r\n   }\r\n}\r\n      </pre> </li> <li>Найдите TODO: Convert the sortDescending and sortAscending functions to arrow functions.</li> <li>Преобразуйте функции sortDescending и sortAscending в анонимные и назначьте их переменным с тем же именем. <pre>\r\nlet sortDescending = (a, b) => {\r\n   if (a &gt; b) {\r\n       return -1;\r\n   } else if (b &gt; a) {\r\n       return 1;\r\n   } else {\r\n       return 0;\r\n   }\r\n}\r\n\r\nlet sortAscending = (a, b) => {\r\n    if (a &gt; b) {\r\n      return 1;\r\n    } else if (b &gt; a) {\r\n      return -1;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n      </pre> </li> <li>Найдите TODO: Declare a new function type for the sortDescending and sortAscending functions.</li> <li>Объявите новый тип функции для функций sortDescending и sortAscending, используя псевдоним типа или интерфейс. <code>type compareFunctionType = (a: number, b:number) => number;</code> </li> <li>В объявлениях переменных для sortDescending и sortAscending примените новый тип функции в качестве типа переменной. <pre>\r\nlet sortDescending: compareFunctionType = (a, b) => {\r\n   if (a &gt; b) {\r\n       return -1;\r\n   } else if (b &gt; a) {\r\n       return 1;\r\n   } else {\r\n       return 0;\r\n   }\r\n}\r\n\r\nlet sortAscending: compareFunctionType = (a, b) => {\r\n    if (a &gt; b) {\r\n      return 1;\r\n    } else if (b &gt; a) {\r\n      return -1;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n      </pre> </li> <li>Протестируйте работу, вызвав функцию buildArray. <pre>\r\nlet myArray1 = buildArray(12, \'ascending\');\r\nlet myArray2 = buildArray(8, \'descending\');\r\nconsole.log(myArray1);\r\nconsole.log(myArray2);\r\n      </pre> </li> </ol> <h3>Упражнение 2. Преобразование функции JavaScript в TypeScript с использованием необязательных параметров</h3> <p>Эта функция JavaScript возвращает сумму платежа для ссуды.</p> <ol> <li>Найдите TODO: Update the LoanCalculator function.</li> <li>Преобразуйте функцию loanCalculator в TypeScript со строго типизированными параметрами, переменными и типами возвращаемых значений.</li> <li>Сделайте параметр months необязательным, но присвойте ему значение по умолчанию, равное 12 месяцам, если оно опущено. <pre>\r\nfunction loanCalculator (principal: number, interestRate: number, months = 12): string {\r\n    let interest: number = interestRate / 1200;   // Calculates the monthly interest rate\r\n    let payment: number;\r\n    payment = principal * interest / (1 - (Math.pow(1/(1 + interest), months)));\r\n    return payment.toFixed(2);\r\n}\r\n      </pre> </li> <li>Проверьте работу, вызвав функцию loanCalculator только с обязательными параметрами. <pre>\r\nlet myLoan = loanCalculator(1000, 5);\r\nconsole.log(myLoan);\r\n      </pre> </li> </ol> <h3>Попробуйте свои силы!</h3> <p>Чтобы усложнить задачу, возьмите существующий код JavaScript, написанный вами или найденный в Интернете, и перепишите его на TypeScript, используя полученные знания о функциях. Вы можете скопировать код JavaScript и вставить его в Playground, а затем отредактировать, или использовать другой редактор, например Visual Studio Code.</p> <h3>Решение задания</h3> <p>Просмотрите окончательную версию кода, введя следующую команду в командной строке.</p> <pre>\r\ncd ../m04-end\r\ncode .\r\n  </pre> <p>Откройте файл module04.ts, чтобы просмотреть решение этого задания.</p> </article> <article class="article"> <h2>Урок 8 из 9. Проверка знаний. 2 мин</h2> <p>Выберите наилучший ответ на каждый из вопросов ниже. Затем нажмите кнопку Проверьте свои ответы.</p> <ol> <li>1. Каково различие между параметрами функций в TypeScript и JavaScript? <ul> <li>Параметры TypeScript являются обязательными по умолчанию, но их можно обозначить как необязательные. Параметры JavaScript всегда необязательные.</li> <li>Параметры TypeScript совпадают с параметрами JavaScript.</li> <li>Параметры TypeScript всегда необязательные. Параметры JavaScript являются обязательными по умолчанию, но их можно обозначить как необязательные.</li> </ul> </li> <li>2. Для чего чаще всего используется анонимная функция? <ul> <li>Если необходимо применить одну и ту же сигнатуру функции к нескольким функциям.</li> <li>Если нужна возможность повторного использования функции во всем коде.</li> <li>Если необходимо назначить выражение функции переменной.</li> </ul> </li> <li>3. Как определить тип функции, если его необходимо расширить? <ul> <li>Можно использовать либо интерфейс, либо псевдоним типа. Оба варианта работают одинаково.</li> <li>Его необходимо определить с помощью интерфейса.</li> <li>Его необходимо определить с помощью псевдонима типа.</li> </ul> </li> </ol> </article> <article class="article"> <h2>Урок 9 из 9. Сводка и ресурсы. 2 мин</h2> <p>Теперь, когда вы изучили этот модуль, вы можете:</p> <ul> <li>Объяснять преимущества использования типов в функциях.</li> <li>Писать функции, которые имеют обязательные и необязательные параметры, параметры по умолчанию и параметры rest.</li> <li>Определять типы функций с помощью псевдонимов типов или интерфейсов.</li> </ul> <h3>Ресурсы</h3> <p>Воспользуйтесь этими ресурсами, чтобы узнать больше.</p> <ul> <li>Дополнительные сведения о функциях см. в <a href="https://www.typescriptlang.org/docs/handbook/functions.html">руководстве по TypeScript (в разделе о функциях).</a></li> <li>Дополнительные сведения о типах функций см. в <a href="https://www.typescriptlang.org/docs/handbook/interfaces.html">руководстве по TypeScript (в разделе об интерфейсах)</a></li> </ul> </article> <article class="article"> <div class="anchor" id="module-5"></div> <h2>Модуль 5. Getting Started with TypeScript. Объявление классов и создание их экземпляров в TypeScript. 1 ч 7 мин</h2> <p><a href="https://learn.microsoft.com/api/achievements/share/ru-ru/frontend200tb-0827/9NSVGVFU?sharingId=6364D7D096225EB9">Значек</a></p> <p><a href="https://learn.microsoft.com/en-us/training/modules/typescript-declare-instantiate-classes/">Declare and instantiate classes in TypeScript (en)</a> <br><a href="https://learn.microsoft.com/ru-ru/training/modules/typescript-declare-instantiate-classes/">Объявление классов и создание их экземпляров в TypeScript (ru)</a></p> <p>1 ч 7 мин Модуль 14 единиц(ы)</p> <p>Классы в TypeScript расширяют функциональные возможности ES6, добавляя специальные функции TypeScript, например заметки с типами для членов класса, модификаторы доступа и возможность указания обязательных или необязательных параметров. Еще одним преимуществом языка TypeScript является то, что его можно использовать для разработки с применением классов, а затем при необходимости компилировать результат в код JavaScript, который работает во всех основных браузерах и на всех распространенных платформах.</p> <h3>Цели обучения</h3> <p>В этом модуле вам предстоит выполнить следующее.</p> <ul> <li>Объяснить, как использовать классы TypeScript для описания формы объектов.</li> <li>Объявить класс с помощью TypeScript.</li> <li>Создать экземпляр класса с помощью TypeScript.</li> <li>Применить модификаторы доступа к классу.</li> <li>Определить статические свойства в классе.</li> <li>Объявить класс, расширяющий другой класс.</li> <li>Объявить интерфейс, чтобы точно задать форму класса.</li> <li>Определить, когда следует использовать интерфейс или класс для определения структуры объекта.</li> </ul> <h3>Предварительные требования</h3> <ul> <li>Знание TypeScript</li> <li>Опыт работы с JavaScript</li> <li>Опыт работы с функциями, интерфейсами и классами TypeScript</li> <li>Установленное программное обеспечение: <ul> <li>Git</li> <li>Visual Studio Code</li> <li>Node.js</li> <li>TypeScript</li> </ul> </li> </ul> <h3>Этот модуль входит в состав указанных схем обучения</h3> <p>Создание приложений JavaScript с помощью TypeScript</p> <p>Введение 2 мин</p> <p>Общие сведения о классах в TypeScript 5 мин</p> <p>Упражнение. Создание класса 5 мин</p> <p>Упражнение. Создание экземпляра класса 5 мин</p> <p>Модификаторы доступа 5 мин</p> <p>Упражнение. Применение модификаторов доступа к классу 2 мин</p> <p>Определение статических свойств 2 мин</p> <p>Расширение класса с помощью наследования 2 мин</p> <p>Упражнение. Расширение класса 5 мин</p> <p>Упражнение. Объявление интерфейса для точного определения формы класса 5 мин</p> <p>Рекомендации по проектированию 5 мин</p> <p>Задание. Преобразование трех функций TypeScript в определение класса 20 мин</p> <p>Проверка знаний 2 мин</p> <p>Итоги 2 мин</p> </article> <article class="article"> <h2>Урок 1 из 14. Введение. 2 мин</h2> </article> <article class="article"> <div class="anchor" id="module-6"></div> <h2>Модуль 6. Getting Started with TypeScript. Начало работы с TypeScript. 36 мин</h2> <p><a href="https://learn.microsoft.com/api/achievements/share/ru-ru/frontend200tb-0827/FZUB8HQX?sharingId=6364D7D096225EB9">Значек</a></p> <p><a href="https://learn.microsoft.com/en-us/training/modules/typescript-generics/">Define generics in TypeScript (en)</a> <br><a href="https://learn.microsoft.com/ru-ru/training/modules/typescript-generics/">Определение generics в TypeScript (ru)</a></p> <p>46 мин Модуль 8 единиц(ы)</p> </article> <article class="article"> <div class="anchor" id="module-7"></div> <h2>Модуль 7. Access external libraries from TypeScript. Доступ к внешним библиотекам из TypeScript. 46 мин</h2> <p><a href="https://learn.microsoft.com/api/achievements/share/ru-ru/frontend200tb-0827/24XG7SLV?sharingId=6364D7D096225EB9">Значек</a></p> <p><a href="https://learn.microsoft.com/en-us/training/modules/typescript-work-external-libraries/">Access external libraries from TypeScript (en)</a> <br><a href="https://learn.microsoft.com/ru-ru/training/modules/typescript-work-external-libraries/">Доступ к внешним библиотекам из TypeScript (ru)</a></p> <p>46 мин Модуль 8 единиц(ы)</p> </article> <article class="article"> <div class="anchor" id="module-8"></div> <h2>Модуль 8. Getting Started with TypeScript. Упорядочение кода с помощью пространств имен TypeScript. 46 мин</h2> <p><a href="https://learn.microsoft.com/api/achievements/share/ru-ru/frontend200tb-0827/VKY6ZFNM?sharingId=6364D7D096225EB9">Значек</a></p> <p><a href="https://learn.microsoft.com/en-us/training/modules/typescript-namespaces-organize-code/">Organize code using TypeScript namespaces (en)</a> <br><a href="https://learn.microsoft.com/ru-ru/training/modules/typescript-namespaces-organize-code/">Упорядочение кода с помощью пространств имен TypeScript (ru)</a></p> <p>46 мин Модуль 8 единиц(ы)</p> </article>','<h1>Типы в TypeScript</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#about">about</a></p> <p><a href="#links">links</a></p> <p><a href="#everyday">everyday types</a></p> <p><a href="#utility">utility types</a></p> </div> </div> <article class="article"> <div class="anchor" id="about"></div> <h2>about</h2> </article> <article class="article"> <div class="anchor" id="links"></div> <h2>links</h2> <p><a href="https://metanit.com/web/typescript/2.5.php">Типы данных</a> (metanit.com 15.05.2021)</p> <p><a href="https://purpleschool.ru/knowledge-base/article/types">Типы данных в TypeScript</a> (purpleschool.ru 22 февраля 2024 г.)</p> <p><a href="https://runebook.dev/ru/docs/typescript/2/everyday-types">runebook.dev/ru/docs/typescript/2/everyday-types</a> Everyday Types</p> <p><a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html">typescriptlang.org/docs/handbook/2/everyday-types.html</a> Everyday Types</p> <p><a href="https://www.typescriptlang.org/docs/handbook/utility-types.html">typescriptlang.org/docs/handbook/utility-types.html</a> Utility Types</p> <h2>Статьи на habr</h2> <p><a href="https://habr.com/ru/articles/711686/">Искусство типизации: TypeScript Utility Types</a> (shittyprogrammer 19 янв 2023)</p> <p><a href="https://habr.com/ru/articles/762902/">TypeScript и все что тебе нужно в разработке</a> (Маслов Андрей 24 сен 2023)</p> </article> <article class="article"> <div class="anchor" id="everyday"></div> <h2>everyday types</h2> </article> <article class="article"> <div class="anchor" id="utility"></div> <h2>utility types</h2> <p>TypeScript Utility Types - это набор встроенных типов, которые можно использовать для манипулирования типами данных в коде. Рассмотрим их подробнее.</p> <h3>Awaited</h3> <p>Awaited&lt;T&gt; - это специальный тип, который может быть использован для обозначения типа, который будет возвращен из асинхронной функции.</p> <pre>async function getData(): Promise&lt;string&gt; {\r\n  return \'hello\';\r\n}\r\n\r\nlet awaitedData: Awaited&lt;ReturnType&lt;typeof getData&gt;&gt;;\r\n// теперь awaitedData может быть \'hello\'</pre> <h3>Partial</h3> <p>Partial&lt;T&gt; - делает все свойства объекта типа T необязательными.</p> <pre>interface Person {\r\n  name: string;\r\n  age: number;\r\n}\r\n\r\nlet partialPerson: Partial&lt;Person&gt;;\r\n// теперь partialPerson может быть { name?: string; age?: number; }</pre> <h3>Required</h3> <p>Required&lt;T&gt; - делает все свойства объекта типа T обязательными.</p> <pre>interface Person {\r\n  name?: string;\r\n  age?: number;\r\n}\r\n\r\nlet requiredPerson: Required&lt;Person&gt;;\r\n// теперь requiredPerson может быть { name: string; age: number; }</pre> <h3>Readonly</h3> <p>Readonly&lt;T&gt; - делает все свойства объекта типа T доступными только для чтения.</p> <pre>interface Point {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nlet readonlyPoint: Readonly&lt;Point&gt;;\r\n// теперь readonlyPoint может быть { readonly x: number; readonly y: number; }</pre> <h3>Record</h3> <p>Record&lt;Keys, Type&gt; - создает тип, который является записью с ключами, определенными в первом параметре, и значениями типа, определенного во втором параметре.</p> <pre>type Keys = \'a\' | \'b\' | \'c\';\r\ntype RecordType = Record&lt;Keys, number&gt;;\r\n\r\nlet record: RecordType;\r\n// теперь record может быть { a: number, b: number, c: number }</pre> <h3>Pick</h3> <p>Pick&lt;T, K extends keyof T&gt; - выбирает свойства объекта типа T с ключами, указанными в K.</p> <pre>interface Person {\r\n  name: string;\r\n  age: number;\r\n}\r\n\r\nlet pickedPerson: Pick&lt;Person, \'name\'&gt;;\r\n// теперь pickedPerson может быть { name: string; }</pre> <h3>Omit</h3> <p>Omit&lt;T, K extends keyof T&gt; - выбирает свойства объекта типа T, исключая те, которые указаны в K</p> <pre>interface Person {\r\n  name: string;\r\n  age: number;\r\n}\r\n\r\nlet omittedPerson: Omit&lt;Person, \'age\'&gt;;\r\n// теперь omittedPerson может быть { name: string; }</pre> <h3>Exclude</h3> <p>Exclude&lt;UnionType, ExcludedMembers&gt; - исключает определенные типы из объединенного типа.</p> <pre>type A = \'a\' | \'b\' | \'c\';\r\ntype B = Exclude&lt;A, \'a\' | \'b\'&gt;;\r\n// теперь B это \'c\'</pre> <h3>Extract</h3> <p>Extract&lt;Type, Union&gt; - извлекает из типа Type только те типы, которые присутствуют в Union.</p> <pre>type A = \'a\' | \'b\' | \'c\';\r\ntype B = \'a\' | \'b\';\r\ntype C = Extract&lt;A, B&gt;;\r\n// теперь C это \'a\' | \'b\'</pre> <h3>NonNullable</h3> <p>NonNullable&lt;Type&gt; - извлекает тип из Type, исключая null и undefined.</p> <pre>let value: string | null | undefined;\r\nlet nonNullableValue: NonNullable&lt;typeof value&gt;;\r\n// теперь nonNullableValue это string</pre> <h3>Parameters</h3> <p>Parameters&lt;Type&gt; - извлекает типы аргументов функции Type.</p> <pre>function foo(a: string, b: number) {}\r\ntype FooParameters = Parameters&lt;typeof foo&gt;;\r\n// теперь FooParameters это [string, number]</pre> <h3>ConstructorParameters</h3> <p>ConstructorParameters&lt;Type&gt; - извлекает типы аргументов конструктора Type.</p> <pre>class Foo {\r\n    constructor(a: string, b: number) {}\r\n}\r\ntype FooConstructorParameters = ConstructorParameters&lt;typeof Foo&gt;;\r\n// теперь FooConstructorParameters это [string, number]</pre> <h3>ReturnType</h3> <p>ReturnType&lt;Type&gt; - извлекает тип возвращаемого значения функции Type.</p> <pre>function foo(): string { return \'hello\'; }\r\ntype FooReturnType = ReturnType&lt;typeof foo&gt;;\r\n// теперь FooReturnType это string</pre> <h3>InstanceType</h3> <p>InstanceType&lt;Type&gt; - извлекает тип экземпляра класса Type.</p> <pre>class Foo { x: number }\r\ntype FooInstance = InstanceType&lt;typeof Foo&gt;;\r\n// теперь FooInstance это { x: number }</pre> <h3>ThisParameterType</h3> <p>ThisParameterType&lt;Type&gt; - извлекает тип this из функции Type.</p> <pre>class Foo {\r\n    x: number;\r\n    method(this: this): void { }\r\n}\r\ntype ThisType = ThisParameterType&lt;Foo["method"]&gt;;\r\n// теперь ThisType это Foo</pre> <h3>OmitThisParameter</h3> <p>OmitThisParameter&lt;Type&gt; - определяет функцию без типа this.</p> <pre>class Foo {\r\n    x: number;\r\n    method(this: this): void { }\r\n}\r\ntype MethodType = OmitThisParameter&lt;Foo["method"]&gt;;\r\n// теперь MethodType это () => void</pre> <h3>ThisType</h3> <p>ThisType&lt;Type&gt; - добавляет тип this к функции Type.</p> <pre>class Foo {\r\n    x: number;\r\n    method(): void { }\r\n}\r\ntype MethodType = ThisType&lt;Foo["method"]&gt;;\r\n// теперь MethodType это (this: Foo) => void</pre> <h3>Управление регистром</h3> <p>Uppercase&lt;StringType&gt;, Lowercase&lt;StringType&gt;, Capitalize&lt;StringType&gt;, Uncapitalize&lt;StringType&gt; - это утилитные типы для манипуляции строками, которые изменяют регистр строки в соответствии с их именем.</p> <pre>type Uppercased = Uppercase&lt;\'hello\'&gt;; // \'HELLO\'\r\ntype Lowercased = Lowercase&lt;\'Hello\'&gt;; // \'hello\'\r\ntype Capitalized = Capitalize&lt;\'hello\'&gt;; // \'Hello\'\r\ntype Uncapitalized = Uncapitalize&lt;\'Hello\'&gt;; // \'hello\'</pre> </article> '],t=document.querySelector("#code"),document.querySelectorAll(".aside a").forEach((function(r,i){!function(r,i){r.addEventListener("click",(function(r){r.preventDefault(),t.innerHTML=e[i]}))}(r,i)}));var i=new Event("click");le[0].dispatchEvent(i)}()}},{url:"code-csharp.html",text:"C#",content:"<code-csharp></code-csharp>",act:function(){!function(){var e,t,r=document.querySelector(".aside");r.innerHTML="",r.append.apply(r,de),e=['<h1>C#</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#about">about</a></p> <p><a href="#links">links</a></p> <p><a href="#install">install</a></p> <p><a href="#net">.Net</a></p> </div> </div> <article class="article"> <div class="anchor" id="about"></div> <h2>about</h2> <p>Первая версия языка вышла вместе с релизом Microsoft Visual Studio .NET в феврале 2002 года. Текущей версией языка является версия C# 11, которая вышла 8 ноября 2022 года вместе с релизом .NET 7.</p> </article> <article class="article"> <div class="anchor" id="links"></div> <h2>links</h2> <p><a href="https://www.flenov.info/">flenov.info</a> Програмысли</p> <p><a href="https://metanit.com/sharp/tutorial/">metanit.com/sharp/tutorial</a> Полное руководство по языку программирования С# 11 и платформе .NET 7 (Последнее обновление: 09.07.2023)</p> <p><a href="https://metanit.com/sharp/tutorial/2.25.php">metanit.com/sharp/tutorial/2.25.php</a> Читаю Переменные и константы</p> <p><a href="https://code-basics.com/ru/languages/csharp">code-basics.com/ru/languages/csharp</a> Бесплатный курс по C# для начинающих (16 часов, 64 урока)</p> <p><a href="https://stepik.org/course/99426/promo"> stepik.org/course/99426/promo</a> Язык программирования C# для начинающих</p> <p><a href="https://c-sharp.pro/"> c-sharp.pro</a> Си шарп для начинающих</p> <p><a href="https://professorweb.ru/my/csharp/charp_theory/level1/index.php"> professorweb.ru/my/csharp</a> Руководство по C#</p> <p><a href="https://ulearn.me/"> ulearn.me</a> Основы программирования на примере C#</p> <p><a href="https://teach-in.ru/course/algorithms"> https://teach-in.ru/course/algorithms</a></p> <p><a href="https://intuit.ru/"> intuit.ru</a></p> <h2>Статьи</h2> <p><a href="https://skillbox.ru/media/code/yazyk-s-gde-ispolzuyut-chto-pishut-kak-poyavilsya-i-chem-khorosh/"> skillbox.ru</a> Язык С#: где используют, что пишут, как появился и чем хорош (21.06.2022)</p> <p><a href="https://blog.skillfactory.ru/kak-programmirovat-na-c-obzor-yazyka-primery-koda-bazovye-instrumenty/"> blog.skillfactory.ru</a> Как программировать на C#: обзор языка, примеры кода, базовые инструменты (27.08.2023)</p> </article> <article class="article"> <div class="anchor" id="install"></div> <h2>install</h2> <p>Нужно установить среду разработки, где будем писать код и для получения результата. Рассмотрим два варианта. </p> <h3>Вариант 1. Полноценная среда разработки Visual Studio Community 2022.</h3> <p>Скачиваем установщик с оффициального сайта <a href="https://visualstudio.microsoft.com/ru/downloads/">visualstudio.microsoft.com/ru/downloads</a> . Запускаем его, установщик докачает все необходимое. Далее мы попадаем на экран где нужно выбрать какие модули надо установить. Выбираем Разработка классических приложений .NET, ASP.NET и разработка веб-приложений. После этого нажимаем Установить (или Изменить).</p> <p>И при инсталляции Visual Studio на ваш компьютер будут установлены все необходимые инструменты для разработки программ, в том числе фреймворк .NET 7.</p> <p>Для создания первой программы, откроем Visual Studio. На стартовом экране выберем Create a new project (Создать новый проект). В окне Создание проекта выбираем Консольное приложение .NET Core и жмем далее</p> <p>Далее на следующем этапе нам будет предложено указать имя проекта и каталог, где будет располагаться проект. </p> <p>На следующем окне Visual Studio предложит нам выбрать версию .NET, которая будет использоваться для проекта. Выберем последнюю на данный момент верси. - .NET 7.0</p> <p>Нажмем на кнопку Create (Создать) для создания проекта, и после этого Visual Studio создаст и откроет нам проект</p> <h3>Вариант 2. Редактор кода Visual Studio Code.</h3> <p>В этом случае необходимо еще докачать платформу .NET <a href="https://dotnet.microsoft.com/en-us/download">dotnet.microsoft.com/en-us/download</a>. После этого можно использовать нужные команды, которые будут доступны из терминала. С помощью этих команд можно создать или запустить проект. В VSCode надо установить расширение C# от ms-dotnettools.csharp от Microsoft C# for Visual Studio Code (powered by OmniSharp)</p> <p>Чтобы создать новый проект нужно открыть пустую папку. Открыть терминал. Команда clear - очистить терминал</p> <p>Проверим установленную версию .NET <code> dotnet --version <br>7.0.401 </code> </p> <p>Создадим новое консольное приложение <code>dotnet new console -o sample</code> </p> <p> Наберем текст программы <code> using System; <br>namespace sample { <br>class Program { <br>static void Main(string[] args) { <br>// Урок 1. Вывод в консоль <br>Console.WriteLine("Hello, World!"); <br> <br>// Урок 2. Типы данных (Ссылочные типы и типы значения) <br>// Переменные типов значения (value types) хранятся в стеке и <br>// каждая занимает определенный объем памяти. <br>// Всего 11 типов значений. Из них 8 численных типов <br>// byte название типа в C# <br>// Systm.Byte название типа в .NET <br> <br>// 8 численных типов <br>// System.Byte 1 байт <br>byte bmin = byte.MinValue; <br>byte bmax = byte.MaxValue; <br>Console.WriteLine("Тип данных byte. byte.MinValue = {0}, byte.MaxValue = {1}", bmin, bmax); <br> <br>// sbyte 1 байт <br>sbyte sbmin = sbyte.MinValue; <br>sbyte sbmax = sbyte.MaxValue; <br>Console.WriteLine("Тип данных sbyte. sbyte.MinValue = {0}, sbyte.MaxValue = {1}", sbmin, sbmax); <br> <br>// System.Int16 2 байта <br>short shmin = short.MinValue; <br>short shmax = short.MaxValue; <br>Console.WriteLine("Тип данных short. short.MinValue = {0}, short.MaxValue = {1}", shmin, shmax); <br> <br>// ushort 2 байта <br>ushort ushmin = ushort.MinValue; <br>ushort ushmax = ushort.MaxValue; <br>Console.WriteLine("Тип данных ushort. ushort.MinValue = {0}, ushort.MaxValue = {1}", ushmin, ushmax); <br> <br>// System.Int32 4 байта <br>int imin = int.MinValue; <br>int imax = int.MaxValue; <br>Console.WriteLine("Тип данных int. int.MinValue = {0}, int.MaxValue = {1}", imin, imax); <br> <br>// uint 4 байта <br>uint uimin = uint.MinValue; <br>uint uimax = uint.MaxValue; <br>Console.WriteLine("Тип данных uint. uint.MinValue = {0}, uint.MaxValue = {1}", uimin, uimax); <br> <br>// System.Int64 8 байт <br>long lmin = long.MinValue; <br>long lmax = long.MaxValue; <br>Console.WriteLine("Тип данных long. long.MinValue = {0}, long.MaxValue = {1}", lmin, lmax); <br> <br>// ulong 8 байт <br>ulong ulmin = ulong.MinValue; <br>ulong ulmax = ulong.MaxValue; <br>Console.WriteLine("Тип данных ulong. ulong.MinValue = {0}, ulong.MaxValue = {1}", ulmin, ulmax); <br> <br>// System.Single 4 байта <br>float fmin = float.MinValue; <br>float fmax = float.MaxValue; <br>float f = 12.9f; <br>Console.WriteLine("Тип данных float. float.MinValue = {0}, float.MaxValue = {1}", fmin, fmax); <br> <br>// System.Double 8 байт <br>double dmin = double.MinValue; <br>double dmax = double.MaxValue; <br>double d = 123.45; <br>Console.WriteLine("Тип данных double. double.MinValue = {0}, double.MaxValue = {1}", dmin, dmax); <br> <br>// System.Decimal 16 байт <br>decimal mmin = decimal.MinValue; <br>decimal mmax = decimal.MaxValue; <br>decimal m = 16.77m; <br>Console.WriteLine("Тип данных decimal. decimal.MinValue = {0}, decimal.MaxValue = {1}", mmin, mmax); <br>Console.WriteLine("float f = {0}, double d = {1}, decimal m = {2}", f, d, m); <br> <br>// System.Boolean 1 байт <br>bool yes = true; <br>bool no = false; <br>Console.WriteLine("Тип данных bool. Имеет только два значения {0} и {1}", yes, no); <br> <br>// 3 нечисленных типа <br>// System.Char 2 байта <br>char ch = \'a\'; <br>char ch2 = \'b\'; <br>Console.WriteLine("Тип данных char. {0} {1}", ch, ch2); <br> <br>// string <br>string s = "frontend"; <br>Console.WriteLine(s); <br> <br>//Console.ReadKey(); <br>} <br>} <br>} </code> </p> <p>Запустим созданный проект командой <code>dotnet run</code> </p> </article> <article class="article"> <div class="anchor" id="net"></div> <h2>.Net</h2> <p>.Net (дот нет) Framework - платформа программирования под Windows</p> <p>.Net Core - открытый кросс-платформенный фреймворк под Windows, Linux, macOS</p> <p>C# (си шарп) - основной язык программирования платформы .Net</p> <p>.Net Framework и .Net Core состоят из исполняющей среды и базовой библиотеки классов</p> <p>CLR (Common Language Runtime) - исполняющая среда под платформой .Net Framework</p> <p>Core CLR - исполняющая среда под платформой .Net Core</p> <p>BCL (Base Class Library) = FCL (Foundation Class Library) + Frameworks</p> <p><a href="https://learn.microsoft.com/ru-ru/dotnet/">learn.microsoft.com/ru-ru/dotnet</a> Документация по .NET </p> <p><a href="https://dotnet.microsoft.com/en-us/download">dotnet.microsoft.com/en-us/download</a> Download .NET </p> </article>'],t=document.querySelector("#code"),document.querySelectorAll(".aside a").forEach((function(r,i){!function(r,i){r.addEventListener("click",(function(r){r.preventDefault(),t.innerHTML=e[i]}))}(r,i)}));var i=new Event("click");de[0].dispatchEvent(i)}()}},{url:"code-markdown.html",text:"Markdown",content:"<code-markdown></code-markdown>",act:function(){!function(){var e,t,r=document.querySelector(".aside");r.innerHTML="",r.append.apply(r,me),e=['<h1>Markdown</h1> <article class="article"> <p><a href="https://www.markdownguide.org/basic-syntax/">markdownguide.org/basic-syntax</a></p> <ul> <li> Заголовоки h1-h16 выделяются с помощью решетки # <pre># Заголовок 1\r\n  ## Заголовок 2\r\n  ### Заголовок 3\r\n  #### Заголовок 4\r\n  ##### Заголовок 5\r\n  ###### Заголовок 6</pre> Решетку # можно поставить с двух сторон <pre># Заголовок 1 #\r\n  ## Заголовок 2 ##\r\n  ### Заголовок 3 ###\r\n  #### Заголовок 4 ####\r\n  ##### Заголовок 5 #####\r\n  ###### Заголовок 6 ######</pre> Заголовок h1 можно выделить если на следующей строке указать любое количество знаков «равно» = <pre>Заголовок 1\r\n  ===</pre> Заголовок h2 можно выделить если на следующей строке указать любое количество знаков «минус» - <pre>Заголовок 2\r\n  --</pre> </li> <li> Абзац создается при помощи пустой строки. Если вокруг текста сверху и снизу есть пустые строки, то текст превращается в абзац. </li> <li> Перенос строки. Чтобы сделать перенос строки вместо абзаца, нужно поставить два пробела в конце предыдущей строки. </li> <li> Горизонтальная черта <pre>***</pre>или <pre>---</pre>или <pre>___</pre> </li> <li> <em>Курсивный текст</em> <pre>*курсивный текст*</pre>или <pre>_курсивный текст_</pre> </li> <li> <strong>Жирный текст</strong> <pre>**жирный текст**</pre>или <pre>__жирный текст__</pre> </li> <li> <strong><em>Жирный курсивный текст</em></strong> <pre>***жирный курсивный текст***</pre>или <pre>__жирный курсивный текст___</pre> </li> <li> Зачеркнутый текст <code>~~зачеркнутый текст~~</code> </li> <li> Картинка <code>![текст тега alt](https://pictures.com/foto.jpg "текст тега title")</code> </li> <li> Ссылка <pre>[ссылка на гугл](https://google.com)</pre> </li> <li> Картинка-ссылка <code>[![текст тега alt](https://pictures.com/foto.jpg "текст тега title")](https://pictures.com)</code> </li> <li>Маркированный список <pre>- item\r\n  - item</pre>или <pre>+ item\r\n  + item</pre>или <pre>* item\r\n  * item</pre> </li> <li>Вложенный список <pre>- item\r\n    - item</pre>или <pre>+ item\r\n    + item </pre>или <pre>* item\r\n    * item</pre> </li> <li>Нумерованный список (любые цифры) <pre>1. item\r\n  1. item\r\n    1. item\r\n    1. item</pre> </li> <li>Цитаты <pre>> text\r\n  > text\r\n  > text</pre> </li> <li>Исходный код пишут с помощью обратных кавычек. Инлайн код выделяют одиночными обратными кавычками. Блок кода - тройными <pre>\\`let a = 5;\\`</pre> <pre>\\`\\`\\`let a = 5;\r\n  let b = a +5;\\`\\`\\`</pre> </li> <li>Сноски <pre>Сноска первая [^1] и сноска вторая [^2]\r\n  [^1]: Текст сноски 1\r\n  [^2]: Текст сноски 2</pre> </li> <li>Таблица. Для таблиц используют вертикальную черту и дефис <pre>цвет | rgb | hex\r\n  :----|:----:|------:\r\n  красный | 255,0,0 | ff0000\r\n  зеленый | 0,255,0 | 00ff00\r\n  синий   | 0,0,255 | 0000ff</pre> </li> <li> Экранирование. Чтобы спецсимволы не исчезали и не влияли на оформление, нужно использовать экранирование. Как и во многих других языках программирования, этим целям служит обратная косая черта (бэкслеш). </li> </ul> </article>'],t=document.querySelector("#code"),document.querySelectorAll(".aside a").forEach((function(r,i){!function(r,i){r.addEventListener("click",(function(r){r.preventDefault(),t.innerHTML=e[i]}))}(r,i)}));var i=new Event("click");me[0].dispatchEvent(i)}()}},{url:"code-pug.html",text:"Pug",content:"<code-pug></code-pug>",act:function(){!function(){var e,t,r=document.querySelector(".aside");r.innerHTML="",r.append.apply(r,ye),e=['<h1>Pug</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#links">links</a></p> <p><a href="#articles">Статьи</a></p> </div> </div> <article class="article"> <div class="anchor" id="links"></div> <h2>links</h2> <p><a href="https://pugjs.org/api/getting-started.html">pugjs.org</a></p> <p><a href="https://html-to-pug.com/">HTML TO PUG - Online Converter</a></p> <p><a href="https://html2jade.org/">HTML to JADE/PUGrealtime online converter</a></p> </article> <article class="article"> <div class="anchor" id="articles"></div> <h2>Статьи </h2> <p>Препроцессор pug доводит обычный html до уровня языка программирования со всеми вытекающими конструкциями (ветвлениями, функциями, переменными, циклами)</p> <p><a href="https://devhints.io/pug">devhints.io/pug</a></p> <p><a href="https://frontips.ru/pug-shablonizator-i-preprocessor-html/">frontips.ru</a></p> <p><a href="https://zaurmag.ru/html5-css3/html-preprotsessor-pug-jade.html">zaurmag.ru</a></p> <p><a href="https://nodejsdev.ru/guide/express-pug/">nodejsdev.ru</a></p> <p><a href="https://tokmakov.msk.ru/blog/item/627">tokmakov.msk.ru</a></p> </article>'],t=document.querySelector("#code"),document.querySelectorAll(".aside a").forEach((function(r,i){!function(r,i){r.addEventListener("click",(function(r){r.preventDefault(),t.innerHTML=e[i]}))}(r,i)}));var i=new Event("click");ye[0].dispatchEvent(i)}()}},{url:"code-sass.html",text:"SASS",content:"<code-sass></code-sass>",act:function(){!function(){var e,t,r=document.querySelector(".aside");r.innerHTML="",r.append.apply(r,Le),e=['<h1>SASS</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#links">links</a></p> </div> </div> <article class="article"> <div class="anchor" id="links"></div> <h2>links</h2> <p><a href="https://sass-scss.ru/">https://sass-scss.ru/</a></p> <p><a href="https://sass-lang.com/">https://sass-lang.com/</a></p> </article>'],t=document.querySelector("#code"),document.querySelectorAll(".aside a").forEach((function(r,i){!function(r,i){r.addEventListener("click",(function(r){r.preventDefault(),t.innerHTML=e[i]}))}(r,i)}));var i=new Event("click");Le[0].dispatchEvent(i)}()}},{url:"code-php.html",text:"Php",content:"<code-php></code-php>",act:function(){!function(){var e,t,r=document.querySelector(".aside");r.innerHTML="",r.append.apply(r,_e),e=['<h1>PHP</h1> <article class="article"> <p><a href="https://fkn.ktu10.com/">fkn.ktu10.com</a> IT For Free Бесплатные курсы программирования</p> </article>'],t=document.querySelector("#code"),document.querySelectorAll(".aside a").forEach((function(r,i){!function(r,i){r.addEventListener("click",(function(r){r.preventDefault(),t.innerHTML=e[i]}))}(r,i)}));var i=new Event("click");_e[0].dispatchEvent(i)}()}},{url:"code-pascal.html",text:"Pascal",content:"<code-pascal></code-pascal>",act:function(){!function(){var e,t,r=document.querySelector(".aside");r.innerHTML="",r.append.apply(r,Ne),e=['<h1>Pascal</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#links">links</a></p> <p><a href="#urok0">Урок 0</a></p> <p><a href="#urok1">Урок 1</a></p> <p><a href="#urok2">Урок 2</a></p> <p><a href="#urok3">Урок 3</a></p> <p><a href="#urok4">Урок 4</a></p> <p><a href="#urok5">Урок 5</a></p> <p><a href="#urok6">Урок 6</a></p> </div> </div> <article class="article"> <div class="anchor" id="links"></div> <h2>links</h2> <p><a href="https://fkn.ktu10.com/">fkn.ktu10.com</a> IT For Free Бесплатные курсы программирования</p> <p><a href="https://www.youtube.com/@toybattle/videos">youtube.com/@toybattle</a> ToyBattle | Бесплатные курсы Программирования</p> <p><a href="https://www.lazarus-ide.org/index.php?page=downloads">lazarus-ide.org</a> Установка Lazarus в Windows</p> <p><a href="https://learnpascal.ru/">learnpascal.ru</a> Уроки Pascal</p> <p><a href="http://www.freepascal.ru/">freepascal.ru</a> Уроки Pascal</p> <p><a href="https://pinskolimp.blogspot.com/">pinskolimp.blogspot.com</a> Подготовка к олимпиадам по информатике</p> </article> <article class="article"> <h2>Онлайн среда разработки для Pascal</h2> <p><a href="https://www.onlinegdb.com/">onlinegdb.com</a> В поле Language нужно выбрать Pascal</p> <p><a href="https://ideone.com/">ideone.com</a> Нужно выбрать Pascal</p> </article> <article class="article"> <h2>Есть три среды разработки для Pascal</h2> <p><a href="https://pascalabc.net/">pascalabc.net</a></p> <p>PascalABC.NET - язык программирования нового поколения, нацеленный на обучение современному программированию в 21 веке и использование в образовательной и научной сферах. Он создан в 2007 году, основан на языках C# и Delphi (Object Pascal), которые занимают соответственно 5 и 13 строчки в рейтинге популярности языков программирования TIOBE 2024, заимствует от языка Python компактность записи программ и ряд конструкций, сохраняя при этом все преимущества языка компиляционного типа (ранний контроль ошибок, высокая скорость выполнения программ).</p> <p>PascalABC.NET включает бесплатную, простую и мощную среду разработки с подсказками по коду, автоформатированием и образцами кода для начинающих.</p> <p><a href="https://www.freepascal.org/">freepascal.org</a></p> <p><a href="https://geany.org/">geany.org</a> ставится на ubuntu</p> </article> <article class="article"> <h2>День 1 (2024.01.25 чт - День студента)</h2> </article> <article class="article"> <h2><a href="https://fkn.ktu10.com/" class="text-link">https://fkn.ktu10.com/</a></h2> <p>IT For Free Бесплатные курсы программирования</p> <p><span class="text-link">Прочитал</span> <a href="https://fkn.ktu10.com/?q=node/15770" class="text-link">https://fkn.ktu10.com/?q=node/15770</a> Cеминар по Программированию/Бесплатные курсы c нуля 2024: Паскаль, PHP, JavaScript Сообщество. Онлайн - как начать</p> <p><span class="text-link">Прочитал</span> <a href="https://fkn.ktu10.com/?q=node/16167" class="text-link">https://fkn.ktu10.com/?q=node/16167</a> Как начать программировать: Паскаль для начинающих. Требования. Курсы программирования с нуля</p> <p><span class="text-link">Прочитал</span> <a href="https://fkn.ktu10.com/?q=node/14860" class="text-link">https://fkn.ktu10.com/?q=node/14860</a> Как начать программировать -- стартовая инструкция по Паскалю 2024. Версия 16.02.2023</p> </article> <article class="article"> <h2><a href="https://fkn.ktu10.com/?q=node/7301" class="text-link">https://fkn.ktu10.com/?q=node/7301</a></h2> <p>Основная страница учебной программы. Паскаль - Онлайн Учебник для начинающих изучать программирование с нуля. Справочник. Примеры кода. [Pascal]</p> <p><span class="text-link">Прочитал</span> <a href="https://fkn.ktu10.com/?q=node/12456" class="text-link">https://fkn.ktu10.com/?q=node/12456</a> Pascal как начать. Бесплатные курсы программирования Online</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://www.youtube.com/watch?v=fYpVFn9tEUk" class="yt-link"> Социальная сеть Диаспора. IT for freedom</a> (2012.12.22 18мин)</p> </article> <article class="article"> <div class="anchor" id="urok0"></div> <h2>Паскаль. Урок 0</h2> <p><span class="text-link">Изучил урок</span> <a href="https://fkn.ktu10.com/?q=node/11231" class="text-link">https://fkn.ktu10.com/?q=node/11231</a> #0 Паскаль: Настройка среды разработки - что установить, чтобы начать программировать (Pascal)</p> <p><span class="text-link">Прочитал</span> <a href="https://fkn.ktu10.com/?q=node/9746" class="text-link">https://fkn.ktu10.com/?q=node/9746</a> IDE (ИДЕ), Среда разработки -- что это в программировании</p> <p><span class="text-link">Прочитал</span> <a href="https://fkn.ktu10.com/?q=node/8368" class="text-link">https://fkn.ktu10.com/?q=node/8368</a> lazarus Как создать консольное приложение -- тип проекта для простых программ</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://www.youtube.com/watch?v=JyBzMLxhxUI" class="yt-link"> #0 Lazarus Delphi Установка, создание и сохранение консольной программы (Windows)</a> (2020.01.25 12мин)</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://www.youtube.com/watch?v=xWOW7TAPLc0" class="yt-link"> Lazarus Установка и настройка Pascal в Windows. Одно окно</a> (2021.12.04 7мин)</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://www.youtube.com/watch?v=izTJAympZ4o" class="yt-link"> Lazarus Как сохранять проеты задачи Паскаль на компьютере</a> (2021.12.11 9мин)</p> </article> <article class="article"> <h2>День 2 (2024.01.29 пн)</h2> </article> <article class="article"> <div class="anchor" id="urok1"></div> <h2>Паскаль. Урок 1</h2> <p><span class="text-link">Изучил урок</span> <a href="https://fkn.ktu10.com/?q=node/8489" class="text-link">https://fkn.ktu10.com/?q=node/8489</a> #1 Начало программирования. Минимальная программа. Комментарии в коде. Тело программы и операторные скобки. Паскаль</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://www.youtube.com/watch?v=M_PoECELUag" class="yt-link">#1 Паскаль: как начать, минимальная программа. Введение</a> (2020.01.25 8мин)</p> </article> <article class="article"> <div class="anchor" id="urok2"></div> <h2>Паскаль. Урок 2</h2> <p><span class="text-link">Изучил урок</span> <a href="https://fkn.ktu10.com/?q=node/8514" class="text-link">https://fkn.ktu10.com/?q=node/8514</a> #2 Литералы и Вывод данных на экран (в консоль). Первое знакомство с Write и Writeln. Аргументы процедуры. Паскаль</p> <p><span class="text-link">Прочитал</span> <a href="https://fkn.ktu10.com/?q=node/8516" class="text-link">https://fkn.ktu10.com/?q=node/8516</a> Как задерживать консоль чтобы она не закрывалась</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://www.youtube.com/watch?v=tZYsinEC_Q0" class="yt-link">#2.1 Паскаль: виды литералов: стороковые, символьные, числовые. Writeln() - начало работы</a> (2020.01.25 8мин)</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://www.youtube.com/watch?v=dcaXkgx36D0" class="yt-link">#2.2 Паскаль: write, writeln, вывод литералов, аргументы процедуры, отличия</a> (2020.01.27 15мин)</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://www.youtube.com/watch?v=wZpLdqfvVBQ" class="yt-link">pascal Write() Writeln() Вывод литералов в консоль. Начало типов данных</a> (2021.12.11 52мин)</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://www.youtube.com/watch?v=ZYFAASyRiqo" class="yt-link">pascal Типы литералов в Паскале</a> (2023.03.24 2мин)</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://www.youtube.com/watch?v=0oX5lvXmzKA" class="yt-link">pascal Процедура и ее аргументы - что это такое, разбор ответа</a> (2023.03.24 2мин)</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://www.youtube.com/watch?v=xJ5ikRX9brk" class="yt-link">pascal Передача аргументов литералов разного типа в процедуру</a> (2023.03.24 3мин)</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://www.youtube.com/watch?v=gZIe6LjTAaI" class="yt-link">pascal разбор: Отличия write от writeln</a> (2023.03.24 5мин)</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://www.youtube.com/watch?v=5EoHZQTvbug" class="yt-link">pascal Write и Writeln Разница на примере фрагмента кода</a> (2023.03.24 5мин)</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://www.youtube.com/watch?v=4MZ_1dZY5mc" class="yt-link">pascal Вывод числового литерала в консоль - разбор задачи</a> (2023.01.30 1мин)</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://www.youtube.com/watch?v=Ts8gKFsugd4" class="yt-link">pascal Вывод символьного литерала в консоль - разбор задачи</a> (2023.01.30 1мин)</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://www.youtube.com/watch?v=JwrU5LLJGqQ" class="yt-link">pascal #2 Вывод числового литерала в консоль - разбор задачи</a> (2023.01.30 1мин)</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://www.youtube.com/watch?v=5C2EpeOEfTo" class="yt-link">pascal Вывод строкового литерала (string) в консоль - разбор задачи</a> (2023.01.30 1мин)</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://www.youtube.com/watch?v=4_7UDCys5zY" class="yt-link">pascal writeln Несколько аргументов: литералы разного типа - разбор задачи</a> (2023.01.30 1мин)</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://www.youtube.com/watch?v=VK85W4XsnR8" class="yt-link">pascal writeln #2 Аргументы разного типа, комбинации - разбор задачи</a> (2023.01.30 5мин)</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://www.youtube.com/watch?v=1vOiLA77wrE" class="yt-link">pascal Символьный литерал char отдельным аргументом процедуры writeln()</a> (2023.01.30 2мин)</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://www.youtube.com/watch?v=Ub3e3zCViiQ" class="yt-link">pascal Вывод кота Ascii Art (разбор задачи), строковые и символьные литералы</a> (2021.12.18 9мин)</p> </article> <article class="article"> <h2>День 3 (2024.02.03 сб)</h2> </article> <article class="article"> <div class="anchor" id="urok3"></div> <h2>Паскаль. Урок 3</h2> <p><span class="text-link">Изучил урок</span> <a href="https://fkn.ktu10.com/?q=node/8504" class="text-link">https://fkn.ktu10.com/?q=node/8504</a> #3 Типы данных в языке Pascal. Объявление переменных. Целые числа integer. Оператор присваивания. Инициализация в Паскаль</p> <p><span class="text-link">Прочитал</span> <a href="https://fkn.ktu10.com/?q=node/8624" class="text-link">https://fkn.ktu10.com/?q=node/8624</a> Виды представления данных в Паскаль -- какие конструкции обладают типом данных</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://youtu.be/NhavRiDUKR0" class="yt-link">#3.1 Паскаль: Типы данных, Var и Объявление переменных</a> (2020.02.01 24мин)</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://youtu.be/pLb6IRIofx8" class="yt-link">#3.2 Паскаль: тип integer, Присваивание, операции, операнды, тип выражения</a> (2020.02.04 26мин)</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://youtu.be/nYl3TTzdPbQ" class="yt-link">pascal Переменные, присваивание, выражения, тип Integer для целых чисел</a> (2021.12.18 47мин)</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://youtu.be/jM7BvCtJSdo" class="yt-link">pascal Разбор ошибки Incompatible types: got "Constant String" expected "LongInt"</a> (2023.01.30 7мин)</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://youtu.be/OfeX5a_6OII" class="yt-link">pascal Вывод значений выражений writeln(), переменные</a> (2021.12.25 11мин)</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://youtu.be/7z7krDc3YoE" class="yt-link">pascal Работа с переменными, вывод суммы на экран, integer, writeln</a> (2021.12.25 5мин)</p> </article> <article class="article"> <h2>День 4 (2024.02.10 сб)</h2> </article> <article class="article"> <div class="anchor" id="urok4"></div> <h2>Паскаль. Урок 4</h2> <p><span class="text-link">Изучил урок</span> <a href="https://fkn.ktu10.com/?q=node/8533" class="text-link">https://fkn.ktu10.com/?q=node/8533</a> #4 Real Вещественный тип данных в Паскаль. Неявное приведение типа. Примеры</p> <p><span class="text-link">Прочитал</span> <a href="https://fkn.ktu10.com/?q=node/8515" class="text-link">https://fkn.ktu10.com/?q=node/8515</a> Виды представления данных в Паскаль -- какие конструкции обладают типом данных</p> <p><span class="text-link">Прочитал</span> <a href="https://fkn.ktu10.com/?q=node/8535" class="text-link">https://fkn.ktu10.com/?q=node/8535</a> Средства разработки -- где учиться программировать на Паскаль (программы для программирования). IDE</p> <p><span class="text-link">Прочитал</span> <a href="https://fkn.ktu10.com/?q=node/1133" class="text-link">https://fkn.ktu10.com/?q=node/1133</a> Запись числа через е (е , E , Е). Экспоненциальная запись -- что это такое</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://youtu.be/LpTyVGC0aog" class="yt-link">#4 Паскаль: Real, Вещественные числа и Неявное Приведение Типа</a> (2020.02.05 26мин)</p> <p><span class="text-link">Прочитал</span> <a href="https://fkn.ktu10.com/?q=node/10192" class="text-link">https://fkn.ktu10.com/?q=node/10192</a> Решение задачи 6,7,8,9</p> <p><span class="text-link">Прочитал</span> <a href="https://fkn.ktu10.com/?q=node/11790" class="text-link">https://fkn.ktu10.com/?q=node/11790</a> Решение задач из главы 4</p> </article> <article class="article"> <div class="anchor" id="urok5"></div> <h2>Паскаль. Урок 5</h2> <p><span class="text-link">Изучил урок</span> <a href="https://fkn.ktu10.com/?q=node/8534" class="text-link">https://fkn.ktu10.com/?q=node/8534</a> #5 Ввод данных с клавитуры (из консоли) в Паскаль. Процедура Readln()</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://youtu.be/zxiw4RKpCxQ" class="yt-link">#5 Паскаль: Readln() Ввод данных из консоли в переменные</a> (2020.02.09 13мин)</p> <p><span class="yt-link">Посмотрел видео youtube</span> <a href="https://youtu.be/XiLHtOd2RJo" class="yt-link">pascal Readln , ввод данных, получение значений переменных из консоли</a> (2021.12.25 25мин)</p> <p><span class="text-link">Прочитал</span> <a href="https://fkn.ktu10.com/?q=node/10193" class="text-link">https://fkn.ktu10.com/?q=node/10193</a> Решение задачи №7</p> <p><span class="text-link">Прочитал</span> <a href="https://fkn.ktu10.com/?q=node/10195" class="text-link">https://fkn.ktu10.com/?q=node/10195</a> Решение задачи №8</p> <p><span class="text-link">Прочитал</span> <a href="https://fkn.ktu10.com/?q=node/10196" class="text-link">https://fkn.ktu10.com/?q=node/10196</a> Решение задачи №9 из главы 4</p> <p><span class="text-link">Прочитал</span> <a href="https://fkn.ktu10.com/?q=node/11793" class="text-link">https://fkn.ktu10.com/?q=node/11793</a> Решение задач из главы 5</p> <p><span class="text-link">Прочитал</span> <a href="https://fkn.ktu10.com/?q=node/14664" class="text-link">https://fkn.ktu10.com/?q=node/14664</a> Урок 5 задача 7</p> <p><span class="text-link">Прочитал</span> <a href="https://fkn.ktu10.com/?q=node/14666" class="text-link">https://fkn.ktu10.com/?q=node/14666</a> Урок 5 задача 7</p> </article> <article class="article"> <div class="anchor" id="urok6"></div> <h2>Паскаль. Урок 6</h2> <p><span class="text-link">Изучил урок</span> <a href="https://fkn.ktu10.com/?q=node/8522" class="text-link">https://fkn.ktu10.com/?q=node/8522</a> #6 Boolean Логический тип данных. Логические выражения. Операции AND и OR. Таблицы истинности. Приоритет операция. Паскаль</p> </article>','<h1>Типы данных в Pascal</h1> <article class="article"> <p>Типы в PascalABC.NET подразделяются на простые, структурированные, типы указателей, процедурные типы и последовательности.</p> <p>К простым относятся целые и вещественные типы, логический, символьный, перечислимый и диапазонный тип.</p> <p>Тип данных называется структурированным, если в одной переменной этого типа может содержаться множество значений.</p> <p>К структурированным типам относятся массивы, строки, записи, кортежи, множества, файлы и классы.</p> <p>Особым типом данных является последовательность, которая хранит по-существу алгоритм получения данных последовательности один за другим.</p> <p>Все простые типы, кроме вещественного, называются порядковыми. Только значения этих типов могут быть индексами статических массивов и параметрами цикла for. Кроме того, для порядковых типов используются функции Ord, Pred и Succ, а также процедуры Inc и Dec.</p> <p>Все типы, кроме типов указателей, являются производными от типа Object. Каждый тип в PascalABC.NET имеет отображение на тип .NET. Тип указателя принадлежит к неуправляемому коду и моделируется типом void*.</p> <p>Большинство типов в PascalABC.NET подразделяются на размерные, ссылочные и типы указателей. Сравнение размерных и ссылочных типов дано здесь.</p> <p>Кроме того, в PascalABC.NET имеется несколько типов, унаследованных от Delphi Object Pascal, которые трудно отнести к размерному или ссылочному типу. Это статические массивы, множества, размерные строки и файлы. По представлению в памяти они относятся к ссылочному типу, но по поведению - к размерному.</p> </article> ','<h1>Уроки</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#les0">Урок 0</a></p> <p><a href="#les1">Урок 1</a></p> <p><a href="#les2">Урок 2</a></p> <p><a href="#les3">Урок 3</a></p> </div> </div> <article class="article"> <div class="anchor" id="les0"></div> <h2>Паскаль. Урок 0. Настройка среды разработки</h2> <h3>Установим среду разработки (IDE) для языка Паскаль.</h3> <p>Идем на страницу <a href="https://www.lazarus-ide.org/index.php?page=downloads">lazarus-ide.org</a> и скачиваем программу по ссылке <span class="text-link">Windows (32 and 64 Bits) Direct download</span></p> <p>Устанавливаем Lazarus из скаченного файла, соглашаемся со всеми пунктами по-умолчанию.</p> <p>При первом запуске Lazarus работает в многооконном режиме и не понимает русских букв. Исправим это.</p> <h3>Переключение Lazarus в однооконный режим</h3> <p>Откроем меню Пакет - Установить/удаленить пакеты.</p> <p>В окошке Доступные для установки выбираем пакет anchordockingdsgn 1.0. Нажимаем кнопку Установить выбранное.</p> <p>Нажимаем кнопку Сохранить и перезапустить IDE.</p> <p>В открывшемся окне Подтвердите новый набор пакетов для IDE нажимаем кнопку Продолжить.</p> <p>Начнется компиляция пакета AnchorDockingDsgn 1.0, потом Сборка IDE.</p> <p>После чего Lazarus перезапустится в однооконном режиме.</p> <h3>Как в Lazarus писать на русском</h3> <p>В окне Редактор исходного кода нажимаем правой кнопкой мыши. Выбираем Параметры файла - Кодировка - UTF-8 с BOM</p> <h3>Проверка запуска тестовой программы</h3> <p>Запустим Lazarus и создадим консольное приложение из главного меню.</p> <h3>Создание консольного приложения</h3> <p>Открываем Файл - Создать - Проект - Программа</p> <p>Необходимо убрать лишний код и заменить его на</p> <code>program hello; <br>begin <br>&nbsp;&nbsp;writeln(\'hello world!\'); <br>&nbsp;&nbsp;readln(); <br>end.</code> <h3>Запуск программы в Lazarus</h3> <p>Нажимаем зеленый треугольник (похож на кнопку плей, рядом с кнопками пауза и стоп) или нажимаем клавишу F9.</p> <p>Откроется консоль с надписью hello world!. Чтобы закрыть окно консоли надо нажать Enter или нажать крестик на окне консоли, или нажать кнопку стоп в Lazarus или нажать CTRL + F2.</p> </article> <article class="article"> <div class="anchor" id="les1"></div> <h2>Паскаль. Урок 1. Минимальная программа. Тело программы и операторные скобки. Комментарии в коде</h2> <h3>Минимальный код программы</h3> <p>Убираем из программы лишний код. Оставляем только минимальный код программы</p> <code>program project1; <br>begin <br>end.</code>  <p>В первой строчке после слова program пишется имя программы.</p> <p>Затем пишем операторные скобки <br>begin - открывающая операторная скобка <br>end. - закрывающая операторная скобка </p> <h3>Тело программы</h3> <p>Тело программы пишут между операторными скобками</p> <code>program project1; <br>begin // открывающая операторная скобка <br>// тело программы <br>end. // закрывающая операторная скобка</code>  <h3>Первая программа на Паскаль</h3> <p>Создадим нашу первую программу <code>program hello; <br>begin <br>&nbsp;&nbsp;writeln(\'hello world!\'); <br>&nbsp;&nbsp;readln(); <br>end.</code> </p> <h3>Комментарии</h3> <p>Комментарии нужны чтобы пояснять для чего нужны кусочки кода. А также для того чтобы не выполнять косочки кода. Комментарии бывают однострочные и многострочные.</p> <h3>Однострочные комментарии</h3> <p>Однострочные комментарии пишутся в любой строке после знака //. Начиная со знака // и до конца строки это комментарий.</p> <code>a:= 5; // переменная изменила значение</code> <h3>Многострочные комментарии</h3> <p>Многострочные комментарии пишутся в фигурных скобках. При этом они могут занимать несколько строк, одну строку или часть одной строки.</p> <code>{ комментарий на одной строке } <br>{ <br>комментарий <br>на <br>несольких <br>строках <br>} <br>a:= 5; {комментарий занимает часть строки} </code> </article> <article class="article"> <div class="anchor" id="les2"></div> <h2>Паскаль. Урок 2. Литералы и Вывод данных на экран (в консоль). Первое знакомство с Write и Writeln</h2> <p>Литералы - это данные записанные непосредственно в программном коде. Каждый литерал соответствует какому-то типу данных. Рассмотрим строковые, символьные и числовые литералы.</p> <h3>Строковые литералы</h3> <p>Строковые литералы это любые символы записанные в одинарных кавычках. Строковый литерал всегда пишется на одной строке кода. Перенос на другую строку внутри литерала приведет к ошибке при запуске программы. Пробел это тоже символ, поэтому из пробелов тоже можно сделать строковый литерал.</p> <code>\'text\' <br>\'12234\' <br>\'qw!@#$1567\' <br>\' \'</code> <h3>Символьные литералы</h3> <p>Символьные литералы любой один символ записанный в одинарные кавычки. Пробел в одинарных кавычках это тоже символьный литерал.</p> <code>\'a\' <br>\'A\' <br>\'5\' <br>\'#\' <br>\' \' </code> <h3>Числовые литералы</h3> <p>Числовые литералы можно разделить на целочисленые и вещественные. Целочисленные - это положительные и отрицательные целые числа, ограниченные максимальным и минимальным числом и ноль. Вещественные числа это числа с точкой, отделяющей целую часть числа от десятичной.</p> <code>0 <br>-11 <br>125 <br>55.678 <br>-123.456</code> <h3>Процедуры write() и writeln()</h3> <p>Процедуры write() и writeln() выводят данные, переданные им как аргументы в консоль.</p> <p>writeln() после вывода данных переносит курсор на новую строку.</p> <p>writeln() вызванная без аргументов ничего не выводит, но все равно переносит курсор на новую строку.</p> <h3>readln()</h3> <p>readln() ждет ввода любых данных в консоль от пользователя и завершает свою работу при нажатии ENTER</p> </article> <article class="article"> <div class="anchor" id="les3"></div> <h2>Паскаль. Урок 3. Типы данных в языке Pascal. Объявление переменных. Целые числа integer. Оператор присваивания. Инициализация в Паскаль</h2> <h3>Представления данных</h3> <p>Данные в программе могут быть представлены в 4 видах:</p> <ul> <li>литерал</li> <li>переменная</li> <li>результат выражения</li> <li>вызов функции (значение, которое возвращает функция)</li> </ul> <p>У каждого данного всегда есть только один тип данных.</p> <h3>Типы данных</h3> <p>В Паскале выделяют 5 типов данных:</p> <ul> <li>integer -- целые числа.</li> <li>real -- вещественные числа.</li> <li>boolean -- логический тип данных</li> <li>char -- символьный тип.</li> <li>string -- строковый тип</li> </ul> <h3>Объявление переменных</h3> <p>Объявление переменных - это уведомление компилятора Паскаль о том, что в вашей программе будут использоваться переменные с указанными именами, каждая из которых имеет определённый (указанный в секции объявления) тип.</p> <p>Объявление переменных происходит после ключевого слова var, до тела программы</p> <code>var i,j: integer; <br>r: real; <br>b: boolean; <br>s: string; <br>c: char;</code> <h3>Оператор присваивания</h3> <p>Оператор присваивания := используется чтобы переменной присвоить значение.</p> <code>a := 5; // переменной a присваивается значение литерала <br>b := a; // переменной b присваивается значение другой переменной <br>c := a + b; // переменной c присваивается результат выражения </code> <h1>Инициализация переменной</h1> <p>Инициализация переменной - это первое присваивание какого-то значения переменной.</p> </article>'],t=document.querySelector("#code"),document.querySelectorAll(".aside a").forEach((function(r,i){!function(r,i){r.addEventListener("click",(function(r){r.preventDefault(),t.innerHTML=e[i]}))}(r,i)}));var i=new Event("click");Ne[0].dispatchEvent(i)}()}}],Yr=[{url:"front-books.html",text:"Books",content:"<front-books></front-books>",act:function(){var e;(e=document.querySelector(".front-books"))&&(e.append(Je.mainNav),e.append(Je.elemSection))}},{url:"front-edu.html",text:"Edu",content:"<front-edu></front-edu>",act:function(){var e;(e=document.querySelector(".aside")).innerHTML="",e.append.apply(e,Tt),function(){var e=document.querySelector("#edu"),t=document.getElementById("edu-courses");t&&t.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML='<h1>Сайты с онлайн курсами</h1> <div class="article"> <div class="anchor" id="contents"></div> <h2>Содержание</h2> <div class="article__contents"> <a href="#free" class="contents__link">Полностью бесплатные курсы</a> <a href="#free-on-pay" class="contents__link">Бесплатные курсы на платных платформах</a> <a href="#pay" class="contents__link">Платные курсы</a> <a href="#eng" class="contents__link">Онлайн курсы (eng)</a> </div> </div> <article class="article"> <div class="anchor" id="free"></div> <h2>Полностью бесплатные курсы</h2> <ol> <li><strong><a href="https://code-basics.com/ru">code-basics.com</a></strong> <br>Кирилл Мокевнин (регистрация на сайте) <hr> <p> <a href="https://code-basics.com/ru/languages/html">HTML для начинающих</a> <br>11 часов 41 урок с практикой в браузере (прошел 2021-12-13 пн) </p><details> <summary>11 часов 41 урок с практикой в браузере (прошел 2023-07-26 ср)</summary> 1. HTML разметка <br>2. Теги <br>3. Текст в HTML <br>4. Вложенность тегов <br>5. Атрибуты HTML <br>6. Параграфы <br>7. Начертание текста <br>8. Заголовки <br>9. Списки <br>10. Вложенные списки <br>11. Таблицы <br>12. Объединение ячеек внутри строк и столбцов <br>13. Специальные символы HTML <br>14. Ссылки <br>15. Форматированный текст <br>16. Вставка компьютерного кода в HTML <br>17. Изображения <br>18. Аудио <br>19. Видео <br>20. Базовая структура <br>21. Метатеги <br>22. link <br>23. Viewport <br>24. Блочные и строчные элементы <br>25. Формы в HTML <br>26. Поле для ввода текста <br>27. Чекбокс <br>28. Радиокнопка <br>29. Textarea <br>30. Список <br>31. Отправка формы <br>32. Семантические элементы <br>33. Шапка <br>34. Меню <br>35. Уникальный контент страницы <br>36. Секция <br>37. Самостоятельная секция <br>38. Боковая панель <br>39. Семантический WEB <br>40. Микроразметка <br>41. Ошибки в HTML-разметке </details> <p></p> <p> <a href="https://code-basics.com/ru/languages/css">CSS для начинающих</a> <br>8 часов 33 урока с практикой в браузере (прошел 2021-12-16 чт) </p><details> <summary>9 часов 38 уроков с практикой в браузере (прошел 2023-07-27 чт)</summary> 1. Каскадные таблицы стилей <br>2. Использование CSS в HTML <br>3. Наследование стилей <br>4. Запись стилей в теге style <br>5. Базовые стили тегов <br>6. Классы <br>7. Селекторы <br>8. Каскадность <br>9. Приоритет стилей <br>10. Цвета <br>11. Выравнивание текста <br>12. Размер шрифта <br>13. Насыщенность шрифта <br>14. Курсив <br>15. Капитель <br>16. Горизонтальная черта <br>17. Межстрочный интервал <br>18. Семейство шрифта <br>19. Обобщённое правило для шрифтов <br>20. Базовые правила типографики <br>21. Рамки <br>22. Фон <br>23. Внутренние отступы <br>24. Внешние отступы <br>25. Высота и ширина блока <br>26. Блочная модель <br>27. Flex-контейнер <br>28. Направление Flex-элементов <br>29. Перенос элементов внутри контейнера <br>30. Выравнивание элементов внутри контейнера <br>31. Гибкий размер элементов <br>32. Префиксы <br>33. Единицы измерения <br>34. Цветовая модель RGB <br>35. Медиа запросы <br>36. Анимация <br>37. Переменные <br>38. Позиционирование </details> <p></p> <p> <a href="https://code-basics.com/ru/languages/javascript">JavaScript для начинающих</a> <br>25 часов 72 урока с практикой в браузере (прошел 2022-01-13 чт) </p><details> <summary>25 часов 72 урока с практикой в браузере (прошел 2023-08-01 вт)</summary> 1. Привет, Мир! <br>2. Комментарии <br>3. Инструкции (Statements) <br>4. Как мы проверяем ваши решения <br>5. Синтаксические ошибки <br>6. Арифметические операции <br>7. Операторы <br>8. Коммутативная операция <br>9. Композиция операций <br>10. Приоритет операций <br>11. Числа с плавающей точкой <br>12. Бесконечность (Infinity) <br>13. NaN <br>14. Линтер <br>15. Кавычки <br>16. Экранирующие последовательности <br>17. Конкатенация <br>18. Кодировка <br>19. Что такое переменная <br>20. Изменение переменной <br>21. Выбор имени переменной <br>22. Ошибки при работе с переменными <br>23. Выражения в определениях <br>24. Переменные и конкатенация <br>25. Стили именования <br>26. Магические числа <br>27. Константы <br>28. Интерполяция <br>29. Извлечение символов из строки <br>30. Типы данных <br>31. undefined <br>32. Неизменяемость примитивных типов <br>33. Слабая типизация <br>34. Функции и их вызов <br>35. Математические функции JavaScript <br>36. Сигнатура функции <br>37. Параметры по умолчанию <br>38. Вызов функции — выражение <br>39. Функции с переменным числом параметров <br>40. Детерминированность <br>41. Стандартная библиотека <br>42. Свойства <br>43. Методы <br>44. Неизменяемость <br>45. Свойства и методы как выражения <br>46. Цепочка вызовов <br>47. Создание (определение) функций <br>48. Возврат значений <br>49. Параметры функций <br>50. Необязательные параметры функций <br>51. Упрощенный синтаксис функций <br>52. Логический тип <br>53. Предикаты <br>54. Комбинирование логических операций <br>55. Логические операторы <br>56. Отрицание <br>57. Результат логических выражений <br>58. Условная конструкция (if) <br>59. else <br>60. Конструкция else if <br>61. Тернарный оператор <br>62. Конструкция Switch <br>63. Цикл While <br>64. Агрегация данных (Числа) <br>65. Агрегация данных (Строки) <br>66. Обход строк <br>67. Условия внутри тела цикла <br>68. Формирование строк в циклах <br>69. Синтаксический сахар <br>70. Инкремент и декремент <br>71. Возврат из циклов <br>72. Цикл For </details> <p></p> <p> <a href="https://code-basics.com/ru/languages/typescript">TypeScript для начинающих</a> </p><details> <summary>19 часов 53 урока с практикой в браузере</summary> 1. Привет, Мир! <br>2. TypeScript <br>3. Переменные <br>4. Именованные функции <br>5. Анонимные функции <br>6. Массивы <br>7. Объектные типы (Object Types) <br>8. Перечисления (Enums) <br>9. Псевдонимы типов (Type Aliases) <br>10. Тип Any <br>11. Система модулей <br>12. Функции как параметры <br>13. Опциональные параметры в функциях <br>14. Тип Void <br>15. Тип never (возврат из функции) <br>16. Тип unknown <br>17. Деструктуризация <br>18. Rest и Spread <br>19. Перегрузка функций (Function Overloads) <br>20. Сужение типа (Narrowing) <br>21. Аннотации типов <br>22. Многомерные массивы <br>23. Массивы только для чтения <br>24. Кортежи (Tuples) <br>25. Типы как множества <br>26. Объединения (Union Types) <br>27. Null и Undefined <br>28. Литералы (Literal Types) <br>29. Пересечение (Intersections Types) <br>30. Присвоение значения <br>31. Иерархия типов <br>32. Структурная типизация <br>33. Ковариантность и контравариантность <br>34. Классы <br>35. Классы как типы <br>36. Защита свойств и методов <br>37. Свойства параметров <br>38. Наследование <br>39. Статические методы и свойства <br>40. Абстрактные классы <br>41. Об интерфейсах <br>42. Использование интерфейсов <br>43. Реализация интерфейсов классами <br>44. Введение в дженерики <br>45. Дженерики (Типы) <br>46. Дженерики (Функции) <br>47. Дженерики с несколькими параметрами <br>48. Асинхронные функции <br>49. Дженерики на классах <br>50. Тип object <br>51. Динамические ключи (Index Signature) <br>52. Сопоставление типов (Mapped Types) <br>53. Записи (Record) </details> <p></p> <p> <a href="https://code-basics.com/ru/languages/php">PHP для начинающих</a> </p><details> <summary>25 часов 75 уроков с практикой в браузере</summary> 1. Привет, Мир! <br>2. Теги <br>3. Комментарии <br>4. Инструкции (Statements) <br>5. Как мы проверяем ваши решения <br>6. Синтаксические ошибки <br>7. Арифметические операции <br>8. Операторы <br>9. Коммутативная операция <br>10. Композиция операций <br>11. Приоритет операций <br>12. Линтер <br>13. Кавычки <br>14. Экранирующие последовательности <br>15. Конкатенация <br>16. Кодировка <br>17. Типы данных <br>18. Слабая типизация <br>19. Явное преобразование типов <br>20. Что такое переменная <br>21. Изменение переменной <br>22. Выбор имени переменной <br>23. Ошибки при работе с переменными <br>24. Выражения в определениях <br>25. Переменные и конкатенация <br>26. Именование переменных <br>27. Магические числа <br>28. Константы <br>29. Магические константы <br>30. Интерполяция <br>31. Извлечение символов из строки <br>32. Heredoc <br>33. Функции и их вызов <br>34. Сигнатура функции <br>35. Аргументы по умолчанию <br>36. Вызов функции — выражение <br>37. Функции с переменным числом параметров <br>38. Детерминированность <br>39. Стандартная библиотека <br>40. Создание (определение) функций <br>41. Возврат значений <br>42. Параметры функций <br>43. Необязательные параметры функций <br>44. Чтение документации <br>45. Логический тип <br>46. Предикаты <br>47. Комбинирование операций и функций <br>48. Логические операторы <br>49. Отрицание <br>50. Логические операторы 2 <br>51. Слабая типизация - 2 <br>52. Условная конструкция (if) <br>53. else <br>54. Конструкция else if <br>55. Тернарный оператор <br>56. Конструкция Switch <br>57. Оператор Элвис <br>58. Цикл While <br>59. Агрегация данных (Числа) <br>60. Агрегация данных (Строки) <br>61. Обход строк <br>62. Условия внутри тела цикла <br>63. Формирование строк в циклах <br>64. Пограничные случаи <br>65. Синтаксический сахар <br>66. Инкремент и декремент <br>67. Возврат из циклов <br>68. Цикл For <br>69. Юникод <br>70. Локализация <br>71. Поиск стартовой позиции <br>72. Время <br>73. Date <br>74. mktime() <br>75. Часовые пояса (тайм зоны) </details> <p></p> <p> <a href="https://code-basics.com/ru/languages/python">Python для начинающих</a> <br>25 часов 71 урок с практикой в браузере </p> </li> <li><strong><a href="https://webref.ru/course">webref.ru</a></strong> <br>Влад Мержевич (без регистрации) <hr> <h4>HTML. Уровень 1</h4> <p> <a href="https://webref.ru/course/introduction">Введение в Интернет</a> </p><details> <summary>3 урока (обновлен 2020-03-17)(прошел 2023-08-01 вт)</summary> 1. Интернет <br>2. Всемирная паутина <br>3. Браузер </details> <p></p> <p> <a href="https://webref.ru/course/html-basics">Основы HTML</a> </p><details> <summary>6 уроков (обновлен 2022-09-28) (прошел 2023-08-01 вт)</summary> 1. Синтаксис HTML <br>2. Блочные и строчные элементы <br>3. Иерархия в HTML <br>4. Семантика в HTML <br>5. Форматирование HTML <br>6. Валидный HTML-документ </details> <p></p> <p> <a href="https://webref.ru/course/html-content">Содержимое в HTML</a> </p><details> <summary>7 уроков (обновлен 2017-08-13) (прошел 2023-08-01 вт)</summary> 1. Текст в HTML <br>2. Семантика строчных элементов <br>3. Ссылки в HTML <br>4. Изображения в HTML <br>5. Таблицы в HTML <br>6. Структура в HTML <br>7. Формы в HTML </details> <p></p> <hr> <h4>HTML. Уровень 2</h4> <p> <a href="https://webref.ru/course/html-tutorial">Самоучитель HTML</a> </p><details> <summary>12 уроков (обновлен 2020-06-02) (прошел 2023-08-02 ср)</summary> 1. Введение в HTML <br>2. Инструментарий <br>3. Элементы HTML <br>4. Структура HTML-кода <br>5. Атрибуты элементов <br>6. Значения атрибутов <br>7. Работа с текстом <br>8. Ссылки <br>9. Якоря <br>10. Списки <br>11. Изображения <br>12. Таблицы </details> <p></p> <p> <a href="https://webref.ru/course/section">Разделы веб-страницы</a> </p><details> <summary>7 уроков (обновлен 2020-06-01) (прошел 2023-08-02 ср)</summary> 1. &lt;header&gt; и &lt;footer&gt; <br>2. Элемент &lt;section&gt; <br>3. Элемент &lt;nav&gt; <br>4. Элемент &lt;aside&gt; <br>5. Элемент &lt;main&gt; <br>6. Элемент &lt;article&gt; <br>7. Элементы &lt;div&gt; и &lt;span&gt; </details> <p></p> <p> <a href="https://webref.ru/course/html5-form">Формы в HTML</a> </p><details> <summary>10 уроков (обновлен 2020-06-02) (прошел 2023-08-03 чт)</summary> 1. Создание форм <br>2. Отправка данных формы <br>3. Текстовое поле <br>4. Поле для пароля <br>5. Многострочный текст <br>6. Кнопки <br>7. Переключатели <br>8. Флажки <br>9. Загрузка файлов <br>10. Поле со списком </details> <p></p> <hr> <h4>CSS. Уровень 1</h4> <p> <a href="https://webref.ru/course/css-basics">Основы CSS</a> </p><details> <summary>8 уроков (обновлен 2020-06-01) (прошел 2023-08-04 пт)</summary> 1. Зачем нужен CSS <br>2. Синтаксис CSS <br>3. Селекторы CSS <br>4. Наследование в CSS <br>5. Приоритет в CSS <br>6. Единицы цвета в CSS <br>7. Единицы размера в CSS <br>8. Сброс CSS </details> <p></p> <p> <a href="https://webref.ru/course/css-text">Текст в CSS</a> </p><details> <summary>5 уроков (обновлен 2018-04-13) (прошел 2023-08-04 пт)</summary> 1. font-family в CSS <br>2. Свойства шрифта в CSS <br>3. line-height в CSS <br>4. Сокращённое свойство font <br>5. Свойства текста в CSS </details> <p></p> <p> <a href="https://webref.ru/course/box-model">Блочная модель в CSS</a> </p><details> <summary>7 уроков (обновлен 2017-08-13) (прошел 2023-08-04 пт)</summary> 1. Фон в CSS <br>2. display в CSS <br>3. Высота и ширина в CSS <br>4. Граница в CSS <br>5. padding в CSS <br>6. margin в CSS <br>7. Колесо для сокращённых свойств </details> <p></p> <p> <a href="https://webref.ru/course/positioning">Позиционирование в CSS</a> </p><details> <summary>3 урока (обновлен 2017-08-14) (прошел 2023-08-04 пт)</summary> 1. Поток <br>2. position в CSS <br>3. float в CSS </details> <p></p> <p> <a href="https://webref.ru/course/css-advanced">Продвинутый CSS</a> </p><details> <summary>6 уроков (обновлен 2023-08-05) (прошел 2023-08-07 пн)</summary> 1. Псевдоклассы в CSS <br>2. Градиенты в CSS <br>3. Переходы в CSS <br>4. Анимация в CSS <br>5. Трансформация в CSS <br>6. Отзывчивость в CSS </details> <p></p> <hr> <h4>CSS. Уровень 2</h4> <p> <a href="https://webref.ru/course/block-model">Блочная модель</a> </p><details> <summary>6 уроков (обновлен 2023-08-05) (прошел 2023-08-07 пн)</summary> 1. Свойства блока <br>2. Свойство padding <br>3. Свойство border <br>4. Свойство margin <br>5. Схлопывающиеся margin <br>6. Размеры блока </details> <p></p> <p> <a href="https://webref.ru/course/block-inline">Блочные и строчные элементы</a> </p><details> <summary>3 урока (обновлен 2023-08-05) (прошел 2023-08-07 пн)</summary> 1. Блочные элементы <br>2. Строчные элементы <br>3. Строчно-блочные элементы </details> <p></p> <p> <a href="https://webref.ru/course/float">float в теории и на практике</a> </p><details> <summary>4 урока (обновлен 2023-08-05) (прошел 2023-08-07 пн)</summary> 1. Описание float <br>2. Влияние float <br>3. Очистка float <br>4. Примеры использования float </details> <p></p> <p> <a href="https://webref.ru/course/position">Позиционирование элементов</a> </p><details> <summary>7 уроков (обновлен 2023-08-05) (прошел 2023-08-07 пн)</summary> 1. Свойства позиционирования <br>2. Нормальное позиционирование <br>3. Относительное позиционирование <br>4. Абсолютное позиционирование <br>5. relative и absolute <br>6. Фиксированное позиционирование <br>7. Липкое позиционирование </details> <p></p> </li> <li><strong><a href="https://academiait.ru/course/">academiait.ru</a></strong> <br>Академия IT <p> <a href="https://academiait.ru/course/osnovy-veb-razrabotki-html-css/">Основы веб разработки. HTML и CSS</a> <br>39 уроков. Юрий Аллахвердов </p> <p> <a href="https://academiait.ru/course/video-uroki-po-osnovam-raboty-web-i-seti-i/">Видео уроки по основам работы Web и сети Интернет</a> <br>17 уроков. Кирилл Антонов </p> <p> <a href="https://academiait.ru/course/bazovyj-javascript-besplatnye-video-uroki-dlya/">Базовый JavaScript</a> <br>64 урока. Кирилл Антонов </p> </li> <li><strong><a href="https://selectel.ru/blog/courses/">selectel.ru</a></strong> <br>Академия Selectel. Лев Левиев <p> <a href="https://selectel.ru/blog/courses/network-protocols/">Как работают сетевые протоколы</a> <br>3 часа 44 минуты </p> <p> <a href="https://selectel.ru/blog/courses/introduction-to-git/">Введение в Git</a> <br>1 час 12 минут </p> <p> <a href="https://selectel.ru/blog/courses/how-to-work-with-ml-systems/">Выстраиваем работу с ML</a> <br>2 часа 47 минут </p> </li> <li><strong><a href="https://web.dev/learn/">web.dev</a></strong> <br>Chrome Developers <p> <a href="https://web.dev/learn/html/">Learn HTML</a> <br>22 урока </p> <p> <a href="https://web.dev/learn/css/">Learn CSS</a> <br>30 уроков </p> <p> <a href="https://web.dev/learn/images/">Learn Images</a> <br>17 уроков </p> <p> <a href="https://web.dev/learn/forms/">Learn Forms</a> <br>24 урока </p> <p> <a href="https://web.dev/learn/design/">Learn Responsive Design</a> <br>17 уроков </p> </li> </ol> </article> <article class="article"> <div class="anchor" id="free-on-pay"></div> <h2>Бесплатные курсы на платных платформах</h2> <ol> <li> <strong><a href="https://proity.ru/">proity.ru</a></strong> <br>Пройти.ру — это каталог бесплатных онлайн-курсов. Алексей Шаполов <p> <a href="https://proity.ru/programming/free-webdev-courses/">free-webdev-courses</a> <br>19 бесплатных курсов по созданию сайтов и веб-разработке. Алексей Шаполов (2023-04-07) </p> <p> <a href="https://proity.ru/programming/free-html-css-courses/">free-html-css-courses</a> <br>34 бесплатных курса по HTML и CSS. Алексей Шаполов (2023-04-07) </p> <p> <a href="https://proity.ru/programming/free-js-courses/">free-js-courses</a> <br>25 бесплатных курсов по JavaScript. Алексей Шаполов (2023-04-07) </p> <p> <a href="https://proity.ru/programming/free-frontend-courses/">free-frontend-courses</a> <br>19 бесплатных курсов по Frontend-разработке. Алексей Шаполов (2023-04-07) </p> </li> <li> <strong><a href="https://artbashlykov.ru/besplatno/">artbashlykov.ru</a></strong> <br>Бесплатные курсы Артема Башлыкова <p> <a href="https://study.artbashlykov.ru/fw-sb/">Бесплатный курс по созданию сайтов</a> </p> </li> <li> <strong><a href="https://gb.ru/">gb.ru</a></strong> <br>Бесплатные курсы GeekBrains <p> <a href="https://gb.ru/courses/1117">Git. Базовый курс</a> <br>13 уроков </p> <p> <a href="https://gb.ru/courses/70">Основы ООП</a> <br>15 уроков </p> </li> <li> <strong><a href="https://ru.hexlet.io/courses/free">hexlet.io</a></strong> <br>Бесплатные курсы Хекслета. Кирилл Мокевнин <p> <a href="https://ru.hexlet.io/courses/prog-life">Жизнь программиста</a> <br>5 уроков (обновлен 2023.07.25) </p> <p> <a href="https://ru.hexlet.io/courses/html">Основы HTML, CSS и веб-дизайна</a> <br>11 уроков (обновлен 2023.07.25) </p> <p> <a href="https://ru.hexlet.io/courses/intro_to_git">Введение в Git</a> <br>15 уроков (обновлен 2023.06.29) </p> <p> <a href="https://ru.hexlet.io/courses/intro_to_web_development">Введение в веб-разработку</a> <br>8 уроков (обновлен 2022.12.26) </p> <p> <a href="https://ru.hexlet.io/courses/internet-fundamentals">Введение в интернет</a> <br>12 уроков (обновлен 2023.05.16) </p> <p> <a href="https://ru.hexlet.io/courses/learning_english">Изучение английского языка</a> <br>10 уроков (обновлен 2023.05.23) </p> <p> <a href="https://ru.hexlet.io/courses/operating_systems">Операционные системы</a> <br>9 уроков (обновлен 2023.05.17) </p> <p> <a href="https://ru.hexlet.io/courses/js-basics">Основы JavaScript</a> <br>39 уроков (обновлен 2023.06.28) </p> <p> <a href="https://ru.hexlet.io/courses/cli-basics">Основы командной строки</a> <br>19 уроков (обновлен 2023.07.08) </p> <p> <a href="https://ru.hexlet.io/courses/layout-designer-basics">Основы современной верстки</a> <br>12 уроков (обновлен 2023.05.29) </p> <p> <a href="https://ru.hexlet.io/courses/typescript-basics">Основы Typescript</a> <br>54 урока (обновлен 2023.05.29) </p> </li> <li> <strong><a href="https://htmlacademy.ru/courses/">htmlacademy.ru</a></strong> <br>(Регистрация на сайте) <hr> <h4>Старт в программировании</h4> <p><a href="https://htmlacademy.ru/courses/intro-to-web-development">[старт] Знакомство с веб-разработкой</a> </p><details> <summary>1 час 35 минут теории, 1 час 40 минут практики (прошел 2021-11-01 пн)</summary> Часть 1: Основы HTML и CSS <br>Часть 2: Основы JavaScript <br>Часть 3: Основы PHP </details> <p></p> <p><a href="https://htmlacademy.ru/courses/intro-to-web-development">[старт] Знакомство с фронтендом</a> </p><details> <summary>1 час 10 минут теории, 1 час практики (обновлен 2023-05-12) (прошел 2023-08-07 пн)</summary> Часть 1: Основы HTML и CSS (35 минут теории, 20 минут практики) <br>Часть 2: Основы JavaScript (35 минут теории, 40 минут практики) </details> <p></p> <hr> <h4>Начальный уровень</h4> <p><a href="https://htmlacademy.ru/courses/basic-html-css">[начальный уровень] Знакомство с HTML и CSS</a> </p><details> <summary>3 часа теории, 3 часа практики (прошел 2021-11-09 вт)</summary> Часть 1:Структура HTML-документа <br>Часть 2:Разметка текста <br>Часть 3:Ссылки и изображения <br>Часть 4:Основы CSS<br>Часть 5:Оформление текста </details> <p></p> </li> <li> <strong><a href="https://itproger.com/courses/">itproger.com</a></strong> <br>Гоша Дударь <p> <a href="https://itproger.com/course/basics">Основы программирования</a> <br>12 уроков </p> <p> <a href="https://itproger.com/course/html">HTML5 для начинающих</a> <br>18 уроков </p> <p> <a href="https://itproger.com/course/css">Изучение CSS для новичков</a> <br>10 уроков </p> <p> <a href="https://itproger.com/course/css3-html5">Верстка сайта на HTML5 и CSS3</a> <br>13 уроков </p> <p> <a href="https://itproger.com/course/javascript">Уроки JavaScript для начинающих</a> <br>15 уроков </p> <p> <a href="https://itproger.com/course/git">Изучение Git для новичков</a> <br>5 уроков </p> <p> <a href="https://itproger.com/course/website">Создание сайта</a> <br>11 уроков </p> <p> <a href="https://itproger.com/course/php-website">Создание динамического веб сайта</a> <br>22 урока </p> <p> <a href="https://itproger.com/course/ajax">Уроки Ajax для начинающих</a> <br>7 уроков </p> </li> <li> <strong><a href="https://srs.myrusakov.ru/list">myrusakov.ru</a></strong> <br>Михаил Русаков <p> <a href="https://srs.myrusakov.ru/freeim">Создание Интернет-магазина с нуля</a> <br>4 урока 50 минут </p> <p><a href="https://srs.myrusakov.ru/book">Создание сайта от начала и до конца</a></p> <p><a href="https://srs.myrusakov.ru/freejs">Видеокурс по основам JavaScript</a></p> <p><a href="https://srs.myrusakov.ru/freehtml5">HTML5 и CSS3 для начинающих</a></p> <p><a href="https://srs.myrusakov.ru/freelanding">Создание и продвижение лендинга для начинающих</a></p> <p><a href="https://srs.myrusakov.ru/freereactjs">Практический курс по React JS</a></p> <p><a href="https://srs.myrusakov.ru/freemakeup2">HTML и CSS для начинающих</a></p> <p><a href="https://srs.myrusakov.ru/freejavascript2">Программирование на JavaScript для начинающих 2.0</a></p> </li> <li> <strong><a href="https://netology.ru/">netology.ru</a></strong> <p><a href="https://netology.ru/blog/">Блог Нетология</a></p> <p><a href="https://netology.ru/programs/html-css-base">Основы вёрстки сайта (Владимир Языков)</a> (прошел 2021-08-25 ср)</p> <p><a href="https://netology.ru/programs/javascript-free">Первые шаги в JavaScript: создаём сайт и приложение (Дмитрий Бронских)</a> (прошел 2021-08-28 сб)</p> <p><a href="https://netology.ru/programs/python-free">Python-разработка для начинающих (Дмитрий Демидов)</a> (прошел 2021-09-03 пт)</p> <p><a href="https://netology.ru/profile/program/code-bp">Профессии в программировании</a> (прошел 2021-09-08 ср)</p> <p><a href="https://netology.ru/programs/digital-padavan#/">IT-профессии: как выбрать направление и реализовать себя</a></p> <p><a href="https://netology.ru/programs/jsfree-async">Первые шаги в JavaScript: создаём сайт</a></p> <p><a href="https://netology.ru/programs/dpdv-async">Профессии и языки программирования: что выбрать</a></p> </li> <li> <strong><a href="https://php.zone/courses">php.zone</a></strong> <br>Артём Ивашкевич <p> <a href="https://php.zone/kurs-html-dlya-nachinayushih">Курс HTML для начинающих</a> </p> <p> <a href="https://php.zone/kurs-php-dlya-nachinayushih">Уроки PHP для начинающих</a> </p> </li> <li> <strong><a href="https://skillbox.ru/">skillbox.ru</a></strong> <p> <a href="https://go.skillbox.ru/education/course/how-to-study-at-skillbox">Как учиться в Skillbox. Курс-знакомство</a> <br>10 видео </p> <p> <a href="https://go.skillbox.ru/education/course/programming-intro">Введение в программирование</a> <br>17 видео. Тестовый доступ до 4 апреля 2026 г. </p> <p> <a href="https://live.skillbox.ru/playlists/code/veb-programmirovanie/">Веб-программирование</a> <br>12 видео </p> </li> <li> <strong><a href="https://stepik.org/course/38218/promo">stepik.org</a></strong> <p><a href="https://stepik.org/course/38218/syllabus">Веб-разработка для начинающих: HTML и CSS</a> (прошел 2021-06-06 вс) </p><details> <summary>содержание курса</summary>66 заданий<br>1. Вступление<br>2. HTML: База<br>3. HTML: Основные элементы<br>4. HTML: Составные элементы<br>5. CSS: Введение<br>6. CSS: База<br>7. Продвинутая вёрстка<br>8. Фреймворки<br>9. Деплой сайта </details> <p></p> <p><a href="https://stepik.org/course/2223/syllabus">JavaScript для начинающих (Антон Холин)</a> (прошел 2021-06-28 пн) </p><details> <summary>содержание курса</summary>42 задания<br>1. Введение в JavaScript<br>2. Стандартные объекты<br>3. Продвинутые операции<br>4. Заключение </details> <p></p> <p><a href="https://stepik.org/course/13929/syllabus">Введение в программирование (JavaScript ES6)</a> (прошел 2022-01-19 ср) </p><details> <summary>содержание курса</summary>155 заданий<br>1. Введение<br>2. Подробнее о языке JavaScript<br>3. Полное погружение в JavaScript </details> <p></p> </li> <li> <strong><a href="https://www.udemy.com/ru/courses/free/">udemy.com</a></strong> <br>Бесплатные курсы на udemy.com <p> <a href="https://www.udemy.com/course/frontend-backend/">Обзор Frontend и Backend технологий</a> <br>1 час 14 минут. Евгений Волосатов </p> <p> <a href="https://www.udemy.com/course/foundations-of-front-end-development/">Foundations of Front-End Web Development</a> <br>20 час 14 минут. Davide Molin </p> <p> <a href="https://www.udemy.com/course/html-css-from-zero/">Основы HTML и CSS с нуля</a> <br>7 час 29 минут. Денис Мещеряков </p> <p> <a href="https://www.udemy.com/course/html5-oz/">Основы веб разработки. HTML и CSS</a> <br>3 час 36 минут. Юрий Алахвердов </p> </li> <li> <strong><a href="https://wayup.in/ru/library">wayup.in</a></strong> <br>Андрей Гаврилов <p> <a href="https://wayup.in/ru/library/course10">Веб-верстальщик: начало</a> <br>4 дня </p> </li> <li> <strong><a href="https://practicum.yandex.ru/catalog/free/">practicum.yandex.ru</a></strong> <br>Бесплатные курсы Яндекс Практикума <p><a href="https://practicum.yandex.ru/profile/web/"><strong>HTML, CSS, JavaScript бесплатный вводный курс</strong></a></p> <p><a href="https://practicum.yandex.ru/profile/frontend-developer/"><strong>Бесплатная часть курса Фронтенд-разработчик (25 часов)</strong></a></p> <p><a href="https://practicum.yandex.ru/profile/backend-developer/"><strong>Как стать Python-разработчиком</strong></a></p> <p><a href="https://practicum.yandex.ru/profile/python-free/"><strong>Бесплатный курс по бэкенд-разработке на Python</strong></a></p> <p><a href="https://practicum.yandex.ru/profile/git-basics/"><strong>Бесплатный курс по основам работы с Git</strong></a></p> </li> </ol> </article> <article class="article"> <div class="anchor" id="pay"></div> <h2>Платные курсы</h2> <ol> <li><strong><a href="https://beonmax.com/">beonmax.com</a></strong><br><em>beonmax</em></li> <li><strong><a href="https://ru.bitdegree.org/">ru.bitdegree.org</a></strong><br><em>bitdegree</em></li> <li><strong><a href="https://cleverbear.ru/">cleverbear.ru</a></strong><br><em>Умный медведь</em></li> <li><strong><a href="https://codebra.ru/">codebra.ru</a></strong><br><em>codebra</em></li> <li><strong><a href="https://www.coursera.org/">coursera.org</a></strong><br>coursera.org</li> <li><strong><a href="https://educat.courses/courses">educat.courses</a></strong><br>educat.courses</li> <li><strong><a href="https://frontendblok.com/">frontendblok.com</a></strong><br><em>курсы frontendblok</em></li> <li><strong><a href="https://fructcode.com/ru/">fructcode.com</a></strong><br><em>курсы fructcode</em></li> <li><strong><a href="https://goit.ua/">goit.ua</a></strong><br><em>Киев goit</em></li> <li><strong><a href="https://htmlacademy.ru/program">htmlacademy.ru</a></strong><br>htmlacademy.ru</li> <li><strong><a href="https://htmllessons.ru/">htmllessons.ru</a></strong><br><em>htmllessons.ru</em></li> <li><strong><a href="https://irs.academy/">irs.academy</a></strong><br><em>irs.academy</em></li> <li><strong><a href="https://itlogia.ru/">itlogia.ru</a></strong><br><em>Айтилогия</em></li> <li><strong><a href="https://itvdn.com/ru">itvdn.com</a></strong><br><em>Киев itvdn</em></li> <li><strong><a href="https://lectrum.io/">lectrum.io</a></strong><br><em>Киев lectrum</em></li> <li><strong><a href="https://loftschool.com/">loftschool.com</a></strong><br><em>Петербург loftschool</em></li> <li><strong><a href="https://otus.ru/">otus.ru</a></strong><br><em>otus.ru</em></li> <li><strong><a href="https://showskills.ru/">showskills.ru</a></strong><br><em>showskills.ru</em></li> <li><strong><a href="https://skillfactory.ru/">skillfactory.ru</a></strong><br><em>skillfactory.ru</em></li> <li><strong><a href="https://fintech.tinkoff.ru/">tinkoff.ru</a></strong><br>tinkoff.ru</li> <li><strong><a href="https://webcademy.ru/">webcademy.ru</a></strong><br><em>webcademy.ru</em></li> <li><strong><a href="https://webformyself.com/">webformyself.com</a></strong><br><em>курсы webformyself</em></li> <li><strong><a href="https://zerocoder.ru/">zerocoder.ru</a></strong><br>Курсы zerocoder.ru</li> </ol> </article> <article class="article"> <div class="anchor" id="eng"></div> <h2>Онлайн курсы (eng)</h2> <ol> <li><strong><a href="https://marksheet.io/">marksheet.io</a></strong><br><em>A free HTML & CSS tutorial</em></li> <li><strong><a href="https://code.org/">code.org</a></strong><br><em>code.org (eng)</em></li> <li><strong><a href="https://www.codecademy.com/">codecademy.com</a></strong><br><em>codecademy.com (eng)</em></li> <li><strong><a href="https://www.edx.org/">edx.org</a></strong><br><em>бесплатно</em></li> <li><strong><a href="https://www.freecodecamp.org/learn/">freecodecamp.org</a></strong><br><em>freecodecamp (eng)</em></li> <li><strong><a href="https://frontendmasters.com/">frontendmasters.com</a></strong><br><em>frontendmasters (eng)</em></li> <li><strong><a href="https://javascript30.com/">javascript30.com</a></strong><br><em>Javascript in 30 days</em></li> <li> <strong><a href="https://hyperskill.org/tracks">JetBrains Academy (eng)</a></strong><br>hyperskill.org </li> <li><strong><a href="https://scrimba.com/">scrimba.com</a></strong><br><em>scrimba.com (eng)</em></li> <li><strong><a href="https://www.sololearn.com/">sololearn.com</a></strong><br><em>sololearn (eng)</em></li> <li><strong><a href="https://www.w3schools.com/">w3schools.com</a></strong><br><em>w3schools (eng)</em></li> <li><strong><a href="https://watchandcode.com/">watchandcode.com</a></strong><br><em>watchandcode (eng)</em></li> </ol> </article> '}));var r=document.getElementById("edu-courseslearned");r&&r.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML='<h1>Изученные онлайн курсы по frontend разработке</h1> <article class="article"> <ol> <li>2021-04-22 вт <p><a href="learned_online-courses.html">Online Course</a><br><strong>HTML, CSS, JavaScript бесплатный вводный курс</strong></p> <p>Сайт <a href="https://praktikum.yandex.ru/profile/web/">praktikum.yandex.ru/profile/web/</a></p> </li> <li>2021-04-27 вт <p><a href="learned_online-courses.html">Online Course</a><br><strong>[webshake] [Артем Ивашкевич] Курс HTML для начинающих [2017]</strong><br> 12 уроков</p> <p>Автор Артем Ивашкевич<br> Сайт webshake.ru</p> </li> <li>2021-06-06 вс <p><a href="learned_online-courses.html">Online course</a><br><strong>[stepik] Веб разработка для начинающих HTML CSS</strong><br> 49 уроков<br> Время 3ч</p> <p>сайт stepik.org</p> </li> <li>2021-06-28 пн <p><a href="learned_online-courses.html">Online Course</a><br><strong>[stepik] [Антон Холин] JavaScript для начинающих</strong><br> 17 уроков<br> Время 6ч</p> <p>Автор Антон Холин<br> сайт stepik.org</p> </li> <li>2021-07-14 ср <p><a href="learned_online-courses.html">Online Course</a><br><strong>CSS Grid Garden</strong><br> 28 уровней<br> "Добро пожаловать в Grid Garden — место, где вы напишете CSS-код, чтобы вырастить морковный сад"<br> Сайт https://cssgridgarden.com/#ru</p> </li> <li>2021-07-21 ср <p><a href="learned_online-courses.html">Online Course</a><br><strong>[Codeliber] Learn HTML</strong><br> Разработчик Codeliber<br> Приложение на Android</p> </li> <li>2021-08-09 пн <p><a href="learned_online-courses.html">Online Course</a><br><strong>[Codeliber] Learn CSS</strong><br> Разработчик Codeliber<br> Приложение на Android</p> </li> <li>2021-08-24 вт <p><a href="learned_online-courses.html">Online Course</a><br><strong>[Codeliber] Learn JavaScript</strong><br> Разработчик Codeliber<br> Приложение на Android</p> </li> <li>2021-08-25 ср <p><a href="learned_online-courses.html">Online Course</a><br><strong>[Нетология] [Владимир Языков] Основы верстки сайта</strong><br> 5 уроков<br></p> <p>Автор Владимир Языков<br>Сайт netology.ru<br>Стоимость бесплатно<br>Уровень с нуля</p> </li> <li>2021-08-28 сб <p><a href="learned_online-courses.html">Online Course</a><br><strong>[Нетология] [Дмитрий Бронских] Первые шаги в JavaScript [2021]</strong><br></p> <p>Автор Дмитрий Бронских<br>Сайт netology.ru<br>Стоимость бесплатно<br>Уровень с нуля</p> </li> <li>2021-09-03 пт <p><a href="learned_online-courses.html">Online Course</a><br><strong>[Нетология] [Дмитрий Демидов] PYFREE-VIDEO Python-разработка для начинающих [2021]</strong><br></p> <p>Автор Дмитрий Демидов<br>Сайт netology.ru<br>Стоимость бесплатно<br>Уровень с нуля</p> </li> <li>2021-09-08 ср <p><a href="learned_online-courses.html">Online Course</a><br><strong>[Нетология] Профессии в программировании [2021]</strong><br></p> <p>Сайт netology.ru<br>Стоимость бесплатно<br>Уровень с нуля</p> </li> <li>2021-09-10 пт <p><a href="learned_online-courses.html">Online Course</a><br><strong>[Codeliber] Learn Python</strong><br> Разработчик Codeliber<br> Приложение на Android</p> </li> <li>2021-11-01 пн <p><a href="learned_online-courses.html">Online Course</a><br><strong>[html academy] Знакомство с веб-разработкой</strong><br>Часть 1: Основы HTML и CSS<br>Часть 2: Основы JavaScript<br>Часть 3: Основы PHP<br>1 час 35 минут теории, 1 час 40 минут практики</p> </li> <li>2021-11-06 сб <p><a href="learned_online-courses.html">Online Course</a><br><strong>https://githowto.com/ru</strong><br>Уроки по изучению git<br>51 урок</p> </li> <li>2021-11-09 вт <p><a href="learned_online-courses.html">Online Course</a><br><strong>[html academy] Знакомство с HTML и CSS</strong><br>Часть 1:Структура HTML-документа<br>Часть 2:Разметка текста<br>Часть 3:Ссылки и изображения<br>Часть 4:Основы CSS<br>Часть 5:Оформление текста<br>3 часа теории, 3 часа практики</p> </li> <li>2021-11-10 ср <p><a href="learned_online-courses.html">Online Course</a><br><strong>https://ru.bem.info/</strong><br>Методология БЭМ. Быстрый старт</p> </li> <li>2021-12-13 пн <p><a href="learned_online-courses.html">Online Course</a><br><strong>[code-basics] HTML для начинающих</strong><br>11 часов 41 урок с практикой в браузере</p> </li> <li>2021-12-16 чт <p><a href="learned_online-courses.html">Online Course</a><br><strong>[code-basics] CSS для начинающих</strong><br>8 часов 33 урока с практикой в браузере</p> </li> <li>2022-01-13 чт <p><a href="learned_online-courses.html">Online Course</a><br><strong>[code-basics] JavaScript для начинающих</strong><br>22 часа 79 уроков с практикой в браузере</p> </li> <li>2022-01-19 ср <p><a href="learned_online-courses.html">Online Course</a><br><strong>[stepik] Введение в программирование (JavaScript ES6)</strong><br>155 заданий</p> </li> </ol> </article> '}));var i=document.getElementById("edu-learning");i&&i.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML='<h1>Learning frontend</h1> <div class="article"> <div class="anchor" id="contents"></div> <h2>Содержание</h2> <div class="article__contents"> <a href="#bestbook" class="contents__link">Лучший учебник</a> <a href="#frontauthor" class="contents__link">Изучение Frontend от авторов</a> <a href="#front" class="contents__link">Изучение frontend</a> <a href="#front-eng" class="contents__link">Изучение frontend (eng)</a> <a href="#papers" class="contents__link">Статьи</a> </div> </div> <article class="article"> <div class="anchor" id="bestbook"></div> <h2>Лучший учебник</h2> <ol> <li> <a href="https://doka.guide/">doka.guide</a> <br>Дока HTML CSS Javascript </li> <li> <a href="https://proproprogs.ru/js">proproprogs.ru</a> <br>Python JavaScript Java C/C++ </li> <li> <a href="https://schoolsw3.com/">schoolsw3.com</a> <br>HTML и CSS JavaScript Python SQL Php </li> <li> <a href="https://hcdev.ru/">hcdev.ru</a> <br>Справочник HTML и CSS </li> <li> <a href="https://scriptdev.ru/">scriptdev.ru</a> <br>Справочник Typescript </li> <li> <a href="https://angdev.ru/">angdev.ru/</a> <br>Справочник Angular </li> <li> <a href="https://reactdev.ru/">reactdev.ru</a> <br>Справочник React </li> <li> <a href="https://nodejsdev.ru/">nodejsdev.ru</a> <br>Справочник Node.js </li> <li> <a href="https://py3dev.ru/">py3dev.ru</a> <br>Python 3 </li> <li> <a href="http://www.4stud.info/">4stud.info</a> <br>Учебно-методические материалы для студентов кафедры АСОИУ </li> </ol> </article> <article class="article"> <div class="anchor" id="frontauthor"></div> <h2>Изучение Frontend от авторов</h2> <ol> <li> <strong>Александр Гончаров</strong> Челябинск <a href="https://uwebdesign.ru/">uwebdesign.ru</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/user/uwebdesign">youtube.com/user/uwebdesign</a><br><a href="https://vk.com/uwebdesign">vk.com/uwebdesign</a><br><a href="https://t.me/uwebdesign">t.me/uwebdesign</a><br><a href="https://t.me/uwebdesign_chat">t.me/uwebdesign_chat</a><br><a href="https://www.facebook.com/uwebdesgn">facebook.com/uwebdesgn</a><br><a href="https://twitter.com/uwebdesgn">twitter.com/uwebdesgn</a> </details> </li> <li> <strong>Александр Дергунов</strong> Владимир <a href="https://dergunov.com/">dergunov.com</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/@sanekdr/videos">youtube.com/@sanekdr</a> </details> </li> <li> <strong>Александр Лущенко</strong> <a href="https://itgid.info/">itgid.info</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/c/itgid/videos">youtube.com/c/itgid</a><br><a href="https://github.com/luschenko">github.com/luschenko</a><br><a href="https://vk.com/id552202581">vk.com/id552202581</a><br><a href="https://vk.com/webdev_zero">vk.com/webdev_zero</a><br><a href="https://t.me/itgid_info">t.me/itgid_info</a><br><a href="https://t.me/jsrules">t.me/jsrules</a><br><a href="https://telegram.me/alex_luschenko">telegram.me/alex_luschenko</a><br><a href="https://www.facebook.com/itgid.info/">facebook.com/itgid.info</a> </details> </li> <li> <strong>Александр Мальцев</strong> <a href="https://itchief.ru/">itchief.ru</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/c/ItchiefRuFirst/videos">youtube.com/c/ItchiefRuFirst</a><br><a href="https://github.com/itchief">github.com/itchief</a><br><a href="https://vk.com/itchief">vk.com/itchief</a><br><a href="https://t.me/itchief_ru">t.me/itchief_ru</a><br><a href="https://www.facebook.com/itchief.ru">facebook.com/itchief.ru</a><br><a href="https://twitter.com/itchief_ru">twitter.com/itchief_ru</a> </details> </li> <li> <strong>Александр Сажин</strong> <a href="https://brainoteka.com/">brainoteka.com</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/c/BrainotekaLight/videos">youtube.com/c/BrainotekaLight</a><br><a href="https://vk.com/brainotekalight">vk.com/brainotekalight</a><br><a href="https://twitter.com/BrainotekaLight">twitter.com/BrainotekaLight</a><br><a href="https://www.facebook.com/BrainotekaLight">facebook.com/BrainotekaLight</a> </details> </li> <li> <strong>Александр Сокирка</strong> Кишинев <a href="https://geniuscourses.com/">geniuscourses.com</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/user/CRIK0VA">youtube.com/user/CRIK0VA</a><br><a href="https://vk.com/alexandr.sochirca">vk.com/alexandr.sochirca</a><br><a href="https://www.instagram.com/sochirca/">instagram.com/sochirca</a><br><a href="https://www.facebook.com/sochirca.alexandr">facebook.com/sochirca.alexandr</a> </details> </li> <li> <strong>Алексей Климанов</strong> <a href="https://webdesign-master.ru/">webdesign-master.ru</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/channel/UC7enHM_oJRYJOnyJrcRzwbg">youtube.com/c/АлексейКлиманов_мастер</a><br><a href="https://github.com/agragregra">github.com/agragregra</a><br><a href="https://vk.com/agragregra">vk.com/agragregra</a><br><a href="https://vk.com/jediweb">vk.com/jediweb</a><br><a href="https://www.instagram.com/asklimanov/">instagram.com/asklimanov</a><br><a href="https://twitter.com/agragregra">twitter.com/agragregra</a> </details> </li> <li> <strong>Алексей Семикопенко</strong> <a href="http://webremeslo.ru/">webremeslo.ru</a> </li> <li> <strong>Анатолий Саламатин</strong> <a href="https://asalamatin.ru/">asalamatin.ru</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/c/Frontcoder/videos">youtube.com/c/Frontcoder</a><br><a href="https://vk.com/farcer">vk.com/farcer</a><br><a href="https://t.me/asalamatin">t.me/asalamatin</a><br><a href="https://www.facebook.com/frontcoder">facebook.com/frontcoder</a> </details> </li> <li> <strong>Андрей Гаврилов</strong> <a href="https://wayup.in/">wayup.in</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/c/WAYUPIN/videos">youtube.com/c/WAYUPIN</a><br><a href="https://vk.com/andrewgavrilov_me">vk.com/andrewgavrilov_me</a><br><a href="https://vk.com/wayup_in">vk.com/wayup_in</a><br><a href="https://t.me/andrewgavrilovlive">t.me/andrewgavrilovlive</a><br><a href="https://www.instagram.com/andrew.gavrilov/">instagram.com/andrew.gavrilov</a><br><a href="https://www.instagram.com/wayup.in.official/">instagram.com/wayup.in.official</a><br><a href="https://www.facebook.com/andrewgavrilovme">facebook.com/andrewgavrilovme</a> </details> </li> <li> <strong>Анна Блок</strong> <a href="https://tpverstak.ru/">tpverstak.ru</a> <a href="http://frontendhelp.me/ru">frontendhelp.me</a> <a href="https://frontendblok.com/">frontendblok.com</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/channel/UCn5wduCq2Mus0v85QZn9IaA/videos">youtube.com/c/АннаБлок</a><br><a href="https://vk.com/tpverstak">vk.com/tpverstak</a><br><a href="https://t.me/tpverstak">t.me/tpverstak</a><br><a href="https://t.me/tpverstakchat">t.me/tpverstakchat</a><br><a href="https://t.me/frontendhelp">t.me/frontendhelp</a><br><a href="https://www.instagram.com/tpverstak">instagram.com/tpverstak</a> </details> </li> <li> <strong>Артем Ивашкевич</strong> <a href="https://webshake.ru/">webshake.ru</a> <a href="https://php.zone/">php.zone</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/c/PHPZone/videos">youtube.com/c/PHPZone</a><br><a href="https://vk.com/ivashkevitch">vk.com/ivashkevitch</a><br><a href="https://vk.com/php_zone">vk.com/php_zone</a><br><a href="https://t.me/php_zone_chan">t.me/php_zone_chan</a><br><a href="https://www.facebook.com/php.zone.chan/">facebook.com/php.zone.chan</a><br><a href="https://twitter.com/php_zone_chan">twitter.com/php_zone_chan</a> </details> </li> <li> <strong>Артем Исламов</strong> <a href="https://glo.academy/">glo.academy</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/c/GloAcademyChannel/videos">youtube.com/c/GloAcademyChannel</a><br><a href="https://vk.com/aislam23">vk.com/aislam23</a><br><a href="https://vk.com/glo_academy/">vk.com/glo_academy</a><br><a href="https://t.me/glo_academy">t.me/glo_academy</a><br><a href="https://www.instagram.com/islamovartem/">instagram.com/islamovartem</a> </details> </li> <li> <strong>Вадим Гребенщиков</strong> <a href="http://htmlboss.ru/beginner">htmlboss.ru</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/channel/UCcj1abyM2yeW_7cHzMbljjg/videos">youtube.com/channel</a> </details> </li> <li> <strong>Валя Дикая</strong> Покровск <a href="https://vel-wild.pro/">vel-wild.pro</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/c/VelWild/videos">youtube.com/c/VelWild</a><br><a href="https://www.instagram.com/vel_wild/">instagram.com/vel_wild</a> </details> </li> <li> <strong>Влад Мержевич</strong> <a href="http://htmlbook.ru/">htmlbook.ru</a><a href="https://webref.ru/">webref.ru</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/channel/UC0KbjRLHLbfWbL7IkmHSZNg/videos">youtube.com/channel</a><br><a href="https://github.com/webref">github.com/webref</a><br><a href="https://jsfiddle.net/user/webref/fiddles/">jsfiddle.net/user/webref</a><br><a href="https://vk.com/webref">vk.com/webref</a> </details> </li> <li> <strong>Гоша Дударь</strong> <a href="https://itproger.com/">itproger.com</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/c/gosha_dudar/videos">youtube.com/c/gosha_dudar</a><br><a href="https://vk.com/prog_life">vk.com/prog_life</a><br><a href="http://t.me/itProger_official">t.me/itProger_official</a><br><a href="https://www.instagram.com/itproger_official/">instagram.com/itproger_official</a><a><br></a><a href="https://www.facebook.com/programsLife/">facebook.com/programsLife</a><a><br></a><a href="https://twitter.com/GoshaDudar">twitter.com/GoshaDudar</a> </details> </li> <li> <strong>Дамир Габдрахимов</strong> <a href="https://gabdrahimov.ru/">gabdrahimov.ru</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/channel/UC-nq3cnvFj9h_gvt3COSigw/videos">youtube.com/channel</a> </details> </li> <li> <strong>Денис Арчаков</strong> <a href="https://archakov.im/">archakov.im</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/c/ArchakovBlog/videos">youtube.com/c/ArchakovBlog</a><a href="https://github.com/Archakov06">github.com/Archakov06</a><a href="https://vk.com/archakov_im">vk.com/archakov_im</a><a href="https://t.me/archakov_im">t.me/archakov_im</a><a href="https://twitter.com/home">twitter.com/home</a> </details> </li> <li> <strong>Денис Большаков</strong> <a href="https://basicweb.ru/">basicweb.ru</a> </li> <li> <strong>Дмитрий Валак</strong> <a href="https://brainscloud.ru/">brainscloud.ru</a> <a href="https://htmlbase.ru/">htmlbase.ru</a> <a href="http://ab-w.net/">ab-w.net</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/c/BrainsCloud/videos">youtube.com/c/BrainsCloud</a><br><a href="https://vk.com/odimaz">vk.com/odimaz</a> </details> </li> <li> <strong>Дмитрий Кузюбердин</strong> Минск <a href="http://it-kamasutra.com/">it-kamasutra.com</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/c/ITKAMASUTRA/videos">youtube.com/c/ITKAMASUTRA</a><br><a href="https://vk.com/it.incubator">vk.com/it.incubator</a><br><a href="https://t.me/ItIncubatorManager">t.me/ItIncubatorManager</a><br><a href="https://www.instagram.com/it.kamasutra.dimych">instagram.com/it.kamasutra.dimych</a><br><a href="https://www.instagram.com/it.incubator/">instagram.com/it.incubator</a> </details> </li> <li> <strong>Дмитрий Трепачев</strong> <a href="http://code.mu/">code.mu</a> <a href="http://old.code.mu/">old.code.mu</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/channel/UCc3t6s8bYT_9zD9DdDowtxA/videos">youtube.com/channel</a><br><a href="https://vk.com/id55437525">vk.com/id55437525</a> </details> </li> <li> <strong>Дмитрий Ченгаев</strong> <a href="https://webkyrs.info/">webkyrs.info</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/channel/UCzwAJyw4MO4bAUMOs64X4cw/videos">youtube.com/channel</a><br><a href="https://vk.com/id480406815">vk.com/id480406815</a><br><a href="https://telegram.me/dimachen">telegram.me/dimachen</a> </details> </li> <li> <strong>Евгений Попов</strong> <a href="https://ruseller.com/">ruseller.com</a> <a href="https://evgeniypopov.com/">evgeniypopov.com</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/c/evgeniypopovDOTcom/videos">youtube.com/c/evgeniypopovDOTcom</a><br><a href="https://vk.com/popovevgeniy">vk.com/popovevgeniy</a><br><a href="https://telegram.me/evgeniypopovdotcom">telegram.me/evgeniypopovdotcom</a><br><a href="https://www.instagram.com/1popov.ru">instagram.com/1popov.ru</a><br><a href="https://www.facebook.com/1popov.ru">facebook.com/1popov.ru</a><br><a href="https://twitter.com/Evgeniy_Popov">twitter.com/Evgeniy_Popov</a> </details> </li> <li> <strong>Елена Назарова</strong> <a href="https://html5book.ru/">html5book.ru</a> </li> <li> <strong>Женя Андриканич</strong> <a href="https://fls.guru/">fls.guru</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/c/FreelancerLifeStyle/videos">youtube.com/c/FreelancerLifeStyle</a><br><a href="https://t.me/freelancer_lifestyle">t.me/freelancer_lifestyle</a><br><a href="https://www.instagram.com/freelancer.lifestyle/">instagram.com/freelancer.lifestyle</a><br><a href="https://www.facebook.com/freelancerlifestyle/">facebook.com/freelancerlifestyle</a><a></a> </details><a></a> </li> <li> <strong>Илья Кантор</strong> <a href="https://learn.javascript.ru/">javascript.ru</a> <a href="https://javascript.info/">javascript.info</a> <a href="http://algolist.manual.ru/">algolist.manual.ru</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/c/JavaScriptru-videos/videos">youtube.com/c/JavaScriptru-videos</a><a></a> </details> </li> <li> <strong>Илья Климов</strong> Харьков <a href="https://javascript.ninja/">javascript.ninja</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/c/JavascriptNinja/videos">youtube.com/c/JavascriptNinja</a><a></a><a href="https://t.me/javascript_ninja">t.me/javascript_ninja</a><a></a><a href="https://facebook.com/jsninja">facebook.com/jsninja</a><a></a><a href="https://twitter.com/xanf_ua">twitter.com/xanf_ua</a><a></a> </details> </li> <li> <strong>Исмаил Усеинов</strong> <a href="https://morphismail.github.io/video_course_basic/">morphismail.github.io/video_course_basic</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/c/ITDoctor">youtube.com/c/ITDoctor</a><br><a href="https://vk.com/itdoctorstudio">vk.com/itdoctorstudio</a><br><a href="https://github.com/morphIsmail">github.com/morphIsmail</a><br><a href="https://t.me/itdoctorstudio">t.me/itdoctorstudio</a><br><a href="https://instagram.com/ismail_asanovich/">instagram.com/ismail_asanovich</a> </details> </li> <li> <strong>Максим Васянович</strong> <a href="https://maxgraph.ru/">maxgraph.ru</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/c/maxgraph/videos">youtube.com/c/maxgraph</a><br><a href="https://vk.com/write11437510">vk.com/write11437510</a><br><a href="https://t.me/maxdenaro">t.me/maxdenaro</a><br><a href="https://wa.me/79195361459">wa.me/79195361459</a> </details> </li> <li> <strong>Максим Шувал</strong> <a href="https://htmllessons.ru/">htmllessons.ru</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/c/REDGroup/videos">youtube.com/c/REDGroup</a><br><a href="https://www.instagram.com/htmllessons_ru/">instagram.com/htmllessons_ru</a><br><a href="https://t.me/maxdenaro">t.me/maxdenaro</a><br><a href="https://wa.me/79195361459">wa.me/79195361459</a> </details> </li> <li> <strong>Михаил Базаров</strong> <a href="https://camouf.ru/">camouf.ru</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/user/camouf28">youtube.com/user/camouf28</a><br><a href="https://t.me/camouf_ru">t.me/camouf_ru</a> </details> </li> <li> <strong>Михаил Русаков</strong> <a href="https://myrusakov.ru/">myrusakov.ru</a> </li> <li> <strong>Николай Громов</strong> <a href="https://nicothin.pro/">nicothin.pro</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/user/nicothinum/videos">youtube.com/user/nicothinum</a><br><a href="https://github.com/nicothin">github.com/nicothin</a><br><a href="https://vk.com/n.gromov">vk.com/n.gromov</a><br><a href="https://twitter.com/nicothin">twitter.com/nicothin</a> </details> </li> <li> <strong>Олег Поляков</strong> <a href="https://codedojo.ru/">codedojo.ru</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/c/CodeDojo/videos">youtube.com/c/CodeDojo</a><br><a href="https://github.com/codedojo">github.com/codedojo</a><br><a href="https://vk.com/codedojo">vk.com/codedojo</a><br><a href="https://t.me/codedojo">t.me/codedojo</a> </details> </li> <li> <strong>Сергей Михалевич</strong> <a href="https://guru-css.com/">guru-css.com</a> </li> <li> <strong>Станислав Усков</strong> <a href="https://school-php.com/">school-php.com</a> <details> <summary>Соцсети</summary><a href="https://www.youtube.com/user/imbalancehero/videos">youtube.com/user/imbalancehero</a><br><a href="https://twitter.com/school_php">twitter.com/school_php</a> </details> </li> <li> <strong>Фронтендер из Воронежа</strong> <a href="https://contentim.ru/">contentim.ru</a> </li> <li> <strong>Эмиль Рахматуллин</strong> <a href="https://rah-emil.ru/">rah-emil.ru</a> <a href="https://avis-agency.ru/">avis-agency.ru</a> <details> <summary>Соцсети</summary><a href="https://github.com/rah-emil">github.com/rah-emil</a><a><br></a><a href="https://vk.com/rah_emil">vk.com/rah_emil</a><a><br></a><a href="https://t.me/avis_tv">t.me/avis_tv</a><br><a href="https://www.instagram.com/rah_emil/">instagram.com/rah_emil</a> </details> </li> </ol> </article> <article class="article"> <div class="anchor" id="front"></div> <h2>Изучение frontend</h2> <ol> <li> <a href="https://codernet.ru/">codernet.ru</a> <br>Книги, видео, статьи HTML CSS JS PHP Phyton </li> <li> <a href="https://developer.mozilla.org/ru/docs/Web">developer.mozilla.org</a> <br>Веб-технологии для разработчиков </li> <li> <a href="https://html5css.ru/">html5css.ru</a> <br>HTML CSS JavaScript MySQL PHP Bootstrap </li> <li> <a href="http://kodesource.top/">kodesource.top</a> <br>Учебники HTML CSS JavaScript JQuery </li> <li> <a href="https://metanit.com/">metanit.com</a> <br>Данный сайт посвящен различным языкам и технологиям программирования, компьютерам, мобильным платформам и ИТ-технологиям </li> <li> <a href="https://msiter.ru/">msiter.ru</a> <br>Учебники HTML CSS JavaScript JQuery </li> <li> <a href="http://psd-html-css.ru/">psd-html-css.ru</a> <br>Бесплатные шаблоны PSD HTML CSS </li> <li> <a href="https://puzzleweb.ru/">puzzleweb.ru</a> <br>Самоучитель и справочник по HTML, CSS, JavaScript и PHP </li> <li> <a href="http://uroki-css.ru/">uroki-css.ru</a> <br>Уроки CSS </li> <li> <a href="http://uroki-html.ru/">uroki-html.ru</a> <br>Уроки HTML </li> <li> <a href="http://uroki-javascript.ru/">uroki-javascript.ru</a> <br>Уроки JavaScript </li> <li> <a href="http://usefulscript.ru/">usefulscript.ru</a> <br>usefulscript.ru </li> </ol> </article> <article class="article"> <div class="anchor" id="front-eng"></div> <h2>Изучение frontend (eng)</h2> <ol> <li> <a href="https://cssreference.io/">cssreference.io</a> </li> <li> <a href="https://css-tricks.com/">css-tricks.com</a> </li> <li> <a href="https://devdocs.io/">devdocs.io</a> </li> <li> <a href="https://freefrontend.com/">freefrontend.com</a> </li> <li> <a href="https://htmlreference.io/">htmlreference.io</a> </li> <li> <a href="https://javascript.info/">javascript.info</a> </li> <li> <a href="https://www.snoopcode.com/">snoopcode.com</a> </li> <li> <a href="https://www.w3schools.com/">w3schools.com</a> </li> </ol> </article> <article class="article"> <div class="anchor" id="papers"></div> <h2>Статьи</h2> <ol> <li> <a href="https://checkroi.ru/blog/">checkroi.ru</a> <br>checkroi.ru </li> <li> <a href="https://css-live.ru/">css-live.ru</a> <br>css-live.ru </li> <li> <a href="https://coderoad.ru/">coderoad.ru</a> <br>coderoad </li> <li> <a href="https://devacademy.ru/">devacademy.ru</a> <br>devacademy </li> <li> <a href="https://habr.com/ru/">habr.com</a> <br>habr.com </li> <li> <a href="https://jem-space.ru/">jem-space.ru</a> <br>jem-space.ru </li> <li> <a href="https://proglib.io/">proglib.io</a> <br>proglib.io </li> <li> <a href="https://thecode.media/">thecode.media</a> <br>Журнал Яндекс Практикума </li> <li> <a href="https://tproger.ru/">tproger.ru</a> <br>tproger.ru </li> <li> <a href="https://stackoverflow.com/">stackoverflow.com</a> <br>stackoverflow (eng) </li> </ol> </article> '}));var a=document.getElementById("edu-rsschool");a&&a.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML='<h1>The Rolling Scopes School (бесплатные курсы в EPAM)</h1> <div class="article"> <div class="anchor" id="contents"></div> <h2>Содержание</h2> <div class="article__contents"> <a href="#rs" class="contents__link">Rolling Scopes</a> <a href="#kurs" class="contents__link">Как записаться на курс</a> <a href="#final2020q3" class="contents__link">Лучшие финальные проекты 2020q3</a> <a href="#final2020q1" class="contents__link">Лучшие финальные проекты 2020q1</a> </div> </div> <article class="article"> <div class="anchor" id="rs"></div> <h2>Rolling Scopes</h2> <a href="https://rollingscopes.com/">rollingscopes.com</a> <br> <a href="https://www.youtube.com/user/therollingscopes">youtube rollingscopes</a> </article> <article class="article"> <h2>We are community</h2> <a href="https://wearecommunity.io/">wearecommunity.io</a> <br><a href="https://wearecommunity.io/events/js-stage0-rs-2023q2">wearecommunity.io js-stage0-rs-2023q2</a> </article> <article class="article"> <h2>Rolling Scopes School</h2> <a href="https://rs.school/">rs.school</a> <br><a href="https://github.com/rolling-scopes-school">github rs.school</a> <br><a href="https://www.youtube.com/c/RollingScopesSchool">youtube rs.school</a> </article> <article class="article"> <div class="anchor" id="kurs"></div> <h2>Как записаться на курс</h2> <p> <a href="https://rs.school/js-stage0/">JS / FRONT-END. STAGE 0 (RU)</a> <br>Подготовительный курс «JavaScript/Front-end. Stage 0» Бесплатный курс от сообщества The Rolling Scopes для тех, кто мало знаком или незнаком с программированием, но хотел бы в дальнейшем учиться на основном курсе «JavaScript/Front-end». <br>JS/FE Pre-School 2022Q1 Начало 13 декабря 2021 <br>JS/FE Pre-School 2023Q2 Начало 26 июня 2023 </p> <p> <a href="https://rs.school/js/">JS / FRONT-END (RU)</a> <br>Курс «JavaScript/Front-end» Бесплатный курс от сообщества The Rolling Scopes для тех, кто хочет получить знания и опыт, достаточные для трудоустройства на позицию Junior Software Engineer в области JavaScript/Front-end. <br>JS/FE Stage1 2022Q1 Начало 27 февраля 2022 <br>JS/FE Stage1 2023Q4 Начало 5 ноября 2023 </p> <p> <a href="https://rs.school/js-en/">JS / FRONT-END (EN)</a> <br>Javascript/Front-end Mentoring Program (in English) <br>Начало 6 ноября 2023 </p> <p> <a href="https://rs.school/angular/">ANGULAR (EN)</a> <br>Angular Course <br>Angular 2023Q1 Начало 13 марта 2023 </p> <p> <a href="https://rs.school/react/">REACT (EN)</a> <br>React Course <br>React 2023Q1 Начало 13 марта 2023 </p> <p> <a href="https://rs.school/nodejs/">NODE.JS (EN)</a> <br>Node.js Course <br>Node.js 2023Q1 Начало 13 марта 2023 </p> </article> <article class="article"> <h2>Учебная платформа</h2> <a href="https://app.rs.school/">app.rs.school</a> <br><a href="https://discord.com/channels/516715744646660106/917120666782801991">discord.com</a> <br><a href="https://docs.rs.school/#/">docs.rs.school</a> <br><a href="https://github.com/rolling-scopes-school/tasks">tasks</a> <br><a href="https://github.com/rolling-scopes-school/tasks/blob/master/roadmap.md">roadmap</a> </article> <article class="article"> <h2>Статьи о курсе</h2> <a href="https://medium.com/rs-school/draft-%D0%BA%D0%B0%D0%BA-%D1%83%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BD%D0%B0-the-rolling-scopes-school-32298109e3a3">medium.com/rs-school/draft</a> <br>Как устроена The Rolling Scopes School <br><a href="https://becooladmin.wordpress.com/2021/03/25/rs-school-week-0/">becooladmin.wordpress.com/2021/03/25/rs-school-week-0</a> <br>RS School — stage 0 + 1/2 <br><a href="https://habr.com/ru/post/465463/">habr.com/ru/post/465463</a> <br>Хорошее не бывает дешёвым. Но бывает бесплатным <br><a href="https://journal.tinkoff.ru/sravnyator/it-courses/otzyvy/otzyv-o-kurse-javascript-front-end-ot-rs-school-otlichnyy-besplatnyy-kurs-stoit-zatrachennogo-vremeni/">journal.tinkoff.ru/sravnyator/it-courses</a> <br>Отзыв о курсе «JavaScript/Front-end» от RS School </article> <article class="article"> <h2>Описание курса</h2> <a href="https://rolling-scopes-school.github.io/2021q3/">rolling-scopes-school.github.io/2021q3</a> <br>RS School. Курс JS/Frontend-разработка. Подготовительный этап <br><a href="https://olgamardvilko.github.io/up-skill-lab/#1-1">olgamardvilko.github.io/up-skill-lab</a><br>Много ссылок по неделям <br><a href="https://irinainina.github.io/stage0-2021q1/#/README">irinainina.github.io/stage0-2021q1/#/README</a> <br>Описание этапа самоподготовки </article> <article class="article"> <div class="anchor" id="final2020q3"></div> <h2>Лучшие финальные проекты 2020q3</h2> <a href="https://docs.google.com/spreadsheets/d/1STe2AtPckojasiQI_j6s0cLRWEjvHG0LCSxN3yv5dBA/edit#gid=0">Лучшие финальные проекты 2020q3</a> <h3>Статьи и приложения</h3> <ol> <li> <a href="https://dazik.medium.com/rs-school-%D0%BE%D1%82-%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%B0-%D0%B4%D0%BE-%D0%B4%D0%B6%D1%83%D0%BD%D0%B0-%D0%B7%D0%B0-%D0%BF%D0%BE%D0%BB%D0%B3%D0%BE%D0%B4%D0%B0-48b045378e0c">RS School: от чайника до джуна за полгода…</a> <br> <a href="https://longlegsjourney.netlify.app/">https://longlegsjourney.netlify.app/</a> </li> <li> <a href="https://elena-sevastian.medium.com/%D0%BA%D0%B0%D0%BA-%D0%BC%D1%8B-%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BB%D0%B8-%D0%BA%D0%BB%D0%BE%D0%BD-plants-vs-zombies-ee2a499914d7">Как мы создали клон Plants vs Zombies</a> <br> <a href="https://plants-vs-zombies-rsclone.netlify.app/">https://plants-vs-zombies-rsclone.netlify.app/</a> </li> <li> <a href="https://andreykomov.medium.com/must-read-310726007e79">Забудь про новогодние каникулы или клон легендарной игры Duck Hunt</a> <br> <a href="https://nimlu-bot-rsclone.netlify.app/">https://nimlu-bot-rsclone.netlify.app/</a> </li> <li> <a href="https://ansiv.medium.com/%D1%81%D0%B5%D1%82%D0%B5%D0%B2%D0%B0%D1%8F-%D0%BC%D0%BD%D0%BE%D0%B3%D0%BE%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8C%D1%81%D0%BA%D0%B0%D1%8F-%D0%B8%D0%B3%D1%80%D0%B0-epic-spell-wars-of-the-battle-wizards-f22c9e966427">Сетевая многопользовательская игра Epic Spell Wars of the Battle Wizards</a> <br> <a href="https://epic-spell-wars.ru/">https://epic-spell-wars.ru/</a> </li> <li> <a href="https://tonyem.medium.com/ibb-obb-%D1%81lone-%D1%80%D0%B5%D0%B0%D0%BB%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F-%D1%8D%D1%84%D1%84%D0%B5%D0%BA%D1%82%D0%BD%D0%BE%D0%B9-%D0%B8%D0%B3%D1%80%D1%8B-%D0%BD%D0%B0-javascript-742288902af9">ibb & obb Сlone: реализация эффектной игры на JavaScript</a> <br> <a href="https://ibbobb.herokuapp.com/#home">https://ibbobb.herokuapp.com/#home</a> </li> <li> <a href="https://fodin.medium.com/%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%B0%D0%BA%D0%BB%D0%BE%D0%BD%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-2a1bf8662baa">Контраклонирование</a> <br> <a href="https://fodin-contra.netlify.app/">https://fodin-contra.netlify.app/</a> </li> <li> <a href="https://ventskute-vika.medium.com/rs-clone-rise-of-the-guardians-506650103a8">Rise of the Guardians - Хранители Снов</a> <br> <a href="https://rise-of-the-guardians.netlify.app/">https://rise-of-the-guardians.netlify.app/</a> </li> <li> <a href="https://katkopikat.medium.com/kopeicki-7496575423a7">“Kopeicki” История разработки приложения по учёту финансов</a> <br> <a href="https://kopeicki.netlify.app/login">https://kopeicki.netlify.app/login</a> </li> <li> <a href="https://roman-ivashkevich963.medium.com/ryms-travel-%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B4%D0%BB%D1%8F-%D0%BF%D0%BB%D0%B0%D0%BD%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-%D0%BF%D1%83%D1%82%D0%B5%D1%88%D0%B5%D1%81%D1%82%D0%B2%D0%B8%D0%B9-69a1227c12b8">RYMS travel. Приложение для планирования путешествий</a> <br> <a href="https://rsclone-ryms-travel.netlify.app/">https://rsclone-ryms-travel.netlify.app/</a> </li> <li> <a href="https://aitzhan.medium.com/%D0%BF%D0%BB%D0%B0%D1%82%D1%84%D0%BE%D1%80%D0%BC%D0%B5%D1%80-pixel-tale-%D0%BD%D0%B0-phaser-3-f4c12fc4c065">Как мы платформер на Phaser 3 делали</a> <br> <a href="https://rolling-scopes-school.github.io/temir-cs-JS2020Q3/rs-clone/">https://rolling-scopes-school.github.io/temir-cs-JS2020Q3/rs-clone/</a> </li> <li> <a href="https://egor1231232.medium.com/%D0%B8%D0%B3%D1%80%D0%B0-coderman-%D0%BD%D0%B0-angular-phaser-3-5c338835285c">Игра‌ ‌Coderman‌ ‌на‌ Angular + Phaser 3</a> <br> <a href="https://rsclone-coderman.netlify.app/">https://rsclone-coderman.netlify.app/</a> </li> <li> <a href="https://helena-trump.medium.com/the-rolling-scopes-school-rs-clone-8b59187bbda0">The Rolling Scopes School — RS Clone</a> <br> <a href="https://helenakrasnova.github.io/rsclone/#/">https://helenakrasnova.github.io/rsclone/#/</a> </li> <li> <a href="https://aharlo4.medium.com/webpack-config-generator-f210196362b9">Webpack Config Generator</a> <br> <a href="https://happy-mestorf-7e1392.netlify.app/">https://happy-mestorf-7e1392.netlify.app/</a> </li> <li> <a href="https://leomelik.medium.com/clonewars-coinkeeper-5230c3fc540b">CloneWars — CoinKeeper</a> <br> <a href="https://milanaadams.github.io/rs-clone/">https://milanaadams.github.io/rs-clone/</a> </li> <li> <a href="https://nikita-klimovich-20.medium.com/aibolit-%D0%BA%D0%BB%D0%BE%D0%BD-43f0ed4705a8">Aibolit клон</a> <br> <a href="https://rsclone-medical-portal.netlify.app/">https://rsclone-medical-portal.netlify.app/</a> </li> <li> <a href="https://valentinapon.medium.com/%D0%B0%D0%BD%D1%82%D0%B8%D0%BC%D1%83%D1%81%D0%BE%D1%80-11cf81cef64">Антимусор. История создания приложения на JavaScript</a> <br> <a href="https://anti-garbage-rs-school.netlify.app/">https://anti-garbage-rs-school.netlify.app</a> </li> <li> <a href="https://qairkhan.medium.com/clonewars-%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B4%D0%BB%D1%8F-%D0%B1%D1%80%D0%BE%D0%BD%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-359845e5deda">CloneWars — приложение для бронирования</a> <br> <a href="https://terassa.netlify.app/">https://terassa.netlify.app/</a> </li> <li> <a href="https://igor-alexeyenko.medium.com/%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0-online-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D0%B8-%D0%BD%D0%B0%D1%81%D1%82%D0%BE%D0%BB%D1%8C%D0%BD%D0%BE%D0%B9-%D0%B8%D0%B3%D1%80%D1%8B-%D0%B8%D0%BD%D0%BD%D0%BE%D0%B2%D0%B0%D1%86%D0%B8%D1%8F-a69355abae26">Разработка Online версии настольной игры “Инновация”</a> <br> <a href="https://innovation-rs.herokuapp.com/#">https://innovation-rs.herokuapp.com/#</a> </li> <li> <a href="https://adelheid0106.medium.com/%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5-brain-wars-%D0%BD%D0%B0-%D1%87%D0%B8%D1%81%D1%82%D0%BE%D0%BC-javascript-fd4111c3936c">Приложение Brain Wars на чистом JavaScript</a> <br> <a href="https://brain-wars.netlify.app/">https://brain-wars.netlify.app/</a> </li> <li> <a href="https://tatsmaki.medium.com/rs-school-minecraft-%D0%BD%D0%B0-typescript-aa7f4db88bd5">RS School — Minecraft на TypeScript?</a> <br> <a href="https://rsclone-minecraft.netlify.app/">https://rsclone-minecraft.netlify.app/</a> </li> <li> <a href="https://kattrina.medium.com/%D0%BF%D0%B8%D1%88%D0%B5%D0%BC-%D0%BA%D0%B0%D1%81%D1%82%D0%BE%D0%BC%D0%BD%D1%8B%D0%B9-%D0%BA%D0%BB%D0%BE%D0%BD-duolingo-377724f8365d">Пишем кастомный клон Duolingo</a> <br> <a href="https://catalie-wanna-speak.herokuapp.com/">https://catalie-wanna-speak.herokuapp.com/</a> </li> <li> <a href="https://cubesurfers.medium.com/cubway-surfers-47fc53b0d156">Cubway Surfers</a> <br> <a href="https://cubway-surfers.web.app/welcome">https://cubway-surfers.web.app/welcome</a> </li> </ol> </article> <article class="article"> <div class="anchor" id="final2020q1"></div> <h2>Лучшие финальные проекты 2020q1</h2> <a href="https://docs.google.com/spreadsheets/d/1STe2AtPckojasiQI_j6s0cLRWEjvHG0LCSxN3yv5dBA/edit#gid=0">Лучшие финальные проекты 2020q3</a> <h3>Статьи и приложения</h3> <ol> <li> <p>Star Fighter</p> <br> <a href="https://inikon-ragneda-star-fighter.netlify.app/">https://inikon-ragneda-star-fighter.netlify.app/</a> </li> <li> <a href="https://medium.com/rs-school/%D0%BA%D0%BB%D0%BE%D0%BD-ftl-%D0%BD%D0%B0-phaser-3-e104b9f9f7f4">Phaser 3 FTL</a> <br> <a href="https://ialeks94-cloneftl.netlify.app/">https://ialeks94-cloneftl.netlify.app/</a> </li> <li> <a href="https://medium.com/@kotiknalune/prince-of-persia-on-phaser-3-e3c810943985">Prince Of Persia</a> <br> <a href="https://clonewars-prince-of-persia.netlify.app/">https://clonewars-prince-of-persia.netlify.app/</a> </li> <li> <a href="https://medium.com/@annarusakovich15/%D0%B8%D0%B3%D1%80%D0%B0-the-final-station-%D0%BD%D0%B0-javascript-c58d1726415e">The Final Station</a> <br> <a href="https://the-final-station-js.netlify.app/">https://the-final-station-js.netlify.app/</a> </li> <li> <a href="https://medium.com/@loremipsumrrr/clonewars-gta-8c1da4e202ba">GTA</a> <br> <a href="https://gta-phaser-promo.netlify.app/">https://gta-phaser-promo.netlify.app/</a> </li> <li> <p>Heroes 3</p> <br> <a href="https://heroes-might-and-magic.netlify.app/">https://heroes-might-and-magic.netlify.app/</a> </li> </ol> </article> '}));var o=document.getElementById("edu-rss2022stage0");o&&o.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML=ht}));var l=document.getElementById("edu-rss2022stage1");l&&l.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML='<h1>The Rolling Scopes School <br>Курс JS Frontend разработка Stage1 <br>15 марта 2022 - 31 мая 2022</h1> <div class="article"> <div class="anchor" id="contents"></div> <h2>Содержание</h2> <div class="article__contents"> <a href="#stage1" class="contents__link">Stage 1</a> <a href="#week1" class="contents__link">Week 1</a> <a href="#week2" class="contents__link">Week 2</a> <a href="#week3" class="contents__link">Week 3</a> <a href="#week4" class="contents__link">Week 4</a> <a href="#week5" class="contents__link">Week 5</a> <a href="#week6" class="contents__link">Week 6</a> <a href="#week7" class="contents__link">Week 7</a> <a href="#week8" class="contents__link">Week 8</a> <a href="#week9" class="contents__link">Week 9</a> <a href="#week10" class="contents__link">Week 10</a> <a href="#week11" class="contents__link">Week 11</a> </div> </div> <article class="article"> <a href="https://github.com/rolling-scopes-school/tasks/tree/master/stage1">Программа stage1</a> <br>Приватный репозиторий Stage1 2022Q1 <a href="https://github.com/rolling-scopes-school/frontend200tb-JSFE2022Q1">frontend200tb-JSFE2022Q1</a> <br>Финальный проект Stage1 2022Q1 <a href="https://rolling-scopes-school.github.io/frontend200tb-JSFE2022Q1/shelter/pages/main/">shelter</a> <br>Макет в figma <a href="https://www.figma.com/file/Yk6EnbY63FyG2PJTFkJDMh/shelter">figma.com shelter</a> <br>Discord channel <a href="https://discord.com/channels/516715744646660106/1163507652719022080">Stage 1</a> <br>Учебная платформа <a href="https://app.rs.school/">app.rs.school</a> </article> <article class="article"> <div class="anchor" id="stage1"></div> <h2>Javascript Frontend 2022Q1 Stage 1</h2> <h3>Темы</h3> <ul> <li>Знакомство студентов с The Rolling Scopes и RSSchool.</li> <li>Git, GitHub, оформление commit и pull request.</li> <li>Верстка адаптивного макета.</li> <li>Core JS.</li> <li>Решения алгоритмических задач.</li> <li>DOM, DOM Events, Browser API.</li> <li>Проект Виртуальная клавиатура.</li> <li>Основы NodeJS.</li> <li>Webpack</li> <li>Проект Clean Code.</li> <li>Подготовка к собеседованию по основам HTML/CSS/JS/Алгоритмам.</li> <li>Время обучения: 11 недель <p>Формат: самообучение + вебинары + общение в Discord + задания проверяются кросс-чеком или автоматически</p> </li> </ul> <h3>Необходимые базовые знания</h3> <ul> <li>Понимание основ HTML и CSS, наличие практических навыков вёрстки</li> <li>Знание основ JavaScript (типы данных, операторы, циклы, условные констуркции, функции)</li> <li>Знание структуры данных и их организации (массив, список, стек, очередь, дерево и т.д.).</li> <li>Уметь реализовать достаточно простой алгоритм на языке программирования JavaScript. Например, сортировку или поиск элементов массива.</li> <li>Уметь решать задачи уровня 8-7 kyu на сайте <a href="https://www.codewars.com/" rel="nofollow">https://www.codewars.com/</a></li> <li>(Желательно) Английский язык уровня Pre-intermediate. <a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/materials/english.md">Наши рекомедации</a></li> </ul> </article> <article class="article"> <div class="anchor" id="week1"></div> <h3>Неделя #1 (15 марта 2022)</h3> <ul> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/rs-school-intro">Модуль "Знакомство с RS School"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/js-fe-developer">Модуль "Профессия "JS/Front-end разработчик""</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/basic-tools">Модуль "Chrome Dev Tools, VS Code, Terminal"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/git">Модуль "Знакомство с системой контроля версий Git"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/tasks/cv/git-markdown.md">"Проект CV". Часть 1 "Markdown & Git"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/tasks/cv/html-css-git.md">"Проект CV". Часть 2 "HTML, CSS & Git Basics"</a></li> </ul> </article> <article class="article"> <div class="anchor" id="week2"></div> <h3>Неделя #2 (29 марта 2022)</h3> <ul> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/js-basics">Модуль: "JavaScript. Типы данных"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/functions">Модуль: "JavaScript. Область видимости и функции</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/js-evolution">Модуль: "JavaScript. Evolution"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/tasks/codewars/Codewars1-2022Q1.md">Задачи "Codewars1"</a></li> <li>Тесты: <p>Test HTML Basics</p> <p>Test CSS Basics</p> </li> </ul> </article> <article class="article"> <div class="anchor" id="week3"></div> <h3>Неделя #3 (5 апреля 2022)</h3> <ul> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/css-positioning">Модуль "Позиционирование в CSS. Flex."</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/css-grid">Модуль "CSS grid layout"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/figma">Модуль "Figma"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/sass">Модуль: CSS Preprocessors. Sass</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/stream1/shelter">Проект "Shelter"</a></li> </ul> </article> <article class="article"> <div class="anchor" id="week4"></div> <h3>Неделя #4 (12 апреля 2022)</h3> <ul> <li><a href="https://docs.rs.school/#/cross-check-flow" rel="nofollow">Кросс-чек проверка</a> проекта <a href="/rolling-scopes-school/tasks/blob/master/stage1/stream1/shelter#%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D1%8F-1">"Shelter. Part#1"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/responsive-web-design">Модуль: "Вёрстка адаптивного макета"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/media-queries">Модуль: "Медиазапросы"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/stream1/shelter#%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D1%8F-2">Проект: "Shelter. Part#2. Адаптивная вёрстка"</a></li> </ul> </article> <article class="article"> <div class="anchor" id="week5"></div> <h3>Неделя #5 (19 апреля 2022)</h3> <ul> <li><a href="https://docs.rs.school/#/cross-check-flow" rel="nofollow">Кросс-чек проверка</a> проекта <a href="/rolling-scopes-school/tasks/blob/master/stage1/stream1/shelter#%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D1%8F-2">"Shelter. Part#2"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/html-form">Модуль: "HTML Forms & Validation"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/dom-api">Модуль: "DOM API"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/events">Модуль: "Events"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/stream1/shelter#%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D1%8F-3">Проект "Shelter. DOM & Browser API"</a></li> </ul> </article> <article class="article"> <div class="anchor" id="week6"></div> <h3>Неделя #6 (26 апреля 2022)</h3> <ul> <li><a href="https://docs.rs.school/#/cross-check-flow" rel="nofollow">Кросс-чек проверка</a> проекта <a href="/rolling-scopes-school/tasks/blob/master/stage1/stream1/shelter#%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D1%8F-3">"Shelter. DOM & Browser API"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/chrome-devtools">Модуль: "Chrome DevTools"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/data-structures">Модуль "Алгоритмы и Структуры Данных"</a></li> </ul> </article> <article class="article"> <div class="anchor" id="week7"></div> <h3>Неделя #7 (3 мая 2022)</h3> <ul> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/modules-in-js">Модуль: "Modules in JS"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/webpack">Модуль: "Webpack"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/tasks/virtual-keyboard/virtual-keyboard-en.md">Проект: Виртуальная клавиатура</a></li> </ul> </article> <article class="article"> <div class="anchor" id="week8"></div> <h3>Неделя #8 (10 мая 2022)</h3> <ul> <li><a href="https://docs.rs.school/#/cross-check-flow" rel="nofollow">Кросс-чек проверка</a> проекта <a href="/rolling-scopes-school/tasks/blob/master/tasks/virtual-keyboard/virtual-keyboard-en.md">"Виртуальная клавиатура"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/tasks/css-mem-slider">Проект "CSS Meme Slider"</a></li> <li><a href="https://github.com/rolling-scopes-school/tasks/tree/master/stage1/modules/client-server">Модуль: "Client - Server interaction overview"</a></li> </ul> </article> <article class="article"> <div class="anchor" id="week9"></div> <h3>Неделя #9 (17 мая 2022)</h3> <ul> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/node-materials">Модуль: "Node.js"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/html-builder">Проект "HTML-Builder"</a></li> <li><a href="https://docs.rs.school/#/cross-check-flow" rel="nofollow">Кросс-чек проверка</a> проекта "CSS Meme Slider"</li> </ul> </article> <article class="article"> <div class="anchor" id="week10"></div> <h3>Неделя #10 (24 мая 2022)</h3> <ul> <li><a href="https://docs.rs.school/#/cross-check-flow" rel="nofollow">Кросс-чек проверка</a> проекта <a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/html-builder">"HTML-Builder"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/git-recap">Модуль: Git Recap</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/clean-code">Модуль: Clean Code</a></li> <li>Выполнить задание <a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/clean-code/clean-code-s1e1.md">\'Clean Code S1E1\'</a></li> </ul> </article> <article class="article"> <div class="anchor" id="week11"></div> <h3>Неделя #11 (31 мая 2022)</h3> <ul> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/self-introduction">Проект "Self-introduction"</a></li> <li>Подготовка к собеседованию с ментором</li> </ul> </article> '}));var n=document.getElementById("edu-rss2022stage3angular");n&&n.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML='<h1>The Rolling Scopes School Angular <br>21 марта 2022 - 16 мая 2022</h1> <div class="article"> <div class="anchor" id="contents"></div> <h2>Содержание</h2> <div class="article__contents"> <a href="#angular" class="contents__link">Angular</a> <a href="#week1" class="contents__link">Week 1</a> <a href="#week2" class="contents__link">Week 2</a> <a href="#week3" class="contents__link">Week 3</a> <a href="#week4" class="contents__link">Week 4</a> </div> </div> <article class="article"> <div class="anchor" id="angular"></div> <h2>Программа курса Angular</h2> <ul> <li> <a href="https://github.com/rolling-scopes-school/tasks/tree/master/angular">Программа Angular</a> <br>Приватный репозиторий Angular <a href="https://github.com/frontend200tb/youtube-client">youtube-client</a> <br><a href="https://www.figma.com/">figma.com</a> </li> </ul> <ul> <li>Зачисляются студенты успешно закончившие stage#2</li> <li>Темы: <p>- TypeScript</p> <p>- Components</p> <p>- Directives & Pipes</p> <p>- Modules & Services, Dependency injection</p> <p>- Routing</p> <p>- RxJS & Observables</p> <p>- HTTP</p> <p>Forms</p> <p>Redux & NgRx</p> <p>Unit test</p> </li> <li>Время обучения: 8 недель. Вам потребуется около 20-40 часов в неделю</li> <li>Формат: Записи всех вебинаров можно найти на нашем канале - <a href="https://youtube.com/c/rollingscopesschool" rel="nofollow">YouTube</a>.</li> <li>Теоретический материал предоставляется в виде записей лекций с предыдущих наборов. Онлайн лекции будут проходить в виде практических занятий (воркшопов). Перед каждым воркшопом нужно будет просмотреть лекцию с теорией на соответствующую тему.На воркшопе лекторы будут отвечать на Ваши вопросы (желательно готовить вопросы заранее) и будут показывать как применить полученные знания на практике.</li> </ul> <h2>Программа обучения</h2> <h3>Неделя #1 (21 марта 2022)</h3> <ul> <li><a href="/rolling-scopes-school/tasks/blob/master/angular/modules/intro">Модуль "Angular intro. TypeScript"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/angular/modules/components">Модуль "Angular. Components"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/angular/modules/directives-and-pipes">Модуль "Angular. Directives & Pipes"</a></li> </ul> <h3>Неделя #2 (28 марта 2022)</h3> <ul> <li>Task review "Angular intro"</li> <li><a href="/rolling-scopes-school/tasks/blob/master/angular/modules/modules-and-services">Модуль: "Angular. Modules & Services, Dependency injection"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/angular/modules/routing">Модуль: "Angular. Routing"</a></li> <li>Воркшоп</li> </ul> <h3>Неделя #3 (4 апреля 2022)</h3> <ul> <li>Task review "Angular. Components, Directives, Pipes"</li> <li><a href="/rolling-scopes-school/tasks/blob/master/angular/modules/rxjs">Модуль "RxJS & Observables"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/angular/modules/http">Модуль "Angular. HTTP"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/angular/modules/forms">Модуль "Angular. Forms"</a></li> <li>Воркшоп</li> </ul> <h3>Неделя #4 (11 апреля 2022)</h3> <ul> <li>Task review "Angular.Modules, Services, Routing"</li> <li><a href="/rolling-scopes-school/tasks/blob/master/angular/modules/redux">Модуль: "Angular. Redux & NgRx"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/angular/modules/unit-test">Модуль: "Angular. Unit test."</a></li> <li>Воркшоп</li> </ul> <h3>Неделя #5-8 (18 апреля 2022 - 16 мая 2022)</h3> <ul> <li>Task review "Angular. RxJS & HTTPClient & NgRx & Forms"</li> <li>Итоговый тест по Angular</li> <li>Воркшоп</li> <li><a href="https://github.com/rolling-scopes-school/tasks/tree/master/tasks/project-management-application">Финальное задание "Project management application"</a></li> </ul> <h3>Неделя #9 (16 мая 2022)</h3> <ul> <li><a href="https://docs.rs.school/#/cross-check-flow" rel="nofollow">Кросс-чек проверка</a> финального задания <a href="https://github.com/rolling-scopes-school/tasks/tree/master/tasks/project-management-application">"Project management application"</a></li> </ul> <h3>Дополнительная информация</h3> <h3>Сертификат</h3> <ul> <li>Чтобы получить сертификат о прохождении курса вам необходимо выполнить все домашние задания, пройти итоговый тест, выполнить финальный таск и участвовать в кросс-чеке.</li> <li>Наличие или отсутствие сертификата о прохождении курса является приятным бонусом и наградой за ваши труды.</li> </ul> <h3>FAQ</h3> <h3>Где можно задать вопрос?</h3> <ul> <li>Вопросы можно задать в Discord чате - <a href="https://discord.gg/Y6q4paRw4e" rel="nofollow">https://discord.gg/Y6q4paRw4e</a></li> </ul> <h3>Где происходит общение?</h3> <ul> <li>В Discord чате - <a href="https://discord.gg/Y6q4paRw4e" rel="nofollow">https://discord.gg/Y6q4paRw4e</a></li> </ul> </article> <article class="article"> <div class="anchor" id="week1"></div> <h2>Неделя #1 (21 марта 2022)</h2> <h2>Angular schedule. Intro. TypeScript</h2> <h2>В данном модуле студентам необходимо</h2> <ul> <li>Общие сведения об <code>Angular</code>.</li> <li>Что такое <code>Angular-cli</code>.</li> <li>Компиляция приложения. <code>Angular Ivy</code>.</li> <li>Обработка событий в Angular.</li> <li>Основы <code>Typescript</code>.</li> </ul> <h2>Приблизительное время прохождения модуля</h2> <ul> <li> теория - 3 часа </li> <li> задание - 2 часа </li> </ul> <h2>Теория</h2> <ul> <li><a href="https://youtu.be/HoUq9xyfCAk" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Angular 2020Q1. Intro</a></li> <li><a href="https://youtu.be/VeDh-lBCgh0" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Angular 2021Q1. Intro</a></li> <li><a href="https://github.com/Pulya10c/angular-lectures-2021/tree/master/ts-intro/src">Примеры из видео</a></li> <li><a href="https://slides.com/alehserhyienia/angular-intro-typescript" rel="nofollow">Слайды</a></li> </ul> <h2>Практическое задание</h2> <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/angular/intro.md">Angular intro</a></li> <li>Ментор: Aleh Serhiyenia</li> </ul> <h2>Дополнительные материалы</h2> <ul dir="auto"> <li><a href="https://www.typescriptlang.org/docs/home.html" rel="nofollow">TypeScript Documentation</a></li> <li><a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html" rel="nofollow">Everyday Types</a></li> <li><a href="https://www.typescriptlang.org/play/index.html" rel="nofollow">Online editor for TS</a></li> <li><a href="https://cli.angular.io/" rel="nofollow">CLI Overview and Command Reference</a></li> <li><a href="https://angular.io/tutorial" rel="nofollow">Tour of Heroes app and tutorial</a></li> <li><a href="https://angular24.ru/start" rel="nofollow">Начало работы с Angular: Ваше первое приложение</a></li> </ul> <h1>Angular schedule. Components.</h1> <h2>В данном модуле студентам необходимо:</h2> <ul> <li>Базовая структура приложения.</li> <li>Что такое <code>Components</code>, шаблоны.</li> <li>Двухсторонее связывание.</li> <li>Жизненный цикл <code>Components</code>.</li> <li>Взаимодействие <code>Components</code>.</li> <li>Создание и использование <code>Components</code> в приложении.</li> </ul> <h2>Приблизительное время прохождения модуля</h2> <ul> <li> Теория: 2 часа </li> <li> задание: 2 часа </li> </ul> <h2>Теория</h2> <ul> <li>Лекции: <p><a href="https://youtu.be/rY_FWXmh4QI" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Angular 2020Q1. Components</a></p> <p><a href="https://youtu.be/M9ywugN1iDE" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Angular 2020Q3. Components</a></p> <p><a href="https://youtu.be/oOR3NpA02HI" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Angular 2021Q1. Components</a></p> </li> <li><a href="https://github.com/Pulya10c/angular-lectures-2021/tree/master/angular-components/src">Примеры из видео</a></li> <li>Слайды: <p><a href="https://slides.com/pavelrazuvalau/angular-components" rel="nofollow">Angular 2020Q1. Components</a></p> <p><a href="https://slides.com/dzianis_davydau/components" rel="nofollow">Angular 2021Q1. Components</a></p> </li> </ul> <h2>Практическое задание</h2> <ul dir="auto"> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/angular/components-directives-pipes.md">Angular. Components</a></li> <li>Ментор: Aleh Serhiyenia</li> </ul> <h2>Дополнительные материалы</h2> <h3>English version</h3> <ul> <li><a href="https://angular.io/tutorial/toh-pt1" rel="nofollow">The hero editor</a></li> <li><a href="https://angular.io/tutorial/toh-pt2" rel="nofollow">Display a selection list</a></li> <li><a href="https://angular.io/tutorial/toh-pt3" rel="nofollow">Create a feature component</a></li> <li><a href="https://angular.io/guide/architecture-components" rel="nofollow">Introduction to components and templates</a></li> <li><a href="https://angular.io/guide/displaying-data" rel="nofollow">Getting started with Angular</a></li> <li><a href="https://angular.io/guide/template-syntax" rel="nofollow">Template syntax</a></li> <li><a href="https://angular.io/guide/lifecycle-hooks" rel="nofollow">Lifecycle hooks</a></li> <li><a href="https://angular.io/guide/component-interaction" rel="nofollow">Component interaction</a></li> </ul> <h3>Russian version</h3> <ul> <li><a href="https://angular24.ru/tutorial/toh-pt1" rel="nofollow">Редактор героев</a></li> <li><a href="https://angular24.ru/tutorial/toh-pt2" rel="nofollow">Показать список выбора</a></li> <li><a href="https://angular24.ru/tutorial/toh-pt3" rel="nofollow">Создать компонент компонента</a></li> <li><a href="https://angular24.ru/guide/architecture-components" rel="nofollow">Введение в компоненты</a></li> <li><a href="https://angular24.ru/guide/displaying-data" rel="nofollow">Отображение данных в представлениях</a></li> <li><a href="https://angular24.ru/guide/template-syntax" rel="nofollow">Синтаксис шаблона</a></li> <li><a href="https://angular24.ru/guide/lifecycle-hooks" rel="nofollow">Хуки жизненного цикла</a></li> </ul> <h1><a href="/rolling-scopes-school/tasks/blob/master/angular">Angular schedule.</a> Directives & Pipes.</h1> <h2>В данном модуле студентам необходимо:</h2> <ul> <li>Базовые знания о <code>Directives</code>. Понятие Атрибутивных и Структурных <code>Directives</code>. Встроенные <code>Directives</code>.</li> <li>Создание <code>Directives</code>.</li> <li>Понятие <code>Decorators</code> и взаимодействие с пользователем с помощью <code>Directives</code>.</li> <li>Базовые знания о <code>Pipes</code>. Параметры. Цепочки <code>Pipe</code>. Встроенные <code>Pipe</code>.</li> <li>Создание <code>Pipe</code>.</li> </ul> <h2>Приблизительное время прохождения модуля</h2> <ul> <li> теория - 3 часа </li> <li> практика - 3 часа </li> </ul> <h2>Теория</h2> <ul> <li>Лекции: <p><a href="https://youtu.be/S7TKY7hfWa0" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Angular 2020Q1. Directives & Pipes</a></p> <p><a href="https://youtu.be/RLI6AGKwVcA" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Angular 2021Q1. Directives & Pipes</a></p> </li> <li><a href="https://github.com/pavelrazuvalau/angular-lectures/tree/master/angular-directives-pipes/src">Примеры из видео</a></li> <li><a href="https://slides.com/pavelrazuvalau/angular-directives-pipes" rel="nofollow">Слайды</a></li> </ul> <h2>Практическое задание</h2> <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/angular/components-directives-pipes.md">Angular. Directives & Pipes</a></li> <li>Ментор: Aleh Serhiyenia</li> </ul> <h2>Дополнительные материалы</h2> <ul> <li><a href="https://angular.io/api/core/Directive" rel="nofollow">Directive</a></li> <li><a href="https://angular.io/guide/attribute-directives" rel="nofollow">Attribute directives</a></li> <li><a href="https://angular.io/guide/structural-directives" rel="nofollow">Writing structural directives</a></li> <li><a href="https://angular.io/api/core/Pipe" rel="nofollow">Pipe</a></li> <li><a href="https://angular.io/guide/pipes" rel="nofollow">Transforming Data Using Pipes</a></li> <li><a href="https://angular.io/api/common" rel="nofollow">@angular/common</a></li> <li><a href="https://angular.io/guide/cheatsheet" rel="nofollow">Cheat Sheet</a></li> </ul> </article> <article class="article"> <div class="anchor" id="week2"></div> <h1>Неделя #2 (28 марта 2022)</h1> <h1><a href="/rolling-scopes-school/tasks/blob/master/angular">Angular schedule.</a> Modules & Services</h1> <h2>В данном модуле студентам необходимо:</h2> <ul> <li>Что такое модули, зачем они нужны, как их использовать.</li> <li><code>CoreModule</code> и <code>SharedModule</code>.</li> <li>Понятие <code>Services</code>, их задачи.</li> <li>Понятие <code>Dependency injection</code>, что это и как его использовать.</li> </ul> <h2>Приблизительное время прохождения модуля</h2> <ul> <li> теория - 2 часа </li> <li> практика - 2 часа </li> </ul> <h2>Теория</h2> <ul dir="auto"> <li>Лекции: <p><a href="https://youtu.be/t4LuNI9HCMM" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Angular 2020Q1. Modules & Services</a></p> <p><a href="https://youtu.be/hTwLchuRz1Q" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Angular 2020Q3. Modules, services, DI</a></p> <p><a href="https://youtu.be/3l8kUDM1naQ" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Angular 2021Q1. Modules, services, DI (part 1)</a></p> <p><a href="https://youtu.be/LS6HfpoCPhQ" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Angular 2021Q1. Modules, services, DI (part 2)</a></p> </li> <li><a href="https://github.com/pavelrazuvalau/angular-lectures/tree/master/angular-modules-services">Примеры из видео</a></li> <li>Слайды: <p><a href="https://slides.com/pavelrazuvalau/angular-modules-services" rel="nofollow">Angular 2020Q1. Modules & Services</a></p> <p><a href="https://slides.com/dzianis_davydau/modules-services-di" rel="nofollow">Angular 2021Q1. Modules, services, DI</a></p> </li> </ul> <h2>Практическое задание</h2> <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/angular/modules-services-routing.md">Angular. Modules & Services</a></li> <li>Ментор: Aleh Serhiyenia</li> </ul> <h2>Дополнительные материалы</h2> <ul> <li><a href="https://angular.io/tutorial/toh-pt4" rel="nofollow">Add services</a></li> <li><a href="https://angular.io/guide/architecture-modules" rel="nofollow">Introduction to modules</a></li> <li><a href="https://angular.io/guide/ngmodules" rel="nofollow">NgModules</a></li> <li><a href="https://angular.io/guide/ngmodule-faq" rel="nofollow">NgModule FAQ</a></li> <li><a href="https://angular.io/guide/architecture-services" rel="nofollow">Introduction to services and dependency injection</a></li> <li><a href="https://angular.io/guide/dependency-injection" rel="nofollow">Dependency injection in Angular</a></li> <li><a href="https://angular.io/guide/dependency-injection-providers" rel="nofollow">Dependency providers</a></li> <li><a href="https://angular.io/guide/dependency-injection-in-action" rel="nofollow">Dependency injection in action</a></li> <li><a href="https://www.freelancermap.com/freelancer-tips/12255-forroot-forchild-angular" rel="nofollow">Using forRoot() and forChild()</a></li> <li><a href="https://angular24.ru/tutorial/toh-pt4" rel="nofollow">Создать HeroService</a></li> </ul> <h1><a href="/rolling-scopes-school/tasks/blob/master/angular">Angular schedule.</a> Routing</h1> <h2>В данном модуле студентам необходимо изучить:</h2> <ul> <li>Основы маршрутизации.</li> <li>Директива RouterOutlet.</li> <li>Множественная маршрутизация. Маршруты с параметрами.</li> <li><code>Router guards</code></li> <li>Асинхронная загрузка.</li> </ul> <h2>Приблизительное время прохождения модуля</h2> <ul> <li> теория - 1.5 часа </li> <li> практика - 1 час </li> </ul> <h2>Теория</h2> <ul> <li>Лекции: <p><a href="https://youtu.be/t_bGVB6jzUw" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Angular 2020Q1. Routing</a></p> <p><a href="https://youtu.be/Evhr5xb_qNY" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Angular 2020Q3. Routing</a></p> <p><a href="https://youtu.be/AFPb7JjQgCw" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Angular 2021Q1. Routing</a></p> </li> <li><a href="https://github.com/pavelrazuvalau/angular-lectures/tree/master/angular-routing">Примеры из видео</a></li> <li><a href="https://slides.com/pavelrazuvalau/angular-routing" rel="nofollow">Слайды</a></li> </ul> <h2>Практическое задание</h2> <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/angular/modules-services-routing.md">Angular. Routing</a></li> <li>Ментор: Aleh Serhiyenia</li> </ul> <h2>Дополнительные материалы</h2> <ul> <li><a href="https://angular.io/tutorial/toh-pt5" rel="nofollow">Add navigation with routing</a></li> <li><a href="https://angular.io/guide/router" rel="nofollow">Common Routing Tasks</a></li> <li><a href="https://angular.io/api/router" rel="nofollow">@angular/router</a></li> <li><a href="https://angular.io/api/router/RouterLinkActive" rel="nofollow">RouterLinkActive</a></li> <li><a href="https://angular.io/api/router/ActivatedRoute" rel="nofollow">ActivatedRoute</a></li> <li><a href="https://angular.io/api/router/Resolve" rel="nofollow">Resolve</a></li> <li><a href="https://angular24.ru/tutorial/toh-pt5" rel="nofollow">Добавить в приложение навигации с маршрутизацией</a></li> </ul> </article> <article class="article"> <div class="anchor" id="week3"></div> <h1>Неделя #3 (4 апреля 2022)</h1> <h1><a href="/rolling-scopes-school/tasks/blob/master/angular">Angular schedule.</a> RxJS</h1> <h2>В данном модуле студентам необходимо изучить:</h2> <ul> <li>Принципы реактивного программирования для <code>JavaScript</code>.</li> <li><code>Observable</code>. <code>Subject</code>. Операторы <code>RxJS</code>.</li> </ul> <h2>Приблизительное время прохождения модуля</h2> <ul> <li> теория - 1 часа </li> <li> практика - 1 час </li> </ul> <h2>Теория</h2> <ul> <li><a href="https://youtu.be/m-VvhFksSwQ" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Creation</a></li> <li><a href="https://youtu.be/ACD08YMduIk" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Error handling</a></li> <li><a href="https://youtu.be/U4VDE7pSAKs" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Observable & Promise</a></li> <li><a href="https://youtu.be/Yk-mUdEtcOw" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Observable & Array</a></li> <li><a href="https://youtu.be/o3D3l3N7FV0" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Observable Combination</a></li> <li><a href="https://youtu.be/88grqF9ZSjU" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Hot & Cold</a></li> <li><a href="https://youtu.be/uXaMBTsuTbQ" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Лекция RxJS & Observables (видео)</a></li> <li><a href="https://slides.com/anton_bely/rxjs" rel="nofollow">Примеры из видео</a></li> <li><a href="https://slides.com/pavelrazuvalau/angular-routing" rel="nofollow">Слайды</a></li> </ul> <h2>Практическое задание</h2> <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/angular/rxjs-observables-http.md">Angular. RxJS & Observables</a></li> <li>Ментор: Aleh Serhiyenia</li> </ul> <h2>Дополнительные материалы</h2> <ul> <li><a href="https://rxjs-dev.firebaseapp.com/api" rel="nofollow">#BLACKLIVESMATTER</a></li> <li><a href="http://rxmarbles.com/" rel="nofollow">RxJS Marbles</a></li> <li><a href="https://www.learnrxjs.io/" rel="nofollow">Learn RxJS</a></li> <li><a href="https://www.npmjs.com/package/rxjs" rel="nofollow">Reactive Extensions For JavaScript</a></li> </ul> <h1><a href="/rolling-scopes-school/tasks/blob/master/angular">Angular schedule.</a> Http</h1> <h2>В данном модуле студентам необходимо</h2> <ul> <li>Модуль <code>HttpClientModule</code>.</li> <li>Объект <code>HttpTypeEvent</code>.</li> <li>Перехват HTTP-запросов с помощью <code>Http Interceptor</code>.</li> </ul> <h2>Приблизительное время прохождения модуля</h2> <ul> <li> теория - 1 часа </li> <li> задание - 1 часа </li> </ul> <h2>Теория</h2> <ul> <li>Лекции: <p><a href="https://youtu.be/2LVepjuFjHw" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Angular 2020Q1. HTTP</a></p> <p><a href="https://youtu.be/jPvn4d6DrCg" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Angular 2021Q3. HTTPClient</a></p> <p><a href="https://youtu.be/7RkNSWZDNEE" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Angular 2021Q1. HTTPClient</a></p> </li> <li><a href="https://github.com/pavelrazuvalau/angular-lectures/tree/master/angular-http">Примеры из видео (часть 1)</a></li> <li><a href="https://github.com/pavelrazuvalau/angular-courses-app">Примеры из видео (часть 2)</a></li> <li><a href="https://slides.com/pavelrazuvalau/angular-http" rel="nofollow">Слайды Angular 2020Q1. HTTP</a></li> <li><a href="https://slides.com/dzianis_davydau/http-client" rel="nofollow">Слайды Angular 2021Q1. HTTPClient</a></li> </ul> <h2>Практическое задание</h2> <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/angular/rxjs-observables-http.md">Angular. HTTPClient</a></li> <li>Ментор: Aleh Serhiyenia</li> </ul> <h2>Дополнительные материалы</h2> <ul> <li><a href="https://angular.io/tutorial/toh-pt6" rel="nofollow">Get data from a server</a></li> <li><a href="https://angular.io/guide/http" rel="nofollow">Communicating with backend services using HTTP</a></li> <li><a href="https://angular.io/api/common/http" rel="nofollow">@angular/common/http</a></li> <li><a href="https://angular.io/api/common/http/HttpClient" rel="nofollow">HttpClient</a></li> <li><a href="https://angular.io/api/common/http/HttpResponse" rel="nofollow">HttpResponse</a></li> <li><a href="https://angular.io/api/common/http/HttpHeaders" rel="nofollow">HttpHeaders</a></li> <li><a href="https://angular.io/api/common/http/HttpParams" rel="nofollow">HttpParams</a></li> </ul> <h1><a href="/rolling-scopes-school/tasks/blob/master/angular">Angular schedule.</a> Forms.</h1> <h2>В данном модуле студентам необходимо:</h2> <ul> <li>Базовые знания о <code>Forms</code>. Понятие шаблонных и реактивных <code>Forms</code>. Встроенные <code>Directives</code>.</li> <li>Создание <code>Forms</code>.</li> <li>Что такое валидаторы и зачем они нужны. Синхронные и асинхронные валидаторы</li> <li>Создание собственных валидаторов.</li> <li>Конструктор форм - <code>FormGroup</code>, <code>FormControl</code>, <code>FormArray</code>.</li> </ul> <h2>Приблизительное время прохождения модуля</h2> <ul> <li> теория - 4 часа </li> <li> практика - 4 часа </li> </ul> <h2>Теория</h2> <ul> <li>Лекции: <p><a href="https://www.youtube.com/watch?v=t6kyXkl5qNw" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Angular. Forms</a></p> <p><a href="https://www.youtube.com/watch?v=I_1fm5wx7_4" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Angular Georgia. Forms</a></p> </li> <li><a href="https://slides.com/pavelrazuvalau/angular-forms" rel="nofollow">Слайды</a></li> </ul> <h2>Практическое задание</h2> <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/angular/forms.md">Angular. Forms</a></li> <li>Ментор: Aleh Serhiyenia</li> </ul> <h2>Дополнительные материалы</h2> <ul> <li><a href="https://angular.io/start/forms" rel="nofollow">Using forms for user input</a></li> <li><a href="https://angular.io/guide/reactive-forms" rel="nofollow">Reactive forms</a></li> <li><a href="https://angular.io/guide/forms" rel="nofollow">Building a template-driven form</a></li> <li><a href="https://blog.angular-university.io/introduction-to-angular-2-forms-template-driven-vs-model-driven/" rel="nofollow">Angular Forms Guide</a></li> </ul> </article> <article class="article"> <div class="anchor" id="week4"></div> <h1>Неделя #4 (11 апреля 2022)</h1> <h1><a href="/rolling-scopes-school/tasks/blob/master/angular">Angular schedule.</a> Redux & NgRx.</h1> <h2>В данном модуле студентам необходимо:</h2> <ul> <li>О библиотеке <code>NgRx</code></li> <li>Управление состоянием хранилища. <code>Store</code>, <code>Actions</code>, <code>Reducers</code>, <code>Selectors</code>.</li> <li>Использование <code>Effects</code>.</li> <li>Преимущества <code>NgRx</code>.</li> </ul> <h2>Приблизительное время прохождения модуля</h2> <ul> <li> теория - 6 часов </li> <li> практика - 4 часа </li> </ul> <h2>Теория</h2> <ul> <li>Лекции: <p><a href="https://youtu.be/-8APehOVRLM" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Angular 2020Q1. Redux & NgRx</a> </p> <p><a href="https://youtu.be/d2pkNhIS10o" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Angular 2020Q3. NgRX</a> </p> <p><a href="https://youtu.be/Yqtwmyn9YKE" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Angular 2021q1. NgRx</a> </p> </li> <li><a href="https://drive.google.com/file/d/19m1kRSflNEVb7Z5zZRRPwVcFcu1oA54h/view?usp=sharing" rel="nofollow">Слайды</a></li> </ul> <h2>Практика</h2> <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/angular/NgRX.md">Angular. NgRx</a></li> <li>Ментор: Aleh Serhiyenia</li> </ul> <h2>Дополнительные материалы</h2> <ul> <li><a href="https://youtu.be/JWNVU-n7-6M" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Motivation</a> </li> <li><a href="https://youtu.be/2zPnr-8X2f8" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Architecture</a> </li> <li><a href="https://youtu.be/nzjWE0Xy7eU" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Selectors</a> </li> <li><a href="https://youtu.be/8sLdUYEI3gk" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Router State</a> </li> <li><a href="https://youtu.be/EErZhuYrETA" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Effects</a> </li> </ul> <h1><a href="/rolling-scopes-school/tasks/blob/master/angular">Angular schedule.</a> Unit test</h1> <h2>В данном модуле студентам необходимо изучить:</h2> <ul> <li>Структура теста.</li> <li>Тестирование компонентов с помощью <code>TestBed</code>.</li> <li>Тестирование компонентов с подходом <code>Test host</code>.</li> <li>Тестирование вложенных компонентов.</li> </ul> <h2>Приблизительное время прохождения модуля</h2> <ul> <li> теория - 2 часа </li> <li> практика - 1 час </li> </ul> <h2>Теория</h2> <ul> <li><a href="https://youtu.be/MSXCNHrmk9U" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Лекция (видео)</a> </li> <li><a href="https://github.com/pavelrazuvalau/angular-lectures/tree/master/angular-unit-testing">Примеры из видео</a></li> <li><a href="https://slides.com/pavelrazuvalau/angular-unit-testing" rel="nofollow">Слайды</a></li> </ul> <h2>Практическое задание</h2> <ul> <li>Написать юнит тесты к вашему приложению. Обязательно протестировать: <p>один любой сервис</p> <p>несколько компонент: <br>- с подключенным сервисом <br>- внутри которых используются другие компоненты, пайпы, директивы </p> <p>directive</p> </li> <li>Ментор: Aleh Serhiyenia</li> </ul> <h2>Дополнительные материалы</h2> <ul> <li><a href="https://angular.io/guide/testing" rel="nofollow">Testing</a></li> <li><a href="https://www.kenneth-truyers.net/2012/12/15/key-qualities-of-a-good-unit-test/" rel="nofollow">Key qualities of a good unit test</a></li> <li><a href="https://www.youtube.com/watch?v=Eu35xM76kKY" rel="nofollow" savefrom_lm_index="0" savefrom_lm="1">Unit testing in JavaScript</a> </li> <li><a href="https://github.com/stas-dolgachov/angular-testing-lecture">Code angular-testing-lecture</a></li> </ul> </article> '}));var s=document.getElementById("edu-rss2023stage0");s&&s.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML=gt}));var c=document.getElementById("edu-rss2023stage1");c&&c.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML='<h1>The Rolling Scopes School <br>Курс JS Frontend разработка Stage1 <br>5 ноября 2023 - 12 февраля 2024</h1> <div class="article"> <div class="anchor" id="contents"></div> <h2>Содержание</h2> <div class="article__contents"> <a href="#stage1" class="contents__link">Stage 1</a> <a href="#week1" class="contents__link">Week 1</a> <a href="#week2" class="contents__link">Week 2</a> <a href="#week3" class="contents__link">Week 3</a> <a href="#week4" class="contents__link">Week 4</a> <a href="#week5" class="contents__link">Week 5</a> <a href="#week6" class="contents__link">Week 6</a> <a href="#week7" class="contents__link">Week 7</a> <a href="#week8" class="contents__link">Week 8</a> <a href="#week9" class="contents__link">Week 9</a> <a href="#week10" class="contents__link">Week 10</a> <a href="#week11" class="contents__link">Week 11</a> <a href="#week12" class="contents__link">Week 12</a> <a href="#video" class="contents__link">Video</a> </div> </div> <article class="article"> <a href="https://github.com/rolling-scopes-school/tasks/tree/master/stage1">Программа stage1</a> <br>Приватный репозиторий Stage1 2023Q4 <a href="https://github.com/rolling-scopes-school/frontend200tb-JSFE2023Q4">frontend200tb-JSFE2023Q4</a> <br>Финальный проект Stage1 2023Q4 <a href="https://rolling-scopes-school.github.io/frontend200tb-JSFE2023Q4/coffee-house/">coffee house</a> <br>Макет в figma <a href="https://www.figma.com/file/SAoBmuOqTfguehdT4IFRxQ/Coffee-House?type=design&node-id=0-1&mode=design&t=qis81E9Ovgx47eVl-0">figma.com coffee house</a> <br>Discord channel <a href="https://discord.com/channels/516715744646660106/1163507652719022080">Stage 1</a> <br>Учебная платформа <a href="https://app.rs.school/">app.rs.school</a> </article> <article class="article"> <div class="anchor" id="stage1"></div> <h2>Javascript Frontend 2023Q4 Stage 1</h2> <h3>Темы</h3> <ul> <li>Знакомство студентов с The Rolling Scopes и RSSchool.</li> <li>Git, GitHub, оформление commit и pull request.</li> <li>Верстка адаптивного макета.</li> <li>Core JS.</li> <li>Решения алгоритмических задач.</li> <li>DOM, DOM Events, Browser API.</li> <li>Проект Виртуальная клавиатура.</li> <li>Основы NodeJS.</li> <li>Webpack</li> <li>Проект Clean Code.</li> <li>Подготовка к собеседованию по основам HTML/CSS/JS/Алгоритмам.</li> <li>Время обучения: 11 недель <p>Формат: самообучение + вебинары + общение в Discord + задания проверяются кросс-чеком или автоматически</p> </li> </ul> <h3>Необходимые базовые знания <ul> <li>Понимание основ HTML и CSS, наличие практических навыков вёрстки</li> <li>Знание основ JavaScript (типы данных, операторы, циклы, условные констуркции, функции)</li> <li>Знание структуры данных и их организации (массив, список, стек, очередь, дерево и т.д.).</li> <li>Уметь реализовать достаточно простой алгоритм на языке программирования JavaScript. Например, сортировку или поиск элементов массива.</li> <li>Уметь решать задачи уровня 8-7 kyu на сайте <a href="https://www.codewars.com/" rel="nofollow">https://www.codewars.com/</a></li> <li>(Желательно) Английский язык уровня Pre-intermediate. <a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/materials/english.md">Наши рекомедации</a></li> </ul> <h2>FAQ</h2> <h3>Что делать до старта обучения?</h3> <ol> <li>Выполнить задания и тесты <a href="/rolling-scopes-school/tasks/blob/master/stage0">подготовительного курса</a></li> <li>Пойти на курсы английского языка до получения уровня Pre-Intermediate (Минимум A2).</li> <li>Читать <a href="https://learn.javascript.ru/" rel="nofollow">https://learn.javascript.ru/</a></li> </ol> <h3>Какой учебник по JavaScript вы можете посоветовать?</h3> <ul> <li><a href="https://learn.javascript.ru/" rel="nofollow">https://learn.javascript.ru/</a></li> <li><a href="https://exploringjs.com/impatient-js/toc.html" rel="nofollow">https://exploringjs.com/impatient-js/toc.html</a></li> <li><a href="https://github.com/azat-io/you-dont-know-js-ru">https://github.com/azat-io/you-dont-know-js-ru</a></li> </ul> <h3>Где происходит общение?</h3> <ul> <li>В Discord чате - <a href="https://discord.gg/2Ww3TCBvz4" rel="nofollow">https://discord.gg/2Ww3TCBvz4</a></li> </ul> <h3>Где можно задать вопрос?</h3> <ul> <li>Вопросы можно задать в Discord чате - <a href="https://discord.gg/2Ww3TCBvz4" rel="nofollow">https://discord.gg/2Ww3TCBvz4</a></li> </ul> <h3>Имеет ли значения город проживания? Можно ли пройти курс полностью онлайн?</h3> <ul> <li>Город проживания значения не имеет. Все этапы обучения можно пройти онлайн.</li> </ul> <h3>Можно ли изучать учебные модули и делать проекты заранее?</h3> <ul> <li>Конечно! После прохождения всех модулей подготовительного этапа вы можете начать прохождение stage#2.</li> </ul> <h3>Можно ли пропускать вебинары?</h3> <ul> <li>Да, можно. Записи вебинаров можно будет найти на нашем канале - <a href="https://youtube.com/c/rollingscopesschool" rel="nofollow">YouTube</a> <br>Видео удобнее смотреть на скорости 1.25 или выше.</li> </ul> <h3>Обязательно ли смотреть вебинары школы?</h3> <ul> <li>Нет. Ссылки на рекомендуемую для изучения теорию находится в модулях. После самостоятельного изучения материалов модуля вы можете посмотреть вебинар, чтобы закрепить информацию или задать вопросы тренеру.</li> </ul> </h3></article> <article class="article"> <div class="anchor" id="week1"></div> <h3>Неделя #1 (7 ноября 2023) (15 марта 2022)</h3> <ul> <li>Modules: <ul> <li> <a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/rs-school-intro"> Module "Introduction to RS School" <br> (Модуль "Знакомство с RS School")</a> </li> <li> <a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/js-fe-developer"> Module "JS/Front-end Developer Profession" <br> (Модуль "Профессия JS/Front-end разработчик")</a> </li> <li> <a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/basic-tools"> Module "Chrome Dev Tools, VS Code, Terminal" <br> (Модуль "Chrome Dev Tools, VS Code, Terminal")</a> </li> <li> <a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/git"> Module "Getting to know version control system Git" <br> (Модуль "Знакомство с системой контроля версий Git")</a> </li> </ul> </li> <li>Tasks: <ul> <li> <a href="/rolling-scopes-school/tasks/blob/master/tasks/cv/git-markdown.md"> "CV Project". Part 1 "Markdown & Git" <br> ("Проект CV". Часть 1 "Markdown & Git")</a> </li> <li> <a href="/rolling-scopes-school/tasks/blob/master/tasks/cv/html-css-git.md"> "CV Project". Part 2 "HTML, CSS & Git Basics" <br> ("Проект CV". Часть 2 "HTML, CSS & Git Basics")</a> </li> </ul> </li> <li>Tests: <ul> <li>[St1] RSS Test</li> <li>[St1] Git test</li> <li>[St1] Fundamentals of the Internet</li> </ul> </li> </ul> </article> <article class="article"> <div class="anchor" id="week2"></div> <h3>Неделя #2 (14 ноября 2023) (29 марта 2022)</h3> <ul> <li>Modules: <ul> <li> <a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/js-basics"> Module: "JavaScript. JS-Basics" <br> (Модуль: "JavaScript. Типы данных")</a> </li> <li> <a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/functions"> Module: "JavaScript. Scope and functions" <br> (Модуль: "JavaScript. Область видимости и функции)</a> </li> <li> <a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/js-evolution"> Module: "JavaScript. Evolution" <br> (Модуль: "JavaScript. Evolution")</a> </li> </ul> </li> <li>Tasks: <ul> <li><a href="https://github.com/rolling-scopes-school/core-js-numbers">core-js-numbers</a></li> <li><a href="https://github.com/rolling-scopes-school/core-js-strings">core-js-strings</a></li> </ul> </li> <li>Tests: <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/js-basics">[St1] JS Basics</a></li> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/js-basics">[St1] JS Types</a></li> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/functions">[St1] JS Scope & Functions</a></li> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/js-evolution">[St1] JS Evolution</a></li> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage0/modules/html-basics">[St1] Test HTML Basics</a></li> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage0/modules/css-basics">[St1] Test CSS Basics</a></li> </ul> </li> </ul> </article> <article class="article"> <div class="anchor" id="week3"></div> <h3>Неделя #3 (21 ноября 2023) (5 апреля 2022)</h3> <ul> <li>Modules: <ul> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/css-positioning"> Module "CSS positioning. Flex." <br> (Модуль "Позиционирование в CSS. Flex.")</a> </li> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/css-grid"> Module "CSS grid layout" </a> </li> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/sass"> Module: CSS Preprocessors. Sass </a> </li> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/css-modules-and-new-features">Module: CSS Modules And Some CSS New Features</a></li> </ul> </li> <li>Tasks: <ul> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/coffee-house/coffee-house-week1.md">Coffee House. Week-1</a> </li> </ul> </li> <li>Tests: <ul> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/css-positioning">[St1] CSS Positioning & Flexbox</a> </li> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/css-grid">[St1] CSS grid</a> </li> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/sass">[St1] Preprocessors. SASS.</a> </li> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/css-modules-and-new-features">[St1] CSS Modules And Some CSS New Features</a> </li> </ul> </li> </ul> </article> <article class="article"> <div class="anchor" id="week4"></div> <h3>Неделя #4 (28 ноябрая 2023) (12 апреля 2022)</h3> <ul> <li>Cross-Check Reviews: <ul> <li>Cross-check review of project "Coffee House. Week-1"</li> </ul> </li> <li>Modules: <ul> <li> <a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/responsive-web-design"> Module: "Responsive Web Design" <br> Модуль: "Вёрстка адаптивного макета"</a> </li> <li> <a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/media-queries"> Module: "Media Queries" <br> Модуль: "Медиазапросы"</a> </li> </ul> </li><li>Tasks: <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/coffee-house/coffee-house-week2.md">Coffee House. Week-2</a></li> </ul> </li> <li>Tests: <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/media-queries">[St1] Media Queries & Responsive</a></li> </ul> </li>  </ul> </article> <article class="article"> <div class="anchor" id="week5"></div> <h3>Неделя #5 (5 декабря 2023) (19 апреля 2022)</h3> <ul> <li>Cross-Check Reviews: <ul> <li>Cross-check review of project "Coffee House. Week-2"</li> </ul> </li> <li>Modules: <ul> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/html-form">Module: "HTML Forms & Validation"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/dom-api">Module: "DOM API"</a></li> <li><a href="/rolling-scopes-school/tasks/blob/master/stage1/modules/events">Module: "Events"</a></li> </ul> </li><li>Tasks: <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/coffee-house/coffee-house-week3.md">Coffee House. Week-3</a></li> </ul> </li> <li>Tests: <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/html-form">[St1] HTML Form</a></li> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/dom-api">[St1] DOM Api</a></li> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/events">[St1] DOM Events</a></li> </ul> </li>  </ul> </article> <article class="article"> <div class="anchor" id="week6"></div> <h3>Неделя #6 (12 декабря 2023) (26 апреля 2022)</h3> <ul> <li>Cross-Check Reviews: <ul> <li>Cross-check review of project "Coffee House. Week-3"</li> </ul> </li> <li>Modules: <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/git-recap">Module: Git Recap</a></li> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/data-structures-and-algorithms">Module "Algorithms and Data Structures"</a></li> </ul> </li><li>Tasks: <ul> <li><a href="https://github.com/AlreadyBored/basic-js-ds">basic-js-ds</a></li> <li><a href="https://github.com/AlreadyBored/basic-js">basic-js</a></li> </ul> </li> <li>Tests: <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/git-recap">[St1] Git & GitHub #2</a></li> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/data-structures-and-algorithms">[St1] Test Algorithms & Data structures</a></li> </ul> </li>  </ul> </article> <article class="article"> <div class="anchor" id="week7"></div> <h3>Неделя #7 (2 января 2024) (3 мая 2022)</h3> <ul> <li>Modules: <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/clean-code">Module: Clean Code</a></li> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/linters-formatters-husky">Linters, Formatters, and Husky</a></li> </ul> </li><li>Tasks: <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/clean-code/clean-code-s1e1.md">\'Clean Code S1E1\'</a></li> <li><a href="https://github.com/rolling-scopes-school/core-js-conditions-n-loops-tasks">core-js-conditions-n-loops</a></li> <li><a href="https://github.com/rolling-scopes-school/core-js-arrays">core-js-arrays</a></li> </ul> </li> <li>Tests: <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/clean-code">[St1] Clean-Code</a></li> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/linters-formatters-husky">[St1] Linters, Formatters, and Husky</a></li> </ul> </li>  </ul> </article> <article class="article"> <div class="anchor" id="week8"></div> <h3>Неделя #8 (9 января 2024) (10 мая 2022)</h3> <ul> <li>Cross-Check Reviews: <ul> <li>Cross-check review of project "Clean Code S1E1"</li> </ul> </li> <li>Modules: <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/modules-in-js">Module: Modules in JS</a></li> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/bundlers">Module Bundlers</a></li> </ul> </li><li>Tasks: <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/tasks/hangman">Hangman</a></li> </ul> </li> <li>Tests: <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/modules-in-js">[St1] Modules in JS</a></li> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/bundlers">[St1] Introduction to Bundlers</a></li> </ul> </li>  </ul> </article> <article class="article"> <div class="anchor" id="week9"></div> <h3>Неделя #9 (16 января 2024) (17 мая 2022)</h3> <ul> <li>Cross-Check Reviews: <ul> <li>Cross-check review of project "Hangman"</li> </ul> </li> <li>Modules: <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/node-materials">Module: Node.js</a></li> </ul> </li><li>Tasks: <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/tasks/html-builder">Project "HTML-Builder"</a></li> </ul> </li>  </ul> </article> <article class="article"> <div class="anchor" id="week10"></div> <h3>Неделя #10 (23 января 2024) (24 мая 2022)</h3> <ul> <li>Cross-Check Reviews: <ul> <li>Cross-check review of project "HTML-Builder"</li> </ul> </li> <li>Modules: <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/chrome-devtools">Module: Chrome DevTools</a></li> </ul> </li><li>Tasks: <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/nonograms">Nonograms</a></li> </ul> </li> <li>Tests: <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/chrome-devtools">[St1] Chrome DevTools</a></li> </ul> </li>  </ul> </article> <article class="article"> <div class="anchor" id="week11"></div> <h3>Неделя #11 (30 января 2024) (31 мая 2022)</h3> <ul> <li>Modules: <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/client-server">[St1] Client-Server Interaction Overview</a></li> </ul> </li><li>Tasks: <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/nonograms">Nonograms</a></li> </ul> </li> <li>Tests: <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/client-server">[St1] Client-Server Interaction Overview</a></li> </ul> </li>  </ul> </article> <article class="article"> <div class="anchor" id="week12"></div> <h3>Неделя #12 (6 февраля 2024)</h3> <ul> <li>Cross-Check Reviews: <ul> <li>Cross-check review of project "Nonograms"</li> </ul> </li> <li>Modules: <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/classes-prototypes">Module: "JavaScript. Classes & Prototypes"</a></li> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/oop-basics">Module: Object-Oriented Programming Basics</a></li> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage2/modules/technical-screening">Preparation for Technical Screening (Подготовка к собеседованию с ментором)</a></li> </ul> </li> <li>Tasks: <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/self-introduction">Project "Self-introduction"</a></li> </ul> </li> <li>Tests: <ul> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/classes-prototypes">[St1] Classes & Prototypes</a></li> <li><a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage1/modules/classes-prototypes">[St1] OOP Test</a></li> <li><a href="https://github.com/rolling-scopes-school/tasks/tree/master/stage1">[St1] Final test stage#1</a></li> </ul> </li> </ul> </article> <article class="article"> <div class="anchor" id="video"></div> <h3>Все видео с курса</h3> <h3>Week 1</h3> <ul> <li><a href="https://www.youtube.com/watch?v=4OYMttQga3o">JavaScript / Front-end 2023 Q1 Stage #1. Intro</a></li> <li><a href="https://www.youtube.com/watch?v=mCnOni_mqdk">RSSchool для гуманитария</a></li> <li><a href="https://www.youtube.com/watch?v=pQ0hr5U8RL0">Профориентация. 2020-Q3</a></li> <li><a href="https://www.youtube.com/watch?v=nd2VYxOsOwY">Webinar 11.09.2019 Browsers. IDEs. Web Technologies</a></li> <li><a href="https://www.youtube.com/watch?v=SWYqp7iY_Tc">Git & GitHub Crash Course For Beginners</a></li> <li><a href="https://www.youtube.com/watch?v=Dlr_E7WfA08">RS School Basics - s01e10 - Git Workshop (Part 1)</a></li> <li><a href="https://www.youtube.com/watch?v=OltY8JIaP-4">How to Host a Website On Github Pages</a></li> <li><a href="https://www.youtube.com/watch?v=W4hoc24K93E&list=PLDyvV36pndZFHXjXuwA_NywNrVQO0aQqb">1.1 Git – Введение – Что такое Git?</a></li> </ul> <hr> <h3>Week 2</h3> <ul> <li><a href="https://www.youtube.com/watch?v=Ti2Q4sQkNdU">JavaScript ES6 - Полный курс за 2 часа</a></li> </ul> <hr> <h3>Week 3</h3> <ul> <li><a href="https://www.youtube.com/watch?v=iSQcOjxttNg&list=PLe--kalBDwji8WXKVjhON39X4v_Uj6T_R&index=4">RS School Ubekistan. Position. Floats. Flex. Semantic. CSS3</a></li> </ul> <hr> <h3>Week 4</h3> <ul> <li><a href="https://www.youtube.com/watch?v=ZAde-IJAHzo">Friday Live Coding. Part 1</a></li> <li><a href="https://www.youtube.com/watch?v=BJENQIX2e2o">Friday Live Coding. Part 2</a></li> <li><a href="https://www.youtube.com/watch?v=fooyYgIuZe8">Friday Live Coding. Part 3</a></li> <li><a href="https://www.youtube.com/watch?v=Qk2UGlFNKPE">Friday Live Coding. Part 4</a></li> </ul> <hr> <h3>Week 5</h3> <ul> <li><a href="https://www.youtube.com/watch?v=PhRVJC0kBGE">Stream 03.03.2020</a></li> <li><a href="https://www.youtube.com/watch?v=VJEpE6DaOYo">JavaScript Events</a></li> </ul> <hr> <h3>Week 6</h3> <ul> <li><a href="https://www.youtube.com/watch?v=Jvm4ShU86yw">RS School Basics - s01e01 - JS Array</a></li> <li><a href="https://www.youtube.com/watch?v=r8uHNxrfCwc">RS School Basics - s01e03 - Matrix</a></li> <li><a href="https://www.youtube.com/watch?v=TqlSlaMak8Y">RS School Basics - s01e04 - Stack</a></li> <li><a href="https://www.youtube.com/watch?v=d8c-JgbpMHs">RS School Basics - s01e06 - Array Methods</a></li> <li><a href="https://www.youtube.com/watch?v=jM7aTyncf8Y">RS School Basics - s01e07 - Array Bypass</a></li> <li><a href="https://www.youtube.com/watch?v=luExFPwQVOY">Big O нотация и AT</a></li> </ul> <hr> <h3>Week 8</h3> <ul> <li><a href="https://www.youtube.com/watch?v=Edue1LmnZqo">JS/FE 2021Q3 Webpack and Preprocessors</a></li> <li><a href="https://www.youtube.com/watch?v=bozzyi8Tok0">JSFE2021Q1 Webpack</a></li> <li><a href="https://www.youtube.com/watch?v=o8KMucDpSno">Webpack 5 — Полный курс для начинающих. Обработка html, css, scss, js, image compress.</a></li> <li><a href="https://www.youtube.com/watch?v=gVenbqg9Rww">Настройка Webpack 5 для начинающих. Описание принципа работы webpack. Html, css, scss, pug, jQuery</a></li> </ul> <hr> <h3>Week 9</h3> <ul> <li><a href="https://www.youtube.com/watch?v=XmVbnmJ2QEc">Rolling Scopes School Georgia. Modules</a></li> </ul> <h3>Week 10</h3> <ul> <li><a href="https://www.youtube.com/watch?v=gvB0qoio-Ic">RS Uzbekistan. Devtools and debugging</a></li> </ul> <hr> <h3>Week 11</h3> <ul> <li><a href="https://www.youtube.com/watch?v=4jA9Nea51T8">RS School Webinar on Network Communication part 1 (RU)</a></li> <li><a href="https://www.youtube.com/watch?v=_8GoJck9O9Y">RS School Webinar on Network Communication part 2 (RU)</a></li> <li><a href="https://www.youtube.com/watch?v=j9QmMEWmcfo">SSL, TLS, HTTPS Explained</a></li> </ul> <hr> <h3>Week 12</h3> <ul> <li><a href="https://youtube.com/watch?v=2ZphE5HcQPQ">JavaScript Classes Tutorial</a></li> <li><a href="https://www.youtube.com/watch?v=wfMtDGfHWpA">Composition over Inheritance</a></li> <li><a href="https://www.youtube.com/watch?v=vDJpGenyHaA">JavaScript OOP Crash Course (ES5 & ES6)</a></li> <li><a href="https://www.youtube.com/watch?v=O462BetYst8">RS School. JavaScript Classes</a></li> <li><a href="https://www.youtube.com/watch?v=QceUxKQeFDA">JavaScript Classes & Prototypes / Классы и прототипы в JavaScript.</a></li> <li><a href="https://www.youtube.com/watch?v=uy_6CeZ6MTU">Classes / Классы</a></li> <li><a href="https://www.youtube.com/watch?v=vDJpGenyHaA">JavaScript OOP Crash Course (ES5 & ES6)</a></li> </ul> <hr> </article> '}));var d=document.getElementById("edu-rss2024stage2");d&&d.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML='<h1>The Rolling Scopes School <br>Курс JS Frontend разработка Stage2 <br>13 февраля 2024 - 18 июня 2024</h1> <div class="article"> <div class="anchor" id="contents"></div> <h2>Содержание</h2> <div class="article__contents"> <a href="#stage2" class="contents__link">Stage 2</a> <a href="#week1" class="contents__link">Week 1</a> <a href="#week2" class="contents__link">Week 2</a> <a href="#week3" class="contents__link">Week 3</a> <a href="#week4" class="contents__link">Week 4</a> <a href="#week5" class="contents__link">Week 5</a> <a href="#week6" class="contents__link">Week 6</a> <a href="#week7" class="contents__link">Week 7</a> <a href="#week8" class="contents__link">Week 8</a> <a href="#week9" class="contents__link">Week 9</a> <a href="#week10" class="contents__link">Week 10</a> <a href="#week11" class="contents__link">Week 11</a> <a href="#week12" class="contents__link">Week 12</a> <a href="#video" class="contents__link">Video</a> </div> </div> <article class="article"> <div class="anchor" id="stage2"></div> <a href="https://github.com/rolling-scopes-school/tasks/tree/master/stage2">Программа stage2</a> <ul> <li>To enroll, students must successfully complete the tasks of the first stage and pass an interview with a mentor</li> <li>Goals of the second stage of training: <ul> <li>Students acquire knowledge and experience working with TypeScript</li> <li>Students acquire knowledge and experience in developing UI components</li> <li>Preparing students for technical interviews</li> <li>Preparing students for presentations in English</li> <li>Students complete a team project</li> </ul> </li> <li>Training time: 14 weeks</li> <li>Format: Self-study + webinars + communication on Discord. Practical lessons are checked and evaluated by a mentor and during cross-checks.</li> <li>Training interviews are held with different mentors during the course.</li> </ul> </article> <article class="article"> <div class="anchor" id="week1"></div> <h3>Неделя #1 (13 февраля 2024)</h3> <ul> <li>Cross-Check Reviews: <ul> <li>Cross-check of the "Self-introduction" project</li> </ul> </li> <li>Modules: <ul> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage2/modules/typescript-basic">Module: TypeScript: Basic</a> </li> </ul> </li> <li>Tasks: <ul> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage2/modules/technical-screening">Interview with mentor</a> </li> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage2/tasks/TypeScriptEssentials">TypeScript Essentials</a> </li> </ul> </li> <li>Tests: <ul> <li>[St2] TypeScript Basics</li> </ul> </li> </ul> </article> <article class="article"> <div class="anchor" id="week2"></div> <h3>Неделя #2 (20 февраля 2024)</h3> <ul> <li>Modules: <ul> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage2/modules/typescript-advanced">Module: Typescript: Advanced</a> </li> </ul> </li> <li>Tasks: <ul> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/migration-newip-to-ts.md">News API</a> </li> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage2/modules/technical-screening">Interview with mentor</a> </li> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage2/tasks/TypeScriptEssentials">TypeScript Essentials</a> </li> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/codewars/Codewars-2022Q3-OOP.md">Codewars-OOP Tasks</a> </li> <li> <a href="https://github.com/rolling-scopes-school/core-js-objects">core-js-objects</a> </li> </ul> </li> <li>Tests: <ul> <li>[St2] Typescript Advanced</li> </ul> </li> </ul> <p>At the end of this week, all students will be required to use typescript and adhere to the following rules when completing all subsequent tasks:</p> <ul> <li>- Use of Everyday Types</li> <li>- Use of Generics</li> <li>- Use of Object Types</li> <li>- Use of Classes</li> <li>- Use of Function</li> <li>- No use of the Any type</li> <li>- ESLinter is configured for TypeScript (the typescript-eslint/recommended plugin is used) and there are no errors</li> <li>- The TypeScript configuration file has the flags "noImplicitAny": true and "strict": true</li> <li>- webpack is configured and works with TypeScript</li> </ul> </article> <article class="article"> <div class="anchor" id="week3"></div> <h3>Неделя #3 (27 февраля 2024)</h3> <ul> <li>Cross-Check Reviews: <ul> <li>Cross-check of the TypeScript Essentials</li> </ul> </li> <li>Modules: <ul> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage2/modules/code-review">Module: Code review</a> </li> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage2/modules/single-page-application">Module: SPA</a> </li> </ul> </li> <li>Tasks: <ul> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage2/tasks/code-review">Code review</a> </li> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage2/modules/technical-screening">Interview with mentor</a> </li> <li> <a href="https://github.com/rolling-scopes-school/core-js-dates">core-js-dates</a> </li> </ul> </li> <li>Tests: <ul> <li>[St2] Single Page Application</li> <li>[St2] Code review</li> </ul> </li> </ul> </article> <article class="article"> <div class="anchor" id="week4"></div> <h3>Неделя #4 (5 марта 2024)</h3> <ul> <li>Modules: <ul> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage2/modules/web-storage">Module: Web Storage</a> </li> </ul> </li> <li>Tasks: <ul> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage2/tasks/puzzle">RSS Puzzle</a> </li> </ul> </li> <li>Tests: <ul> <li>[St2] Web Storage</li> </ul> </li> </ul> </article> <article class="article"> <div class="anchor" id="week5"></div> <h3>Неделя #5 (12 марта 2024)</h3> <ul> <li>Modules: <ul> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage2/modules/fp-basics">Module: "Functional Programming Basics"</a> </li> </ul> </li> <li>Tasks: <ul> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage2/tasks/puzzle">RSS Puzzle</a> </li> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/codewars/Codewars-2022Q1-FP.md">Codewars FP</a> </li> </ul> </li> <li>Tests: <ul> <li>[St2] Functional Programming</li> </ul> </li> </ul> </article> <article class="article"> <div class="anchor" id="week6"></div> <h3>Неделя #6 (19 марта 2024)</h3> <ul> <li>Cross-Check Reviews: <ul> <li>Cross-check of the RSS Puzzle</li> </ul> </li> <li>Modules: <ul> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage2/modules/async">Module: Async programming</a> </li> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage2/modules/web-security">Module: Web Security</a> </li> </ul> </li> <li>Tasks: <ul> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/tasks/interview-basic-coreJS.md">CoreJS Interview #1</a> </li> <li> <a href="https://github.com/rolling-scopes-school/tasks/blob/master/stage2/tasks/async-race">Project Async Race</a> </li> </ul> </li> <li>Tests: <ul> <li>[St2] Async programming</li> <li>[St2] Web Security</li> <li>core-js-promises</li> <li>core-js-functions</li> </ul> </li> </ul> </article> <article class="article"> <div class="anchor" id="video"></div> <h3>Все видео с курса</h3> <h3>Week 1</h3> <ul> <li><a href="https://youtu.be/h4Y4-QMz7dw">Webinar Rolling Scopes School Lithuania. TypeScript - [1.5 hours]</a></li> <li><a href="https://youtu.be/I_aTbZcH8Do">Webinar Node.js 2021Q2 Typescript (RU): Part 1 - [2.5 hours]</a></li> <li><a href="https://youtu.be/CegrbRXGw20">Webinar Node.js 2021Q2 Typescript (RU): Part 2 - [1.5 hours]</a></li> <li><a href="https://youtu.be/VeDh-lBCgh0?list=PLzLiprpVuH8f3t4lncrwtZOyYxAR8rkMk&t=4169">Webinar Angular 2021Q1. Intro (RU) - [2.5 hours]</a></li> <li><a href="https://www.youtube.com/watch?v=gieEQFIfgYc">TypeScript Full Course for Beginners</a></li> </ul> <hr> <h3>Week 2</h3> <ul> <li><a href="https://www.youtube.com/playlist?list=PL4cUxeGkcC9hOkGbwzgYFmaxB0WiduYJC">Webpack & TypeScript Setup - [1 hour]</a></li> <li><a href="https://www.youtube.com/watch?v=Fgcu_iB2X04">Utility Types - Advanced TypeScript - [35 min]</a></li> </ul> <hr> </article>'}));var h=document.getElementById("edu-dsr2023net");h&&h.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML=ut,kt()}));var p=document.getElementById("edu-quiz");p&&p.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML=ft,nt(),St()}));var u=document.getElementById("edu-jsexamples");u&&u.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML='<h1>Как это сделать на чистом JS. Примеры задач</h1> <div class="article"> <div class="anchor" id="contents"></div> <h2>Содержание</h2> <div class="article__contents"> <a href="#contextmenu" class="contents__link">Контекстное меню</a> <a href="#copy" class="contents__link">Копирование</a> <a href="#paste" class="contents__link">Вставка</a> <a href="#wheel" class="contents__link">Прокрутка</a> <a href="#scale" class="contents__link">Масштабирование</a> <a href="#promise" class="contents__link">Promise</a> <a href="#xmlhttprequest" class="contents__link">XMLHttpRequest</a> <a href="#fetch" class="contents__link">Fetch</a> </div> </div> <article class="article"> <div class="anchor" id="contextmenu"></div> <h2>Контекстное меню</h2> <p>index.html</p> <code> &lt;button class="btn"&gt;Клик правой кнопки мыши&lt;/button&gt; <br>&lt;div class="menu"&gt; <br>&nbsp;&nbsp;&lt;div class="menu-item"&gt;&lt;a href="#"&gt;link 1&lt;/a&gt;&lt;/div&gt; <br>&nbsp;&nbsp;&lt;div class="menu-item"&gt;&lt;a href="#"&gt;link 2&lt;/a&gt;&lt;/div&gt; <br>&nbsp;&nbsp;&lt;hr&gt; <br>&nbsp;&nbsp;&lt;div class="menu-item"&gt;&lt;a href="#"&gt;link 3&lt;/a&gt;&lt;/div&gt; <br>&nbsp;&nbsp;&lt;div class="menu-item"&gt;&lt;a href="#"&gt;link 4&lt;/a&gt;&lt;/div&gt; <br>&lt;/div&gt; </code> <p>style.css</p> <pre>\r\n.btn {\r\n  margin: 20px;\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  background-color: darkcyan;\r\n}\r\n.menu {\r\n  position: fixed;\r\n  display: none;\r\n  padding: 10px 0;\r\n  background-color: olive;\r\n}\r\n.menu-item {\r\n  margin: 10px 0;\r\n  padding: 0 20px;\r\n  height: 20px;\r\n}\r\n.menu-item: hover {\r\n  background-color: darkcyan;\r\n  cursor: pointer;\r\n}\r\na {\r\n  text-decoration: none;\r\n  color: cornsilk;\r\n}\r\n    </pre>  <p>index.js</p> <pre>\r\nconst btn = document.querySelector(\'.btn\');\r\nconst menuBox = document.querySelector(\'.menu\');\r\n\r\nlet menuDisplayed = false;\r\n\r\nbtn.addEventListener(\'contextmenu\', (ev) => {\r\n  let left = ev.clientX;\r\n  let top = ev.clientY;\r\n  \r\n  menuBox.style.left = left + 10 + \'px\';\r\n  menuBox.style.top = top + 5 + \'px\';\r\n  menuBox.style.display = \'block\';\r\n  ev.preventDefault();\r\n\r\n  menuDisplayed = true;\r\n});\r\n\r\nwindow.addEventListener(\'click\', (ev) => {\r\n  if (menuDisplayed) {\r\n    menuBox.style.display = \'none\';\r\n  }\r\n});\r\n  </pre> </article> <article class="article"> <div class="anchor" id="copy"></div> <h2>Копирование</h2> <p>index.html</p> <code> &lt;div class="text"&gt;Этот текст нельзя скопировать&lt;/div&gt; </code> <p>index.js</p> <pre>\r\nconst text = document.querySelector(\'.text\');\r\n\r\ntext.addEventListener(\'copy\', (ev) => {\r\n  alert(\'Копирование запрещено\');\r\n  ev.preventDefault();\r\n});\r\n  </pre> </article> <article class="article"> <div class="anchor" id="paste"></div> <h2>Вставка</h2> <p>index.html</p> <code> &lt;textarea placeholder="Введите текст" name="" id="" cols="30" rows="10" class="text2"&gt;&lt;/textarea&gt; <br>&lt;div class="tip"&gt;Вставка текста запрещена, только ручной ввод&lt;/div&gt; </code> <p>index.js</p> <pre>\r\nconst text2 = app.querySelector(\'.text2\');\r\ntext2.addEventListener(\'paste\', (ev) => {\r\n  alert(\'Вставка запрещена\');\r\n  ev.preventDefault();\r\n});\r\n  </pre> </article> <article class="article"> <div class="anchor" id="wheel"></div> <h2>Прокрутка колесом мыши</h2> <p>Событие wheel это прокрутка колесом мыши. Происходит на любом элементе, над которым завис курсор мыши. На прокручиваемом и на не прокручиваемом. Происходит до события scrool. Поэтому в обработчике события wheel можно отменить действие собития scroll. Событие scroll это прукрутка элемента страницы. Происходит только если этот элемент прокручиваемый. Свойство deltaY – количество прокрученных пикселей по вертикали.</p> <p>index.html</p> <code> &lt;div&gt;Прокрутка: &lt;span id="delta"&gt;0&lt;/span&gt; px&lt;/div&gt; <br>&lt;div class="wheel-container"&gt;Прокрути надо мной колесом мыши&lt;/div&gt; </code> <p>style.css</p> <pre>\r\n.wheel-container {\r\n  width: 200px;\r\n  height: 100px;\r\n  background-color: Darkolivegreen;\r\n}\r\n  </pre> <p>index.js</p> <pre>\r\nconst delta = app.querySelector(\'#delta\');\r\nconst wheel = app.querySelector(\'.wheel-container\');\r\nwheel.addEventListener(\'wheel\', wheelHandler);\r\n\r\nfunction wheelHandler(ev) {\r\n  let y = ev.deltaY;\r\n  delta.innerText = +delta.innerText + y;\r\n}\r\n  </pre> </article> <article class="article"> <div class="anchor" id="scale"></div> <h2>Масштабирование</h2> <p>index.html</p> <code> &lt;div class="wheel-container"&gt;Масштабирование при прокрутке колеса мыши&lt;/div&gt; </code> <p>style.css</p> <pre>\r\n.wheel-container {\r\n  margin: 10px auto;\r\n  width: 200px;\r\n  height: 100px;\r\n  background-color: Darkolivegreen;\r\n}\r\n  </pre> <p>index.js</p> <pre>\r\nconst wheel = app.querySelector(\'.wheel-container\');\r\nwheel.addEventListener(\'wheel\', scaleDiv);\r\n\r\nlet scale = 1;\r\nfunction scaleDiv(ev) {\r\n  if (ev.deltaY > 0) {\r\n    scale += 0.05;\r\n  } else {\r\n    scale -= 0.05;\r\n  }\r\n\r\n  wheel2.style.transform = \'scale(\' + scale + \')\';\r\n  ev.preventDefault();\r\n}\r\n  </pre> </article> <article class="article"> <div class="anchor" id="promise"></div> <h2>Promise</h2> <p>index.js</p> <pre>\r\nlet promise = new Promise ((resolve, reject) => {\r\n  setTimeout(() => {\r\n    resolve(\'Hello\')\r\n  }, 2000);\r\n  setTimeout(() => {\r\n    reject(new Error(\'Error\'))\r\n  }, 1000);\r\n});\r\n\r\npromise\r\n.then(result => console.log(result))\r\n.catch(error => console.log(error))\r\n  </pre> </article> <article class="article"> <div class="anchor" id="xmlhttprequest"></div> <h2>XMLHttpRequest</h2> <p>index.js</p> <pre>\r\nlet xhr = new XMLHttpRequest();\r\n\r\nxhr.open(\'GET\', \'./file.json\', true);\r\nxhr.send();\r\nxhr.onreadystatechange = () => {\r\n  if (xhr.status === 200) {\r\n    if (xhr.readyState === 1) {\r\n      console.log(JSON.parse(xhr.responseText));\r\n    }\r\n  } else {\r\n    alert(`${xhr.status}: ${xhr.statusText}`);\r\n  }\r\n}\r\n  </pre> </article> <article class="article"> <div class="anchor" id="fetch"></div> <h2>Fetch</h2> <p>index.js</p> <pre>\r\nlet url = \'./file.json\';\r\nlet options = { method: \'GET\', }\r\nlet req = fetch(url, options);\r\n\r\nreq.then(response => response.json()) // Возвращает объект Promise\r\n   .then(data => console.log(data))\r\n   .catch(err => {console.error(err); });\r\n  </pre> </article> '}))}(),H(),jt(Tt,null)}},{url:"learned/learned.html",text:"Learned",content:"<front-learned></front-learned>",act:function(){!function(){var e,t,r=document.querySelector(".aside");r.innerHTML="",r.append.apply(r,Nt),e=['<h1>Весь изученный материал по frontend разработке</h1> <ol> <li class="list-item"> 2021-04-15 чт Начал интересоваться фронтендом </li> <li class="list-item red">2021-04-19 пн <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>Учим HTML за 1 час! #от Профессионала (2015-12-31)</strong><br> Время 1ч 4м</p> <p>YouTube Channel Хауди Хо™ - Просто о мире IT!</p> </li> <li class="list-item red">2021-04-19 пн <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>Учим CSS за 1 час! #от Профессионала (2016-01-03)</strong><br> Время 1ч 26м</p> <p>YouTube Channel Хауди Хо™ - Просто о мире IT!</p> </li> <li class="list-item dodgerblue">2021-04-22 вт <p><a href="learned_online-courses.html">Online Course</a><br><strong>HTML, CSS, JavaScript бесплатный вводный курс</strong></p> <p>Сайт <a href="https://praktikum.yandex.ru/profile/web/">praktikum.yandex.ru/profile/web/</a></p> </li> <li class="list-item dodgerblue">2021-04-27 вт <p><a href="learned_online-courses.html">Online Course</a><br><strong>[webshake] [Артем Ивашкевич] Курс HTML для начинающих [2017]</strong><br> 12 уроков</p> <p>Автор Артем Ивашкевич<br> Сайт webshake.ru</p> </li> <li class="list-item red">2021-04-29 чт <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>frontendgirl</strong><br> Время 2ч 25м</p> <p></p> <p>Автор Таня</p> <details> <summary>13 видео от 2019-02-17 до 2020-06-22</summary> 2019-02-17 - КАК Я СТАЛА ПРОГРАММИСТОМ<br> 2019-02-24 - 7 ОШИБОК НАЧИНАЮЩИХ ПРОГРАММИСТОВ<br> 2019-03-03 - МИФЫ И ЗАБЛУЖДЕНИЯ О ПРОГРАММИСТАХ, ЧТО ВАМ НА САМОМ ДЕЛЕ НЕ НУЖНО<br> 2019-03-24 - НУЖЕН ЛИ АНГЛИЙСКИЙ ПРОГРАММИСТУ_<br> 2019-04-28 - ПОЙТИ НА КУРСЫ ИЛИ УЧИТЬСЯ САМОМУ_ ПЛЮСЫ И МИНУСЫ.<br> 2019-05-12 - КАК СТАТЬ FRONTEND-РАЗРАБОТЧИКОМ_ ЧАСТЬ 1 - ПОШАГОВАЯ ИНСТРУКЦИЯ<br> 2019-06-09 - КАК СТАТЬ FRONTEND-РАЗРАБОТЧИКОМ_ ЧАСТЬ 2 - ПОШАГОВАЯ ИНСТРУКЦИЯ<br> 2020-03-28 - КАК СТАТЬ FRONTEND-РАЗРАБОТЧИКОМ_ ЧАСТЬ 3 - ПОШАГОВАЯ ИНСТРУКЦИЯ<br> 2020-05-19 - СОБЕСЕДОВАНИЕ. ЧТО СПРАШИВАЮТ_ КАК ОТВЕЧАТЬ_ СОВЕТЫ. + ТЕСТ<br> 2020-06-07 - МАСТХЕВ. ПОЛЕЗНЫЕ ИНСТРУМЕНТЫ ДЛЯ ФРОНТЕНД-РАЗРАБОТЧИКА<br> 2020-06-11 - ЧТО ВЫБРАТЬ_ РАБОТАТЬ УДАЛЁННО ИЛИ В ОФИСЕ_ ПЛЮСЫ И МИНУСЫ УДАЛЁНКИ<br> 2020-06-15 - ДЕВУШКА-ПРОГРАММИСТ. КАК КО МНЕ ОТНОСЯТСЯ НА РАБОТЕ_ СТРАХИ И СТЕРЕОТИПЫ<br> 2020-06-22 - КАК НЕ БРОСИТЬ УЧЁБУ_ ЧТО ДЕЛАТЬ ЕСЛИ ИНТЕРЕС ПРОШЁЛ_ НЕСКОЛЬКО СОВЕТОВ КАК СОХРАНИТЬ МОТИВАЦИЮ. </details> <p></p> </li> <li class="list-item red">2021-04-30 пт <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Вадим Гребенщиков] HTML для начинающих [2015]</strong><br> 15 уроков<br> Время 2ч 31м</p> <p>Автор Вадим Гребенщиков<br> YouTube Channel Вадим Гребенщиков<br> Сайт htmlboss.ru</p> </li> <li class="list-item red">2021-05-04 вт <p><a href="learned_video-courses.html">Video Course</a><br><strong>[Brainscloud] [Дмитрий Валак] HTML и CSS для начинающих [2019]</strong><br> 01. Основы HTML и CSS<br> 43 урока<br> Время 10ч 20м</p> <p>Автор Дмитрий Валак<br> Сайт brainscloud.ru</p> </li> <li class="list-item red">2021-05-07 пт <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Андрей Андриевский] Курс html css [2019]</strong><br> 24 видео<br> Время 11ч 7м</p> <p>Автор Андрей Андриевский<br> YouTube Channel Андрей Андриевский</p> </li> <li class="list-item red">2021-05-11 вт <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Евгений Попов] Курс html [2012]</strong><br> 32 видео<br> Время 3ч 52м</p> <p>Автор Евгений Попов<br> YouTube Channel Евгений Попов</p> </li> <li class="list-item red">2021-05-13 чт <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Евгений Попов] Курс css [2012]</strong><br> 44 видео<br> Время 6ч 47м</p> <p>Автор Евгений Попов<br> YouTube Channel Евгений Попов</p> </li> <li class="list-item red">2021-05-20 чт <p><a href="learned_courses.html">Video Course</a><br><strong>[GeekBrains] [Юрий Жаворонок] HTML_CSS. Основы создания сайтов [2015]</strong><br> 8 уроков<br> Время 19ч 42м</p> <p>Автор Юрий Жаворонок</p> </li> <li class="list-item red">2021-05-22 сб <p><a href="learned_video-courses.html">Video Course</a><br><strong>[Brainscloud] [Дмитрий Валак] HTML и CSS для начинающих [2019]</strong><br> 02. Верстка адаптивного сайта с нуля<br> 16 уроков<br> Время 2ч 49м</p> <p>Автор Дмитрий Валак<br> Сайт brainscloud.ru</p> </li> <li class="list-item red">2021-05-27 чт <p><a href="learned_video-courses.html">Video Course</a><br><strong>[Hexlet] [Рахим Давлеткалиев] Язык программирования JavaScript [2013]</strong><br> 7 уроков<br> Время 4ч 42м</p> <p>Автор Рахим Давлеткалиев</p> </li> <li class="list-item red">2021-05-29 сб <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>gabdr0</strong></p> <p>Автор Дамир Габдрахимов<br> Сайт gabdrahimov.ru<br> 12 видео<br> от 2019-02-10 до 2019-06-26<br> Время 1ч 8м</p> </li> <li class="list-item red">2021-05-31 пн <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>Antonina Listopadova</strong></p> <p>Автор Антонина Листопадова <br> 30 видео <br> от 2019-12-07 до 2021-05-10<br> Время 8ч 47м</p> </li> <li class="list-item red">2021-06-05 сб <p><a href="learned_video-courses.html">Video Course</a><br><strong>[ITVDN] [Александр Петрик] Видео курс HTML CSS [2015]</strong><br> 8 уроков<br> Время 9ч 30м</p> <p>Автор Александр Петрик</p> </li> <li class="list-item dodgerblue">2021-06-06 вс <p><a href="learned_online-courses.html">Online course</a><br><strong>[stepik] Веб разработка для начинающих HTML CSS</strong><br> 49 уроков<br> Время 3ч</p> <p>сайт stepik.org</p> </li> <li class="list-item red">2021-06-10 чт <p><a href="learned_video-courses.html">Video Course</a><br><strong>[CS50 Harvard] Основы программирования [2015]</strong><br> 23 урока<br> Время 20ч 42м</p> </li> <li class="list-item red">2021-06-11 пт <p><a href="learned_video-courses.html">Video Course</a><br><strong>[camouf.ru] [Михаил Базаров] Создание сайта на 1С Битрикс с нуля [2013]</strong><br> 14 уроков<br> Видео 6ч 23м</p> <p>Автор Михаил Базаров<br> Сайт camouf.ru</p> </li> <li class="list-item green">2021-06-24 чт <p><a href="verstka.html">Верстка сайта</a><br><strong>resume</strong><br> по видео курсу [Brainscloud] [Дмитрий Валак] HTML и CSS для начинающих [2019]<br> 02. Верстка адаптивного сайта с нуля</p> <p>Автор Дмитрий Валак<br> Разместил сайт на github<br> frontend200tb.github.io/resume</p> </li> <li class="list-item green">2021-06-25 пт <p><a href="verstka.html">Верстка сайта</a><br><strong>freepsd</strong><br> по видео 2019-04-18 - Верстка сайта с нуля до завершения, html_css_js<br> Время 7ч 10м</p> <p>Автор Вадим Прокопчук<br> YouTube Channel от 0 до 1<br> Разместил сайт на бесплатном хостинге<br> high-hat-recapitula.000webhostapp.com</p> </li> <li class="list-item dodgerblue">2021-06-28 пн <p><a href="learned_online-courses.html">Online Course</a><br><strong>[stepik] [Антон Холин] JavaScript для начинающих</strong><br> 17 уроков<br> Время 6ч</p> <p>Автор Антон Холин<br> сайт stepik.org</p> </li> <li class="list-item red">2021-07-01 чт <p><a href="learned_video-courses.html">Video Course</a><br><strong>[Нетология] HTML-верстка Инструменты и приемы профессиональной front-end разработки [2015]</strong><br> 22 видео<br> Время 37ч 25м</p> </li> <li class="list-item red">2021-07-02 пт <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Brainoteka Light] [Александр Сажин] Введение в HTML [2015]</strong><br> 12 видео<br> Время 54м</p> <p>Автор Александр Сажин<br> YouTube Channel Brainoteka Light<br> сайт brainoteka.com</p> </li> <li class="list-item yellow">2021-07-02 пт <p><a href="learned_books.html">Книга</a><br><strong>Путь фрилансера</strong></p> <p>Автор Артем Исламов<br> 2019<br> 218 стр</p> </li> <li class="list-item red">2021-07-05 пн <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Brainoteka Light] [Александр Сажин] Введение в WEB разработку [2015]</strong><br> 13 видео<br> Время 56м</p> <p>Автор Александр Сажин<br> YouTube Channel Brainoteka Light<br> Сайт brainoteka.com</p> </li> <li class="list-item red">2021-07-06 вт <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Brainoteka Light] [Александр Сажин] Введение в CSS [2015]</strong><br> 10 видео<br> Время 37м</p> <p>Автор Александр Сажин<br> YouTube Channel Brainoteka Light<br> Сайт brainoteka.com</p> </li> <li class="list-item red">2021-07-07 ср <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Brainoteka Light] [Александр Сажин] Введение в JavaScript [2015]</strong><br> 11 видео<br> Время 54м</p> <p>Автор Александр Сажин<br> YouTube Channel Brainoteka Light<br> Сайт brainoteka.com</p> </li> <li class="list-item red">2021-07-08 чт<br> <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Brainoteka Light] [Александр Сажин] Введение в C# [2015]</strong><br> 9 видео<br> Время 1ч 8м</p> <p>Автор Александр Сажин<br> YouTube Channel Brainoteka Light<br> Сайт brainoteka.com</p> </li> <li class="list-item red">2021-07-09 пт <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Brainoteka Light] [Александр Сажин] Введение в ASP.NET MVC [2015]</strong><br> 13 видео<br> Время 1ч 9м</p> <p>Автор Александр Сажин<br> YouTube Channel Brainoteka Light<br> Сайт brainoteka.com</p> </li> <li class="list-item red">2021-07-10 сб <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>OneByteSite в IT после 30</strong><br> 20 видео <br> от 2020-05-11 до 2020-11-07<br> Время 2ч 33м </p> </li> <li class="list-item red">2021-07-11 вс <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>Front Fri End</strong><br> 10 видео <br> от 2018-10-28 до 2021-06-01<br> Время 2ч 30м</p> </li> <li class="list-item red">2021-07-12 пн <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>IT на диване</strong><br> 29 видео<br> от 2019-09-08 до 2021-07-04<br> Время 5ч 54м</p> <p>Автор Антон Воропаев</p> </li> <li class="list-item dodgerblue">2021-07-14 ср <p><a href="learned_online-courses.html">Online Course</a><br><strong>CSS Grid Garden</strong><br> 28 уровней<br> "Добро пожаловать в Grid Garden — место, где вы напишете CSS-код, чтобы вырастить морковный сад"<br> Сайт https://cssgridgarden.com/#ru</p> </li> <li class="list-item red">2021-07-15 чт <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>Anna Blok — Frontend Tutorial</strong><br> Время 3ч 21м</p> <p> Автор Анна Блок 24 видео от 2018-09-05 до 2021-07-10 </p> </li> <li class="list-item yellow">2021-07-16 пт <p><a href="learned_books.html">Книга</a><br><strong>HTML. Популярный самоучитель (2е)</strong></p> <p>Автор Александр Чиртик<br> 2008<br> 256стр</p> </li> <li class="list-item red">2021-07-19 пн <p><a href="learned_video-courses.html">Video Course</a><br><strong>[Lynda.com] Bootstrap 3 Добавь интерактивности на свой сайт [2014]</strong><br> 5 уроков<br> Время 1ч 56м</p> </li> <li class="list-item green">2021-07-20 вт <p><a href="verstka.html">Верстка сайта</a><br><strong>landon</strong><br> по видео курсу [Lynda.com] Bootstrap 3 Добавь интерактивности на свой сайт [2014]</p> <p>Разместил сайт на github<br> frontend200tb.github.io/landon</p> </li> <li class="list-item yellow">2021-07-21 ср <p><a href="learned_books.html">Книга</a><br><strong>Фриланс Когда сам себе начальник</strong><br> Автор Анна Мурадова<br> 2007<br> 92стр</p> </li> <li class="list-item dodgerblue">2021-07-21 ср <p><a href="learned_online-courses.html">Online Course</a><br><strong>[Codeliber] Learn HTML</strong><br> Разработчик Codeliber<br> Приложение на Android</p> </li> <li class="list-item red">2021-07-22 чт <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Андрей Андриевский] Курс CSS для Профи [2019]</strong><br> 19 видео<br> Время 7ч 40м</p> <p>Автор Андрей Андриевский <br> YouTube Channel Андрей Андриевский</p> </li> <li class="list-item green">2021-07-23 пт <p><a href="verstka.html">Верстка сайта</a><br><strong>coffee</strong><br> по видео курсу [Андрей Андриевский] Курс CSS для Профи [2019]</p> <p>Разместил сайт на github<br> frontend200tb.github.io/coffee</p> </li> <li class="list-item yellow">2021-07-27 вт <p><a href="learned_books.html">Книга</a><br><strong>HTML с самого начала</strong><br> Автор Брент Хеслоп<br> 1997<br> 417стр</p> </li> <li class="list-item red">2021-07-28 ср <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Brainoteka Light] [Александр Сажин] jQuery [2015]</strong><br> 27 видео<br> Время 2ч 24м</p> <p>Автор Александр Сажин<br> YouTube Channel Brainoteka Light<br> сайт brainoteka.com</p> </li> <li class="list-item red">2021-07-29 чт <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Brainoteka Light] [Александр Сажин] Less [2016]</strong><br> 13 видео<br> Время 51м</p> <p>Автор Александр Сажин<br> YouTube Channel Brainoteka Light<br> сайт brainoteka.com</p> </li> <li class="list-item green">2021-08-29 чт <p><a href="verstka.html">Верстка сайта</a><br><strong>yummy</strong><br></p> <p>Разместил сайт на github<br> frontend200tb.github.io/yummy</p> </li> <li class="list-item red">2021-07-30 пт <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Brainoteka Light] [Павел Побережный] Bootstrap 4 [2017]</strong><br> 21 видео<br> Время 1ч 44м</p> <p>Автор Павел Побережный<br> YouTube Channel Brainoteka Light<br> сайт brainoteka.com</p> </li> <li class="list-item red">2021-08-02 пн <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Brainoteka Light] [Павел Побережный] Введение в GIT [2018]</strong><br> 12 видео<br> Время 47м</p> <p>сайт brainoteka.com<br> Автор Павел Побережный</p> </li> <li class="list-item red">2021-08-03 вт <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>Brainoteka Light</strong><br> 147 видео<br> Время 12ч 9м</p> <p>Автор Александр Сажин</p> </li> <li class="list-item red">2021-08-09 пн <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>Записки фронтендера</strong><br> 9 видео<br> Время 2ч 29м</p> <p>Автор Максим</p> </li> <li class="list-item dodgerblue">2021-08-09 пн <p><a href="learned_online-courses.html">Online Course</a><br><strong>[Codeliber] Learn CSS</strong><br> Разработчик Codeliber<br> Приложение на Android</p> </li> <li class="list-item red">2021-08-10 вт <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>Сергей Жарков - Фриланс и Фронтенд</strong><br> 6 видео<br> Время 1ч 35м</p> <p>Автор Сергей Жарков</p> </li> <li class="list-item green">2021-08-10 вт <p><a href="verstka.html">Верстка сайта</a><br><strong>webdev</strong><br> по видео 2020-05-15 - Верстка сайта с нуля для начинающих _ HTML + CSS за 1 час<br> Время 1ч 13м</p> <p>Автор Сергей Жарков<br> YouTube Channel Сергей Жарков - Фриланс и Фронтенд<br> Разместил сайт на github<br> frontend200tb.github.io/webdev</p> </li> <li class="list-item green">2021-08-11 ср <p><a href="verstka.html">Верстка сайта</a><br><strong>aquatic</strong><br> по видео курсу [ITVDN] [Александр Петрик] Видео курс HTML CSS [2015]</p> <p>Разместил сайт на github<br> frontend200tb.github.io/aquatic</p> </li> <li class="list-item red">2021-08-11 ср <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>Онлайн-школа на Wordpress</strong><br> 11 видео<br> Время 2ч 8м</p> <p>Автор Марина Клюшун<br> Сайт wpshkola.ru</p> </li> <li class="list-item yellow">2021-08-12 чт <p><a href="learned_books.html">Книга</a><br><strong>Bootstrap. Руководство</strong></p> <p>Автор Влад Мержевич<br> 2016<br> 58 стр</p> </li> <li class="list-item red">2021-08-14 сб <p><a href="learned_video-courses.html">Video Course</a><br><strong>[wh-db.com] [Сергей Никонов] Курс Bootstrap [2015]</strong><br> 8 уроков<br> Время 3ч 31м</p> <p>Автор Сергей Никонов</p> </li> <li class="list-item green">2021-08-14 сб <p><a href="verstka.html">Верстка сайта</a><br><strong>kinomonster</strong><br> по видео курсу [wh-db.com] [Сергей Никонов] Курс Bootstrap [2015]</p> <p>Автор Сергей Никонов<br> Разместил сайт на github<br> frontend200tb.github.io/webdev</p> </li> <li class="list-item yellow">2021-08-14 сб <p><a href="learned_books.html">Книга</a><br><strong>Bootstrap Быстрое создание современных сайтов</strong></p> <p>Автор Тимур Машнин<br> 2016<br> 145 стр</p> </li> <li class="list-item green">2021-08-16 пн <p><a href="verstka.html">Верстка сайта</a><br><strong>Chooce travel</strong><br> по видео курсу [WebForMySelf] Мини-курс сайта с нуля на WordPress [2011]</p> <p>Разместил сайт на github<br> frontend200tb.github.io/choocetravel</p> </li> <li class="list-item yellow">2021-08-16 пн <p><a href="learned_books.html">Книга</a><br><strong>HTML в подлиннике</strong></p> <p>Автор Браун<br> 1998<br> 1048 стр</p> </li> <li class="list-item red">2021-08-17 вт <p><a href="learned_video-courses.html">Video Course</a><br><strong>[WebForMySelf] Мини-курс сайта с нуля на WordPress [2011]</strong><br> 8 уроков<br> Время 7ч 39м</p> </li> <li class="list-item green">2021-08-17 вт <p><a href="verstka.html">Верстка сайта</a><br><strong>Explore California</strong><br> по видео курсу [Lynda.com] Git обучение основам [2012]</p> <p>Разместил сайт на github<br> frontend200tb.github.io/explore_california</p> </li> <li class="list-item red">2021-08-18 ср <p><a href="learned_video-courses.html">Video Course</a><br><strong>[Lynda.com] Git обучение основам [2012]</strong><br> 14 уроков<br> Время 6ч 26м</p> </li> <li class="list-item red">2021-08-18 ср <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>welcome to IT</strong><br> 11 видео<br> Время 1ч 49м</p> </li> <li class="list-item red">2021-08-18 ср <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>UMNO - JavaScript</strong><br> 4 видео<br> Время 49м</p> <p>Автор Сергей Власов</p> </li> <li class="list-item red">2021-08-19 чт <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>Валерий Стрелец</strong><br> 8 видео<br> Время 3ч 34м</p> <p>Автор Валерий</p> </li> <li class="list-item red">2021-08-20 пт <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>KamaDeva</strong><br> 10 видео<br> Время 2ч 9м </p> </li> <li class="list-item red">2021-08-20 пт <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>Клуб дедов-программистов</strong><br> 4 видео<br> Время 1ч 6м</p> </li> <li class="list-item yellow">2021-08-23 пн <p><a href="learned_books.html">Книга</a><br><strong>Путь в программисты</strong></p> <p>Константин Шереметьев<br> 2017<br> 41 стр</p> </li> <li class="list-item dodgerblue">2021-08-24 вт <p><a href="learned_online-courses.html">Online Course</a><br><strong>[Codeliber] Learn JavaScript</strong><br> Разработчик Codeliber<br> Приложение на Android</p> </li> <li class="list-item dodgerblue">2021-08-25 ср <p><a href="learned_online-courses.html">Online Course</a><br><strong>[Нетология] [Владимир Языков] Основы верстки сайта</strong><br> 5 уроков<br></p> <p>Автор Владимир Языков<br>Сайт netology.ru<br>Стоимость бесплатно<br>Уровень с нуля</p> </li> <li class="list-item dodgerblue">2021-08-28 сб <p><a href="learned_online-courses.html">Online Course</a><br><strong>[Нетология] [Дмитрий Бронских] Первые шаги в JavaScript [2021]</strong><br></p> <p>Автор Дмитрий Бронских<br>Сайт netology.ru<br>Стоимость бесплатно<br>Уровень с нуля</p> </li> <li class="list-item dodgerblue">2021-09-03 пт <p><a href="learned_online-courses.html">Online Course</a><br><strong>[Нетология] [Дмитрий Демидов] Python-разработка для начинающих [2021]</strong><br></p> <p>Автор Дмитрий Демидов<br>Сайт netology.ru<br>Стоимость бесплатно<br>Уровень с нуля</p> </li> <li class="list-item dodgerblue">2021-09-08 ср <p><a href="learned_online-courses.html">Online Course</a><br><strong>[Нетология] Профессии в программировании [2021]</strong><br></p> <p>Сайт netology.ru<br>Стоимость бесплатно<br>Уровень с нуля</p> </li> <li class="list-item dodgerblue">2021-09-10 пт <p><a href="learned_online-courses.html">Online Course</a><br><strong>[Codeliber] Learn Python</strong><br> Разработчик Codeliber<br> Приложение на Android</p> </li> <li class="list-item yellow">2021-09-15 ср <p><a href="learned_books.html">Книга</a><br><strong>Вы не знаете JS 1 Приступим</strong></p> <p>Кайл Симпсон<br> 2019<br> 64 стр</p> </li> <li class="list-item yellow">2021-09-16 чт <p><a href="learned_books.html">Книга</a><br><strong>Javascript для детей</strong></p> <p>Ник Морган<br> 2016<br> 288 стр</p> </li> <li class="list-item yellow">2021-09-22 ср <p><a href="learned_books.html">Книга</a><br><strong>HeadFirst Изучаем HTML XHTML и CSS (2е)</strong></p> <p>Эрик Фримен, Элизабет Фримен<br> 2014<br> 720 стр</p> </li> <li class="list-item yellow">2021-09-26 вс <p><a href="learned_books.html">Книга</a><br><strong>HeadFirst Изучаем программирование на HTML5</strong></p> <p>Эрик Фримен, Элизабет Фримен<br> 2013<br> 640 стр</p> </li> <li class="list-item yellow">2021-09-27 пн <p><a href="learned_books.html">Книга</a><br><strong>jQuery для начинающих</strong></p> <p>Антон Шевчук<br> 2018<br> 269 стр</p> </li> <li class="list-item red">2021-10-14 чт <p><a href="learned_video-courses.html">Video Course</a><br><strong>[BrainsCloud] [Дмитрий Валак] Быстрая и комфортная верстка сайтов [2019]</strong><br> 6 модулей<br> Время 12ч</p> <p>Автор Дмитрий Валак<br> Сайт brainscloud.ru</p> </li> <li class="list-item red">2021-10-26 вт <p><a href="learned_video-courses.html">Video Course</a><br><strong>[Яндекс-Академия] Школа Вебмастеров [2015]</strong><br>Время 22ч<br>Размер 9 gb<br>2015 год<br><a href="https://rutracker.org/forum/viewtopic.php?t=5122675">rutracker.org</a></p> </li> <li class="list-item dodgerblue">2021-11-01 пн <p><a href="learned_online-courses.html">Online Course</a><br><strong>[html academy] Знакомство с веб-разработкой</strong><br>Часть 1: Основы HTML и CSS<br>Часть 2: Основы JavaScript<br>Часть 3: Основы PHP<br>1 час 35 минут теории, 1 час 40 минут практики</p> </li> <li class="list-item red">2021-11-02 вт <p><a href="learned_video-courses.html">Video Course</a><br><strong>[Яндекс-Академия] Четвертая Вебмастерская [2015]</strong><br>Время 6ч 36м<br>Размер 2.8 gb<br>2015-11-20<br><a href="https://rutracker.org/forum/viewtopic.php?t=5122675">rutracker.org</a></p> </li> <li class="list-item dodgerblue">2021-11-06 сб <p><a href="learned_online-courses.html">Online Course</a><br><strong>https://githowto.com/ru</strong><br>Уроки по изучению git<br>51 урок</p> </li> <li class="list-item dodgerblue">2021-11-09 вт <p><a href="learned_online-courses.html">Online Course</a><br><strong>[html academy] Знакомство с HTML и CSS</strong><br>Часть 1:Структура HTML-документа<br>Часть 2:Разметка текста<br>Часть 3:Ссылки и изображения<br>Часть 4:Основы CSS<br>Часть 5:Оформление текста<br>3 часа теории, 3 часа практики</p> </li> <li class="list-item dodgerblue">2021-11-10 ср <p><a href="learned_online-courses.html">Online Course</a><br><strong>https://ru.bem.info/</strong><br>Методология БЭМ. Быстрый старт</p> </li> <li class="list-item red">2021-11-22 пн <p><a href="learned_video-courses.html">Video Course</a><br><strong>[HTML Academy] Базовый HTML и CSS [2016]</strong><br>Время 18ч 37м<br>Размер 9.7 gb</p> </li> <li class="list-item red">2021-11-23 вт <p><a href="learned_video-courses.html">Video Course</a><br><strong>[Skillbox] [Антон Рыбаков] Figma 3.0 для дизайнера [2019]</strong><br>Время 9ч 39м<br>Размер 5.8 gb</p> </li> <li class="list-item red">2021-11-30 вт <p><a href="learned_video-courses.html">Video Course</a><br><strong>[Udemy] Шаблонизатор Pug_jade - современный ускоритель для HTML (2019)</strong><br>Время 1ч 58м<br>Размер 1 gb</p> </li> <li class="list-item yellow">2021-12-04 сб <p><a href="learned_books.html">Книга</a><br><strong>HTML и CSS. Разработка и дизайн веб-сайтов</strong></p> <p>Джон Дакетт<br> 2013<br> 480 стр</p> </li> <li class="list-item yellow">2021-12-08 ср <p><a href="learned_books.html">Книга</a><br><strong>Самоучитель HTML</strong></p> <p>Влад Мержевич<br> 2011<br> 97 стр</p> </li> <li class="list-item dodgerblue">2021-12-13 пн <p><a href="learned_online-courses.html">Online Course</a><br><strong>[code-basics] HTML для начинающих</strong><br>11 часов 41 урок с практикой в браузере</p> </li> <li class="list-item dodgerblue">2021-12-16 чт <p><a href="learned_online-courses.html">Online Course</a><br><strong>[code-basics] CSS для начинающих</strong><br>8 часов 33 урока с практикой в браузере</p> </li> <li class="list-item yellow">2021-12-18 сб <p><a href="learned_books.html">Книга</a><br><strong>HTML Самоучитель (2-е изд)</strong><br>Н. Комолова, Е. Яковлева<br>2011<br>288 стр</p> </li> <li class="list-item red">2021-11-20 пн <p><a href="learned_video-courses.html">Video Course</a><br><strong>[ITVDN Анна Маргина] Основы использования Git (2020)</strong><br>Время 2ч 13м<br>Размер 0.5 gb</p> </li> <li class="list-item red">2021-12-24 пт <p><a href="learned_video-courses.html">Video Course</a><br><strong>[Udemy Наиль Алишев] Git. Полный курс для начинающих (2019)</strong><br>Время 4ч 47м<br>Размер 2 gb</p> </li> <li class="list-item red">2021-12-28 вт <p><a href="learned_video-courses.html">Video Course</a><br><strong>[Udemy Максим Гузиев] Курс по Git (2019)</strong><br>Время 3ч 59м<br>Размер 2.2 gb</p> </li> <li class="list-item red">2021-12-28 вт <p><a href="learned_video-courses.html">Video Course</a><br><strong>[ITVDN Александр Пономаренко] Основы использования Git (2016)</strong><br>Время 1ч 2м<br>Размер 0.2 gb</p> </li> <li class="list-item dodgerblue">2022-01-13 чт <p><a href="learned_online-courses.html">Online Course</a><br><strong>[code-basics] JavaScript для начинающих</strong><br>22 часа 79 уроков с практикой в браузере</p> </li> <li class="list-item dodgerblue">2022-01-19 ср <p><a href="learned_online-courses.html">Online Course</a><br><strong>[stepik] Введение в программирование (JavaScript ES6)</strong><br>155 заданий</p> </li> <li class="list-item red">2022-01-19 ср <p><a href="learned_video-courses.html">Video Course</a><br><strong>[Webcademy] [Юрий Ключевский] Gulp Сборка [2018]</strong><br>Время 6ч 14м<br>Размер 6 gb</p> </li> <li class="list-item green">2022-01-19 ср Верстка учебного проекта (HTML, CSS) <p><strong>Portland</strong><br>по видео [Webcademy] [Юрий Ключевский] Gulp Сборка [2018]<br>Сайт проекта на github<br><a href="https://frontend200tb.github.io/portland/">frontend200tb.github.io/portland</a></p> </li> <li class="list-item red">2022-01-31 пн <p><a href="learned_video-courses.html">Video Course</a><br><strong>[FrontCoder] [Анатолий Саламатин] Собери свою сборку на Gulp 4 [2017]</strong><br>Время 1ч 44м<br>Размер 385 mb</p> </li> <li class="list-item red">2022-02-01 вт <p><a href="learned_video-courses.html">Video Course</a><br><strong>[Udemy] [Михаил Непомнящий] Уроки EcmaScript 6 [2018]</strong><br>Время 1ч 55м<br>Размер 360 mb</p> </li> <li class="list-item red">2022-02-03 чт <p><a href="learned_video-courses.html">Video Course</a><br><strong>[Hacking School] Разжёванный курс по JavaScript для чайников [2021-09-21]</strong><br>Время 5ч 44м<br>Размер 517 mb</p> </li> <li class="list-item red">2022-02-04 пт <p><a href="learned_video-courses.html">Video Course</a><br><strong>[Дмитрий Валак] Javascript с нуля - твой быстрый старт! Уроки по javascript для начинающих [2020-09-04]</strong><br>Время 53м<br>Размер 191 mb</p> </li> <li class="list-item red">2022-02-07 пн <p><a href="learned_video-courses.html">Video Course</a><br><strong>[WAYUP] [Андрей Гаврилов] Основы JavaScript для начинающих за 2 часа [2020-02-08]</strong><br>Время 1ч 47м<br>Размер 187 mb</p> </li> <li class="list-item red">2022-02-09 ср <p><a href="learned_video-courses.html">Video Course</a><br><strong>[Виктор Богутский] Короткие уроки JavaScript [2018]</strong><br>Время 7ч 9м<br>Размер 764 mb</p> </li> <li class="list-item red">2022-02-10 чт <p><a href="learned_video-courses.html">Video Course</a><br><strong>[ITDoctor] JavaScript Основы для Начинающих - Полный Курс за 5 часов [2021-10-12] </strong><br>Время 5ч 18м<br>Размер 550 mb</p> </li> <li class="list-item red">2022-02-11 пт <p><a href="learned_video-courses.html">Video Course</a><br><strong>[Василий Муравьев] JavaScript для Начинающих [2021-12-02]</strong><br>Время 1ч 48м<br>Размер 210 mb</p> </li> <li class="list-item red">2022-02-14 пн <p><a href="learned_video-courses.html">Video Course</a><br><strong>[ВебКадеми] [Юрий Ключевский] JavaScript для начинающих 6 часов [2021-12-18]</strong><br>Время 6ч 46м<br>Размер 552 mb</p> </li> <li class="list-item red">2022-02-15 вт <p><a href="learned_video-courses.html">Video Course</a><br><strong>[Udemy] [Богдан Стащук] JavaScript - Полный Курс JavaScript Для Начинающих [2021-12-21] </strong><br>Время 6ч 46м<br>Размер 552 mb</p> </li> <li class="list-item red">2022-02-17 чт <p><a href="learned_video-courses.html">Video Course</a><br><strong>[RS School] JS Stage 1 [2019]</strong><br>Время 11ч 49м<br>Размер 1.7 gb</p> </li> <li class="list-item red">2022-02-18 пт <p><a href="learned_video-courses.html">Video Course</a><br><strong>[Владилен Минин] Премиум курс по EcmaScript 6 [2019]</strong><br>Время 3ч 9м<br>Размер 382 mb</p> </li> <li class="list-item red">2022-02-21 пн <p><a href="learned_video-courses.html">Video Course</a><br><strong>[Антон Белый] RS School Basics [2021]</strong><br>Время 3ч 40м<br>Размер 478 mb</p> </li> <li class="list-item red">2022-03-05 сб <p><a href="learned_video-courses.html">Video Course</a><br><strong>[Владилен Минин] JavaScript. Полное руководство [2019]</strong><br>Время 32ч 13м<br>Размер 8.2 gb</p> </li> <li class="list-item red">2022-03-07 пн <p><a href="learned_video-courses.html">Video Course</a><br><strong>[Владилен Минин] Webpack - Полный курс за 3 часа [2020]</strong><br>Время 2ч 51м<br>Размер 340 mb</p> </li> <li class="list-item red">2022-03-10 чт <p><a href="learned_video-courses.html">Video Course</a><br><strong>[loftschool] [Владимир Сабанцев] Gulp [2019]</strong><br>Время 1ч 42м<br>Размер 398 mb</p> </li> <li class="list-item yellow">2022-05-12 чт <p><a href="learned_books.html">Книга</a><br><strong>HeadFirst JavaScript</strong><br>Майкл Моррисон<br>2012<br>592 стр</p> </li> <li class="list-item yellow">2022-05-24 вт <p><a href="learned_books.html">Книга</a><br><strong>Справочник Javascript</strong><br>Никольский<br>2021<br>306 стр </p> </li> <li class="list-item yellow">2022-05-31 вт <p><a href="learned_books.html">Книга</a><br><strong>Web-программирование JavaScript</strong><br>Зудилова<br>2012<br>68 стр</p> </li> <li class="list-item yellow">2022-06-02 чт <p><a href="learned_books.html">Книга</a><br><strong>Разработка игр на языке JavaScript (1е)</strong><br>Беляев<br>2016<br>128 стр</p> </li> <li class="list-item yellow">2022-06-06 пн <p><a href="learned_books.html">Книга</a><br><strong>Основы JavaScript</strong><br>ИНТУИТ<br>2016<br>185 стр</p> </li> <li class="list-item red">2022-09-09 чт <p><a href="learned_video-courses.html">Video Course</a><br><strong>[LoftSchool] [Сергей Мелюков] Комплексное обучение JavaScript. Видеокурс [2016]</strong><br>Время 38ч<br>Размер 6.7 gb</p> </li> <li class="list-item yellow">2022-06-10 пт <p><a href="learned_books.html">Книга</a><br><strong>Основы программирования на JavaScript (2е)</strong><br>ИНТУИТ<br>2016<br>168 стр</p> </li> </ol>','<h1>Изученные книги по frontend разработке</h1> <ol> <li class="yellow">2021-07-02 пт <p><strong>[2019] Путь фрилансера</strong><br>Артем Исламов<br>218 стр</p> </li> <li class="yellow">2021-07-16 пт <p><strong>[2008] HTML. Популярный самоучитель (2е)</strong><br>Александр Чиртик<br>256стр</p> </li> <li class="yellow">2021-07-21 ср <p><strong>[2007] Фриланс Когда сам себе начальник</strong><br>Анна Мурадова<br>92стр</p> </li> <li class="yellow">2021-07-27 вт <p><strong>[1997] HTML с самого начала</strong><br>Брент Хеслоп<br>417стр</p> </li> <li class="yellow">2021-08-12 чт <p><strong>[2016] Bootstrap. Руководство</strong><br>Влад Мержевич<br>58 стр</p> </li> <li class="yellow">2021-08-14 сб <p><strong>[2016] Bootstrap Быстрое создание современных сайтов</strong><br>Тимур Машнин<br>145 стр</p> </li> <li class="yellow">2021-08-16 пн <p><strong>[1998] HTML в подлиннике</strong><br>Браун<br>1048 стр</p> </li> <li class="yellow">2021-08-23 пн <p><strong>[2017] Путь в программисты</strong><br>Константин Шереметьев<br>41 стр</p> </li> <li class="yellow">2021-09-15 ср <p><strong>[2019] Вы не знаете JS 1 Приступим</strong><br>Кайл Симпсон<br>64 стр</p> </li> <li class="yellow">2021-09-16 чт <p><strong>[2016] Javascript для детей. Самоучитель</strong><br>Ник Морган<br>288 стр</p> </li> <li class="yellow">2021-09-22 ср <p><strong>[2014] HeadFirst Изучаем HTML XHTML и CSS (2е)</strong><br>Эрик Фримен, Элизабет Фримен<br>720 стр</p> </li> <li class="yellow">2021-09-26 вс <p><strong>[2013] HeadFirst Изучаем программирование на HTML5</strong><br>Эрик Фримен, Элизабет Фримен<br>640 стр </p> </li> <li class="yellow">2021-09-27 пн <p><strong>[2016] jQuery для начинающих</strong><br>Антон Шевчук<br>156 стр</p> </li> <li class="yellow">2021-10-01 пт <p><strong>[2015] HeadFirst Программирование на JavaScript</strong><br>Эрик Фримен, Элизабет Робсон<br>640 стр</p> </li> <li class="yellow">2021-12-04 сб <p><strong>[2013] HTML и CSS. Разработка и дизайн веб-сайтов</strong><br>Джон Дакетт<br>480 стр</p> </li> <li class="yellow">2021-12-08 ср <p><strong>[2011] Самоучитель HTML</strong><br>Влад Мержевич<br>97 стр</p> </li> <li class="yellow">2021-12-18 сб <p><strong>[2011] HTML Самоучитель (2-е изд)</strong><br>Н. Комолова, Е. Яковлева<br>288 стр</p> </li> <li class="yellow">2022-02-04 чт <p><strong>[2016] Разработка игр на языке JavaScript</strong><br>Сергей Беляев<br>128 стр</p> </li> <li class="yellow">2022-05-24 вт <p><strong>[2012] HeadFirst JavaScript</strong><br>Майкл Моррисон<br>608 стр</p> </li> <li class="yellow">2022-05-24 вт <p><strong>[2021] Справочник Javascript</strong><br>Никольский<br>306 стр</p> </li> <li class="list-item yellow">2022-05-31 вт <p><strong>[2012] Web-программирование JavaScript</strong><br>Зудилова, Буркова<br>68 стр</p> </li> <li class="list-item yellow">2022-06-06 пн <p><strong>[2016] Основы JavaScript</strong><br>ИНТУИТ<br>185 стр</p> </li> <li class="list-item yellow">2022-06-10 пт <p><strong>[2016] Основы программирования на JavaScript (2е)</strong><br>ИНТУИТ<br>168 стр</p> </li> <li class="list-item yellow">2022-07-27 ср <p><strong>[2018] React.js для начинающих (2е)</strong><br>Пацианский<br>147 стр</p> </li> <li class="list-item yellow">2023-03-18 сб <p><strong>[2016] Введение в ECMAScript 6</strong><br>Нараян Прасти<br>178 стр<br>( Learning ESMAScript 6 (eng) - Narayan Prusty )</p> </li> <li class="list-item yellow">2023-12-28 чт <p><strong>[2000] Практические занятия по JavaScript</strong><br>Николенко<br>129 стр</p> </li> </ol>','<h1>Изученные видео курсы по frontend разработке</h1> <ol> <li class="red">2021-08-17 вт <p>Video Course<br><strong>[2011] Мини-курс сайта с нуля на WordPress</strong><br><strong>WebForMySelf Андрей Бернацкий</strong><br>8 уроков<br>Время 7ч 39м</p> </li> <li class="red">2021-08-18 ср <p>Video Course<br><strong>[2012] Git обучение основам</strong><br><strong>Lynda.com Kevin Skoglundк</strong><br>14 уроков<br>Время 6ч 26м</p> </li> <li class="red">2021-06-11 пт <p>Video Course<br><strong>[2013] Создание сайта на 1С Битрикс с нуля</strong><br><strong>camouf.ru Михаил Базаров</strong><br>14 уроков<br>Время 6ч 23м</p> </li> <li class="red">2021-05-27 чт <p>Video Course<br><strong>[2013] Язык программирования JavaScript</strong><br><strong>Hexlet Рахим Давлеткалиев</strong><br>7 уроков<br>Время 4ч 42м</p> </li> <li class="red">2021-07-19 пн <p>Video Course<br><strong>[2014] Bootstrap 3 Добавь интерактивности на свой сайт</strong><br><strong>Lynda.com Jen Kramer</strong><br>5 уроков<br>Время 1ч 56м</p> </li> <li class="red">2021-06-10 чт <p>Video Course<br><strong>[2015] Основы программирования</strong><br><strong>CS50 Harvard </strong><br>23 урока<br>Время 20ч 42м</p> </li> <li class="red">2021-05-20 чт <p>Video Course<br><strong>[2015] HTML_CSS. Основы создания сайтов</strong><br><strong>GeekBrains Юрий Жаворонок</strong><br>8 уроков<br>Время 19ч 42м</p> </li> <li class="red">2021-06-05 сб <p>Video Course<br><strong>[2015] Видео курс HTML CSS</strong><br><strong>ITVDN Александр Петрик</strong><br>8 уроков<br>Время 9ч 30м</p> </li> <li class="red">2022-10-13 <p>Video Course<br><strong>[2015] JavaScript Базовый курс</strong><br><strong>ITVDN Дмитрий Охрименко</strong><br>5 уроков<br>Время 7ч 22м</p> </li> <li class="red">2022-09-16 <p>Video Course<br><strong>[2015] JavaScript Шаблоны</strong><br><strong>ITVDN Дмитрий Охрименко</strong><br>5 уроков<br>Время 5ч</p> </li> <li class="red">2021-07-01 чт <p>Video Course<br><strong>[2015] HTML-верстка Инструменты и приемы профессиональной front-end разработки</strong><br><strong>Нетология </strong><br>22 видео<br>Время 37ч 25м</p> </li> <li class="red">2021-08-14 сб <p>Video Course<br><strong>[2015] Курс Bootstrap</strong><br><strong>wh-db.com Сергей Никонов</strong><br>8 уроков<br>Время 3ч 31м</p> </li> <li class="red">2021-10-26 вт <p>Video Course<br><strong>[2015] Школа Вебмастеров</strong><br><strong>Яндекс-Академия </strong><br><br>Время 22ч </p> </li> <li class="red">2021-11-02 вт <p>Video Course<br><strong>[2015] Четвертая Вебмастерская</strong><br><strong>Яндекс-Академия </strong><br><br>Время 4ч 49м</p> </li> <li class="red">2022-09-16 <p>Video Course<br><strong>[2016] ECMAScript6</strong><br><strong>CodeDojo </strong><br>18 уроков<br>Время 4ч 28м </p> </li> <li class="red">2021-11-22 пн <p>Video Course<br><strong>[2016] Базовый HTML и CSS</strong><br><strong>HTML Academy </strong><br><br>Время 18ч 37м </p> </li> <li class="red">2022-09-24 <p>Video Course<br><strong>[2016] How to JavaScript</strong><br><strong>ITVDN Валерия</strong><br>41 урок<br>Время 2ч 55м</p> </li> <li class="red">2021-12-28 вт <p>Video Course<br><strong>[2016] Основы использования Git</strong><br><strong>ITVDN Александр Пономаренко</strong><br><br>Время 1ч 2м</p> </li> <li class="red">2022-11-25 пт <p>Video Course<br><strong>[2016] Пoнятный JavaScript</strong><br><strong>jsexpert Евгений Калюжный</strong><br><br>Время 31ч 9м</p> </li> <li class="red">2022-06-09 чт <p>Video Course<br><strong>[2016] Комплексное обучение JavaScript</strong><br><strong>LoftSchool Сергей Мелюков</strong><br><br>Время 38ч</p> </li> <li class="red">2022-01-31 пн <p>Video Course<br><strong>[2017] Собери свою сборку на Gulp 4</strong><br><strong>FrontCoder Анатолий Саламатин</strong><br>10<br>Время 1ч 44м</p> </li> <li class="red">2022-10-09 вс <p>Video Course<br><strong>[2017] ECMAScript 6</strong><br><strong>ITVDN Сергей Рубец</strong><br>9 уроков<br>Время 6ч 15м</p> </li> <li class="red">2022-01-24 <p>Video Course<br><strong>[2018] Уроки EcmaScript 6</strong><br><strong>Udemy Михаил Непомнящий</strong><br>15 уроков<br>Время 1ч 55м</p> </li> <li class="red">2022-01-19 ср <p>Video Course<br><strong>[2018] Gulp Сборка</strong><br><strong>Webcademy Юриий Ключевский</strong><br><br>Время 6ч 14м</p> </li> <li class="red">2021-05-04 вт <p>Video Course<br><strong>[2019] HTML и CSS для начинающих 01. Основы HTML и CSS</strong><br><strong>Brainscloud Дмитрий Валак</strong><br>43 урока<br>Время 10ч 20м</p> </li> <li class="red">2021-05-22 сб <p>Video Course<br><strong>[2019] HTML и CSS для начинающих 02. Верстка адаптивного сайта с нуля</strong><br><strong>Brainscloud Дмитрий Валак</strong><br>16 уроков<br>Время 2ч 49м</p> </li> <li class="red">2021-10-14 чт <p>Video Course<br><strong>[2019] Быстрая и комфортная верстка сайтов</strong><br><strong>Brainscloud Дмитрий Валак</strong><br>6 уроков<br>Время 7ч 35м</p> </li> <li class="red">2021-11-23 вт <p>Video Course<br><strong>[2019] Figma 3.0 для дизайнера</strong><br><strong>Skillbox Антон Рыбаков</strong><br><br>Время 13ч 40м</p> </li> <li class="red">2021-12-28 вт <p>Video Course<br><strong>[2019] Курс по GIT</strong><br><strong>Udemy Максим Гузив</strong><br><br>Время 3ч 59м </p> </li> <li class="red">2021-11-30 вт <p>Video Course<br><strong>[2019] Шаблонизатор Pug_jade - современный ускоритель для HTML</strong><br><strong>Udemy Михаил Непомнящий</strong><br>6 уроков<br>Время 1ч 58м</p> </li> <li class="red">2021-12-24 пт <p>Video Course<br><strong>[2019] Git. Полный курс для начинающих</strong><br><strong>Udemy Наиль Алишев</strong><br><br>Время 4ч 47м</p> </li> <li class="red">2022-03-05 сб <p>Video Course<br><strong>[2019] JavaScript. Полное руководство</strong><br><strong>WebForMySelf Владилен Минин</strong><br><br>Время 32ч 13м</p> </li> <li class="red">2022-10-29 сб <p>Video Course<br><strong>[2019] Премиум курс по EcmaScript 6</strong><br><strong> Владилен Минин</strong><br>17 уроков<br>Время 3ч 9м</p> </li> <li class="red">2021-12-20 пн <p>Video Course<br><strong>[2020] Основы использования Git</strong><br><strong>ITVDN Анна Маргина</strong><br>6 уроков<br>Время 2ч 13м</p> </li> <li class="red">2022-11-01 вт <p>Video Course<br><strong>[2020] Сложный JavaScript простым языком</strong><br><strong> Владилен Минин</strong><br>17 уроков<br>Время 5ч 55м</p> </li> <li class="red">2022-11-10 чт <p>Video Course<br><strong>[2021] Ускоренный курс по современному Javascript</strong><br><strong>Udemy Юра Аллахвердов</strong><br><br>Время 10ч</p> </li> <li class="red">2022-10-26 ср <p>Video Course<br><strong>[2021] ES6</strong><br><strong> Василий Муравьев</strong><br>13 уроков<br>Время 2ч 49м </p> </li> <li class="red">2022-10-28 пт <p>Video Course<br><strong>[2021] Уроки Javascript</strong><br><strong> Василий Муравьев</strong><br>12 уроков<br>Время 3ч 17м</p> </li> </ol>','<h1>Изученные онлайн курсы по frontend разработке</h1> <ol> <li class="dodgerblue">2021-04-22 вт <p><a href="learned_online-courses.html">Online Course</a><br><strong>HTML, CSS, JavaScript бесплатный вводный курс</strong></p> <p>Сайт <a href="https://praktikum.yandex.ru/profile/web/">praktikum.yandex.ru/profile/web/</a></p> </li> <li class="dodgerblue">2021-04-27 вт <p><a href="learned_online-courses.html">Online Course</a><br><strong>[webshake] [Артем Ивашкевич] Курс HTML для начинающих [2017]</strong><br> 12 уроков</p> <p>Автор Артем Ивашкевич<br> Сайт webshake.ru</p> </li> <li class="dodgerblue">2021-06-06 вс <p><a href="learned_online-courses.html">Online course</a><br><strong>[stepik] Веб разработка для начинающих HTML CSS</strong><br> 49 уроков<br> Время 3ч</p> <p>сайт stepik.org</p> </li> <li class="dodgerblue">2021-06-28 пн <p><a href="learned_online-courses.html">Online Course</a><br><strong>[stepik] [Антон Холин] JavaScript для начинающих</strong><br> 17 уроков<br> Время 6ч</p> <p>Автор Антон Холин<br> сайт stepik.org</p> </li> <li class="dodgerblue">2021-07-14 ср <p><a href="learned_online-courses.html">Online Course</a><br><strong>CSS Grid Garden</strong><br> 28 уровней<br> "Добро пожаловать в Grid Garden — место, где вы напишете CSS-код, чтобы вырастить морковный сад"<br> Сайт https://cssgridgarden.com/#ru</p> </li> <li class="dodgerblue">2021-07-21 ср <p><a href="learned_online-courses.html">Online Course</a><br><strong>[Codeliber] Learn HTML</strong><br> Разработчик Codeliber<br> Приложение на Android</p> </li> <li class="dodgerblue">2021-08-09 пн <p><a href="learned_online-courses.html">Online Course</a><br><strong>[Codeliber] Learn CSS</strong><br> Разработчик Codeliber<br> Приложение на Android</p> </li> <li class="dodgerblue">2021-08-24 вт <p><a href="learned_online-courses.html">Online Course</a><br><strong>[Codeliber] Learn JavaScript</strong><br> Разработчик Codeliber<br> Приложение на Android</p> </li> <li class="dodgerblue">2021-08-25 ср <p><a href="learned_online-courses.html">Online Course</a><br><strong>[Нетология] [Владимир Языков] Основы верстки сайта</strong><br> 5 уроков<br></p> <p>Автор Владимир Языков<br>Сайт netology.ru<br>Стоимость бесплатно<br>Уровень с нуля</p> </li> <li class="dodgerblue">2021-08-28 сб <p><a href="learned_online-courses.html">Online Course</a><br><strong>[Нетология] [Дмитрий Бронских] Первые шаги в JavaScript [2021]</strong><br></p> <p>Автор Дмитрий Бронских<br>Сайт netology.ru<br>Стоимость бесплатно<br>Уровень с нуля</p> </li> <li class="dodgerblue">2021-09-03 пт <p><a href="learned_online-courses.html">Online Course</a><br><strong>[Нетология] [Дмитрий Демидов] PYFREE-VIDEO Python-разработка для начинающих [2021]</strong><br></p> <p>Автор Дмитрий Демидов<br>Сайт netology.ru<br>Стоимость бесплатно<br>Уровень с нуля</p> </li> <li class="dodgerblue">2021-09-08 ср <p><a href="learned_online-courses.html">Online Course</a><br><strong>[Нетология] Профессии в программировании [2021]</strong><br></p> <p>Сайт netology.ru<br>Стоимость бесплатно<br>Уровень с нуля</p> </li> <li class="dodgerblue">2021-09-10 пт <p><a href="learned_online-courses.html">Online Course</a><br><strong>[Codeliber] Learn Python</strong><br> Разработчик Codeliber<br> Приложение на Android</p> </li> <li class="dodgerblue">2021-11-01 пн <p><a href="learned_online-courses.html">Online Course</a><br><strong>[html academy] Знакомство с веб-разработкой</strong><br>Часть 1: Основы HTML и CSS<br>Часть 2: Основы JavaScript<br>Часть 3: Основы PHP<br>1 час 35 минут теории, 1 час 40 минут практики</p> </li> <li class="dodgerblue">2021-11-06 сб <p><a href="learned_online-courses.html">Online Course</a><br><strong>https://githowto.com/ru</strong><br>Уроки по изучению git<br>51 урок</p> </li> <li class="dodgerblue">2021-11-09 вт <p><a href="learned_online-courses.html">Online Course</a><br><strong>[html academy] Знакомство с HTML и CSS</strong><br>Часть 1:Структура HTML-документа<br>Часть 2:Разметка текста<br>Часть 3:Ссылки и изображения<br>Часть 4:Основы CSS<br>Часть 5:Оформление текста<br>3 часа теории, 3 часа практики</p> </li> <li class="dodgerblue">2021-11-10 ср <p><a href="learned_online-courses.html">Online Course</a><br><strong>https://ru.bem.info/</strong><br>Методология БЭМ. Быстрый старт</p> </li> <li class="dodgerblue">2021-12-13 пн <p><a href="learned_online-courses.html">Online Course</a><br><strong>[code-basics] HTML для начинающих</strong><br>11 часов 41 урок с практикой в браузере</p> </li> <li class="dodgerblue">2021-12-16 чт <p><a href="learned_online-courses.html">Online Course</a><br><strong>[code-basics] CSS для начинающих</strong><br>8 часов 33 урока с практикой в браузере</p> </li> <li class="dodgerblue">2022-01-13 чт <p><a href="learned_online-courses.html">Online Course</a><br><strong>[code-basics] JavaScript для начинающих</strong><br>22 часа 79 уроков с практикой в браузере</p> </li> <li class="dodgerblue">2022-01-19 ср <p><a href="learned_online-courses.html">Online Course</a><br><strong>[stepik] Введение в программирование (JavaScript ES6)</strong><br>155 заданий</p> </li> </ol>','<h1>Изучено на Youtube</h1> <h2>Изученные YouTube каналы по frontend разработке</h2> <ol> <li class="red">2021-04-29 чт <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>frontendgirl</strong><br> Время 2ч 25м</p> <p></p> <p>Автор Таня</p> <details> <summary>13 видео от 2019-02-17 до 2020-06-22</summary> 2019-02-17 - КАК Я СТАЛА ПРОГРАММИСТОМ<br> 2019-02-24 - 7 ОШИБОК НАЧИНАЮЩИХ ПРОГРАММИСТОВ<br> 2019-03-03 - МИФЫ И ЗАБЛУЖДЕНИЯ О ПРОГРАММИСТАХ, ЧТО ВАМ НА САМОМ ДЕЛЕ НЕ НУЖНО<br> 2019-03-24 - НУЖЕН ЛИ АНГЛИЙСКИЙ ПРОГРАММИСТУ_<br> 2019-04-28 - ПОЙТИ НА КУРСЫ ИЛИ УЧИТЬСЯ САМОМУ_ ПЛЮСЫ И МИНУСЫ.<br> 2019-05-12 - КАК СТАТЬ FRONTEND-РАЗРАБОТЧИКОМ_ ЧАСТЬ 1 - ПОШАГОВАЯ ИНСТРУКЦИЯ<br> 2019-06-09 - КАК СТАТЬ FRONTEND-РАЗРАБОТЧИКОМ_ ЧАСТЬ 2 - ПОШАГОВАЯ ИНСТРУКЦИЯ<br> 2020-03-28 - КАК СТАТЬ FRONTEND-РАЗРАБОТЧИКОМ_ ЧАСТЬ 3 - ПОШАГОВАЯ ИНСТРУКЦИЯ<br> 2020-05-19 - СОБЕСЕДОВАНИЕ. ЧТО СПРАШИВАЮТ_ КАК ОТВЕЧАТЬ_ СОВЕТЫ. + ТЕСТ<br> 2020-06-07 - МАСТХЕВ. ПОЛЕЗНЫЕ ИНСТРУМЕНТЫ ДЛЯ ФРОНТЕНД-РАЗРАБОТЧИКА<br> 2020-06-11 - ЧТО ВЫБРАТЬ_ РАБОТАТЬ УДАЛЁННО ИЛИ В ОФИСЕ_ ПЛЮСЫ И МИНУСЫ УДАЛЁНКИ<br> 2020-06-15 - ДЕВУШКА-ПРОГРАММИСТ. КАК КО МНЕ ОТНОСЯТСЯ НА РАБОТЕ_ СТРАХИ И СТЕРЕОТИПЫ<br> 2020-06-22 - КАК НЕ БРОСИТЬ УЧЁБУ_ ЧТО ДЕЛАТЬ ЕСЛИ ИНТЕРЕС ПРОШЁЛ_ НЕСКОЛЬКО СОВЕТОВ КАК СОХРАНИТЬ МОТИВАЦИЮ. </details> <p></p> </li> <li class="red">2021-05-29 сб <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>gabdr0</strong></p> <p>Автор Дамир Габдрахимов<br> Сайт gabdrahimov.ru<br> 12 видео<br> от 2019-02-10 до 2019-06-26<br> Время 1ч 8м</p> </li> <li class="red">2021-05-31 пн <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>Antonina Listopadova</strong></p> <p>Автор Антонина Листопадова <br> 30 видео <br> от 2019-12-07 до 2021-05-10<br> Время 8ч 47м</p> </li> <li class="red">2021-07-10 сб <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>OneByteSite в IT после 30</strong><br> 20 видео <br> от 2020-05-11 до 2020-11-07<br> Время 2ч 33м </p> </li> <li class="red">2021-07-11 вс <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>Front Fri End</strong><br> 10 видео <br> от 2018-10-28 до 2021-06-01<br> Время 2ч 30м</p> </li> <li class="red">2021-07-12 пн <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>IT на диване</strong><br> 29 видео<br> от 2019-09-08 до 2021-07-04<br> Время 5ч 54м</p> <p>Автор Антон Воропаев</p> </li> <li class="red">2021-07-15 чт <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>Anna Blok — Frontend Tutorial</strong><br> Время 3ч 21м</p> <p> Автор Анна Блок 24 видео от 2018-09-05 до 2021-07-10 </p> </li> <li class="red">2021-08-03 вт <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>Brainoteka Light</strong><br> 147 видео<br> Время 12ч 9м</p> <p>Автор Александр Сажин</p> </li> <li class="red">2021-08-09 пн <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>Записки фронтендера</strong><br> 9 видео<br> Время 2ч 29м</p> <p>Автор Максим</p> </li> <li class="red">2021-08-10 вт <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>Сергей Жарков - Фриланс и Фронтенд</strong><br> 6 видео<br> Время 1ч 35м</p> <p>Автор Сергей Жарков</p> </li> <li class="red">2021-08-11 ср <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>Онлайн-школа на Wordpress</strong><br> 11 видео<br> Время 2ч 8м</p> <p>Автор Марина Клюшун<br> Сайт wpshkola.ru</p> </li> <li class="red">2021-08-18 ср <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>welcome to IT</strong><br> 11 видео<br> Время 1ч 49м</p> </li> <li class="red">2021-08-18 ср <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>UMNO - JavaScript</strong><br> 4 видео<br> Время 49м</p> <p>Автор Сергей Власов</p> </li> <li class="red">2021-08-19 чт <p><a href="learned_yt-channels.html">YouTube Channel</a><br><strong>Валерий Стрелец</strong><br> 8 видео<br> Время 3ч 34м</p> <p>Автор Валерий</p> </li> </ol> <h2>Изученные YouTube курсы по frontend разработке</h2> <ol> <li class="red">2021-04-19 пн <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>Учим HTML за 1 час! #от Профессионала (2015-12-31)</strong><br> Время 1ч 4м</p> <p>YouTube Channel Хауди Хо™ - Просто о мире IT!</p> </li> <li class="red">2021-04-19 пн <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>Учим CSS за 1 час! #от Профессионала (2016-01-03)</strong><br> Время 1ч 26м</p> <p>YouTube Channel Хауди Хо™ - Просто о мире IT!</p> </li> <li class="red">2021-04-30 пт <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Вадим Гребенщиков] HTML для начинающих [2015]</strong><br> 15 уроков<br> Время 2ч 31м</p> <p>Автор Вадим Гребенщиков<br> YouTube Channel Вадим Гребенщиков<br> Сайт htmlboss.ru</p> </li> <li class="red">2021-05-07 пт <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Андрей Андриевский] Курс html css [2019]</strong><br> 24 видео<br> Время 11ч 7м</p> <p>Автор Андрей Андриевский<br> YouTube Channel Андрей Андриевский</p> </li> <li class="red">2021-05-11 вт <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Евгений Попов] Курс html [2012]</strong><br> 32 видео<br> Время 3ч 52м</p> <p>Автор Евгений Попов<br> YouTube Channel Евгений Попов</p> </li> <li class="red">2021-05-13 чт <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Евгений Попов] Курс css [2012]</strong><br> 44 видео<br> Время 6ч 47м</p> <p>Автор Евгений Попов<br> YouTube Channel Евгений Попов</p> </li> <li class="red">2021-07-02 пт <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Brainoteka Light] [Александр Сажин] Введение в HTML [2015]</strong><br> 12 видео<br> Время 54м</p> <p>Автор Александр Сажин<br> YouTube Channel Brainoteka Light<br> сайт brainoteka.com</p> </li> <li class="red">2021-07-05 пн <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Brainoteka Light] [Александр Сажин] Введение в WEB разработку [2015]</strong><br> 13 видео<br> Время 56м</p> <p>Автор Александр Сажин<br> YouTube Channel Brainoteka Light<br> Сайт brainoteka.com</p> </li> <li class="red">2021-07-06 вт <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Brainoteka Light] [Александр Сажин] Введение в CSS [2015]</strong><br> 10 видео<br> Время 37м</p> <p>Автор Александр Сажин<br> YouTube Channel Brainoteka Light<br> Сайт brainoteka.com</p> </li> <li class="red">2021-07-07 ср <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Brainoteka Light] [Александр Сажин] Введение в JavaScript [2015]</strong><br> 11 видео<br> Время 54м</p> <p>Автор Александр Сажин<br> YouTube Channel Brainoteka Light<br> Сайт brainoteka.com</p> </li> <li class="red">2021-07-08 чт<br> <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Brainoteka Light] [Александр Сажин] Введение в C# [2015]</strong><br> 9 видео<br> Время 1ч 8м</p> <p>Автор Александр Сажин<br> YouTube Channel Brainoteka Light<br> Сайт brainoteka.com</p> </li> <li class="red">2021-07-09 пт <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Brainoteka Light] [Александр Сажин] Введение в ASP.NET MVC [2015]</strong><br> 13 видео<br> Время 1ч 9м</p> <p>Автор Александр Сажин<br> YouTube Channel Brainoteka Light<br> Сайт brainoteka.com</p> </li> <li class="red">2021-07-22 чт <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Андрей Андриевский] Курс CSS для Профи [2019]</strong><br> 19 видео<br> Время 7ч 40м</p> <p>Автор Андрей Андриевский <br> YouTube Channel Андрей Андриевский</p> </li> <li class="red">2021-07-28 ср <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Brainoteka Light] [Александр Сажин] jQuery [2015]</strong><br> 27 видео<br> Время 2ч 24м</p> <p>Автор Александр Сажин<br> YouTube Channel Brainoteka Light<br> сайт brainoteka.com</p> </li> <li class="red">2021-07-29 чт <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Brainoteka Light] [Александр Сажин] Less [2016]</strong><br> 13 видео<br> Время 51м</p> <p>Автор Александр Сажин<br> YouTube Channel Brainoteka Light<br> сайт brainoteka.com</p> </li> <li class="red">2021-07-30 пт <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Brainoteka Light] [Павел Побережный] Bootstrap 4 [2017]</strong><br> 21 видео<br> Время 1ч 44м</p> <p>Автор Павел Побережный<br> YouTube Channel Brainoteka Light<br> сайт brainoteka.com</p> </li> <li class="red">2021-08-02 пн <p><a href="learned_yt-courses.html">YouTube Course</a><br><strong>[Brainoteka Light] [Павел Побережный] Введение в GIT [2018]</strong><br> 12 видео<br> Время 47м</p> <p>сайт brainoteka.com<br> Автор Павел Побережный</p> </li> </ol>','<h1>Вся моя верстка</h1> <ol> <li>Верстка учебного проекта (HTML, CSS)<br><strong>resume </strong><br>по курсу [Дмитрий Валак] HTML и CSS для начинающих [2019]<br><strong> Brainscloud</strong> <div> Исходный код на <a href="#{data.sourceCode}">GitHub </a>Сайт <a href="#{data.site}">https://frontend200tb.github.io/resume/ </a></div> </li> <li>Верстка учебного проекта (HTML, CSS, jQuery)<br><strong>freepsd </strong><br>по курсу [Вадим Прокопчук] Верстка сайта с нуля до завершения, html_css_js [2019-04-18]<br><strong> от 0 до 1</strong> <div> Исходный код на <a href="#{data.sourceCode}">GitHub </a>Сайт <a href="#{data.site}">https://frontend200tb.github.io/freepsd/ </a></div> </li> <li>Верстка учебного проекта (HTML, CSS, jQuery, Bootstrap)<br><strong>landon </strong><br>по курсу [] Bootstrap 3 Добавь интерактивности на свой сайт [2014]<br><strong>Lynda.com </strong> <div> Исходный код на <a href="#{data.sourceCode}">GitHub </a>Сайт <a href="#{data.site}">https://frontend200tb.github.io/landon/ </a></div> </li> <li>Верстка учебного проекта (HTML, CSS, JavaScript)<br><strong>coffee </strong><br>по курсу [Андрей Андриевский] Курс CSS для Профи [2019]<br><strong> Андрей Андриевский</strong> <div> Исходный код на <a href="#{data.sourceCode}">GitHub </a>Сайт <a href="#{data.site}">https://frontend200tb.github.io/coffee/ </a></div> </li> <li>Верстка учебного проекта (HTML, CSS, JavaScript)<br><strong>yummy </strong><br>по курсу [] <br><strong> </strong> <div> Исходный код на <a href="#{data.sourceCode}">GitHub </a>Сайт <a href="#{data.site}">https://frontend200tb.github.io/yummy/ </a></div> </li> <li>Верстка учебного проекта (HTML, CSS, JavaScript)<br><strong>webdev </strong><br>по курсу [Сергей Жарков] Верстка сайта с нуля для начинающих _ HTML + CSS за 1 час [2020-05-15]<br><strong> Сергей Жарков - Фриланс и Фронтенд</strong> <div> Исходный код на <a href="#{data.sourceCode}">GitHub </a>Сайт <a href="#{data.site}">https://frontend200tb.github.io/webdev/ </a></div> </li> <li>Верстка учебного проекта (HTML, CSS)<br><strong>aquatic </strong><br>по курсу [Александр Петрик] Видео курс HTML CSS [2015]<br><strong>ITVDN </strong> <div> Исходный код на <a href="#{data.sourceCode}">GitHub </a>Сайт <a href="#{data.site}">https://frontend200tb.github.io/aquatic/ </a></div> </li> <li>Верстка учебного проекта (HTML, CSS, jQuery, Bootstrap)<br><strong>kinomonster </strong><br>по курсу [Сергей Никонов] Курс Bootstrap [2015]<br><strong>wh-db.com </strong> <div> Исходный код на <a href="#{data.sourceCode}">GitHub </a>Сайт <a href="#{data.site}">https://frontend200tb.github.io/kinomonster/ </a></div> </li> <li>Верстка учебного проекта (HTML, CSS, jQuery, Bootstrap)<br><strong>Chooce travel </strong><br>по курсу [] Мини-курс сайта с нуля на WordPress [2011]<br><strong>WebForMySelf </strong> <div> Исходный код на <a href="#{data.sourceCode}">GitHub </a>Сайт <a href="#{data.site}">https://frontend200tb.github.io/choocetravel/ </a></div> </li> <li>Верстка учебного проекта (HTML, CSS, jQuery)<br><strong>Explore California </strong><br>по курсу [] Git обучение основам [2012]<br><strong>Lynda.com </strong> <div> Исходный код на <a href="#{data.sourceCode}">GitHub </a>Сайт <a href="#{data.site}">https://frontend200tb.github.io/explorecalifornia/ </a></div> </li> <li>Верстка учебного проекта (HTML, CSS)<br><strong>Neural Network </strong><br>по курсу [] Основы верстки сайта [2021]<br><strong>Нетология </strong> <div> Исходный код на <a href="#{data.sourceCode}">GitHub </a>Сайт <a href="#{data.site}">https://frontend200tb.github.io/neuralnetwork/ </a></div> </li> <li>Верстка учебного проекта (HTML, CSS)<br><strong>New York </strong><br>по курсу [Дмитрий Колотильщиков] Вёрстка страницы с нуля. FLEXBOX практика. HTML CSS уроки [2020-09-08]<br><strong> Дмитрий Колотильщиков</strong> <div> Исходный код на <a href="#{data.sourceCode}">GitHub </a>Сайт <a href="#{data.site}">https://frontend200tb.github.io/newyork/ </a></div> </li> <li>Верстка учебного проекта (HTML, CSS)<br><strong>Halloween </strong><br>по курсу [] <br><strong> </strong> <div> Исходный код на <a href="#{data.sourceCode}">GitHub </a>Сайт <a href="#{data.site}">https://frontend200tb.github.io/halloween/ </a></div> </li> <li>Верстка учебного проекта (HTML, CSS)<br><strong>gloevk </strong><br>по курсу [] Знакомство с веб-разработкой [2021]<br><strong>HTML Academy </strong> <div> Исходный код на <a href="#{data.sourceCode}">GitHub </a>Сайт <a href="#{data.site}">https://frontend200tb.github.io/gloevk/ </a></div> </li> <li>Верстка учебного проекта (HTML, CSS, JavaScript)<br><strong>Flash News </strong><br>по курсу [] Знакомство с веб-разработкой [2021]<br><strong>HTML Academy </strong> <div> Исходный код на <a href="#{data.sourceCode}">GitHub </a>Сайт <a href="#{data.site}">https://frontend200tb.github.io/flashnews/ </a></div> </li> <li>Верстка учебного проекта (HTML, CSS, jQuery)<br><strong>Mogo </strong><br>по курсу [Дмитрий Валак] Верстка сайта с нуля для начинающих [2019]<br><strong>Brainscloud Brainscloud</strong> <div> Исходный код на <a href="#{data.sourceCode}">GitHub </a>Сайт <a href="#{data.site}">https://frontend200tb.github.io/mogo/ </a></div> </li> <li>Верстка учебного проекта (HTML, CSS)<br><strong>Portland </strong><br>по курсу [Юрий Ключевский] Gulp Сборка [2018]<br><strong>Webcademy </strong> <div> Исходный код на <a href="#{data.sourceCode}">GitHub </a>Сайт <a href="#{data.site}">https://frontend200tb.github.io/portland/ </a></div> </li> </ol>'],t=document.querySelector("#learned"),document.querySelectorAll(".aside a").forEach((function(r,i){!function(r,i){r.addEventListener("click",(function(r){r.preventDefault(),t.innerHTML=e[i]}))}(r,i)}));var i=new Event("click");Nt[0].dispatchEvent(i)}()}},{url:"front-node.html",text:"Node",content:"<front-node></front-node>",act:function(){!function(){var e=document.querySelector(".aside");e.innerHTML="",e.append.apply(e,Dt),function(){var e=document.querySelector("#node"),t=document.getElementById("node-node");t&&t.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML='<h1>Node</h1> <div class="article"> <div class="anchor" id="contents"></div> <h2>Содержание</h2> <div class="article__contents"> <a href="#about" class="contents__link">about</a> <a href="#links" class="contents__link">links</a> <a href="#install" class="contents__link">install</a> <a href="#npm" class="contents__link">npm</a> </div> </div> <article class="article"> <div class="anchor" id="about"></div> <h3>About</h3> <p>Node.js is a JavaScript runtime built on Chrome\'s V8 JavaScript engine.</p> </article> <article class="article"> <div class="anchor" id="links"></div> <h3>Ссылки</h3> <p><a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p> </article> <article class="article"> <div class="anchor" id="install"></div> <h3>Установка</h3> <p>Установим последнюю версию node.js с официального сайта <a href="https://nodejs.org/en/">https://nodejs.org/en/ </a>Вместе с node.js поставится и npm</p> <p>Проверим версии установленных node.js и npm</p> <code> node -v <br>v18.18.2 <br>npm -v <br>9.8.1 </code> <p>(сокращенно от node --version и npm --version)</p> <p>Создадим папку с названием project<code>mkdir project</code>Чтобы удалить пустую папку с названием project наберите<code>rmdir project</code></p> <p>Перейдем в папку с названием project <code> cd project <br>d://project/ </code> Чтобы выйти из папки наберите <code> cd .. <br>d:// </code> </p> <p>Инициализируем проект<code>npm init -y</code>(сокращенно от npm init --yes, то же что и npm init, не отвечая на вопросы)</p> <p>В итоге в папке с проектом появится файл package.json. После этого можно устанавливать пакеты, которые будут являться зависимостями для нашего приложения.<code>d://project/package.json</code></p> <p>Для примера, установим @babel/cli, @babel/core, @babel/preset-env <code>npm i -D @babel/cli @babel/core @babel/preset-env</code> (сокращенно от npm install --save-dev @babel/cli @babel/core @babel/preset-env) </p> <p>Появится папка node_modules, файл package-lock.json, а в файл package.json добавятся зависимости <code> "devDependencies": { <br>&nbsp;&nbsp;"@babel/cli": "^7.18.10", <br>&nbsp;&nbsp;"@babel/core": "^7.18.13", <br>&nbsp;&nbsp;"@babel/preset-env": "^7.18.10" <br>} </code> </p> <p>Чтобы удалить пакеты и удалить зависимости из файла package.json <code>npm uninstall -D @babel/cli @babel/core @babel/preset-env</code>(Флаг -D удаляет devDependencies, флаг -S удаляет Dependencies)</p> </article> <article class="article"> <div class="anchor" id="npm"></div> <h3>Глобальная и локальная установка npm пакетов</h3> <p>При установке пакетов через npm есть два варианта: глобальная и локальная установка.</p> <p>При глобальной установке пакеты устанавливаются в определенное место в системе, общее для всех проектов. Это удобно, когда пакет является утилитой командной строки, которую необходимо использовать в разных проектах.</p> <p>В случае локальной установки пакеты устанавливаются в каталог node_modules внутри проекта. Это подходит для пакетов, которые необходимы только для конкретного проекта.</p> <p>При локальной установке пакеты располагаются в каталоге node_modules, который находится в корневом каталоге проекта.</p> <h3>Проверка расположения пакетов</h3> <p>Можно посмотреть в какую папку глобально устанавливается каталог node_modules с пакетами</p> <code>npm prefix -g</code> <code>c:\\Users\\11001000\\AppData\\Roaming\\npm</code> <p>Также чтобы получить путь для установки глобальных пакетов, можно выполнить команду</p> <code>npm config get prefix</code> <code>c:\\Users\\11001000\\AppData\\Roaming\\npm</code> <p>Чтобы изменить этот папку на \'.node_modules_global\', нужно выполнить команду</p> <code>npm config set prefix=$HOME/.node_modules_global</code> <p>Можно посмотреть все установленные глобально пакеты и путь к ним</p> <code>npm list -g</code> <p>Для проверки расположения установленных локально пакетов можно воспользоваться командой</p> <code>npm list</code> <p>Таким образом, установленные через npm пакеты будут находиться либо в каталоге проекта (при локальной установке), либо в определенной директории системы (при глобальной установке).</p> </article> ',H()}));var r=document.getElementById("node-axios");r&&r.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML='<h1>Axios</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#about">about</a></p> <p><a href="#links">links</a></p> <p><a href="#install">install</a></p> </div> </div> <article class="article"> <div class="anchor" id="about"></div> <h2>about</h2> <p>Axios - это HTTP-клиент, основанный на Promise для node.js и браузера. Он изоморфный (= он может работать в браузере и node.js с той же базой кодов). На стороне сервера он использует нативный node.js http-модуль, тогда как на стороне клиента (браузер) он использует XMLHttpRequests.</p> </article> <article class="article"> <div class="anchor" id="links"></div> <h2>Ссылки</h2> <p><a href="https://github.com/axios/axios">https://github.com/axios/axios</a></p> <p><a href="https://axios-http.com/ru/">https://axios-http.com/ru/</a></p> <p><a href="https://ru.vuejs.org/v2/cookbook/using-axios-to-consume-apis.html">https://ru.vuejs.org/v2/cookbook/using-axios-to-consume-apis.html</a></p> <h3>Статьи</h3> <p><a href="https://medium.com/devschacht/%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D1%83%D0%B5%D0%BC-axios-%D0%B2%D0%BC%D0%B5%D1%81%D1%82%D0%B5-%D1%81-vue-js-3bc45464c460">Используем axios вместе с Vue.js (2017-09-27)</a></p> <p><a href="https://habr.com/ru/company/timeweb/blog/571252/">JavaScript: как из Fetch сделать Axios (2021-08-04)</a></p> <p><a href="https://habr.com/ru/company/ruvds/blog/477286/">Axios или Fetch: чем пользоваться в 2019 году (2019-11-29)</a></p> </article> <article class="article"> <div class="anchor" id="install"></div> <h2>Установка</h2> <h3>Подключение через &lt;script&gt;</h3> <p><a href="https://axios-http.com/ru/docs/intro">https://axios-http.com/ru/docs/intro</a></p> <p>Просто скачайте JS-файл и подключите его тегом &lt;script&gt; на странице.</p> <code>&lt;script src="js/axios.min.js"&gt;&lt;/script&gt;</code> <h3>Подключениие через jsDelivr CDN</h3> <p><a href="https://axios-http.com/ru/docs/intro">https://axios-http.com/ru/docs/intro</a></p> <code>&lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;</code> <h3>Подключениие через unpkg CDN</h3> <p><a href="https://axios-http.com/ru/docs/intro">https://axios-http.com/ru/docs/intro</a></p> <code>&lt;script src="https://unpkg.com/axios/dist/axios.min.js"&gt;&lt;/script&gt;</code> </article>',H()}));var i=document.getElementById("node-babel");i&&i.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML='<h1>Babel</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#about">about</a></p> <p><a href="#links">links</a></p> <p><a href="#install">install</a></p> </div> </div> <article class="article"> <div class="anchor" id="about"></div> <h2>about</h2> <p>Babel is a JavaScript compiler.</p> <p>Use next generation JavaScript, today.</p> </article> <article class="article"> <div class="anchor" id="links"></div> <h2>links</h2> <p><a href="https://babeljs.io/">https://babeljs.io/</a></p> <p><a href="https://github.com/babel/babel">https://github.com/babel/babel</a></p> <h3>Статьи на habr</h3> <p><a href="https://habr.com/ru/post/490456/">Пишем babel плагин, пошаговое руководство (2020-02-29)</a></p> <p><a href="https://habr.com/ru/post/517134/">Как использовать новейшие функции JavaScript в любом браузере (2020-08-30)</a></p> </article> <article class="article"> <div class="anchor" id="install"></div> <h2>install</h2> <ol> <li>Проверим версии установленных node.js и npm <code> node -v <br>v16.17.0 <br>npm -v <br>8.15.0 </code> если их нет, то поставить с оффициального сайта <a href="https://nodejs.org/en/">nodejs</a> </li> <li>Создадим папку для нашего проекта и перейдем в нее <code>mkdir project1 <br>cd project1 <br>d://project1/ </code> </li> <li>Инициализируем проект<code>npm init -y</code>(сокращенно от npm init --yes, то же что и npm init, не отвечая на вопросы)</li> <li>В итоге в папке с проектом появится файл package.json. После этого можно устанавливать пакеты, которые будут являться зависимостями для нашего приложения.<code>d://project1/package.json</code></li> <li>Установим @babel/cli, @babel/core, @babel/preset-env<code>npm i -D @babel/cli @babel/core @babel/preset-env</code>(сокращенно от npm install --save-dev @babel/cli @babel/core @babel/preset-env)</li> <li>Появится папка node_modules, файл package-lock.json, а в файл package.json добавятся зависимости <code> "devDependencies": { <br>&nbsp;&nbsp;"@babel/cli": "^7.18.10", <br>&nbsp;&nbsp;"@babel/core": "^7.18.13", <br>&nbsp;&nbsp;"@babel/preset-env": "^7.18.10" <br>} </code> </li> <li>Создадим файл .babelrc в котором будут настройки для babel <code>touch .babelrc </code></li> <li>Запишем в него свойство presets <code> { <br>&nbsp;&nbsp;"presets": ["@babel/preset-env"] <br>} </code> </li> <li>Теперь создадим папку src и в ней файл main.js. Это точка входа для babel </li> <li>В файле package.json запишем <code> "scripts": { <br>&nbsp;&nbsp;"build": "babel src -d dist" <br>}, </code> </li> <li>Теперь можно в исходном файле src/main.js писать код на современном js и транспилировать его в код es2015 в выходной файл dist/main.js командой<code>npm run build</code></li> <li>В файле package.json запишем <pre>\r\n        "scripts": {\r\n        <br>&nbsp;&nbsp;"build": "babel src -d dist",\r\n        <br>&nbsp;&nbsp;"watch": "babel src -d dist -w"\r\n        <br>},\r\n      </pre> </li> <li>Теперь babel сам будет смотреть за исходным файлом и при его сохранении транспилировать его в конечный файл<code>npm run watch</code></li> <li>Чтобы выйти из режима watch нажмите ctrl + C</li> </ol> </article> ',H()}));var a=document.getElementById("node-eslint");a&&a.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML='<h1>Eslint</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#about">about</a></p> <p><a href="#links">links</a></p> <p><a href="#install">install</a></p> <p><a href="#eslintrc">.eslintrc.js</a></p> </div> </div> <article class="article"> <div class="anchor" id="about"></div> <h2>About</h2> <p>Линтер — это статический анализатор для языка программирования. Он сообщает о потенциально опасных выражениях в коде, которые могут привести к аварийному завершению программы. Также линтер может сообщить об устаревших участках кода, синтаксических ошибках и неиспользованных переменных. Всего существует около 300 правил, которые можно включить/выключить по желанию.</p> <p>Find and fix problems in your JavaScript code. ESLint statically analyzes your code to quickly find problems. It is built into most text editors and you can run ESLint as part of your continuous integration pipeline.</p> </article> <article class="article"> <div class="anchor" id="links"></div> <h2>Links</h2> <p><a href="https://eslint.org/">https://eslint.org/</a></p> <p><a href="https://www.npmjs.com/package/eslint">https://www.npmjs.com/package/eslint</a></p> <p><a href="https://github.com/eslint/eslint">https://github.com/eslint/eslint</a></p> <h3>Статьи на habr</h3> <p><a href="https://habr.com/ru/companies/domclick/articles/743384/">ESLint. Анатомия правил линтинга: разбираем структуру, создаём собственное правило для React-приложения (Anastasia Puchnina 2023-06-23)</a></p> <p><a href="https://habr.com/ru/articles/758954/">Повышаем продуктивность разработки: магия общей ESLint конфигурации (Dmitrii Pashkevich 2023-09-05)</a></p> </article> <article class="article"> <div class="anchor" id="install"></div> <h2>install</h2> <ol> <li>Установим в наш проект локально как зависимости для разработки eslint и eslint-config-airbnb <code>npm i -D eslint eslint-config-airbnb</code> </li> <li>Появится папка node_modules, файл package-lock.json, а в файл package.json добавятся зависимости <pre>\r\n"devDependencies": {\r\n  "eslint": "^8.49.0",\r\n  "eslint-config-airbnb": "^19.0.4",\r\n}</pre> </li> <li>Создадим файл .eslintrc.js в котором будут настройки для eslint <code>touch .eslintrc.js</code> </li> </ol> </article> <article class="article"> <div class="anchor" id="eslintrc"></div> <h2>.eslintrc.js</h2> <p>Из файла .eslintrc.js будем экспортировать объект, со свойством preset-env</p> <pre>\r\nmodule.exports = {\r\n  env: {\r\n    commonjs: true,\r\n    es6: true,\r\n    browser: true,\r\n    node: true,\r\n  },\r\n  extends: [\r\n    \'airbnb-base\',\r\n  ],\r\n  globals: {\r\n    Atomics: \'readonly\',\r\n    SharedArrayBuffer: \'readonly\',\r\n  },\r\n  parserOptions: {\r\n    ecmaVersion: 2020,\r\n  },\r\n  rules: {\r\n    \'no-console\': 0,\r\n  },\r\n}\r\n  </pre> </article> ',H()}));var o=document.getElementById("node-gulp");o&&o.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML="<h1>Gulp</h1> <div class=\"article\"> <div class=\"anchor\" id=\"content\"></div> <h2>Содержание</h2> </div> <div class=\"article article__content\"> <div> <p><a href=\"#about\">about</a></p> <p><a href=\"#links\">links</a></p> <p><a href=\"#install\">install</a></p> <p><a href=\"#setup\">Настройка gulp для pug, scss, js</a></p> <p><a href=\"#gulpfile\">gulpfile.js</a></p> <p><a href=\"#plugins\">plugins</a></p> </div> </div> <article class=\"article\"> <div class=\"anchor\" id=\"about\"></div> <h2>about</h2> <p>Gulp.js это потоковый сборщик проектов на JS. Он использует Stream и действительно является очень быстрым.</p> </article> <article class=\"article\"> <div class=\"anchor\" id=\"links\"></div> <h2>links</h2> <p><a href=\"https://gulpjs.com/\">https://gulpjs.com/</a></p> <p><a href=\"https://github.com/gulpjs/gulp\">https://github.com/gulpjs/gulp</a></p> <p><a href=\"https://webdesign-master.ru/blog/docs/gulp-documentation.html\">https://webdesign-master.ru/blog/docs/gulp-documentation.html</a></p> <h3>Статьи</h3> <p><a href=\"https://habr.com/ru/post/344626/\">Понимаем и работаем с gulp (2017-12-13)</a></p> <p><a href=\"https://habr.com/ru/post/560894/\">Как я сделал свою сборку Gulp для быстрой, лёгкой и приятной вёрстки (2021-06-03)</a></p> <p><a href=\"https://habr.com/ru/post/484714/\">Современная сборка 2020 для frontend. Gulp4 (2020-02-17)</a></p> </article> <article class=\"article\"> <div class=\"anchor\" id=\"install\"></div> <h2>install</h2> <p><a href=\"https://vk.com/@daniilshilo_developer-nastraivaem-gulp-tak-chtoby-drugoi-razrabotchik-vas-ne-izbil\">Настраиваем Gulp так, чтобы другой разработчик вас не избил</a></p> <p>Gulp это менеджер задач (task runner). Появился как замена устаревшему grunt.js более сложного в настройке. Раньше была одна версия gulp которую нужно было устанавливать глобально и локально. Локальная версия используется в gulpfile.js глобальная для запуска в консоле. Но начиная с 4 версии gulp нужно устанавливать gulp-cli глобально, а gulp - локально. Разделение произошло из-за проблем совместимости глобальной и локальной версии. gulp-cli (gulp command line interface) - это всего лишь способ запустить gulp-task из консоли.</p> <ol> <li>Проверим версии установленных node.js и npm <code> node -v <br>v16.13.1 <br>npm -v <br>8.1.2 </code> если их нет, то поставить с оффициального сайта <a href=\"https://nodejs.org/en/\">nodejs</a> </li> <li>Создадим папку для нашего проекта и перейдем в нее <code> mkdir project1 <br>cd project1 <br>d://project1/ </code> </li> <li>Инициализируем проект<code>npm init -y</code>(сокращенно от npm init --yes, то же что и npm init, не отвечая на вопросы)</li> <li>В итоге в папке с проектом появится файл package.json. После этого можно устанавливать пакеты, которые будут являться зависимостями для нашего приложения.<code>d://project1/package.json</code></li> <li>Установим gulp-cli глобально во всей системе<code>npm i -g gulp-cli</code>(сокращенно от npm install --global gulp-cli)</li> <li>Установим gulp в наш проект и занесем плагин gulp в раздел devDependencies (который нужен только для разработки) файла package.json<code>npm i -D gulp</code>(сокращенно от npm install --save-dev gulp) Проверим установленную версию gulp <code> gulp -v <br>CLI version: 2.3.0 <br>Local version: 4.0.2 </code> </li> <li>В итоге в папке с проектом появится папка node_modules и файл package-lock.json. В node_modules установлен gulp и все необходимые зависимости для того чтобы работал только gulp. Эту папку трогать не нужно <code> d://project1/node_modules <br>d://project1/package-lock.json </code> </li> <li>Создадим файл gulpfile.js в который будем прописывать задачи для gulp <code> touch gulpfile.js <br>d://project1/gulpfile.js </code> </li> </ol> </article> <article class=\"article\"> <div class=\"anchor\" id=\"setup\"></div> <h2>Настройка gulp для pug, scss, js</h2> <ol> <li>В папке с проектом выполним инициализацию<code>npm init -y</code>(то же что и npm init , не отвечая на вопросы)</li> <li>Установим необходимые пакеты <code>npm i -D gulp gulp-cli</code> <code>npm i -D gulp-pug gulp-plumber</code> <code>npm i -D gulp-sass sass</code> <code>npm i -D gulp-concat gulp-sourcemaps browser-sync</code> </li> <li>В gulpfile.js напишем код <pre>const gulp = require('gulp'),\r\n    pug = require('gulp-pug'),\r\n    plumber = require('gulp-plumber'),\r\n    sass = require('gulp-sass')(require('sass')),\r\n    concat = require('gulp-concat'),\r\n    sourcemaps = require('gulp-sourcemaps'),\r\n    browserSync = require('browser-sync').create();\r\n\r\nconst src = 'src/',\r\n      dist = 'dist/';\r\n\r\nconst config = {\r\n  src : {\r\n    copy : src + 'assets/**/*',\r\n    html : src + '**/*.pug',\r\n    nohtml: '!' + src + '**/_*.pug',\r\n    css : src + 'scss/*.scss',\r\n    nocss : '!' + src + '**/_*.scss',\r\n    js : src + '**/*.js',\r\n  },\r\n  dist : {\r\n    copy : dist + 'assets/',\r\n    html : dist,\r\n    css : dist + 'css/',\r\n    js : dist + 'js/',\r\n  },\r\n  watch : {\r\n    copy : src + 'assets/**/*',\r\n    html : src + '**/*.pug',\r\n    css : src + 'scss/*.scss',\r\n    js : src + '**/*.js',\r\n  },\r\n}\r\n\r\nconst copyTask = () => {\r\n  return gulp.src(config.src.copy)\r\n    .pipe(gulp.dest(config.dist.copy));\r\n}\r\n\r\nconst pugTask = () => {\r\n  return gulp.src([config.src.html, config.src.nohtml])\r\n              .pipe(plumber())\r\n              //.pipe(sourcemaps.init())\r\n              .pipe(pug({\r\n                pretty: true\r\n              }))\r\n              //.pipe(sourcemaps.write('./'))\r\n              .pipe(plumber.stop())\r\n              .pipe(gulp.dest(config.dist.html))\r\n}\r\n\r\nconst scssTask = () => {\r\n  return gulp.src(config.src.css)\r\n              .pipe(plumber())\r\n              .pipe(sourcemaps.init())\r\n              .pipe(sass().on('error', sass.logError))\r\n              .pipe(sourcemaps.write('./'))\r\n              .pipe(plumber.stop())\r\n              .pipe(gulp.dest(config.dist.css))\r\n}\r\n\r\nconst jsTask = () => {\r\n  return gulp.src(config.src.js)\r\n              .pipe(plumber())\r\n              .pipe(sourcemaps.init())\r\n              .pipe(concat('index.js'))\r\n              .pipe(sourcemaps.write('./'))\r\n              .pipe(plumber.stop())\r\n              .pipe(gulp.dest(config.dist.js))\r\n}\r\n\r\nconst webServer = () => {\r\n  browserSync.init({\r\n    server: {\r\n      baseDir: dist\r\n    },\r\n    port: 9000,\r\n    host: 'localhost',\r\n    notify: true,\r\n  })\r\n}\r\n\r\nconst watchFiles = () => {\r\n  gulp.watch([config.watch.html], gulp.series(pugTask));\r\n  gulp.watch([config.watch.css], gulp.series(scssTask));\r\n  gulp.watch([config.watch.js], gulp.series(jsTask));\r\n}\r\n\r\nconst start = gulp.series(pugTask, scssTask, jsTask);\r\n\r\nexports.start = start;\r\nexports.copy = copyTask;\r\nexports.pug = pugTask;\r\nexports.scss = scssTask;\r\nexports.js = jsTask;\r\n\r\nexports.default = gulp.parallel(start, watchFiles, webServer);\r\n    </pre> </li> <li>Список доступных задач можно посмотреть по команде<code>gulp --tasks</code></li> </ol> </article> <article class=\"article\"> <div class=\"anchor\" id=\"gulpfile\"></div> <h2>gulpfile.js</h2> <p>Поскольку gulp работает на node.js, то в файле gulpfile.js доступны такие команды языка javascript как require, exports и другие. </p> <ol> <li>В файле gulpfile.js создадим переменную в которую поместим плагин gulp <code>const gulp = require('gulp');</code> или создадим только те переменные, какие мы будем использовать <code>const {src, dest, watch, series, parallel} = require('gulp');</code> </li> <li>Каждая задача пишется в отдельную функцию. Создадим функцию вывода текста в консоль и назовем ее hello. Сделаем export этой функции для выполнения ее из командной строки <code> function hello () { <br>&nbsp;&nbsp;console.log('Привет, я выполнился') <br>}; <br>exports.hello = hello; </code> </li> <li>Чтобы запустить эту задачу выполним команду в командной строке в папке проекта<code>gulp hello</code></li> </ol> <h4>Задача копирования файлов</h4> <ol> <li>Чтобы скопировать файл напишем функцию copy(), в ней запишем задачу gulp.src (возьми файл), pipe (перейди в следующую задачу), gulp.dist (сохрани файл) и экспортируем эту функцию в node.js <code> function copy() { <br>&nbsp;&nbsp;return gulp.src('src/css/main.css') <br>&nbsp;&nbsp;&nbsp;&nbsp;.pipe(gulp.dest('dist/css/main.css')); <br>}; <br>exports.copy = copy </code> </li> <li>Запустим таск copy<code>gulp copy</code></li> <li>В итоге появится новый файл <code>d://project1/dist/css/main.css</code></li> </ol> <h4>Задача удаления файлов</h4> <ol> <li>Первым делом надо очищать папку dist от файлов с предыдущей сборки. Установим плагин gulp-rm набрав в командной строке<code>npm i -D gulp-rm</code></li> <li>В gulpfile создадим переменную<code>const rm = require('gulp-rm')</code></li> <li>Чтобы очитить папку напишем функцию clean(), в ней запишем задачу gulp.src (возьми все файлы) с параметром read: false (не читай эти файлы), pipe (перейди в следующую задачу), gulp.rm (удали эти файлы) и экспортируем эту функцию в node.js <code> function clean() { <br>&nbsp;&nbsp;return gulp.src('dist/**/*', {read: false}) <br>&nbsp;&nbsp;&nbsp;&nbsp;.pipe(rm()); <br>}; <br>exports.clean = clean </code> </li> </ol> <h4>Задачи по умолчанию</h4> <ol> <li>В файле gulpfile.js напишем экспорт задачи по умолчанию<code>exports.default = gulp.series('clean', 'copy');</code></li> <li>Эта задача будет выполняться при запуске gulp в папке проекта<code>gulp</code></li> </ol> <h4>gulp watch</h4> <ol> <li>Напишем функцию слежения, которая при изменении файлов запускает другую функцию <code> function watch () { <br>&nbsp;&nbsp;gulp.watch('src/sass/main.sass', style); } <br>exports.watch = watch; </code> </li> <li>В терминале запускаем задачу watch<code>gulp watch</code></li> </ol> </article> <article class=\"article\"> <div class=\"anchor\" id=\"plugins\"></div> <h2>Плагины</h2> <div class=\"content__menu\"> <p class=\"content1__menu-link\" id=\"content1__menu-link1\">gulp-pug</p> <p class=\"content1__menu-link\" id=\"content1__menu-link2\">gulp-sass</p> <p class=\"content1__menu-link\" id=\"content1__menu-link3\">gulp-concat</p> <p class=\"content1__menu-link\" id=\"content1__menu-link4\">gulp-autoprefixer</p> <p class=\"content1__menu-link\" id=\"content1__menu-link5\">gulp-clean-css</p> <p class=\"content1__menu-link\" id=\"content1__menu-link6\">gulp-plumber</p> <p class=\"content1__menu-link\" id=\"content1__menu-link7\">gulp-sourcemaps</p> <p class=\"content1__menu-link\" id=\"content1__menu-link8\">browser-sync</p> <p class=\"content1__menu-link\" id=\"content1__menu-link9\">babel</p> </div> <div class=\"content__items\"> <div class=\"content1__item\" id=\"content1__item1\"> <h3>Плагин gulp-pug</h3> <ol> <li>Установим в наш проект плагин gulp-pug для преобразования файлов pug в html и занесем его в раздел зависимости файла package.json<code>npm i -D gulp-pug</code></li> <li>В файле gulpfile.js создадим переменную pug<code>const pug = require('gulp-pug');</code></li> <li>В переменную pugTask запишем стрелочную функцию, которая будет брать pug файлы из исходной папки, передавать их плагину gulp-pug, полученный html код делать красивым, записывать его в конечную папку и перезапускать браузер чтобы увидеть примененные изменения <pre>const pugTask = () => {\r\n  return gulp.src(config.src.html)\r\n              .pipe(pug())\r\n              .pipe(pug({\r\n                  pretty: true\r\n              }))\r\n              .pipe(gulp.dest(config.dist.html))\r\n}\r\n</pre> </li> </ol> </div> <div class=\"content1__item\" id=\"content1__item2\"> <h3>Плагин gulp-sass</h3> <ol> <li>Установим в наш проект плагин gulp-sass для преобразования файлов sass в css и занесем его в раздел зависимости файла package.json<code>npm i -D gulp-sass</code></li> <li>В файле gulpfile.js создадим переменную sass<code>const sass = require('gulp-sass');</code></li> <li>Напишем функцию (function) которая вернет (return) выполненную задачу (task). Первая задача берет файл scss и передает второй задаче.Вторая задача преобразует его в css. Третья задача записывает его в папку назначения. Если будут ошибки при компиляции, они запишутся в файл sass.logfile. <pre>const scssTask = () => {\r\n  return gulp.src(config.src.css)\r\n        .pipe(sass().on('error', sass.logError))\r\n        .pipe(gulp.dest('dist'));\r\n}\r\n</pre> </li> </ol> </div> <div class=\"content1__item\" id=\"content1__item3\"> <h3>Плагин gulp-concat</h3> <ol> <li>Установим в наш проект плагин gulp-concat (для соединения файлов в один и переименования его) и занесем его в раздел зависимости файла package.json<code>npm i -D gulp-concat</code></li> <li>В файле gulpfile.js создадим переменную concat<code>const concat = require('gulp-concat');</code></li> <li>Напишем функцию (function) которая вернет (return) выполненную задачу (task). Первая задача берет исходные файлы и передает второй задаче.Вторая задача соединяет их в один и дает ему имя. Третья задача записывает его в папку назначения. <pre>function concat () {\r\n  return gulp.src('src/scss/style.scss')\r\n    .pipe(concat(style.min.css))\r\n    .pipe(gulp.dest('dist/css'));\r\n}\r\n</pre> </li> </ol> </div> <div class=\"content1__item\" id=\"content1__item4\"> <h3>Плагин gulp-autoprefixer</h3> <ol> <li>Установим в наш проект плагин gulp-autoprefixer (для создания префикса свойствам css для поддержки в старых браузерах) и занесем его в раздел зависимости файла package.json<code>npm i -D gulp-autoprefixer</code></li> <li>В файле gulpfile.js создадим переменную autoprefixer<code>const autoprefixer = require('gulp-autoprefixer');</code></li> <li>Напишем функцию для добавления префиксов в файлах css <pre>function prefix () {\r\n  gulp.src('src/*.css')\r\n    .pipe(autoprefixer({\r\n      browser: ['last 2 versions'],\r\n      cascade: false\r\n    }))\r\n    .pipe(gulp.dest('dist'))\r\n};\r\nexports.prefix = prefix;\r\n</pre> </li> </ol> </div> <div class=\"content1__item\" id=\"content1__item5\"> <h3>Плагин gulp-clean-css</h3> <ol> <li>Установим в наш проект плагин gulp-clean-css (для удаления пробелов и коментариев из css) и занесем его в раздел зависимости файла package.json<code>npm i -D gulp-clean-css</code></li> <li>В файле gulpfile.js создадим переменную cleanCSS<code>const cleanCSS = require('gulp-clean-css');</code> </li> <li>Напишем функцию для минификации css <pre>function minify-css () {\r\n  return gulp.src('src/*.css')\r\n    .pipe(cleanCSS({compatibility:'ie8'}))\r\n    .pipe(gulp.dest('dist'));\r\n}\r\n</pre> </li> </ol> </div> <div class=\"content1__item\" id=\"content1__item6\"> <h3>Плагин gulp-plumber</h3> <ol> <li>Установим в наш проект плагин gulp-plumber (сборка не остановится не смотря на ошибки, ошибки запломбируются) и занесем его в раздел зависимости файла package.json<code>npm i -D gulp-plumber</code></li> <li>В файле gulpfile.js создадим переменную plumber<code>const plumber = require('gulp-plumber');</code></li> <li>Добавим plumber в функцию преобразования pug файлов <pre>function pugTask () {\r\n  return gulp.src('src/**/*.pug')\r\n        .pipe(plumber())\r\n        .pipe(pug({\r\n            pretty: true\r\n          }))\r\n        .pipe(plumber.stop())\r\n        .pipe(gulp.dest('dist/'))\r\n}</pre> </li> <li>Добавим plumber в функцию преобразования scss файлов <pre>function scssTask () {\r\n  return gulp.src(config.src.css)\r\n              .pipe(plumber())\r\n              .pipe(sass().on('error', sass.logError))\r\n              .pipe(plumber.stop())\r\n              .pipe(gulp.dest(config.dist.css))\r\n}\r\n</pre> </li> </ol> </div> <div class=\"content1__item\" id=\"content1__item7\"> <h3>Плагин gulp-sourcemaps</h3> <ol> <li>Установим в наш проект плагин gulp-sourcemaps (браузер покажет в каком файле источник стилей) и занесем его в раздел зависимости файла package.json<code>npm i -D gulp-sourcemaps</code></li> <li>В файле gulpfile.js создадим переменную sourcemaps<code>const sourcemaps = require('gulp-sourcemaps');</code></li> <li>Добавим sourcemaps в функцию минификации css файлов <pre>function minify-css () {\r\n  return gulp.src('src/css/*.css')\r\n    .pipe(sourcemaps.init())\r\n      .pipe(cleanCSS({compatibility:'ie8'}))\r\n    .pipe(sourcemaps.write())\r\n    .pipe(gulp.dest('dist/css'));\r\n}</pre> </li> <li>Добавим sourcemaps в функцию соединения js файлов <pre>function scripts () {\r\n  return gulp.src('src/js/*.js')\r\n    .pipe(sourcemaps.init())\r\n      .pipe(concat('main.js'))\r\n    .pipe(sourcemaps.write())\r\n    .pipe(gulp.dest('dist/js'));\r\n}\r\n</pre> </li> </ol> </div> <div class=\"content1__item\" id=\"content1__item8\"> <h3>Плагин browser-sync</h3> <ol> <li>Установим плагин browser-sync для запуска локального сервера. Это нужно для автоматического обновления страницы в браузере<code>npm i -D browser-sync</code></li> <li>В файле gulpfile.js создадим переменную browserSync<code>const browserSync = require('browser-sync').create();</code></li> <li>Напишем функцию которая запускает сервер <pre>function webServer () {\r\n  browserSync.init({\r\n    server: {\r\n      baseDir: './dist/'\r\n    },\r\n    port: 9000,\r\n    host: 'localhost',\r\n    notify: true,\r\n  });\r\n}\r\n</pre> </li> </ol> </div> <div class=\"content1__item\" id=\"content1__item9\"> <h3>Плагин babel</h3> <ul> <li> <p>Babel преобразует js код с новым синтаксисом в старый синтаксис, чтобы его понимали старые браузеры. Работает babel при помощи пресетов. Нам будет достаточно одного пресета @babel/preset-env</p> </li> </ul> <ol> <li>Установим в наш проект плагин gulp-babel и занесем его в раздел зависимости файла package.json<code>npm i -D gulp-babel @babel/core @babel/preset-env</code></li> <li>В файле gulpfile.js создадим переменную babel<code>const babel = require('gulp-babel');</code></li> <li>Добавим babel в функцию соединения js файлов <pre>function scripts () {\r\n  return gulp.src('src/js/*.js')\r\n    .pipe(sourcemaps.init())\r\n      .pipe(concat('main.js'))\r\n      .pipe(\r\n        babel({\r\n          presets: ['@babel/env']\r\n        })\r\n      )\r\n    .pipe(sourcemaps.write())\r\n    .pipe(gulp.dest('dist/js'));\r\n}\r\n</pre> </li> </ol> </div> </div> </article> ",H()}));var l=document.getElementById("node-vite");l&&l.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML='<h1>Vite</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#about">about</a></p> <p><a href="#links">links</a></p> <p><a href="#install">install</a></p> </div> </div> <article class="article"> <div class="anchor" id="about"></div> <h2>about</h2> <p>Vite позволяет вам создавать приложения на Vue с однофайловыми компонентами без шага сборки бандлов. Импорты запрашиваются браузером как нативные модули ES. Dev-сервер перехватывает запросы к файлам .vue и компилирует их на лету. И это происходит мгновенно.</p> </article> <article class="article"> <div class="anchor" id="links"></div> <h2>links</h2> <p><a href="https://vitejs.dev/">vitejs.dev</a></p> <p><a href="https://github.com/vitejs/vite">github.com/vitejs/vite</a></p> <h3>Статьи на habr</h3> <p><a href="https://habr.com/ru/company/otus/blog/505362/">Vite – ведение разработки без бандлов на Vue Все, что нужно знать (2020-06-04)</a></p> <p><a href="https://habr.com/ru/company/otus/blog/572622/">Переход с Vue-CLI и Webpack на Vitejs (2021-08-12)</a></p> <p><a href="https://habr.com/ru/post/580064/">Vite.js и Vue.js (2021-09-27)</a></p> <h3>Статьи</h3> <p><a href="https://liquidhub.ru/blogs/blog/vite-js">Vite.js: что это и зачем нужно веб-разработчику</a></p> </article> <article class="article"> <div class="anchor" id="install"></div> <h2>install</h2> <p>Создадим новое vite приложение с помощью npm команды</p> <code>npm create vite@latest</code> <p>После ввода этой команды запуститься генератор нового приложения которое будет в себе использовать Vite, и впервую очередь что у нас он спросит - это то как мы хотим назвать наш проект</p> <p>По умолчанию будет предложено имя vite-project, и после этого нам нужно будет выбрать какой фреймворк мы хотим использовать - и здесь я выберу Vue</p> <p>Окей, после выбора что мы хотим использовать Vue - нас спрашивает хотим ли мы использовать TypeScript вместе с Vue</p> <p>Я выбираю обычный vue - и как раз уже после этого vite создаст папку с именем нашего проекта, в которой находится наш проект</p> <p>Перейдем в папку проекта</p> <code>cd vite-project</code> <p>Запустим npm install</p> <code>npm install</code> <p>Запустим локальный сервер и посмотрим как выглядит страница по-умолчанию созданная в новом Vue приложении с Vite</p> <code>npm run dev</code> </article> ',H()}));var n=document.getElementById("node-webpack");n&&n.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML="<h1>Webpack</h1> <div class=\"article\"> <div class=\"anchor\" id=\"content\"></div> <h2>Содержание</h2> </div> <div class=\"article article__content\"> <div> <p><a href=\"#about\">about</a></p> <p><a href=\"#links\">links</a></p> <p><a href=\"#install\">install</a></p> <p><a href=\"#entry\">entry</a></p> <p><a href=\"#output\">output</a></p> <p><a href=\"#loaders\">Loaders (загрузчики)</a></p> <p><a href=\"#rules\">rules</a></p> <p><a href=\"#plugins\">plugins</a></p> <p><a href=\"#config\">webpack.config.js</a></p> </div> </div> <article class=\"article\"> <div class=\"anchor\" id=\"about\"></div> <h2>about</h2> <p>Webpack — это статический сборщик модулей JavaScript в единый JS-файл (инструмент, позволяющий скомпилировать несколько модулей в один файл), содержащий все необходимое для запуска приложения.</p> <p>Webpack применяют как при frontend, так и в backend разработке на Node.js. Он анализирует модули приложения, создает на основе операторов import и/или require() граф зависимостей модулей и собирает модули в правильном порядке в один или более бандл (bundle, узел), на который может ссылаться файл index.html.</p> <p>У самого WebPack есть несколько основных терминов:</p> <p>Конфигурационный файл (Configuration)</p> <p>Входная точка (Entry)</p> <p>Точка выхода (Output)</p> <p>Загрузчики (Loaders)</p> <p>Плагины (Plugins)</p> <p>Режимы (Modes)</p> <h3>Конфигурационный файл (Configuration)</h3> <p>Сам конфигурационный файл всегда один — webpack.config.js. В нем мы указываем экспортируемый объект, которй и является конфигурацией для Webpack:</p> <code>module.exports = {};</code> <p>Основные свойства объекта module.exports это entry, output, module, plugins, mode, cache, watch, watchOptions</p> <p>Webpack это упаковщик модулей (отдельных частей программы) в единую систему. Изначально применялся для сборки JS, но в настоящее время применяется для сборки любых ресурсов HTML, CSS, шрифтов, изображений. Loader(обработчик) - преобразовывает определенный тип файла в JS модуль. Loader это js function которая принимает исходный код и возвращает обработанный код. Plugins (плагины) позволяют делать все то, что не позволяют делать loaders. Compiler сборщик. Compilartion объект сборки.</p> <article class=\"article\"> <div class=\"anchor\" id=\"links\"></div> <h2>links</h2> <p><a href=\"https://webpack.js.org/\">https://webpack.js.org/</a></p> <h3>Статьи на habr</h3> <p><a href=\"https://habr.com/ru/post/514838/\">Webpack: руководство для начинающих (2020-08-12)</a></p> <p><a href=\"https://habr.com/ru/post/519064/\">Основы настройки Webpack (2020-09-15)</a></p> <p><a href=\"https://habr.com/ru/post/524260/\">Настройка Webpack 5 с нуля (2020-10-20)</a></p> <p><a href=\"https://habr.com/ru/post/701724/\">Настройка Webpack 5 (2022-11-25)</a></p> <p><a href=\"https://habr.com/ru/company/piter/blog/710844/\">Полный обзор webpack (2023-01-16)</a></p> <h3>Статьи</h3> <p><a href=\"https://www.internet-technologies.ru/articles/rukovodstvo-po-webpack-dlya-novichkov.html\">Webpack - что это? Руководство по для новичков (2019-08-19)</a></p> <p><a href=\"https://www.cat-in-web.ru/webpack-from-zero/\">Webpack с нуля: это совсем не страшно (2019-12-30)</a></p> <p><a href=\"https://daruse.ru/webpack-5-sozdanie-bazovoj-konfiguraczii\">Webpack 5: создание базовой конфигурации (2021-04-21)</a></p> <p><a href=\"https://vc.ru/dev/418917-krupnyy-gayd-po-webpack\">Крупный гайд по Webpack (2022-05-10)</a></p> </article> <article class=\"article\"> <div class=\"anchor\" id=\"install\"></div> <h2>install</h2> <ol> <li>Проверим версии установленных node.js и npm <code> node -v <br>v18.18.2 <br>npm -v <br>9.8.1 </code> (сокращенно от node --version и npm --version) если их нет, то поставить с оффициального сайта <a href=\"https://nodejs.org/en/\">nodejs</a> </li> <li>Установим webpack и webpack-cli глобально <code> npm i -g webpack webpack-cli </code> в папке <code>c:\\Users\\11001000\\AppData\\Roaming\\npm\\node_modules\\</code> появятся две папки с файлами <code>webpack и webpack-cli</code> </li> <li>Создадим папку для нашего проекта и перейдем в нее <code> mkdir project-webpack <br>cd project-webpack <br>d://project-Webpack/ </code> </li> <li>Инициализируем проект<code>npm init -y</code>(то же что и npm init , не отвечая на вопросы)</li> <li>В итоге в папке с проектом появится файл package.json. После этого можно устанавливать пакеты, которые будут являться зависимостями для нашего приложения.<code>d://project-webpack/package.json</code></li> <li>Установим webpack и webpack-cli в качестве зависимостей для разработки (dev dependencies). <p>webpack - сборщик модулей и ресурсов</p> <p>webpack-cli - интерфейс командной строки для вебпака</p><code>npm i -D webpack webpack-cli</code>(сокращенно от npm install --save-dev webpack webpack-cli) </li> <li>Чтобы понять что они установились, проверим версии пакетов <code> npm run webpack -v <br>9.8.1 <br>npm run webpack-cli -v <br>9.8.1 </code> </li> <li>В итоге в папке с проектом появится папка node_modules и файл package-lock.json,. В node_modules установлены webpack, webpack-cli и все необходимые зависимости для того чтобы они работали. Эту папку трогать не нужно <code> d://project-webpack/node_modules <br>d://project-webpack/package-lock.json </code> </li> <li>Для проверки работы webpack создадим файл src/index.js и dist/index.html, внутри которого подключим скрипт <code>&lt;script src=\"main.js\"&gt;&lt;/script&gt;</code> </li> <li>В файл package.json напишем <code> \"scripts\": { <br>&nbsp;&nbsp;\"build\": \"webpack\" <br>} </code> <p>Теперь можно запустить webpack командной</p> <pre>npm run build</pre> <p>В папку dist (если ее не было то она создастся) запишется файл main.js в который соберется весь javascript из файла src/index.js со всеми импортами которые включены в него из других файлов js. По умолчанию этот файл минифицируется и такая сборка готова в продакшн</p> </li> <li>Для того чтобы разделить сборку для продакшн и для разработки надо в package.json прописать две разные команды <code> \"scripts\": { <br>&nbsp;&nbsp;\"build\": \"webpack --mode production\", <br>&nbsp;&nbsp;\"dev\": \"webpack --mode development\" <br>} </code> <p>Теперь можно запустить webpack в режиме разработки командной</p> <code>npm run dev</code> </li> <li>Webpack установлен с настройками по умолчанию! Для того чтобы настроить webpack под задачи проекта создадим конфигурационный файл webpack.config.js <code> touch webpack.config.js <br>d://project-webpack/webpack.config.js </code> </li> </ol> </article> <article class=\"article\"> <div class=\"anchor\" id=\"entry\"></div> <h2>Entry point (входная точка)</h2> <p>Входная точка это файл, который нужно включить первым и от которого будут идти все импорты. По умолчанию это файл src/index.js. Есть несколько способов определить входную точку. Запишем в файл конфигурации webpack.config.js экспортируемый объект, содержащий</p> <ol> <li>Один файл в формате String <code> module.exports = { <br>&nbsp;&nbsp;entry: './src/index.js', <br>}; </code> </li> <li>Один файл в формате Array <code> module.exports = { <br>&nbsp;&nbsp;entry: ['./src/index.js'], <br>}; </code> </li> <li>Несколько файлов в формате Array <code> module.exports = { <br>&nbsp;&nbsp;entry: ['./src/index.js', './src/app.js'], <br>}; </code> </li> <li>Один файл в формате Object <code> module.exports = { <br>&nbsp;&nbsp;entry: {app: './src/index.js',}, <br>}; </code> </li> <li>Несколько файлов в формате Object <code> module.exports = { <br>&nbsp;&nbsp;entry: { <br>&nbsp;&nbsp;&nbsp;&nbsp;index: './src/index.js', <br>&nbsp;&nbsp;&nbsp;&nbsp;app: './src/app.js', <br>&nbsp;&nbsp;}, <br>}; </code> </li> </ol> </article> <article class=\"article\"> <div class=\"anchor\" id=\"output\"></div> <h2>Output (Точка выхода)</h2> <p>Свойство output говорит куда выкладывать собранные файлы и как их называть. По умолчанию Webpack собирает весь javascript в один файл ./dist/main.js и остальные файлы в папку ./dist.</p> <p>Чтобы указать другое имя нужно использовать свойство filename</p> <code> module.exports = { <br>&nbsp;&nbsp;output: { <br>&nbsp;&nbsp;&nbsp;&nbsp;filename: 'bundle.js', <br>&nbsp;&nbsp;}, <br>}; </code> <p>Используем модуль path чтобы в различных операционных системах был правильный путь к выходному файлу</p> <code> const path = require('path'); <br>module.exports = { <br>&nbsp;&nbsp;output: { <br>&nbsp;&nbsp;&nbsp;&nbsp;path: path.resolve(__dirname, 'dist'), <br>&nbsp;&nbsp;&nbsp;&nbsp;filename: 'bundle.js', <br>&nbsp;&nbsp;}, <br>}; </code> <p>Можно очистить папку dist перед сборкой</p> <code> const path = require('path'); <br>module.exports = { <br>&nbsp;&nbsp;output: { <br>&nbsp;&nbsp;&nbsp;&nbsp;clean: true, <br>&nbsp;&nbsp;}, <br>}; </code> <p>Webpack работает не только с javascript который собирается в одном файле, но и с html, css, картинками для которых и указывается выходная директория, чтобы правильно перенести их</p> <code> module.exports = { <br>&nbsp;&nbsp;output: { <br>&nbsp;&nbsp;&nbsp;&nbsp;assetModuleFilename: '[name][ext]', <br>&nbsp;&nbsp;}, <br>}; </code> </article> <article class=\"article\"> <div class=\"anchor\" id=\"loaders\"></div> <h2>Loaders (загрузчики)</h2> <ol> <li>По умолчанию webpack понимает только файлы JavaScript и JSON. Загрузчики (loaders) позволяют webpack обрабатывать другие типы файлов и преобразовывать их. Чтобы webpack понимал файлы других типов, которые мы импортируем в файл index.js, то нужны загрузчики. Например, для css файлов - css-loader, для pug файлов - pug-loader, для typescript файлов - ts-loader. Лоадеры – это скрипты, которые принимают на вход содержимое файла, обрабатывают его и возвращают красивый и удобный результат. Для лоадеров придумали правила (rules). Правила (rules) это объекты в конфигурации, которые указывают на файлы, которые нужно обработать и указывают лоадер. Перед тем как использовать лоадеры их надо скачать с помощью NPM</li> <li>html-loader нужен чтобы собирать html файлы через js <code> module: { <br>&nbsp;&nbsp;rules:[ <br>&nbsp;&nbsp;&nbsp;&nbsp;{ <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test: /\\.html$/, <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader: \"html-loader\", <br>&nbsp;&nbsp;&nbsp;&nbsp;} <br>&nbsp;&nbsp;] <br>} </code> </li> <li>Babel. Чтобы писать код на современном языке, а выкладывать код на ES5, который понятен всем браузерам, надо использовать babel. Установим необходимые пакеты <code>npm i -D @babel/core @babel/preset-env babel-loader</code> <p>babel core — содержит всю логику транспиляции;</p> <p>babel preset env — основной набор плагинов с реализацией возможностей javascript, учитывающих поддержку нужных браузеров;</p> <p>babel loader — собственно лоадер, обеспечивающий взаимодействие с webpack.</p> <pre>module: {\r\n  rules:[\r\n    {\r\n      test: /\\.js$/,\r\n      exclude: /node_modules/,\r\n      use: {loader: 'babel-loader'}\r\n    }\r\n  ]\r\n}</pre> <p>Создадим файл настроек .babelrc и запишем в него</p> <pre>{\r\n  \"presets\": [\"@babel/preset-env\"],\r\n  \"browserslist\": [\r\n    \"last 2 versions\",\r\n    \"not dead\"\r\n  ]\r\n}        \r\n</pre> </li> <li>Scss. Вариант 1 В сборке стили будут встроены в файл index.js. При загрузке в браузере стили будут встраиваться в тег style файла index.html <code>npm i -D sass-loader sass css-loader style-loader</code> <p>sass-loader загружает файлы SCSS и передает компилятору sass</p> <p>sass компилирует код в CSS.</p> <p>css-loader позволяет импортировать css файл в js</p> <p>style-loader внедряет CSS в DOM. Он разместит результат в index.js, который при запуске подключит стили через тег style в файле index.html</p> <p>Напишем rules (правила) для scss</p> <pre>module: {\r\n  rules:[\r\n    {\r\n      test: /\\.(scss|sass|css)$/,\r\n      use: ['style-loader', 'css-loader', 'sass-loader'],\r\n    }\r\n  ]\r\n}\r\n</pre> </li> <li>Scss. Вариант 2 В сборке стили будут вынесены в отдельный файл style.css, который будет подключен в теге link файла index.html. Плагин postcss-loader добавит autoprefix для создания кроссбраузерного css <pre>npm i -D sass-loader sass css-loader mini-css-extract-plugin\r\nnpm i -D postcss-loader postcss postcss-preset-env</pre> <p>postcss-loader - загрузчик CSS файлов для пост-обработки. Должен работать с каким нибудь плагином.</p> <p>postcss-preset-env это плагин для PostCSS, который конвертирует современный CSS в код, понятный большинству браузеров, включением необходимых полифилов.</p> <p>Напишем rules (правила) для scss</p> <pre>const MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\r\nmodule.exports = {\r\n  module: {\r\n    rules:[\r\n      {\r\n        test: /\\.scss$/,\r\n        use: [MiniCssExtractPlugin.loader, 'css-loader', 'postcss-loader', 'sass-loader'],\r\n      }\r\n    ]\r\n  }\r\n  plugins: [\r\n    new MiniCssExtractPlugin(),\r\n  ],\r\n}</pre> <p>Создадим файл настроек postcss.config.js и запишем в него</p> <pre>module.exports = {\r\n  plugins: {\r\n    'postcss-preset-env': {\r\n      browsers: 'last 2 versions',\r\n    },\r\n  },\r\n}\r\n</pre> </li> <li>Напишем rules (правила) для шрифтов <pre>module: {\r\n  rules: [\r\n    {\r\n      test: /\\.(otf|ttf|eot|woff|woff2)$/,\r\n      type: 'asset/resource',\r\n    },\r\n  ]\r\n}\r\n</pre> </li> <li>Напишем rules (правила) для картинок <pre>output: {\r\n  //Название выходного файла будет соответствовать исходному\r\n  assetModuleFilename: '[name][ext]'\r\n},\r\nmodule: {\r\n  rules: [        \r\n    {\r\n      test: /\\.(png|jpg|jpeg|gif)$/i,\r\n      type: 'asset/resource'\r\n    }\r\n  ]\r\n}</pre> <p>Дальше</p> <pre>{\r\n  test: /\\.(png|jpg|jpeg|gif)$/i,\r\n  use: [\r\n    {\r\n      loader: 'file-loader',\r\n      options: {\r\n        name: '[name]-[hash].[ext]',\r\n        outputPath: 'img',\r\n      },\r\n    },\r\n  ],\r\n},\r\n</pre> </li> </ol> </article> <article class=\"article\"> <div class=\"anchor\" id=\"plugins\"></div> <h2>Plugins (Плагины)</h2> <ol> <li>Плагины — внешние модули для Webpack, которые позволяют управлять и обрабатывать файлы, которые не импортируются в JavaScript.</li> <li>Плагин HTMLWebpackPlugin автоматически создает HTML-файл с уже подключенным скриптом. Установим html-webpack-plugin <pre>npm i -D html-webpack-plugin</pre> <p>Запишем в webpack.config.js</p> <pre>const HtmlWebpackPlugin = require('html-webpack-plugin');\r\nmodule.exports = {\r\n  plugins: [\r\n    new HtmlWebpackPlugin()\r\n  ],\r\n};\r\n</pre> <p>Научим HTMLWebpackPlugin создавать файл на основе шаблона, задавать имя выходного файла, копировать файл favicon.svg в выходную директорию и автоматически подключать его в index.html</p> <pre>const path = require('path');\r\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\r\nmodule.exports = {\r\n  plugins: [\r\n    new HtmlWebpackPlugin({\r\n      template: path.resolve(__dirname, './src/index.html'),\r\n      filename: 'index.html', \r\n      favicon: \"./src/favicon.svg\",\r\n    })\r\n  ],\r\n};\r\n</pre> </li> <li>Используем filemanager-webpack-plugin для копирования файлов из папки src/assets в папку dist. Установим filemanager-webpack-plugin <pre>npm i -D filemanager-webpack-plugin</pre> <p>Чтобы скопировать файл src/favicon.svg в ./dist и файлы из src/assets в ./dist/assets запишем в webpack.config.js</p> <pre>const path = require('path');\r\nconst FileManagerPlugin = require('filemanager-webpack-plugin');\r\nmodule.exports = {\r\n  plugins: [\r\n    new FileManagerPlugin({\r\n      events: {\r\n        onEnd: {\r\n          copy: [\r\n            {\r\n              source: path.resolve(__dirname, './src/favicon.svg'),\r\n              destination: path.resolve(__dirname, './dist/favicon.svg'),\r\n            },\r\n            {\r\n              source: path.resolve(__dirname, './src/assets'),\r\n              destination: path.resolve(__dirname, './dist/assets'),\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n};</pre> <p>Свойство onEnd указывает что копирование будет после сборки</p> <p>Свойство onStart указывает что копирование будет перед сборкой, но тогда если во время сборки делать очистку папки dist командой clean: true то скопированные файлы удалятся</p> </li> </ol> </article> <article class=\"article\"> <div class=\"anchor\" id=\"config\"></div> <h2>webpack.config.js</h2> <ol> <li>Webpack по умолчанию не требует конфигурационного файла. Исходным файлом (entry) является src/index.js, выходным файлом (output) является dist/main.js и собирается он в режиме (mode) production mode. Настроить webpack можно используя файл конфигурации webpack.config.js</li> <li>Javascript файлы. Простая конфигурация собирает js файлы в один файл и можно задать имя входному и выходному файлам. Запишем в файл webpack.config.js <pre>module.exports = {\r\n  entry: './src/index.js',\r\n  output: './dist/index.js'\r\n}\r\n</pre> </li> <li>Настроим свою конфигурацию. Сначала установим необходимые пакеты <pre>npm i -D webpack-dev-server html-webpack-plugin \r\nnpm i -D css-loader sass-loader sass\r\nnpm i -D mini-css-extract-plugin\r\nnpm i -D postcss-loader postcss postcss-preset-env\r\nnpm i -D html-loader\r\nnpm i -D pug-loader pug\r\nnpm i -D filemanager-webpack-plugin\r\nnpm i -D babel-loader @babel/core @babel/preset-env\r\nnpm i -D ts-loader typescript\r\n</pre> <p>Запишем в package.json </p> <pre>\"scripts\": {\r\n  \"serve\": \"webpack serve --open --mode development\",\r\n  \"dev\": \"webpack --mode development\",\r\n  \"build\": \"webpack --mode production\",\r\n},</pre> <p>Запишем в webpack.config.js </p> <pre>const path = require('path');\r\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\r\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\r\nconst FileManagerPlugin = require('filemanager-webpack-plugin');\r\n\r\nmodule.exports = {\r\n  entry: './src/index.js',\r\n  output: {\r\n    clean: true, \r\n    path: path.resolve(__dirname, './dist'),\r\n    filename: 'index.js',\r\n  },\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.(scss|sass|css)$/,\r\n        use: [ MiniCssExtractPlugin.loader, 'css-loader', 'postcss-loader', 'sass-loader' ],\r\n      },\r\n      {\r\n        test: /\\.html$/i,\r\n        loader: \"html-loader\",\r\n      },\r\n      {\r\n        test: /\\.pug$/,\r\n        loader: 'pug-loader',\r\n      },\r\n      {\r\n        test: /\\.js$/,\r\n        exclude: /node_modules/,\r\n        use: {\r\n          loader: 'babel-loader',\r\n          options: {\r\n            presets: ['@babel/preset-env']\r\n          }\r\n        }\r\n      },\r\n      {\r\n        test: /\\.ts$/,\r\n        exclude: /node_modules/,\r\n        use: {\r\n          loader: 'ts-loader',\r\n          options: {\r\n            presets: ['@babel/preset-env']\r\n          }\r\n        }\r\n      },\r\n    ],\r\n  },\r\n  plugins: [\r\n    new HtmlWebpackPlugin({\r\n      template: path.resolve(__dirname, './src/index.pug'),\r\n      filename: 'index.html', \r\n      favicon: \"./src/favicon.svg\",\r\n    })\r\n    new MiniCssExtractPlugin(),\r\n    new FileManagerPlugin({\r\n      events: {\r\n        onEnd: {\r\n          copy: [\r\n            {\r\n              source: path.join('src', 'assets'),\r\n              destination: 'dist',\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n  devServer: {\r\n    static: {\r\n      directory: path.resolve(__dirname, 'src'),\r\n    },\r\n    watchFiles: path.join(__dirname, 'src'),\r\n    port: 9000,\r\n  },\r\n};\r\n</pre> </li> <li>Разница между path.join и path.resolve <p>path.join соединяет в одну строку переданные ей аргументы используя специфичный для операционной системы разделитель (/ или \\) и нормализирует ее.</p> <pre>path.join('path', 'to', 'another', '..', 'another', 'file')</pre> <p>Вернет для Linux </p> <pre>'path/to/another/file'</pre> <p>Вернет для Windows </p> <pre>'path\\to\\another\\file'</pre> <p>Нормализация заключается в том что не возвращается</p> <pre>'path/to/another/../another/file'</pre> <p>path.resolve возвращает абсолютный путь по тем сегментам которые переданны в аргументы</p> <pre>path.resolve('/how', 'to', 'code')</pre> <p>Вернет</p> <pre>'/how/to/code'</pre> </li> <li>Сервер. Есть несколько способов, которые позволяют при сохранении кода автоматически его собирать и обновлять в браузере. Рассмотрим вариант webpack-dev-server. Установим webpack-dev-server <pre>npm i -D webpack-dev-server</pre> <p>Пропишем в файле webpack.config.js</p> <pre>const path = require('path');\r\nmodule.exports = {\r\n  devServer: {\r\n    static: {\r\n      directory: path.resolve(__dirname, 'src'),\r\n    },              \r\n    watchFiles: path.join(__dirname, 'src'),\r\n    port: 9000, \r\n  }\r\n}</pre> <p>Пропишем в package.json</p> <pre>\"scripts\": {\r\n  \"serve\": \"webpack serve --open --mode development\",\r\n}</pre> <p>serve означает запустить веб сервер.</p> <p>--open автоматически запускает браузер, который в системе установлен по умолчанию.</p> <p>--mode development включает режим разработки.</p> <p>Теперь сервер можно запустить командной</p> <pre>npm run serve </pre> <p>Для остановки сервера надо нажать</p> <pre>CTRL + c</pre> </li> <li>Очистка выходной папки. Я знаю три способа. Будем пользоваться первым <P>Первый способ. Очистка выходной папки средствами webpack</P> <pre>module.exports = {\r\n  output: {\r\n    clean: true, \r\n  },\r\n};</pre> <p>Второй способ. Установим clean-webpack-plugin, очищающий директорию «dist» при каждой сборке проекта</p> <pre>npm i -D clean-webpack-plugin</pre> <p>Запишем в файл webpack.config.js</p> <pre>const { CleanWebpackPlugin } = require('clean-webpack-plugin')\r\nmodule.exports = {\r\n    plugins: [\r\n      new CleanWebpackPlugin(),\r\n    ],\r\n}</pre> <p>Третий способ. Каталог dist не очищается, а удаляется. Установим filemanager-webpack-plugin</p> <pre>npm i -D filemanager-webpack-plugin</pre> <p>Запишем в файл webpack.config.js</p> <pre>const { FileManagerPlugin } = require('filemanager-webpack-plugin')\r\nmodule.exports = {\r\n    plugins: [\r\n      new FileManagerPlugin(\r\n        events: {\r\n          onStart: {\r\n            delete: ['dist'],\r\n          },\r\n        },                  \r\n      ),\r\n    ],\r\n}</pre> </li> </ol> </article></article>",H()}));var s=document.getElementById("node-tailwind");s&&s.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML='<h1>Tailwind</h1> <div class="article"> <div class="anchor" id="content"></div> <h2>Содержание</h2> </div> <div class="article article__content"> <div> <p><a href="#about">about</a></p> <p><a href="#links">links</a></p> <p><a href="#install">install</a></p> </div> </div> <article class="article"> <div class="anchor" id="about"></div> <h2>about</h2> </article> <article class="article"> <div class="anchor" id="links"></div> <h2>links</h2> <p><a href="https://tailwindcss.ru/">https://tailwindcss.ru/</a></p> <p><a href="https://v2.tailwindcss.ru/">https://v2.tailwindcss.ru/</a></p> <p><a href="https://tailwindcss.com/">https://tailwindcss.com/</a></p> <p><a href="https://v2.tailwindcss.com/">https://v2.tailwindcss.com/</a></p> <p><a href="https://v1.tailwindcss.com/">https://v1.tailwindcss.com/</a></p> <h3>Статьи</h3> <p><a href="https://habr.com/ru/post/508844/">TailwindCSS – очередной фреймворк или новый шаг эволюции (2020-07-01)</a></p> <p><a href="https://habr.com/ru/company/skillfactory/blog/558654/">Взгляд на Tailwind CSS (2021-05-23)</a></p> <p><a href="https://highload.today/tailwind-css-za-i-protiv/">Tailwind CSS: за и против (2021-03-12)</a></p> </article> <article class="article"> <div class="anchor" id="install"></div> <h2>install</h2> <p>Сохраните файл стилей tailwind.css в папке с проектом и подключите его в index.html</p> <code>&lt;link href="tailwind.css" rel="stylesheet"&gt;</code> <p>или подключите файл стилей tailwind.css через cdn </p> <code> &lt;link href="https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css" rel="stylesheet"&gt;</code> </article> ',H()}));var c=document.getElementById("node-nodejs");c&&c.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML=" <article class=\"article\"> <h1>Мои программы на node.js</h1> </article> <div class=\"article__contents\"> <a href=\"#os\" class=\"contents__link\">Модуль os</a> <a href=\"#global-const\" class=\"contents__link\">Глобальные переменные</a> <a href=\"#path\" class=\"contents__link\">Модуль path</a> <a href=\"#fs\" class=\"contents__link\">Модуль fs</a> </div> <article class=\"article\"> <h2>Как устроен модуль common.js</h2> <p>Каждый файл с расширением .js в node.js по умолчанию является модулем common.js. Есть переменная exports - это копия (алияс) переменной module.exports. Переменной module.exports был присвоен объект, и потом переменной exports было присвоено значение переменной module.exports. Выходит что exports и module.exports ссылаются на один и тот же объект. Можно изменять этот объект через любую из этих переменных.</p> <p>Весь код javascript в файле с расширением .js в node.js помещается в анонимную функцию. При этом эта анонимная функция нам не видна. Мы просто пишем код javascript. Получается что в node.js каждый модуль оборачивается в такую анонимную функцию. <code>(function (exports, require, module, __filename, __dirname) { <br>// содержимое модуля <br>});</code> </p> <p>Чтобы проверить что весь код js в node.js помещается в анонимную функцию нужно выполнить команду <code>console.log(arguments.callee.toString());</code> В любой функции, объявленной с помощью ключевого слова function доступна переменная arguments. Она представляет стобой объект, у которого есть свойство callee. И с помощью этого свойства можно посмотреть как выглядит функция, которая была вызвана. <code>function (exports, require, module, __filename, __dirname) { <br>&nbsp;&nbsp;console.log(arguments.callee.toString()); <br>}</code> </p> </article> <article class=\"article\"> <div class=\"anchor\" id=\"os\"></div> <h2>Встроенная библиотека os</h2> <p>Можно узнать параметры операционной системы</p> <p>os.machine() возвращает в виде строчного значения тип машины или ПК пользователя. Возможные значения включают 'arm', 'arm64', 'aarch64', 'mips', 'ppc64', 'ppc64le', 's390', 's390x', 'i386', 'i686', 'x86_64'.</p> <code>const os = require('os'); <br>console.log('Тип машины: ', os.machine());</code> <p>os.platform() возвращает информацию о платформе операционной системы. Возвращается строка, которая может принимать следующие значения: 'aix', 'darwin', 'freebsd', 'linux', 'openbsd', 'sunos', 'win32'.</p> <code>const os = require('os'); <br>console.log('Платформа: ', os.platform());</code> <p>os.type() возвращает имя операционной системы. Возвращается строка, которая может принимать следующие значения: 'Linux', 'Darwin', 'Windows_NT'.</p> <code>const os = require('os'); <br>console.log('Операционная система: ', os.type());</code> <p>os.release() возвращает информацию о версии операционной системы в виде строчного значения.</p> <code>const os = require('os'); <br>console.log('Релиз платформы: ', os.release());</code> <br>console.log('Версия: ', os.version()); <br>console.log('Релиз платформы: ', os.release()); <br>console.log('Архитектура платформы: ', os.arch()); <br>console.log('Свободной памяти: ', os.totalmem()); <br>console.log('Всего памяти: ', os.freemem()); <br>console.log('Домашняя директория: ', os.homedir()); <br>console.log('Имя компьютера: ', os.hostname()); <br>console.log('Сколько времени включен: ', os.uptime()); </article> <article class=\"article\"> <div class=\"anchor\" id=\"global-const\"></div> <h2>Глобальные переменные __dirname и __filename</h2> <p>В node.js нам доступны две глобальные переменные __dirname и __filename.</p> <p>__dirname содержит путь до текущего файла</p> <code>console.log(__dirname); <br>D:\\webpack\\200tbfrontend\\node</code> <p>__filename содержит путь до текущего файла, его имя и расширение</p> <code>console.log(__filename); <br>D:\\webpack\\200tbfrontend\\node\\array.js</code> </article> <article class=\"article\"> <div class=\"anchor\" id=\"path\"></div> <h2>Встроенная библиотека path</h2> <p>Встроенная библиотека path позволяет нам узнать имя файла, путь к нему и его расширение</p> <code>const path = require('path'); <br>console.log(path); <br>console.log(path.basename(__filename)); <br>console.log(path.dirname(__filename)); <br>console.log(path.extname(__filename));</code> </article> <article class=\"article\"> <div class=\"anchor\" id=\"fs\"></div> <h2>Модуль fs</h2> <p>Каждый метод модуля fs существует в двух вариантах: в синхронном и в асинхронном.</p> <p>Синхронный вариант работы проще, однако он блокирует весь скрипт на время своего выполнения. К примеру, если у вас выполняется чтение файла, то весь остальной код будет ожидать, пока файл не прочитается.</p> <p>При этом при чтении файла в основном загружается жесткий диск, а не процессор. То есть процессор мог бы выполнять наш код дальше, но вынужден ожидать загрузки файла.</p> <p>Работать с асинхронным вариантом сложнее, но его преимуществом является то, что он не блокирует скрипт.</p> <p>Это значит, что пока с жесткого диска будет скачиваться файл, наш скрипт сможет выполнять другие операции, что существенно повышает быстродействие скрипта.</p> <h2>Создать файл</h2> <p>Есть два метода для записи в файл - writeFileSync (синхронный) и writeFile (асинхронный).</p> <p>В синхронный метод передаются два параметра - имя файла и данные для записи в файл.</p> <p>Создадим файл some.txt в текущей папке. Для этого в качестве первого параметра передадим только имя файла.</p> <code>const fs = require('fs'); <br>fs.writeFileSync('some.txt', 'Hello World');</code> <p>В текущей папке создастся файл some.txt, в который запишется текстовая строка 'Hello World'. Если такой файл уже есть, то в нем все удалится и запишется текстовая строка 'Hello World'.</p> <p>В асинхронный метод передается три параметра - имя файла, данные для записи в файл и колбэк функция, которая выполнится после того как файл создастся и в него запишутся данные.</p> <code>const fs = require('fs'); <br>fs.writeFile('some.txt', 'Hello World', () => {});</code> <p>По умолчанию методы writeFileSync и writeFile полностью перезаписывают файл.</p> <p>Для того чтобы данные записывались в конец файла нужно в качестве параметра передать объект с флагом на дозапись {flag: 'a'}</p> <code>const fs = require('fs'); <br>fs.writeFile(\"some.txt\", \"Hello again\", {flag:\"a\"}, () => {});</code> </article> <article class=\"article\"> <h2>Дозапись в файл</h2> <p>Есть два метода для дозаписи в файл - appendFileSync (синхронный) и appendFile (асинхронный).</p> <code>const fs = require('fs'); <br>fs.appendFileSync('some.txt', 'Hello again');</code> <code>const fs = require('fs'); <br>fs.appendFile('some.txt', 'Hello again', () => {});</code> </article> <article class=\"article\"> <h2>Чтение файла</h2> <p>Есть два метода для чтения файла - readFileSync (синхронный) и readFile (асинхронный).</p> <p>В синхронный метод передаются два параметра - имя файла и кодировка.</p> <p>В асинхронный метод передается три параметра - имя файла, кодировка и колбэк функция, которая выполнится после того как файл прочитается.</p> <p>Прочитаем файл some.txt из текущей папки.</p> <code>const fs = require('fs'); <br>let result = fs.readFileSync('some.txt', 'utf-8'); <br>console.log(result);</code> <code>const fs = require('fs'); <br>fs.readFile('some.txt', 'utf-8', (err, data) => { <br>&nbsp;&nbsp;if (err) throw err; <br>&nbsp;&nbsp;console.log(data); <br>}); </code> </article> <article class=\"article\"> <h2>Чтение файла и запись в него</h2> <p>Метод readFileSync возвращает содержимое файла. Поэтому записываем его в переменную.</p> <code>const fs = require('fs'); <br>let result = fs.readFileSync('some.txt', 'utf-8'); <br>fs.writeFileSync('some.txt', result + '\\nJavascript'); <br>console.log('было: ', result); <br>result = fs.readFileSync('some.txt', 'utf-8'); <br>console.log('стало: ', result);</code> <p>Метод readFile возвращает промис. Поэтому нужен коллбек, в который попадет содержимое файла или ошибка.</p> <code>const fs = require('fs'); <br>fs.readFile('some.txt', 'utf-8', (err, data) => { <br>&nbsp;&nbsp;fs.writeFile('some.txt', data + '\\nJavascript', (err, data) => { <br>&nbsp;&nbsp;&nbsp;&nbsp;console.log('запись прошла успешно') <br>&nbsp;&nbsp;}); <br>});</code> </article> <article class=\"article\"> <h2>Удалить файл</h2> <p>Есть два метода для удаления файла - unlinkSync (синхронный) и unlink (асинхронный).</p> <code>const fs = require('fs'); <br>fs.unlinkSync('./js-test/some.txt');</code> <code>const fs = require('fs'); <br>fs.unlink('./js-test/some.txt', () => {});</code> </article> <article class=\"article\"> <h2>Создать папку</h2> <p>Есть два метода для создания папки - mkdirSync (синхронный) и mkdir (асинхронный).</p> <p>В синхронный метод передается один параметр - имя папки.</p> <code>const fs = require('fs'); <br>fs.mkdirSync('js-test');</code> <p>В асинхронный метод передаются два параметра - имя папки и колбэк функция, которая выполнится после того как папка будет создана.</p> <code>const fs = require('fs'); <br>fs.mkdir('js-test', () => { <br>&nbsp;&nbsp;fs.writeFile('./js-test/some.txt', 'Hello', () => {}); <br>});</code> </article> <article class=\"article\"> <h2>Удалить папку</h2> <p>Удалить можно только пустую папку</p> <code>const fs = require('fs'); <br>fs.rmdirSync('./js-test');</code> </article> <article class=\"article\"> <h2>Удалить файл из папки и затем папку асинхронно</h2> <code>const fs = require('fs'); <br>fs.unlink('./js-test/some.txt', () => { <br>&nbsp;&nbsp;fs.rmdir('./js-test', () => {}) <br>})</code> </article> <article class=\"article\"> <h2>Локальный сервер</h2> <p>Если в заголовке передать 'Content-Type': 'text/plain; charset=utf-8', то сервер будет отдавать текст.</p> <code>const http = require('http'); <br>let server = http.createServer((req, res) => { <br>&nbsp;&nbsp;res.writeHead(200, { 'Content-Type': 'text/plain; charset=utf-8' }); <br>&nbsp;&nbsp;res.end('Hello Node JS'); <br>}) <br>const PORT = 3000; <br>const HOST = 'localhost'; <br>server.listen(PORT, HOST, () => { <br>&nbsp;&nbsp;console.log(`Сервер запущен: http://${HOST}:${PORT}`); <br>})</code> <p>Если в заголовке передать 'Content-Type': 'text/html; charset=utf-8', то сервер будет отдавать html разметку.</p> <code>const http = require('http'); <br>const fs = require('fs'); <br>let server = http.createServer((req, res) => { <br>&nbsp;&nbsp;res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' }); <br>&nbsp;&nbsp;const stream = fs.createReadStream('test/index.html'); <br>&nbsp;&nbsp;stream.pipe(res); <br>}) <br>const PORT = 3000; <br>const HOST = 'localhost'; <br>server.listen(PORT, HOST, () => { <br>&nbsp;&nbsp;console.log(`Сервер запущен: http://${HOST}:${PORT}`); <br>})</code> </article> <article class=\"article\"> <h2>Как сделать пустые текстовые файлы с названиями файлов текущей папки</h2> <p>Создайте текстовый документ и назовите ее name.js</p> <p>Откройте его в любом текстовом редакторе и запишите туда следующий код на языке javascript</p> <code>const fs = require('fs'); <br>const dir = './'; <br>const files = fs.readdirSync(dir); <br>for (const file of files) { <br>&nbsp;&nbsp;fs.writeFileSync(`${file}.txt`, ''); <br>}</code> <p>Получилась программа на javascript, которая работает в среде node.js</p> <p>Запустите ее в нужной папке</p> <code>node name</code> </article> <article class=\"article\"> <h2>Как в отдельном файле взять поле id у массива объектов и записать в него номера объектов по порядку</h2> <p>Создайте текстовый документ и назовите ее id.js</p> <p>Откройте его в любом текстовом редакторе и запишите туда следующий код на языке javascript</p> <code> const fs = require('fs'); <br>const input = fs.readFileSync('file.txt', 'utf8'); <br>let i = 0; <br>const output = input.replace(/id:\\s\\d*,/g, () => { <br>&nbsp;&nbsp;i++; <br>&nbsp;&nbsp;return `id: ${i},`; <br>}); <br>fs.writeFileSync('new-file.txt', output); </code> <p>Получилась программа на javascript, которая работает в среде node.js</p> <p>Положите файл с массивом объектов в ту же папку где и файл с программой и назовите его file.txt</p> <p>Запустите файл с программой</p> <code>node id</code> <p>Файл с результатом будет называться new-file.txt</p> </article> "}))}();var t=new Event("click");Dt[0].dispatchEvent(t)}()}},{url:"front-offline.html",text:"Offline",content:"<front-offline></front-offline>",act:function(){!function(){var e=document.querySelector("#main-nav");e.innerHTML="",e.append.apply(e,vr),yr();var t=new Event("click");vr[0].dispatchEvent(t)}()}},{url:"front-vacancy.html",text:"Vacancy",content:"<front-vacancy></front-vacancy>",act:function(){!function(){var e=document.querySelector("#vacancy"),t=document.querySelector(".aside"),r=[],i=function(t){var i=document.createElement("a");i.href="#",i.innerHTML=t,r.push(i);var a=[];for(var o in Vr[t]){var l=document.createElement("h3");l.innerHTML=o,a.push(l);var n,s=[],d=_r(Vr[t][o]);try{for(d.s();!(n=d.n()).done;){var h=n.value;s.push(h)}}catch(e){d.e(e)}finally{d.f()}var p=Tr(s);a.push(p)}if(Vr.header2){var u=document.createElement("h2");u.innerHTML=Vr.header2,a.push(u)}i.addEventListener("click",(function(t){t.preventDefault(),c(r,i),e.innerHTML="",e.append.apply(e,a),function(){var e=document.querySelector("#vacancy"),t=document.getElementById("metalamp-frontend1");t&&t.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML='<h1>Front-end Задание 1. Изучение вёрстки. (1-3 недели)</h1> <ul> <li> <div class="i">Если вы уже знаете вёрстку или проходили курсы HTML-Academy, то вы можете сразу перейти ко второму заданию!</div> <p>Перед началом изучения материалов — заполните небольшую форму, в конце которой вы найдёте ссылку на телеграм-чат, для всех, кто приступает к первому заданию. Задавайте вопросы по ходу изучения в чате.</p> <div class="i"><strong>ВАЖНО! После входа в группу нужно нажать на кнопку “Я не бот”, иначе вас выкинет из группы.</strong></div> <p>Отчеты за первый этап присылайте в этот чат из формы выше, там же общайтесь, задавайте вопросы и помогайте другим участникам — рекомендуем.</p> </li> </ul> <h3>Описание задания</h3> <ul> <li> <p>В основе всей работы frontend-разработчика лежит создание интерфейсов. Первый и важный навык — умение скомпоновать внешний вид на HTML+СSS по макетам дизайнера.</p> </li> </ul> <h3>Часть 1</h3> <ul> <li> <p>Мы рекомендуем начать обучение с крутого и полезного сервиса — <a href="https://htmlacademy.ru/"> HTML Academy</a>.<br>Базовый минимум — пройти все бесплатные курсы из этого сервиса</p> <p>Платную версию проходить <strong>необязательно</strong>, вы можете сразу перейти ко второй части и изучать материал по мере необходимости на любых других бесплатных ресурсах.<br>Если решите пройти платные курсы, то можно взять подписку на месяц (повторюсь, НЕОБЯЗАТЕЛЬНО). Вам должно хватить этого времени, чтобы ознакомиться с темами.</p> <p>HTML Academy не единственный обучающий ресурс по вёрстке, вы можете сами выбрать любой другой источник, главное просто свериться с содержанием курсов, чтобы не пропустить какие-то важные темы (в Академии просто почти все нужные темы достаточно полно охвачены)</p> </li> </ul> <h3>Часть 2</h3> <ul> <li> Вам необходимо изучить Git (систему контроля версий). Для изучения мы рекомендуем — <a href="https://githowto.com/ru"> https://githowto.com/ru</a> </li> </ul> <h3>Задание вам даст</h3> <ul> <li>Уверенные знания вёрстки с HTML и CSS. Чтобы понять примерный объём, можно посмотреть в содержание всех курсов по HTML/CSS у <a href="https://htmlacademy.ru/courses"> HTML Academy </a> (курсы по JS можно не учитывать). <br>Если вы отлично владеете темами из этого содержания, можете саму Академию не проходить.</li> <li>Уверенное владение Git. Если вы уже владеете следующими темами, то можете по гиту пока больше не изучать и идти дальше: </li> <li>Индексация</li> <li>Коммиты</li> <li>Ветки (Создание, переключение)</li> <li>Мерж веток</li> <li>Просмотр изменений между коммитами или между ветками</li> <li>Разрешение конфликтов</li> <li>Клонирование репозиториев</li> <li>Подключение нескольких удалённых репозиториев</li> </ul> <h3>Дополнительный материал к первому блоку</h3> <ul> <li>Материалы не являются обязательными и прикладываются в качестве рекомендаций. Вы можете добавить порталы и ссылки в закладки. По мере прохождения курсов мы будем выдавать вам ссылки и порталы, где можно читать дополнительные материалы, искать ответы и следить за новостями отрасли: </li> <li>Книга «HTML и CSS. Разработка и дизайн веб-сайтов» Джон Дакетт. Полная версия тут</li> <li>Книга «Новая большая книга CSS» Дэвид Макфарланд</li> <li><a href="https://ru.bem.info/methodology/quick-start/">Основа методологии БЭМ</a> Здесь очень ясно и понятно объясняется : <a href="https://www.youtube.com/watch?v=HihYQVuH64U&amp;t=61s">Методология БЭМ за 17 мин</a></li> <li><a href="https://developer.mozilla.org/ru/docs/Web/HTML">HTML on MDN</a></li> <li><a href="https://html5book.ru/html-html5/">HTML и HTML5</a>. Описание тегов по основным разделам</li> <li><a href="https://github.com/crecotun/ui-developer-skills">Список актуальных знаний для HTML-верстальщика</a></li> <li class="i">По любым вопросам по программе обучения пишите Виктору в Telegram: @victor_gorbachev</li> </ul> <h3>Материалы рекомендованные другими участниками программы обучения</h3> <ul> <li><a href="https://learn.freecodecamp.org/"> https://learn.freecodecamp.org/</a> — бесплатный аналог htmlacademy</li> <li><a href="http://htmlbook.ru/">http://htmlbook.ru/</a> — теория и есть несложные задачки на верстку (для практики полезная штука)</li> <li><a href="http://htmlbook.ru/html">http://htmlbook.ru/html</a> - по html</li> <li><a href="http://htmlbook.ru/css">http://htmlbook.ru/css</a> - по css</li> <li><a href="https://webshake.ru/test-html/start">https://webshake.ru/test-html/start</a> - тест по html, проверь себя</li> <li><a href="https://code-basics.ru/languages/javascript">https://code-basics.ru/languages/javascript</a> - основы JS, интерактивный бесплатный курс</li> <li><a href="https://tproger.ru/translations/flex-properties-on-css/">https://tproger.ru/translations/flex-properties-on-css/</a> - анимированое руководство по flex</li> <li><a href="http://howtocenterincss.com/">http://howtocenterincss.com/</a> - Как отцентрировать все что угодно</li> <li><a href="https://fructcode.com/ru/courses/">https://fructcode.com/ru/courses/</a> - интересный сервис, есть как и база HTML/CSS, так и JS + jQuery для следующего этапа</li> <li><a href="https://webref.ru/">https://webref.ru/</a> — хорошие туториалы по основам</li> <li><a href="https://htmlreference.io/">https://htmlreference.io/</a> — инфа по html тегам</li> <li><a href="https://cssreference.io/">https://cssreference.io/</a> — инфа по css свойствам</li> <li><a href="https://flexboxfroggy.com/#ru">https://flexboxfroggy.com/#ru</a> — игра для изучения flex</li> <li><a href="https://flukeout.github.io/">https://flukeout.github.io/</a> - игра для изучения css селекторов</li> <li><a href="https://tpverstak.ru/flex-cheatsheet/">https://tpverstak.ru/flex-cheatsheet/</a> — хорошая шпаргалка по flex</li> <li><a href="https://frontender.info/centering-css-complete-guide/">https://frontender.info/centering-css-complete-guide/</a> — все о центрировании в css (много способов для разных задач)</li> <li><a href="https://git-scm.com/book/ru/v2">https://git-scm.com/book/ru/v2</a> - настольная книга по git</li> <li><a href="https://designpub.ru/long-dash-c0b28fab6fdb">https://designpub.ru/long-dash-c0b28fab6fdb</a> - о правилах типографики в вебе</li> <li><a href="https://www.youtube.com/watch?v=Rke_Z1-nvUM&amp;list=PL3LQJkGQtzc5rDeb7FjACNb6sOW300yA0">Git для самых маленьких</a>, наглядно</li> <li><a href="https://www.w3schools.com/">https://www.w3schools.com/</a> -- материал разбит по блокам, можно посмотреть код любого примера, после блоков есть задания на повторение пройденного</li> <li><a href="https://habr.com/ru/post/463923/">https://habr.com/ru/post/463923/</a> .container больше не нужен</li> <li><a href="https://flexboxfroggy.com/">https://flexboxfroggy.com/</a> Игра, позволяет изучить флексы</li> <li><a href="http://howtocenterincss.com/">http://howtocenterincss.com/</a> – how to center in CSS.</li> <li><a href="https://www.sololearn.com/">https://www.sololearn.com/</a> - площадка, на которой есть курсы по различным дисциплинам, плюс есть различные тесты и задания.</li> <li><a href="https://checkio.org/">https://checkio.org/</a> - здесь можно попрактиковаться в решении различных задач с помощью js.</li> <li><a href="https://www.youtube.com/c/GloAcademyChannel">Glo Academy</a> -- полезный канал на ютубе по html/css/js/git</li> <li>Еще есть хороший канал <a href="https://www.youtube.com/channel/UCedskVwIKiZJsO8XdJdLKnA">"Фрилансер по жизни"</a>. Евгений выкладывает всю информацию бесплатно. На добровольном основе можно задонатить и за это будут крутые плюшки. Не реклама. Сама смотрела его видео и узнала для себя много нового</li> <li><a href="http://www.itmathrepetitor.ru/zadachi-po-html-i-css/">http://www.itmathrepetitor.ru/zadachi-po-html-i-css/</a> - задачки по верстке</li> <li><a href="https://basicweb.ru/">https://basicweb.ru/</a> - Справочные и учебные материалы HTML, CSS, JavaScript, jQuery</li> <li><a href="https://learn.javascript.ru/">https://learn.javascript.ru/</a> - современный учебник по JS</li> <li><a href="https://github.com/yoksel/common-words">https://github.com/yoksel/common-words</a> – Слова, часто используемые в CSS-классах (если ступор какой класс задать)</li> <li><a href="https://javarush.ru/groups/posts/2683-nachalo-rabotih-s-git-podrobnihy-gayd-dlja-novichkov">https://javarush.ru/groups/posts/2683-nachalo-rabotih-s-git-podrobnihy-gayd-dlja-novichkov</a> - разжёвывается ГИТ досконально на простом языке</li> <li><a href="https://ru.hexlet.io/courses/intro_to_git">https://ru.hexlet.io/courses/intro_to_git</a>Бесплатный курс "Системы контроля версий (GIT)" на 6 часов на русском языке</li> <li><a href="https://www.youtube.com/playlist?list=PLDyvV36pndZFHXjXuwA_NywNrVQO0aQqb">https://www.youtube.com/playlist?list=PLDyvV36pndZFHXjXuwA_NywNrVQO0aQqb</a> - объемный скринкаст по Git от Ильи Кантор</li> <li>Для изучения Git рекомендую эту игру: <a href="https://learngitbranching.js.org">https://learngitbranching.js.org</a></li> <li><a href="http://cssgridgarden.com/#ru">http://cssgridgarden.com/#ru</a> — игра для изучения grid</li> <li><a href="https://learngitbranching.js.org/?demo=&amp;locale=ru_RU">тренажер по Git</a></li> <li><a href="https://www.youtube.com/playlist?list=PLDyvV36pndZFHXjXuwA_NywNrVQO0aQqb">данный плейлист по Git</a></li> </ul> '}));var r=document.getElementById("metalamp-frontend2");r&&r.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML='<h1>Front-end Задание 2. Практика вёрстки. (2-4 месяца)</h1> <ul> <li> <p>После того, как вёрстка освоена хотя бы в основных моментах, самое время попробовать применить все полученные знания на практике.<br>Пройдите небольшой <a href="https://fullstack-dev.typeform.com/to/yKRpSWj6">опрос</a> — в конце опроса вы найдёте ссылку на чат для участников второго этапа.</p> <div class="i"><strong>ВАЖНО! После входа в группу нужно нажать на кнопку “Я не бот”, иначе вас выкинет из группы.</strong></div> <p>Теперь каждый день, когда вы будете делать задания, мы просим присылать небольшое саммари по итогу дня: над чем вы работали, что получилось, с какими трудностями столкнулись. А так же задавайте вопросы и помогайте другим участникам.</p> </li> </ul> <h2>Описание задания</h2> <ul> <li> <p><strong>Макет страниц по поиску номеров в отеле находится по <a href="https://www.figma.com/file/MumYcKVk9RkKZEG6dR5E3A/">ССЫЛКЕ</a> .<br>Если вдруг увидели сообщение "Editor limit reached", то вот вторая <a href="https://www.figma.com/file/xorjGw6bbI9mK7fZAMebJu/FSD-frontend-education-program.-The-2nd-task-Copy">ССЫЛКА</a></strong></p> <p>В макете две вкладки. На первой вкладке представлен UI Kit, а на второй вкладке сами страницы по поиску номеров отеля. Переключение между вкладками находится в левом верхнем углу, рядом со значком ладошки.</p> <div class="i"><em>Прошлая версия задания: ранее требовалось сверстать макет резюме и макет UI Kit, сейчас эти макеты заменены одним проектом, описанным выше. Тем, кто уже начал делать прошлую версию, можно продолжать работать по ней.</em></div> <p><em>Рекомендуем познакомиться со <a href="https://github.com/fullstack-development/front-end-best-practices">стандартами разработки (bestpractices)</a> перед началом практического задания. По данным стандартам, на 5м задании, будет проводится код-ревью ваших проектов. Имеет смысл делать сразу по этим стандартам, чтобы ревью прошло быстрее. Ссылка на стандарты продублирована сюда из 5го задания.</em></p> </li> </ul> <h3>Требования к верстке:</h3> <ul> <li>Вся вёрстка должна быть выложена на Github в ваш публичный репозиторий, результатом задачи будет как раз этот репозиторий. Под каждый проект создаём новый репозиторий. Присылать ссылку на него необязательно, это можно будет сделать только в пятом задании в личные сообщения организатору.</li> <li>Для второго задания выделить отдельный репозиторий (мы потом отдельные issues можем туда делать). Макет опубликовать через Github Pages: <a href="https://youtu.be/9h1UiqBuxO0">https://youtu.be/9h1UiqBuxO0</a>, чтобы мы могли быстро проверить конечный результат.</li> <li>Ссылку на Github Pages добавить в Readme проекта, чтобы мы при проверке могли быстро перейти к самой вёрстке.</li> <li>С начала работы коммиты в репозиторий делать как можно чаще, минимум раз в день, когда было что-то сделано, а лучше чаще (для каждого нового блока). Не надо копить многодневную работу и сваливать это одним коммитом, для таких вещей лучше использовать ветки. Не бойтесь незаконченные изменения коммитить, в этом нет ничего страшного.</li> <li>Все коммиты должны иметь осмысленные названия.</li> <li>Ориентироваться на последние версии Chrome и Firefox. На Safari и старые IE можно не обращать внимания для этих заданий</li> <li>Все отступы и размеры элементов должны быть соблюдены, для этого во время работы используйте <a href="https://chrome.google.com/webstore/detail/perfectpixel-by-welldonec/dkaagdgjmgdmbnecmcefdhjekcoceebi?hl=ru">расширение</a></li> <li>Все шрифты должны быть подключены и сгенерированы в форматах .ttf, .woff, .svg, в сервисе <a href="http://www.font2web.com/">Font2Web</a></li> <li>Количество картинок должно быть минимальным: если элемент состоит из текста, он должен быть текстовым, если элемент — это просто круг, сделать его чистым css, без картинок</li> <li>Все страницы должны быть по максимуму responsive (<a href="http://g-mops.net/epica_saitama/epica_layout/index_adaptive.html">здесь</a> примеры чем responsive отличается от adaptive и liquid). Можно максимальной ширину сделать 1920, а минимальной 320, а между этими значениями подстраиваться под ширину страницы.</li> <li>Не использовать фреймворки для создания раскладки страницы, такие как, например, bootstrap. Это, с одной стороны, важно для нашего понимания того, что вы владеете техниками создания раскладки страницы, а с другой, будет полезно вам, так как поможет углубить ваши знания в html и css, и, также, научит решать боевые задачи связанные с созданием раскладки.</li> <li>Компонентность. В стандартах будет требоваться использование <a href="https://ru.bem.info/methodology/quick-start/">БЭМ</a>, так что предлагаем сразу его использовать. Необходимо настроить Parcel или Webpack и шаблоны, чтобы каждый БЭМ-овский блок находился в отдельной папке (там будет шаблон самого блока и все его стили, скрипты и картинки.</li> <li>Затем в index.pug вы будете просто подключать самые верхние блоки, а они уже будут внутри себя импортировать вложенные блоки, где надо.<p></p> <p>Каждый отдельный элемент лучше делать отдельным БЭМ-блоком. Мы сделали <a href="https://fullstack-development.gitbook.io/learn/komponentnaya-arkhitektura">небольшой туториал по компонентной архитектуре</a>, где вы можете понять основные принципы.</p></li> <li>Использовать в макетах препроцессоры по максимуму. Вам в любом случае надо будет это сделать для соблюдения предыдущего требования про компонентность, импорты и вставки компонентов друг в друга вы на сыром HTML не сделаете. Подключайте <a href="https://parceljs.org/">Parcel</a> (или <a href="https://webpack.js.org/guides/getting-started/#using-a-configuration">Webpack</a>), он же нужен будет для 4-го задания, и через него настройте сборку <a href="https://gist.github.com/neretin-trike/53aff5afb76153f050c958b82abd9228">Pug</a> (замену HTML) и <a href="https://habr.com/ru/post/140612/">SCSS</a> (замена CSS). Конкретно эти технологии просто рекомендации, можете использовать другие препроцессоры, главное, чтобы они позволяли вам сделать вкладываемые компоненты с чёткими контрактами.</li> <li>Небольшие расхождения в PerfectPixel допускаются в местах, где есть неточности в макете (пример: разная ширина у одинаковых блоков).</li> <li>Макет был подобран так, чтобы вы явно почувствовали типичную проблему верстки — когда есть несколько (от 3-х до 100) страниц верстки, в которых используются часто похожие (совсем похожие или с небольшими отличиями) блоки.</li> <li>UI-Kit — это единый макет дизайна и единая страница верстки, с которой берут типовые блоки и используют в конечных страницах</li> <li>На страницах UI-Kit responsive не требуется.</li> <li>В этом задании вам нужно сверстать все элементы из макета, разбив на компоненты. То есть прямо по макету накидать на одной странице все компоненты.</li> <li>Сделать отдельно сами страницы проекта по поиску номеров в отеле, где эти блоки будут использоваться. Обратите внимание, что некоторые блоки будут в немного измененных модификациях (в разных местах будут разный цвет, разные масштабы или еще что-то подобное).</li> <li>Так же такие вещи, как бегунки, календари и дропдауны должны быть сделаны через JS. можете подключать какие угодно jQuery-плагины для этого (вообще ради этого макет и подбирался, чтобы был опыт экспериментов с подключением jQuery и его плагинов)</li> <li><strong>Проект можно сразу реализовывать с учетом наших СТАНДАРТОВ разработки. Именно на соответствие этим стандартам будет проводиться ревью проекта.<br><a href="https://github.com/fullstack-development/front-end-best-practices"> Ссылка на стандарты (best practices)</a>.</strong></li> <li class="i">Если есть вопросы по разработке, спрашивайте в чате задания, в Figma задавать вопросы нет смысла, потому что комменты в первую очередь видит дизайнер, а ответов у него нет.</li> </ul> <h2>Задание вам даст</h2> <ul> <li>Понимание, как верстать большие макеты с большим количеством одинаковых элементов.</li> <li>Навыки проектировать компонентную архитектуру, где каждый блок можно переиспользовать.</li> <li>Работу с препроцессорами <a href="https://gist.github.com/neretin-trike/53aff5afb76153f050c958b82abd9228">Pug</a> и <a href="https://habr.com/ru/post/140612/">SCSS</a>.</li> <li>Базовые знания БЭМ.</li> <li>Навыки отзывчивой вёрстки.</li> <li>Самые базовые навыки работы с JavaScript.</li> <li>Базовые знания систем сборок Parcel или WebPack по выбору.</li> <li>Умение подключать и настраивать шрифты так, чтобы они корректно отображались в разных браузерах.</li> <li>Умение искать, подключать и настраивать JavaScript-библиотеки и jQuery-плагины в частности.</li> <li>Навыки работы с макетами в Figma</li> <li class="i">По любым вопросам по программе обучения пишите Виктору в Telegram: @victor_gorbachev</li> </ul> <h3>Дополнительные материалы</h3> <ul> <li>Хорошее <a href="https://www.youtube.com/watch?v=eSaF8NXeNsA">видео</a> про Webpack.</li> <li>Очень крутое <a href="https://www.youtube.com/watch?v=7i_jF66F1xM">видео</a> про Webpack</li> <li>Отличная <a href="https://habr.com/ru/post/524260/https://youtu.be/eSaF8NXeNsA">статья</a> по настройке Webpack с нуля</li> <li>Подробная статья на английском по настройке https://hackernoon.com/</li> <li>Очень подробный аж целый онлайн учебник по настройке и работе сборщика https://survivejs.com/webpack/foreword/</li> <li>пример сборки простого статического сайта с помощью webpack 4 https://m.habr.com/ru/post/350886/</li> <li>CSS Architecture (перевод) — рекомендации по структуре вашего CSS-кода</li> <li>Обзор редакторов кода и плагины к ним: https://htmlacademy.ru/blog/40-editors-for-the-coders (рекомендуем использовать VSCode или WebStorm)</li> <li>Словарь терминов по фронтенду (так же стоит посмотреть MDN Web Docs Glossary: Definitions of Web-related terms)</li> <li>https://github.com/kizu/bemto — удобный инструмент для написания кода по БЭМ-методологии в связке с Pug</li> <li>В EMMET есть встроенный функционал для BEM, если совместить с Prettier Pug Plugin, то становится совсем хорошо.</li> <li>Подкасты:</li> <li>Frontend Weekend: https://soundcloud.com/frontend-weekend</li> <li>Frontend Юность: https://soundcloud.com/frontend_u</li> <li>LoftBlog: https://soundcloud.com/loftblog</li> </ul> '}));var i=document.getElementById("metalamp-frontend3");i&&i.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML="<h1>Front-end Задание 3. Изучение JavaScript. (3-4 недели)</h1> <ul> <li> <p>Описание задания.<br>Как фронтенд-разработчику вам в первую очередь нужно будет решать много вопросов с кодом на JavaScript, а вёрстка будет отнимать относительно много времени только на первых порах. Так что для того, чтобы действительно быть полезными команде, вам нужно многое изучить именно в части программирования. И, естественно, первое — это стандартные возможности языка.</p> <p>Книга «JavaScript. Сильные стороны.» Д.Крокфорд</p> <p>Книга «Секреты JavaScript ниндзя» Дж.Резиг, Беэр Бибо</p> <p>Книга «JavaScript. Подробное руководство» Д.Флэнаган</p> </li> </ul> "}));var a=document.getElementById("metalamp-frontend4");a&&a.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML="<h1>Front-end Задание 4. Практика JavaScript. (1-2 месяца)</h1> <ul> <li> <p>Описание задания.<br>Задание заключается в написании плагина для jQuery, который бы реализовывал функционал «бегунка» (также называемого слайдером) — специальный контрол, который позволяет перетягиванием задавать какое-то числовое (будет круто, если в реализации можно сделать не только числовое) значение.</p> </li> </ul> "}));var o=document.getElementById("metalamp-frontend5");o&&o.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML="<h1>Front-end Задание 5. (1-4 месяца) 5а. Рефакторинг</h1> <ul> <li> <p>Описание задания.<br>В этом задании у нас три шага:<br>1. Рефакторинг по нашим стандартам<br>2. Код-ревью<br>3. Интервью по теоретическим вопросам</p> </li> </ul> <h3>Front-end Задание 5. (1-4 месяца) 5б. Командный проект</h3> <ul> <li> <p>Описание задания.<br>1. Этот блок совместит в себе изучение библиотеки React и получение опыта работы по гибким методологиям в команде с другими обучающимися (3-7 человек) над одним проектом. Такая команда будет формироваться из обучающихся, кто находится на этапе код-ревью (Задание 5), на проверке заданий ВТОРЫМ ревьюером.<br>2. Продолжительность блока — 2 месяца (четыре 2-недельных спринта). Работа над проектом в команде, изучение React, код-ревью заданий, а потом и сдача вопросов на Junior-1 будут идти параллельно. Таким образом, вы заполните пользой время между итерациями иногда затягивающегося код-ревью, получая новые полезные скиллы.<br>3. На прохождение нового блока программы необходимо выделить минимум 15 часов в неделю свободного времени, по нашим подсчетам. Идеально, если получится уделять проекту по 2-3 часа каждый день. Время в течении дня вы распределяете сами.</p> </li> </ul> "}));var l=document.getElementById("metalamp-faq");l&&l.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML='<h1>FAQ по программе обучения. Frontend 1.</h1> <ol> <li> <h4>Так а сколько всё же стоит обучение?</h4> <p>Нисколько. Абсолютно. Полностью. Всё обучение для вас совершенно бесплатно.</p> </li> <li> <h4>Оплачивается ли стажировка/есть ли стипендия и т.п.?</h4> <p>Стажировка не оплачиваемая. И на данный момент компания не рассматривает внедрение стипендиальных выплат.</p> </li> <li> <h4>А сколько в среднем уходит на прохождение программы с нуля?</h4> <p>Сильно зависит от самого обучающегося. Но, в среднем, выпускники затрачивали около 1 года на прохождение программы.</p> </li> <li> <h4>Какая зарплата после прохождения?</h4> <p>Для Junior-1, только закончивших программу обучения, ставка 200р. (+50р для Haskell разработчиков) в час на руки (после вычета всех налогов). В команде есть внутренняя карта развития разработчика, по которой можно прокачивать уровень знаний и зарплаты соответственно. Выпускник программы проходит собеседование на Junior-1. Сама карта <a href="https://github.com/fullstack-development/developers-roadmap"> вот здесь.</a></p> </li> <li> <h4>Гарантируете ли вы трудоустройство?</h4> <p>По окончанию обучения компания гарантирует трудоустройство к себе в команду. Либо организуем собеседование в компанию партнёров, при наличие от них запроса и желания выпускника (только для фронтенда). Трудоустройство у нас официальное (по трудовому договору), белая зарплата, удалённая работа, испытательный срок по трудовому 3 месяца.</p> </li> <li> <h4>А если у меня нет гражданства, но есть РВП/регистрация/разрешение на работу и пр.</h4> <p>Найм без гражданства в РФ влечет для нас и для вас большое количество бюрократических препятствий, поэтому к сожалению, в этом случае мы не можем обеспечить трудоустройство. Но материалы программы полностью открыты и бесплатны для всех.</p> </li> <li> <h4>Для трудоустройства можно выбрать только одно из двух направлений? Или же надо закончить и фронт, и бэкенд?</h4> <p>Достаточно закончить ОДНО из предложенных нами направлений. Либо фронт, либо бэк.</p> </li> <li> <h4>А могу я перейти на другое направление обучения? Например, бэка на фронт, если совсем не пойдет или выбирать можно один раз?</h4> <p>Конечно! Вы можете перейти на frontend из backenda, или из backenda на frontend в любой момент.</p> </li> <li> <h4>А когда можно приступать к обучению, и где фиксируется то, что я начал обучаться и обучаюсь вообще?</h4> <p>Вы можете приступать к обучению сразу после заполнения формы и получению доступа к материалам программы обучения. А по отчётам и активности в чате (исключая флуд) мы понимаем что вы проходите программу.</p> </li> <li> <h4>А где посмотреть задание?</h4> <p>Дублируем ссылки здесь. Задания одинаковые, они просто ведут на разные ресурсы:<br><a href="https://coda.io/@metalamp/education/front-end-2"> Coda: Front-end</a><br><a href="https://rizzoma.com/topic/d5c429337bcaa70548fb5aeedee6d92b/0_b_8ndo_78h6v/"> Rizzoma</a><br>Также, чтобы найти задания, вы можете воспользоваться:<br>1) Описанием телеграмм чата, там указаны ссылки, которые ведут на задания. Они также дублируют друг друга, просто ведут на разные ресурсы.<br>2) Закрепленными сообщениями в чате.<br>3) Ссылкой на задания в форме, которую вы заполняли.</p> </li> <li> <h4>Обязательны ли отчёты?</h4> <p>Отчёты носят рекомендательный характер, но они помогают нам понять не застрял ли человек где-то и не забросил ли программу вовсе; сам ли выполнял задания (бывали и случаи плагиата работ). Поэтому мы просим стажеров писать отчёты. Наш заочный способ познакомиться с будущими коллегами :)</p> </li> <li> <h4>А как фиксируется прохождение мной заданий обучения?</h4> <p>Как таковой чёткой фиксации выполнения заданий у нас нет. Никто ни за кем пристально не следит и мы рассчитываем на вашу самостоятельность. :)<br>Наша система построена на ежедневных отчётах и уже перед процессом код-ревью (последние шаги программы), мы будем смотреть на то, как у вас проходило обучение.</p> </li> <li> <h4>Куда отправлять отчёты?</h4> <p>В телеграмм канал согласно вашему текущему заданию (Для фронта). Для бэкенда все отчёты отправляйте в один телеграмм канал (канал по haskell).</p> </li> <li> <h4>А если у меня возникнут вопросы по материалу, к кому мне можно будет обратиться?</h4> <p>Можете смело писать интересующие вас вопросы в телеграмм чат и спрашивать у комьюнити. Также вы можете задать свой вопрос менеджеру программы обучения (администратор чата в телеграме) написав ему в личку или в телеграмм чате (поставив @ и ник менеджера.)</p> <div class="i">Не забудьте проверить через поиск по чату свой вопрос. Вдруг его уже задавали до вас и вы можете легко найти ответ</div> <p></p> </li> <li> <h4>Хочу начать обучение, нужно ли мне что-то скачивать/устанавливать для этого?</h4> <p>Нет, на начальном этапе, когда идёт знакомстве с теорией, вам ничего устанавливать не нужно.</p> </li> <li> <h4>А можете скинуть какой-нибудь проект, который бы включал выполнение всех задач, требований, которые нам надо выполнить?</h4> <p>Мы не скрываем проекты других обучающихся, но и идеальный вариант тоже скинуть не можем. Слишком велик соблазн скопировать. И некоторые так и делали, но потом у них на реальных проектах были большие сложности с самостоятельным решением задач.</p> </li> </ol> '}));var n=document.getElementById("metalamp-errors");n&&n.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML='<h1>Наиболее распространенные ошибки на этапе код-ревью.</h1> <h2>Общие моменты:</h2> <ol> <li>В Readme проекта следует указывать версии плагинов, на которых его писали.</li> <li>Неверные пути к favicons.</li> <li>Наличие орфографических ошибок в именах переменных и т.д. Плагин SpellСhecker поможет с поиском ошибок.</li> <li>Библиотеки лежат обычными файлами, а должны быть установлены через npm или yarn.</li> <li>Не соблюдение нейминга файлов в стиле lowercase-hyphenated. Правило <a href="https://github.com/fullstack-development/front-end-best-practices/blob/master/HTML/README.md#3.1">3.1.</a> <div class="i">Также стоит учитывать исключения (Пример: файл экспортирующий класс, нейминг js файлов (правило <a href="https://github.com/fullstack-development/front-end-best-practices/blob/master/JS/README.md#1.4"> 1.4</a>).</div> </li> <li>Отсутствуют дефолтные значения для аргументов функций, методов класса, pug миксинов.</li> <li>Прежде чем отключать правило линтера (// eslint-disable-next-line), разберитесь, зачем оно нужно. Не отключайте его без необходимости. И готовьтесь к тому, что вас могут попросить аргументированно обосновать своё решение; почему вы отключили данное правило.</li> <li>Структура БЭМ блока не соответствует правилу: 1 блок - 1 директория - 1 pug (1 миксин) - 1 css - 1 js.</li> <li>Использование элементов реализации блока из вне, и блока без pug миксина. Правило <a href="https://github.com/fullstack-development/front-end-best-practices/blob/master/CSS/README.md#4.4"> 4.4.</a></li> <li>Наличие BEM миксов. Правила <a href="https://github.com/fullstack-development/front-end-best-practices/blob/master/CSS/README.md#4.5"> 4.5</a> и <a href="https://github.com/fullstack-development/front-end-best-practices/blob/master/CSS/README.md#4.6"> 4.6.</a></li> <li>Файл экспортирующий класс должен называться так же, как и экспортируемый класс.</li> <li>Нельзя оставлять “закомменченный” код. Правило <a href="https://github.com/fullstack-development/front-end-best-practices/blob/master/JS/README.md#1.23"> 1.23</a>.</li> <li>Неверная сортировка импортов. Правило <a href="https://github.com/fullstack-development/front-end-best-practices/blob/master/JS/README.md#1.17"> 1.17</a>.</li> <li>Неверная сортировка методов класса. Правило <a href="https://github.com/fullstack-development/front-end-best-practices/blob/master/JS/README.md#8.5"> 8.5</a>.</li> <li>Отсутствие префиксов js-. Правило <a href="https://github.com/fullstack-development/front-end-best-practices/blob/master/JS/README.md#5.1"> 5.1</a>.</li> <li>Не модульный JS. Правило <a href="https://github.com/fullstack-development/front-end-best-practices/blob/master/JS/README.md#5.5"> 5.5</a>.</li> <li>Неверный выбор типа BEM модификатора (булевый, ключ-значение). <div class="i">Пример: button_type_hidden.<br>Hidden - это булевый модификатор, свойство либо есть, либо нет. Ключ для него не нужен. Правильно - button_hidden<br>Ключ требуется когда есть вариативность: button_size_big, button_size_middle</div> </li> <li>Одному DOM элементу должен соответствовать один БЭМ-блок или элемент. <div class="i">Неправильно:<br>.calculator__button.calculator__plus<br>Правильно:<br>.calculator__button.calculator__button_action_plus.calculator__button_disabled</div> </li> </ol> <h2>Toxin:</h2> <ol> <li>Все страницы, кроме UI kit, должны быть адаптированы под ширину от 320 до 1920 пикселей. При большой ширине (1200+) контейнер с контентом растягивать не нужно, страницы должны соответствовать макетам. При маленькой ширине (как на мобильных устройствах), для меню использовать “гамбургер”.</li> <li>Часто встречаются ошибки в pixel perfect.</li> <li>Частое несоблюдение стилей макета, т.е. граница у кнопки не градиентная, а сплошная; текст не полупрозрачный, а непрозрачный и т.п.</li> <li>Отсутствует маска в masked-textfield.</li> <li>Диаграмма на странице room-details не должна быть просто картинкой. В параметрах нужно передать список значении и построить круговую диаграмму на их основе.</li> <li>В date-dropdown должен быть один календарь на два инпута. <div class="i">Не забывайте проверять как выглядит календарь на мобильных. Если ввод дат вручную в инпуты работает некорректно, то необходимо запретить его. То же самое и для dropdown.</div> </li> <li>Устанавливать адекватные отступы от края экрана и между смысловыми блоками на странице. Правило <a href="https://github.com/fullstack-development/front-end-best-practices/blob/master/CSS/README.md#1.13"> 1.13</a>. <div class="i">Пример плохих отступов: </div> </li> </ol> <h2>Slider:</h2> <ol> <li>Readme описан недостаточно полно. Отсутствует информация о том как подписаться на события слайдера и отписаться от них, с какой версией node и jQuery проект совместим.</li> <li>Код для клиента и код для демонстрации слайдера находятся в одном продакшн бандле. На выходе код клиента и демонстрационный код должны лежать в разных файлах, чтобы клиент не грузил абсолютно ненужный ему код. Реализовать это можно созданием по одной точке для каждого типа кода.</li> <li>jQuery находится в продакшн бандле, предпочтительнее, чтобы клиент устанавливал jQuery самостоятельно, подобрав версию, совместимую для нескольких плагинов. Можно подключить jQuery в слайдер через CDN.</li> <li>На демо-странице для слайдера не соблюдаются стандарты (в первую очередь касается БЭМ, ооп для ts, весь код страницы не должен находиться в одном/двух файлах).</li> <li>Слайдер ломается при передаче нестандартных значений. Также в слайдере не должны лежать невалидные значения. <div class="i">Пример невалидных значений: При min 0, а max 10, шаг не может быть 11.</div> </li> <li>Необходимо проверять демо на ошибки. Тестировать разного рода значения: большие, маленькие, отрицательные, дробные, невалидные.</li> </ol> <h2>Typescript:</h2> <ol> <li>В tsconfig должен быть установлен флаг strict: true.</li> <li>Запрещается добавлять в tsconfig флаги, ослабляющие проверки типов, такие как, например, <a href="https://www.typescriptlang.org/tsconfig#suppressImplicitAnyIndexErrors">suppressImplicitAnyIndexErrors</a>, <a href="https://www.typescriptlang.org/tsconfig#suppressExcessPropertyErrors">suppressExcessPropertyErrors</a> и подобные.</li> <li>Запрещается использовать правило @ts-ignore.</li> <li>Использовать ‘any’ разрешается только в одном случае. Когда у вас совершенно никак не получается затипизировать без использования ‘any’ и вы испробовали все возможные варианты. Также вам ОБЯЗАТЕЛЬНО нужно будет написать подробный комментарий, почему вы не смогли обойтись без использования ‘any’.</li> <li>Запрещается использовать type assertions, в частности с помощью “as” и non-null assertion operator (оператор “восклицательный знак”).</li> </ol> '}));var s=document.getElementById("metalamp-employment");s&&s.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML='<h1>Про трудоустройство.</h1> <h2>Важная информация!</h2> <ul> <li> <div class="i">По любым вопросам по программе обучения пишите Виктору в Telegram: @victor_gorbachev</div> <p>Внимательно прочитайте введение и правила по работе во время программы.</p> <p>Проходить программу обучения вы можете из любого уголка нашей страны, работать в дальнейшем тоже можно удалённо. Но если вы проживаете в Томске — у вас есть возможность посещать офис.</p> <div class="i">Обучение <strong>бесплатное</strong> и доступно всем. Но трудоустройство в нашу команду возможно <strong>только для граждан РФ</strong>. Поэтому и пятый этап обучения (код-ревью и командный проект) доступен <strong>только для граждан РФ</strong>.</div> </li> </ul> '}));var c=document.getElementById("metalamp-intro");c&&c.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML='<h1>INTRO</h1> <ul> <li> <p>Добро пожаловать!</p> <p>Тут собраны задания программы обучения: все участники имеют доступ к плану обучения.</p> <p>Нам бы очень хотелось видеть, как вы сами кооперируетесь друг с другом и решаете вместе возникающие проблемы. На вашу коммуникацию мы тоже будем обращать внимание — в первую очередь мы ожидаем увидеть в вас приветливого хорошего человека, с которым приятно совместно работать по 8 часов в день :)</p> <p>Сотрудничайте и помогайте друг другу, вы ни в коем случае не конкуренты, вы все — будущие коллеги и будущие крутые разработчики. Общение осуществляется в чатах в телеграм. У каждого задания есть свой чатик.</p> <p>Объявлять кому-то о начале своего обучения не нужно. Вам достаточно просто оставить свой первый отчёт в телеграмм чат соответствующего задания, так мы поймем что вы приступили к обучению.</p> <p>Также, для вашего удобства, оставляем ссылку на материалы программы обучения на сервисе Rizzoma. Раньше использовали только его и там могли остаться комментарии, которые ещё не успели перенести сюда. :)</p> <p>В этом же доке вы можете найти другие полезные материалы по программе обучения:<br>1) <a href="faq.html">FAQ по программе обучения для первого этапа.</a><br>2) <a href="errors.html">Список с наиболее распространенными ошибками стажеров на этапе код-ревью</a></p> </li> </ul> <h3>Введение и структура курса</h3> <ul> <li>Задания разбиты на 5 этапов. Ниже приведены средние сроки прохождения каждого этапа при активном изучении по 30-40 часов в неделю:</li> <li>1 задание — 1-3 недели</li> <li>2 задание — 2-4 месяца</li> <li>3 задание — 3-4 недели</li> <li>4 задание — 1-2 месяца</li> <li>5 задание — 3-6 месяцев</li> <li>Формат обучения нацелен на изучение основ и принципов разработки. Мы сторонники фундаментальных знаний и уверены, что без них на ранних этапах обучения в технологии лучше не лезть. Это как пытаться настроить самому всю проводку в доме не зная закона Ома :) Поэтому для начала нужно изучить базис и тогда вы сможете выбирать и осваивать фреймворки осознанно, подбирая лучший под стоящую перед вами задачу:</li> <li>Вёрстку,</li> <li>Инструменты сборки,</li> <li>Архитектуру вёрстки,</li> <li>Теорию по JavaScript,</li> <li>MVC и применение его на фронте,</li> <li>Написание тестов (чтобы понимать, зачем они нужны).</li> <li>Изучение этого материала разбито на 4 этапа с практическими заданиями, а последний 5-й — это большой рефакторинг на основе наших стандартов с созданием issues в ваших GitHub-репозиториях и проверка ваших знаний на личной беседе (в офисе или через созвон) c неограниченным количеством попыток; а также в пятом задание вам предстоит поучаствовать в групповом проекте. Вас ждут условия, как в реальной работе: требовательные заказчики, добрый скрам-мастер, внимательный продакт-оунер, горящие дедлайны, скоростное изучение новых технологий, взаимное код-ревью, меняющиеся по ходу проекта требования и полная удовлетворенность результатами работы как итог этапа.</li> </ul> <h3>Коммуникация во время обучения</h3> <ul> <li>Общение во время обучения проходит в Telegram-чатах (если у вас не запускается Telegram — вам необходимо использовать прокси или VPN)</li> <li>Доступ к телеграм-чатам для общения по первому этапу вы найдёте в конце формы из описания первого задания — заполняйте эту форму, когда приступите к нему. В этом чате вы можете общаться с участниками и задавать вопросы по вёрстке.</li> <li>Для второго и последующих этапов — аналогично отдельный чат в Телеграм. Мы просим скидывать в каждый чат небольшие отчеты каждый день, после того, как вы поработали над заданиями (если в какой-то день ничего по заданиям не делали — ничего страшного, просто ничего не отсылайте). Отчёт в свободной форме: расскажите, что делали и поделитесь своими впечатлениями.</li> <li>Если вы уже знаете вёрстку или проходили курсы HTML-Academy, то вы можете сразу перейти ко второму заданию!</li> </ul> <h3>Как задавать вопросы?</h3> <ul> <li>Вопросы — это хорошо, задавать их нужно: это поможет не только вам, но и всем кто проходит или будет проходить обучение. Помните, глупых вопросов не бывает.</li> <li>Вопросы по задачам задавать лучше в чате, соответствующего задания.</li> <li>Вопросы организационные лучше задавать в личном сообщении админам чата или менеджеру программы обучения в Telegram.</li> <li>Перед любым вопросом, конечно же, смотрим сначала вопросы, которые ранее уже тут задавались, и гуглим в гугле. Если вы не нашли ответ, тогда задавайте вопрос )</li> <li> <p>Очень важно максимально точно и полно описать проблему, тут оба наречия "точно" и "полно" вставлены не просто так. Старайтесь описать проблему так, чтобы ни одна важная деталь не была упущена, а потом выпилите из вопроса все лишнее. Старайтесь задать вопрос так, чтобы не пришлось в ответ спрашивать деталей.</p> <p>Оформляйте код в <a href="https://jsfiddle.net/"> jsfiddle</a> или <a href="https://codepen.io/"> codepen</a> с вашей проблемой, чтобы там ее можно было найти и сразу же повторить. Там должен быть только минимальный код, описывающий проблему. Возможно, пока вы будете оформлять минимальный код, выпиливая все лишнее, вы сами и найдете проблему.</p> <p>Не бойтесь вставлять скриншоты (пример программы для скриншота: <a href="http://joxi.ru/"> joxi</a>), где показывайте интерфейс, который у вас почему-то не строится, как надо.</p> <p>Вставлять ссылки на свои github репозитории лучше НЕ надо — для нас тяжело разбираться по каждому вопросу сразу в контексте всего репо, так как надо будет изучить кучу контекста. Небольшие примеры кода на jsfiddle как раз лишены всего нерелевантного и там можно смотреть только на тот код, что создает проблему.</p> <p>Обязательно надо рассказать, что уже пробовали сделать и какое в итоге расхождение было с желаемым результатом.</p> <div class="i"> Вот отличный сборник правил о том, как грамотно задавать вопросы [оригинал англ.] и [<a href="online/quest.html">перевод на русский</a> offline]<br>Вот ещё один пример как задавать вопросы. Как правильно задавать вопросы - Eric Steven Raymond </div> <p>Перед тем, как начать выполнение заданий, мы предлагаем внимательно ознакомиться с форматом прохождения, если вы еще не проходили наш <a href="https://fullstack-dev.typeform.com/to/rFvSaLsY"> тест</a>.</p> <div class="i">По любым вопросам по программе обучения пишите Виктору в Telegram: @victor_gorbachev</div> </li> </ul> '}))}()}))};for(var a in Vr)i(a);var o,l=_r(jr);try{var n=function(){var e=o.value,t=document.createElement("a");t.href="#",t.innerHTML=e,t.id="vacancy-".concat(e.replace(/[^a-z0-9]/gi,"").toLowerCase()),r.push(t),t.addEventListener("click",(function(e){e.preventDefault(),c(r,t)}))};for(l.s();!(o=l.n()).done;)n()}catch(e){l.e(e)}finally{l.f()}t.innerHTML="",t.append.apply(t,r),function(){var e=document.querySelector("#vacancy"),t=document.getElementById("vacancy-interview");t&&t.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML='<h1>Interview</h1> <div class="content__menu"> <p class="content__menu-link" id="content__menu-link1">links</p> <p class="content__menu-link" id="content__menu-link2">Собеседование</p> </div> <div class="content__items"> <div class="content__item" id="content__item1"> <h2>links</h2> <div class="article"> <p> <a href="https://tproger.ru/problems/sobesedovanie-na-poziciju-middle-javascript-razrabotchika-primery-zadach-i-neobhodimye-znanija/">https://tproger.ru/</a> Собеседование на позицию Middle JavaScript разработчика: примеры задач и необходимые знания (2021-01-27) </p> <p> <a href="https://gcoder.ru/kak-ponyat-chto-vy-gotovy-zanyat-poziciyu-front-end-razrabotchika/">https://gcoder.ru/</a> Как понять, что вы готовы занять позицию front-end разработчика </p> </div> </div> <div class="content__item" id="content__item2"> <h2>Собеседование</h2> <h3>Клиент-серверная архитектура</h3> <div class="article"> <p><a href="https://habr.com/ru/articles/495698/">Клиент-серверная архитектура в картинках (2020-04-04)</a></p> <p>На клиент-серверной архитектуре построены все сайты и интернет-сервисы. Также ее используют десктоп-программы, которые передают данные по интернету. Поэтому ИТ-специалисту нужно понимать, что это такое и как работает. Клиент - Сервер - База данных. Это трехзвенная архитектура. Можно без базы данных, но тогда данные не сохраняются если сервер перезагрузится. Клиенты и серверы обмениваются сообщениями в шаблоне запрос-ответ.</p> </div> <h3>Клиент-серверная архитектура. Плюсы</h3> <div class="article"> <p>Плюсы архитектуры. Клиентов может быть много. Но один мощный сервер. Нет дублирования кода. Данные находятся в безопасности</p> </div> <h3>Клиент-серверная архитектура. Минусы</h3> <div class="article"> <p>Минусы архитектуры. Если отказал сервер или база данных, то все клиенты не могут работать. Сервер дорогой.</p> </div> <h3>TCP/IP</h3> <div class="article"> <p>Стек протоколов TCP/IP (Transmission Control Protocol/Internet Protocol, протокол управления передачей/протокол интернета) — сетевая модель, описывающая процесс передачи цифровых данных. Стек протоколов TCP/IP включает в себя четыре уровня. 1. Прикладной уровень (Application Layer) HTTP, RTSP, FTP, DNS. 2. Транспортный уровень (Transport Layer) TCP, UDP, SCTP, DCCP. 3. (Сетевой уровень) (Internet Layer) IP. 4. Канальный уровень (Network Access Layer) Ethernet, IEEE 802.11, WLAN, SLIP, Token Ring, ATM и MPLS</p> </div> <h3>HTTP протокол</h3> <div class="article"> <p>HTTP является протоколом клиент-серверного взаимодействия. Сообщения, отправленные клиентом, обычно веб-браузером, называются запросами, а сообщения, отправленные сервером, называются ответами.</p> <p>Как HTTP-протокол работает. Весь процесс передачи HTTP-запроса можно разбить на пять шагов. Давайте разберём их подробнее.</p> <p>Шаг первый — вписываем URL в браузер. Чтобы отправить HTTP-запрос, нужно использовать URL-адрес — это «унифицированный указатель ресурса» (или Uniform Resource Locator). Он указывает браузеру, что нужно использовать HTTP-протокол, а затем получить файл с этого адреса обратно. Обычно URL-адреса начинаются с http:// или https:// (зависит от версии протокола).</p> <p>Шаг второй — браузер находит IP-адрес. Для пользователей URL-адрес — это набор понятных слов: Yandex, Google. Но для компьютера эти понятные нам слова — набор непонятных символов. Поэтому браузер отправляет введённые вами слова в DNS, преобразователь URL-адресов в IP-адреса. DNS расшифровывается как «доменная система имён» (Domain Name System), и его можно представить как огромную таблицу со всеми зарегистрированными именами для сайтов и их IP-адресами.</p> <p>Шаг третий — браузер отправляет HTTP-запрос. DNS возвращает браузеру IP-адрес, с которым тот уже умеет работать. Теперь браузер начинает составлять HTTP-запрос с вложенным в него IP-адресом. Сам HTTP-запрос может выглядеть так: GET / HTTP/1.1 Host: www.google.com</p> <p>Шаг четвёртый — сервер отдаёт HTTP-ответ. После получения и обработки HTTP-запроса сервер создаёт ответ и отправляет его обратно клиенту. В нём содержатся дополнительная информация (метаданные) и запрашиваемые данные. Простой HTTP-ответ выглядит так: HTTP/1.1 200 OK Content-Type: text/html; charset=UTF-8</p> <p>Шаг пятый — браузер отображает веб-страницу. Как только браузер получил ответ с веб-страницей, он отображает её с помощью внутреннего движка. И на этом весь процесс отправки и получение HTTP-запросов заканчивается, а клиент получает нужные ему данные.</p> </div> <h3>HTTP запрос</h3> <div class="article"> <p>HTTP-запрос состоит из трех элементов: 1. стартовоя строка, которая задает параметры запроса или ответа, Метод + URL + HTTP/Версия. Стандартных методов девять: GET, HEAD, POST, PUT, DELETE,CONNECT, OPTIONS, TRACE, PATCH. 2. заголовок, который описывает сведения о передаче и другую служебную информацию. 3. тело (его не всегда можно встретить в структуре). Обычно в нем как раз лежат передаваемые данные. От заголовка тело отделяется пустой строкой.</p> </div> <h3>HTTP ответ</h3> <div class="article"> <p>HTTP-ответ строится примерно по тому же принципу, что и запрос. HTTP/Версия + Код состояния + Пояснение. Версия совпадает с версией в запросе. Код состояния показывает статус запроса. Это трехзначное число. В пояснении стоит краткое описание ответа</p> </div> <h3>HTTP ответ. Код состояния (статус ответа)</h3> <div class="article"> <p>Всего статусов в спецификации HTTP 1.1 — 40. Вот самые популярные из них: 200 OK — данные успешно получены; 201 Created — значит, что запрос успешный, а данные созданы. Его используют, чтобы подтверждать успех запросов PUT или POST; 300 Moved Permanently — указывает, что URL-адрес изменили навсегда; 400 Bad Request — означает неверно сформированный запрос. Обычно это случается в связке с запросами POST и PUT, когда данные не прошли проверку или представлены в неправильном формате; 401 Unauthorized — нужно выполнить аутентификацию перед тем, как запрашивать доступ к ресурсу; 404 Not Found — значит, что не удалось найти запрашиваемый ресурс; 405 Forbidden — говорит, что указанный метод HTTP не поддерживается для запрашиваемого ресурса; 409 Conflict — произошёл конфликт. Например, когда клиент хочет создать дважды данные с помощью запроса PUT; 500 Internal Server Error — означает ошибку со стороны сервера.</p> </div> <h3>HTTP и HTTPS</h3> <div class="article"> <p>HTTPS – это расширение протокола HTTP, которое обеспечивает защиту передаваемых данных. Для сайта это важный параметр, так как шифрование позволяет ему обезопасить информацию, которую туда вводят люди (пароли, реквизиты кредитных карт), от хакерских атак. HTTP-протокол передает данные в открытую, поэтому их легко перехватить. HTTPS защищен SSL-сертификатом. Благодаря ему уязвимые данные шифруются сначала на клиенте (браузере, например) в результате чего они становятся похожи на случайный набор символов и только потом отправляются на сервер. Каждый раз при HTTP-запросе шифр меняется, поэтому успеть подобрать ключ и украсть данные довольно трудно.</p> </div> <h3>REST API</h3> <div class="article"> <p><a href="https://blog.skillfactory.ru/glossary/rest-api/" )>REST API (2023-06-12)</a></p> <p>REST API — это способ взаимодействия сайтов и веб-приложений с сервером. Его также называют RESTful. API (Application Programming Interface) — это код, который позволяет двум приложениям обмениваться данными с сервера. На русском языке его принято называть программным интерфейсом приложения. REST (Representational State Transfer) — это способ создания API с помощью протокола HTTP. На русском его называют «передачей состояния представления». </p> </div> <h3>Сложность алгоритма. Big O</h3> <div class="article"> <p>Сложность алгоритма определяется количеством шагов для его выполнения</p> </div> </div> </div>',H()}));var r=document.getElementById("vacancy-postcross");r&&r.addEventListener("click",(function(t){t.preventDefault(),e.innerHTML='<h1>Разработка сайта Посткроссинга</h1> <div class="content__menu"> <p class="content__menu-link" id="content__menu-link1">Сайты</p> <p class="content__menu-link" id="content__menu-link2">Статьи</p> </div> <div class="content__items"> <div class="content__item" id="content__item1"> <h2>Готовые сайты с посткроссингом</h2> <div class="article"> <p> <a href="https://www.postcrossing.com/">postcrossing.com</a> Postcrossing: Postcards connecting the world </p> <p> <a href="https://postcross.ru/">postcross.ru</a> Сайт для русскоговорящих любителей посткроссинга </p> <p> <a href="https://xn--d1amagjbbpqc2h.xn--p1ai/">домоткрыток.рф</a> Федеральная лига посткроссеров </p> </div> </div> <div class="content__item" id="content__item2"> <h2>Статьи о посткроссинге</h2> <div class="article"> <p> <a href="https://www.toybytoy.com/collection/Postcrossing">toybytoy.com/collection/Postcrossing</a> Посткроссинг (2016-05-01) </p> <p> <a href="https://habr.com/ru/articles/416883/">habr.com/ru/articles/416883</a> Как я свой Postcrossing писал (2018-07-11 Inexu) </p> <p> <a href="https://www.gazeta.ru/social/2020/02/18/12966217.shtml">gazeta.ru</a> Шлите открытки: посткроссингу — 15 лет (2020-02-18) </p> <p> <a href="https://mgazeta.com/articles/interesno/2022-06-20/postkrossing-chto-eto-takoe-i-s-chem-eto-edyat-2847903">mgazeta.com</a> Посткроссинг: что это такое и с чем это едят? (2022-06-20) </p> <p> <a href="https://journal.tinkoff.ru/postcrossing/">journal.tinkoff.ru/postcrossing</a> Сколько стоит заниматься посткроссингом (2023-03-30) </p> </div> </div> </div>',H()}))}();var s=new Event("click");function c(e,t){e.forEach((function(e){e.classList.remove("active")})),t.classList.add("active")}r[0].dispatchEvent(s)}()}},{url:"front-video.html",text:"Video",content:"<front-video></front-video>",act:function(){var e;(e=document.querySelector(".front-video"))&&(e.append(Ir.mainNav),e.append(Ir.elemSection))}},{url:"front-yt.html",text:"Youtube",content:"<front-yt></front-yt>",act:function(){var e;(e=document.querySelector(".front-yt"))&&(e.append(Gr.mainNav),e.append(Gr.elemSection))}}],Kr=document.getElementById("nav"),Xr=document.getElementById("main");function Zr(e,t){e.forEach((function(e){e.elem.classList.remove("active")})),t.classList.add("active")}function $r(){"/code.html"===ii&&(Kr.innerHTML="",Qr.forEach((function(e){Kr.appendChild(e.elem),e.elem.classList.remove("active")}))),"/index.html"===ii&&(Kr.innerHTML="",Yr.forEach((function(e){Kr.appendChild(e.elem),e.elem.classList.remove("active")})))}(Ur=Qr).forEach((function(e){e.elem=document.createElement("a"),e.elem.href="",e.elem.innerHTML=e.text,e.elem.addEventListener("click",(function(t){t.preventDefault(),Zr(Ur,e.elem),Xr.innerHTML=e.content,e.act()}))})),(qr=Yr).forEach((function(e){e.elem=document.createElement("a"),e.elem.href="",e.elem.innerHTML=e.text,e.elem.addEventListener("click",(function(t){t.preventDefault(),Zr(qr,e.elem),Xr.innerHTML=e.content,e.act()}))}));var ei,ti=document.getElementById("header__nav"),ri=document.getElementById("main"),ii="/index.html",ai={};function oi(e,t){e.forEach((function(e){e.elem.classList.remove("active")})),t.classList.add("active")}function li(e){return li="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},li(e)}function ni(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,(void 0,a=function(e,t){if("object"!==li(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var i=r.call(e,"string");if("object"!==li(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(i.key),"symbol"===li(a)?a:String(a)),i)}var a}function si(e){var t="function"==typeof Map?new Map:void 0;return si=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,i)}function i(){return ci(e,arguments,pi(this).constructor)}return i.prototype=Object.create(e.prototype,{constructor:{value:i,enumerable:!1,writable:!0,configurable:!0}}),hi(i,e)},si(e)}function ci(e,t,r){return ci=di()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&hi(a,r.prototype),a},ci.apply(null,arguments)}function di(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function hi(e,t){return hi=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},hi(e,t)}function pi(e){return pi=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},pi(e)}ai.current=window.location.href,ai.li=ai.current.lastIndexOf("index.html"),"/"===ai.current[ai.current.length-1]&&(ai.base=ai.current),"-1"!==ai.li&&(ai.base=ai.current.slice(0,ai.li)),(ei=q).forEach((function(e){e.elem=document.createElement("a"),e.elem.href=e.url,e.elem.innerHTML=e.text,e.elem.addEventListener("click",(function(t){t.preventDefault(),oi(ei,e.elem),ii=e.url,ri.innerHTML=e.content,$r(),function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";try{history.pushState(e,null,t)}catch(e){}}(e.text,e.url),e.act()}))})),q.forEach((function(e){ti.appendChild(e.elem)})),oi(q,q[1].elem),ri.innerHTML=q[1].content,$r(),q[1].act();var ui=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&hi(e,t)}(l,e);var t,r,i,a,o=(i=l,a=di(),function(){var e,t=pi(i);if(a){var r=pi(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===li(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function l(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),o.call(this)}return t=l,(r=[{key:"connectedCallback",value:function(){this.innerHTML='<div id="search-google" class="search-google container none"> <form action="https://www.google.com/search" method="get"> <input type="text" name="q"> <input type="submit" value="Search in google.com"> <input type="reset" value="Reset"> </form> </div> '}}])&&ni(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),l}(si(HTMLElement));function mi(e){return mi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},mi(e)}function gi(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,(void 0,a=function(e,t){if("object"!==mi(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var i=r.call(e,"string");if("object"!==mi(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(i.key),"symbol"===mi(a)?a:String(a)),i)}var a}function fi(e){var t="function"==typeof Map?new Map:void 0;return fi=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,i)}function i(){return bi(e,arguments,wi(this).constructor)}return i.prototype=Object.create(e.prototype,{constructor:{value:i,enumerable:!1,writable:!0,configurable:!0}}),vi(i,e)},fi(e)}function bi(e,t,r){return bi=yi()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&vi(a,r.prototype),a},bi.apply(null,arguments)}function yi(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function vi(e,t){return vi=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},vi(e,t)}function wi(e){return wi=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},wi(e)}customElements.define("search-form",ui);var ki=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&vi(e,t)}(l,e);var t,r,i,a,o=(i=l,a=yi(),function(){var e,t=wi(i);if(a){var r=wi(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===mi(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function l(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),o.call(this)}return t=l,(r=[{key:"connectedCallback",value:function(){this.innerHTML=' <div class="social" id="social"> <a class="social__icon social__icon_dc" href="https://discord.com/channels/@me" title="Discord" target="_blank"></a> <a class="social__icon social__icon_vk" href="https://vk.com/benchpress250" title="ВКонтакте" target="_blank"></a> <a class="social__icon social__icon_wa" href="https://wa.me/79507658158" ) title="WhatsApp" target="_blank"></a> <a class="social__icon social__icon_tg" href="https://t.me/Frontend200tb" title="Telegram" target="_blank"></a> <a class="social__icon social__icon_github" href="https://github.com/frontend200tb" title="GitHub" target="_blank"></a> <a class="social__icon social__icon_cp" href="https://codepen.io/ivan200tb/" title="Codepen" target="_blank"></a> <a class="social__icon social__icon_cw" href="https://www.codewars.com/users/frontend200tb" title="Codewars" target="_blank"></a> <a class="social__icon social__icon_replit" href="https://replit.com/@frontend200tb" title="Repl.it" target="_blank"></a> <a class="social__icon social__icon_yt" href="https://www.youtube.com/@ivan-kashirin" title="@ivan-kashirin" target="_blank"></a> <a class="social__icon social__icon_yt" href="https://www.youtube.com/@ivan200kg" title="@ivan200kg" target="_blank"></a> </div> '}}])&&gi(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),l}(fi(HTMLElement));function Li(e){return Li="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Li(e)}function Si(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,(void 0,a=function(e,t){if("object"!==Li(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var i=r.call(e,"string");if("object"!==Li(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(i.key),"symbol"===Li(a)?a:String(a)),i)}var a}function xi(e){var t="function"==typeof Map?new Map:void 0;return xi=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,i)}function i(){return Ti(e,arguments,Vi(this).constructor)}return i.prototype=Object.create(e.prototype,{constructor:{value:i,enumerable:!1,writable:!0,configurable:!0}}),Ci(i,e)},xi(e)}function Ti(e,t,r){return Ti=_i()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&Ci(a,r.prototype),a},Ti.apply(null,arguments)}function _i(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function Ci(e,t){return Ci=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Ci(e,t)}function Vi(e){return Vi=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Vi(e)}customElements.define("social-icons",ki),r(983),r(646),r(524);var ji=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Ci(e,t)}(l,e);var t,r,i,a,o=(i=l,a=_i(),function(){var e,t=Vi(i);if(a){var r=Vi(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===Li(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function l(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),o.call(this)}return t=l,(r=[{key:"connectedCallback",value:function(){this.innerHTML='\n    <div class="set-view">\n      <theme-btn></theme-btn>\n      <snow-btn></snow-btn>\n      <search-btn></search-btn>\n    </div>\n    '}}])&&Si(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),l}(xi(HTMLElement));function Ni(e){return Ni="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ni(e)}function Pi(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,(void 0,a=function(e,t){if("object"!==Ni(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var i=r.call(e,"string");if("object"!==Ni(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(i.key),"symbol"===Ni(a)?a:String(a)),i)}var a}function Mi(e){var t="function"==typeof Map?new Map:void 0;return Mi=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,i)}function i(){return Ei(e,arguments,Fi(this).constructor)}return i.prototype=Object.create(e.prototype,{constructor:{value:i,enumerable:!1,writable:!0,configurable:!0}}),Ai(i,e)},Mi(e)}function Ei(e,t,r){return Ei=Di()?Reflect.construct.bind():function(e,t,r){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return r&&Ai(a,r.prototype),a},Ei.apply(null,arguments)}function Di(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function Ai(e,t){return Ai=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Ai(e,t)}function Fi(e){return Fi=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Fi(e)}customElements.define("set-view",ji);var Oi=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Ai(e,t)}(l,e);var t,r,i,a,o=(i=l,a=Di(),function(){var e,t=Fi(i);if(a){var r=Fi(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===Ni(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function l(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),o.call(this)}return t=l,(r=[{key:"connectedCallback",value:function(){this.innerHTML='<div id="settings" class="settings"> <div class="set-up-btn"> <set-btn></set-btn> </div> <div id="set-section" class="set-section none"> <set-color></set-color> <set-view></set-view> </div> </div> '}}])&&Pi(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),l}(Mi(HTMLElement));customElements.define("settings-component",Oi),r(460),r(335),r(767);var Ii=document.querySelector("#page"),Wi=document.createElement("div");Wi.classList.add("btn-up","none"),Wi.innerHTML="НАВЕРХ",Wi.addEventListener("click",(function(){window.scrollTo({top:0,left:0,behavior:"smooth"})})),Ii.appendChild(Wi),window.addEventListener("scroll",(function(){(window.scrollY||document.documentElement.scrollTop)>400?Wi.classList.remove("none"):Wi.classList.add("none")})),console.log("200tb start")})()})();
//# sourceMappingURL=index.js.map